   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main.c"
  23              	.Ltext0:
  24              		.file 1 "../autoPilot/src/main.c"
 5489              		.align	2
 5490              	.LC0:
 5491 0000 4C454400 		.ascii	"LED\000"
 5492              		.text
 5493              		.align	2
 5494              		.global	main
 5495              		.thumb
 5496              		.thumb_func
 5498              	main:
 5499              	.LFB55:
   1:../autoPilot/src/main.c **** /*
   2:../autoPilot/src/main.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../autoPilot/src/main.c **** 	
   4:../autoPilot/src/main.c **** 
   5:../autoPilot/src/main.c ****     ***************************************************************************
   6:../autoPilot/src/main.c ****      *                                                                       *
   7:../autoPilot/src/main.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../autoPilot/src/main.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../autoPilot/src/main.c ****      *    available.                                                         *
  10:../autoPilot/src/main.c ****      *                                                                       *
  11:../autoPilot/src/main.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../autoPilot/src/main.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../autoPilot/src/main.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../autoPilot/src/main.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../autoPilot/src/main.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../autoPilot/src/main.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../autoPilot/src/main.c ****      *                                                                       *
  18:../autoPilot/src/main.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../autoPilot/src/main.c ****      *                                                                       *
  20:../autoPilot/src/main.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../autoPilot/src/main.c ****      *                                                                       *
  22:../autoPilot/src/main.c ****     ***************************************************************************
  23:../autoPilot/src/main.c **** 
  24:../autoPilot/src/main.c **** 
  25:../autoPilot/src/main.c ****     This file is part of the FreeRTOS distribution.
  26:../autoPilot/src/main.c **** 
  27:../autoPilot/src/main.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../autoPilot/src/main.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../autoPilot/src/main.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../autoPilot/src/main.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../autoPilot/src/main.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../autoPilot/src/main.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../autoPilot/src/main.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../autoPilot/src/main.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../autoPilot/src/main.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../autoPilot/src/main.c ****     more details. You should have received a copy of the GNU General Public
  37:../autoPilot/src/main.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../autoPilot/src/main.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../autoPilot/src/main.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../autoPilot/src/main.c ****     FreeRTOS WEB site.
  41:../autoPilot/src/main.c **** 
  42:../autoPilot/src/main.c ****     1 tab == 4 spaces!
  43:../autoPilot/src/main.c **** 
  44:../autoPilot/src/main.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../autoPilot/src/main.c ****     contact details.
  46:../autoPilot/src/main.c **** 
  47:../autoPilot/src/main.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../autoPilot/src/main.c ****     critical systems.
  49:../autoPilot/src/main.c **** 
  50:../autoPilot/src/main.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../autoPilot/src/main.c ****     licensing and training services.
  52:../autoPilot/src/main.c **** */
  53:../autoPilot/src/main.c **** 
  54:../autoPilot/src/main.c **** /* Standard includes. */
  55:../autoPilot/src/main.c **** #include "stdio.h"
  56:../autoPilot/src/main.c **** 
  57:../autoPilot/src/main.c **** #define ARM_MATH_CM3
  58:../autoPilot/src/main.c **** 
  59:../autoPilot/src/main.c **** 
  60:../autoPilot/src/main.c **** /* Scheduler includes. */
  61:../autoPilot/src/main.c **** #include "FreeRTOSConfig.h"
  62:../autoPilot/src/main.c **** #include "FreeRTOS.h"
  63:../autoPilot/src/main.c **** #include "task.h"
  64:../autoPilot/src/main.c **** #include "queue.h"
  65:../autoPilot/src/main.c **** #include "semphr.h"
  66:../autoPilot/src/main.c **** 
  67:../autoPilot/src/main.c **** #include "hwConfig.h"
  68:../autoPilot/src/main.c **** #include "taskLed.h"
  69:../autoPilot/src/main.c **** #include "driverGps.h"
  70:../autoPilot/src/main.c **** 
  71:../autoPilot/src/main.c **** /*-----------------------------------------------------------*/
  72:../autoPilot/src/main.c **** 
  73:../autoPilot/src/main.c **** /* The time between cycles of the 'check' functionality (defined within the
  74:../autoPilot/src/main.c **** tick hook. */
  75:../autoPilot/src/main.c **** #define mainCHECK_DELAY						( ( portTickType ) 5000 / portTICK_RATE_MS )
  76:../autoPilot/src/main.c **** 
  77:../autoPilot/src/main.c **** /*-----------------------------------------------------------*/
  78:../autoPilot/src/main.c **** 
  79:../autoPilot/src/main.c **** // contains the handles for all tasks
  80:../autoPilot/src/main.c **** // define one more taskHandle than you need, zero the last entry
  81:../autoPilot/src/main.c **** xTaskHandle taskHandles[5];  //TODO: need to know how many there will be
  82:../autoPilot/src/main.c **** 
  83:../autoPilot/src/main.c **** // current GPS Rx status
  84:../autoPilot/src/main.c **** __IO SetState gpsRxReady;
  85:../autoPilot/src/main.c **** 
  86:../autoPilot/src/main.c **** int main( void )
  87:../autoPilot/src/main.c **** {
 5500              		.loc 1 87 0
 5501              		.cfi_startproc
 5502              		@ args = 0, pretend = 0, frame = 0
 5503              		@ frame_needed = 1, uses_anonymous_args = 0
 5504 0000 80B5     		push	{r7, lr}
 5505              	.LCFI0:
 5506              		.cfi_def_cfa_offset 8
 5507 0002 84B0     		sub	sp, sp, #16
 5508              	.LCFI1:
 5509              		.cfi_def_cfa_offset 24
 5510 0004 04AF     		add	r7, sp, #16
 5511              		.cfi_offset 14, -4
 5512              		.cfi_offset 7, -8
 5513              	.LCFI2:
 5514              		.cfi_def_cfa 7, 8
  88:../autoPilot/src/main.c **** 	// configure the system
  89:../autoPilot/src/main.c ****     setSystem();
 5515              		.loc 1 89 0
 5516 0006 FFF7FEFF 		bl	setSystem
  90:../autoPilot/src/main.c **** 
  91:../autoPilot/src/main.c ****     // create the LED task
  92:../autoPilot/src/main.c ****     if(xTaskCreate(vLedTask, (signed portCHAR*) "LED",128,NULL, 1, &taskHandles[0]) != pdPASS)
 5517              		.loc 1 92 0
 5518 000a 0F4B     		ldr	r3, .L3
 5519 000c 4FF00102 		mov	r2, #1
 5520 0010 0092     		str	r2, [sp, #0]
 5521 0012 0E4A     		ldr	r2, .L3+4
 5522 0014 0192     		str	r2, [sp, #4]
 5523 0016 4FF00002 		mov	r2, #0
 5524 001a 0292     		str	r2, [sp, #8]
 5525 001c 4FF00002 		mov	r2, #0
 5526 0020 0392     		str	r2, [sp, #12]
 5527 0022 0B48     		ldr	r0, .L3+8
 5528 0024 1946     		mov	r1, r3
 5529 0026 4FF08002 		mov	r2, #128
 5530 002a 4FF00003 		mov	r3, #0
 5531 002e FFF7FEFF 		bl	xTaskGenericCreate
  93:../autoPilot/src/main.c ****     {
  94:../autoPilot/src/main.c ****     	//TODO: the task was not created, do something
  95:../autoPilot/src/main.c ****     }
  96:../autoPilot/src/main.c **** 
  97:../autoPilot/src/main.c ****     taskHandles[4] = 0; //TODO: will need to change when we know how many tasks there will be
 5532              		.loc 1 97 0
 5533 0032 064B     		ldr	r3, .L3+4
 5534 0034 4FF00002 		mov	r2, #0
 5535 0038 1A61     		str	r2, [r3, #16]
  98:../autoPilot/src/main.c **** 
  99:../autoPilot/src/main.c ****     // enable the interrupts
 100:../autoPilot/src/main.c ****     portENABLE_INTERRUPTS();
 5536              		.loc 1 100 0
 5537              	@ 100 "../autoPilot/src/main.c" 1
 5538 003a 4FF00000 			mov r0, #0					
 5539 003e 80F31188 		msr basepri, r0				
 5540              	
 5541              	@ 0 "" 2
 101:../autoPilot/src/main.c **** 
 102:../autoPilot/src/main.c ****     // start the scheduler
 103:../autoPilot/src/main.c **** 	vTaskStartScheduler();
 5542              		.loc 1 103 0
 5543              		.thumb
 5544 0042 FFF7FEFF 		bl	vTaskStartScheduler
 5545              	.L2:
 104:../autoPilot/src/main.c **** 
 105:../autoPilot/src/main.c ****     // will only get here if there was insufficient memory to create the idle
 106:../autoPilot/src/main.c ****     // task.  The idle task is created within vTaskStartScheduler().
 107:../autoPilot/src/main.c **** 	for( ;; );
 5546              		.loc 1 107 0 discriminator 1
 5547 0046 FEE7     		b	.L2
 5548              	.L4:
 5549              		.align	2
 5550              	.L3:
 5551 0048 00000000 		.word	.LC0
 5552 004c 00000000 		.word	taskHandles
 5553 0050 00000000 		.word	vLedTask
 5554              		.cfi_endproc
 5555              	.LFE55:
 5557              		.align	2
 5558              		.global	vApplicationTickHook
 5559              		.thumb
 5560              		.thumb_func
 5562              	vApplicationTickHook:
 5563              	.LFB56:
 108:../autoPilot/src/main.c **** 
 109:../autoPilot/src/main.c **** 	return 0; // never gets here
 110:../autoPilot/src/main.c **** }
 111:../autoPilot/src/main.c **** /*-----------------------------------------------------------*/
 112:../autoPilot/src/main.c **** 
 113:../autoPilot/src/main.c **** void vApplicationTickHook( void )
 114:../autoPilot/src/main.c **** {
 5564              		.loc 1 114 0
 5565              		.cfi_startproc
 5566              		@ args = 0, pretend = 0, frame = 0
 5567              		@ frame_needed = 1, uses_anonymous_args = 0
 5568              		@ link register save eliminated.
 5569 0054 80B4     		push	{r7}
 5570              	.LCFI3:
 5571              		.cfi_def_cfa_offset 4
 5572 0056 00AF     		add	r7, sp, #0
 5573              		.cfi_offset 7, -4
 5574              	.LCFI4:
 5575              		.cfi_def_cfa_register 7
 115:../autoPilot/src/main.c **** static unsigned long ulTicksSinceLastDisplay = 0;
 116:../autoPilot/src/main.c **** 
 117:../autoPilot/src/main.c **** 	// Called from every tick interrupt as described in the comments at the top
 118:../autoPilot/src/main.c **** 	//of this file.
 119:../autoPilot/src/main.c **** 
 120:../autoPilot/src/main.c **** 	//Have enough ticks passed to make it	time to perform our health status
 121:../autoPilot/src/main.c **** 	//check again?
 122:../autoPilot/src/main.c **** /*
 123:../autoPilot/src/main.c **** 	ulTicksSinceLastDisplay++;
 124:../autoPilot/src/main.c **** 	if( ulTicksSinceLastDisplay >= mainCHECK_DELAY )
 125:../autoPilot/src/main.c **** 	{
 126:../autoPilot/src/main.c **** 		// Reset the counter so these checks run again in mainCHECK_DELA  ticks time.
 127:../autoPilot/src/main.c **** 		ulTicksSinceLastDisplay = 0;
 128:../autoPilot/src/main.c **** 
 129:../autoPilot/src/main.c **** 		// Has an error been found in any task?
 130:../autoPilot/src/main.c **** 		if( xAreGenericQueueTasksStillRunning() != pdTRUE )
 131:../autoPilot/src/main.c **** 		{
 132:../autoPilot/src/main.c **** 			pcStatusMessage = "An error has been detected in the Generic Queue test/demo.";
 133:../autoPilot/src/main.c **** 		}
 134:../autoPilot/src/main.c **** 		else if( xAreQueuePeekTasksStillRunning() != pdTRUE )
 135:../autoPilot/src/main.c **** 		{
 136:../autoPilot/src/main.c **** 			pcStatusMessage = "An error has been detected in the Peek Queue test/demo.";
 137:../autoPilot/src/main.c **** 		}
 138:../autoPilot/src/main.c **** 		else if( xAreBlockingQueuesStillRunning() != pdTRUE )
 139:../autoPilot/src/main.c **** 		{
 140:../autoPilot/src/main.c **** 			pcStatusMessage = "An error has been detected in the Block Queue test/demo.";
 141:../autoPilot/src/main.c **** 		}
 142:../autoPilot/src/main.c **** 		else if( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
 143:../autoPilot/src/main.c **** 		{
 144:../autoPilot/src/main.c **** 			pcStatusMessage = "An error has been detected in the Block Time test/demo.";
 145:../autoPilot/src/main.c **** 		}
 146:../autoPilot/src/main.c **** 	    else if( xAreSemaphoreTasksStillRunning() != pdTRUE )
 147:../autoPilot/src/main.c **** 	    {
 148:../autoPilot/src/main.c **** 	        pcStatusMessage = "An error has been detected in the Semaphore test/demo.";
 149:../autoPilot/src/main.c **** 	    }
 150:../autoPilot/src/main.c **** 	    else if( xArePollingQueuesStillRunning() != pdTRUE )
 151:../autoPilot/src/main.c **** 	    {
 152:../autoPilot/src/main.c **** 	        pcStatusMessage = "An error has been detected in the Poll Queue test/demo.";
 153:../autoPilot/src/main.c **** 	    }
 154:../autoPilot/src/main.c **** 	    else if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 155:../autoPilot/src/main.c **** 	    {
 156:../autoPilot/src/main.c **** 	        pcStatusMessage = "An error has been detected in the Int Math test/demo.";
 157:../autoPilot/src/main.c **** 	    }
 158:../autoPilot/src/main.c **** 	    else if( xAreRecursiveMutexTasksStillRunning() != pdTRUE )
 159:../autoPilot/src/main.c **** 	    {
 160:../autoPilot/src/main.c **** 	    	pcStatusMessage = "An error has been detected in the Mutex test/demo.";
 161:../autoPilot/src/main.c **** 	    }
 162:../autoPilot/src/main.c **** 	}
 163:../autoPilot/src/main.c **** 	*/
 164:../autoPilot/src/main.c **** }
 5576              		.loc 1 164 0
 5577 0058 BD46     		mov	sp, r7
 5578 005a 80BC     		pop	{r7}
 5579 005c 7047     		bx	lr
 5580              		.cfi_endproc
 5581              	.LFE56:
 5583 005e 00BF     		.align	2
 5584              		.global	vApplicationStackOverflowHook
 5585              		.thumb
 5586              		.thumb_func
 5588              	vApplicationStackOverflowHook:
 5589              	.LFB57:
 165:../autoPilot/src/main.c **** 
 166:../autoPilot/src/main.c **** /*-----------------------------------------------------------*/
 167:../autoPilot/src/main.c **** 
 168:../autoPilot/src/main.c **** void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
 169:../autoPilot/src/main.c **** {
 5590              		.loc 1 169 0
 5591              		.cfi_startproc
 5592              		@ args = 0, pretend = 0, frame = 8
 5593              		@ frame_needed = 1, uses_anonymous_args = 0
 5594              		@ link register save eliminated.
 5595 0060 80B4     		push	{r7}
 5596              	.LCFI5:
 5597              		.cfi_def_cfa_offset 4
 5598 0062 83B0     		sub	sp, sp, #12
 5599              	.LCFI6:
 5600              		.cfi_def_cfa_offset 16
 5601 0064 00AF     		add	r7, sp, #0
 5602              		.cfi_offset 7, -4
 5603              	.LCFI7:
 5604              		.cfi_def_cfa_register 7
 5605 0066 7860     		str	r0, [r7, #4]
 5606 0068 3960     		str	r1, [r7, #0]
 5607              	.L7:
 170:../autoPilot/src/main.c **** 	/* This function will get called if a task overflows its stack. */
 171:../autoPilot/src/main.c **** 
 172:../autoPilot/src/main.c **** 	( void ) pxTask;
 173:../autoPilot/src/main.c **** 	( void ) pcTaskName;
 174:../autoPilot/src/main.c **** 
 175:../autoPilot/src/main.c **** 	for( ;; );
 5608              		.loc 1 175 0 discriminator 1
 5609 006a FEE7     		b	.L7
 5610              		.cfi_endproc
 5611              	.LFE57:
 5613              		.align	2
 5614              		.global	vConfigureTimerForRunTimeStats
 5615              		.thumb
 5616              		.thumb_func
 5618              	vConfigureTimerForRunTimeStats:
 5619              	.LFB58:
 176:../autoPilot/src/main.c **** }
 177:../autoPilot/src/main.c **** /*-----------------------------------------------------------*/
 178:../autoPilot/src/main.c **** 
 179:../autoPilot/src/main.c **** void vConfigureTimerForRunTimeStats( void )
 180:../autoPilot/src/main.c **** {
 5620              		.loc 1 180 0
 5621              		.cfi_startproc
 5622              		@ args = 0, pretend = 0, frame = 16
 5623              		@ frame_needed = 1, uses_anonymous_args = 0
 5624              		@ link register save eliminated.
 5625 006c 80B4     		push	{r7}
 5626              	.LCFI8:
 5627              		.cfi_def_cfa_offset 4
 5628 006e 85B0     		sub	sp, sp, #20
 5629              	.LCFI9:
 5630              		.cfi_def_cfa_offset 24
 5631 0070 00AF     		add	r7, sp, #0
 5632              		.cfi_offset 7, -4
 5633              	.LCFI10:
 5634              		.cfi_def_cfa_register 7
 181:../autoPilot/src/main.c **** const unsigned long TCR_COUNT_RESET = 2, CTCR_CTM_TIMER = 0x00, TCR_COUNT_ENABLE = 0x01;
 5635              		.loc 1 181 0
 5636 0072 4FF00203 		mov	r3, #2
 5637 0076 FB60     		str	r3, [r7, #12]
 5638 0078 4FF00003 		mov	r3, #0
 5639 007c BB60     		str	r3, [r7, #8]
 5640 007e 4FF00103 		mov	r3, #1
 5641 0082 7B60     		str	r3, [r7, #4]
 182:../autoPilot/src/main.c **** 
 183:../autoPilot/src/main.c **** 	/* This function configures a timer that is used as the time base when
 184:../autoPilot/src/main.c **** 	collecting run time statistical information - basically the percentage
 185:../autoPilot/src/main.c **** 	of CPU time that each task is utilising.  It is called automatically when
 186:../autoPilot/src/main.c **** 	the scheduler is started (assuming configGENERATE_RUN_TIME_STATS is set
 187:../autoPilot/src/main.c **** 	to 1). */
 188:../autoPilot/src/main.c **** 
 189:../autoPilot/src/main.c **** 	/* Power up and feed the timer. */
 190:../autoPilot/src/main.c **** 	LPC_SC->PCONP |= 0x02UL;
 5642              		.loc 1 190 0
 5643 0084 134B     		ldr	r3, .L9
 5644 0086 134A     		ldr	r2, .L9
 5645 0088 D2F8C420 		ldr	r2, [r2, #196]
 5646 008c 42F00202 		orr	r2, r2, #2
 5647 0090 C3F8C420 		str	r2, [r3, #196]
 191:../autoPilot/src/main.c **** 	LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
 5648              		.loc 1 191 0
 5649 0094 0F4B     		ldr	r3, .L9
 5650 0096 0F4A     		ldr	r2, .L9
 5651 0098 D2F8A821 		ldr	r2, [r2, #424]
 5652 009c 22F00C02 		bic	r2, r2, #12
 5653 00a0 42F00402 		orr	r2, r2, #4
 5654 00a4 C3F8A821 		str	r2, [r3, #424]
 192:../autoPilot/src/main.c **** 
 193:../autoPilot/src/main.c **** 	/* Reset Timer 0 */
 194:../autoPilot/src/main.c **** 	LPC_TIM0->TCR = TCR_COUNT_RESET;
 5655              		.loc 1 194 0
 5656 00a8 4FF04023 		mov	r3, #1073758208
 5657 00ac FA68     		ldr	r2, [r7, #12]
 5658 00ae 5A60     		str	r2, [r3, #4]
 195:../autoPilot/src/main.c **** 
 196:../autoPilot/src/main.c **** 	/* Just count up. */
 197:../autoPilot/src/main.c **** 	LPC_TIM0->CTCR = CTCR_CTM_TIMER;
 5659              		.loc 1 197 0
 5660 00b0 4FF04023 		mov	r3, #1073758208
 5661 00b4 BA68     		ldr	r2, [r7, #8]
 5662 00b6 1A67     		str	r2, [r3, #112]
 198:../autoPilot/src/main.c **** 
 199:../autoPilot/src/main.c **** 	/* Prescale to a frequency that is good enough to get a decent resolution,
 200:../autoPilot/src/main.c **** 	but not too fast so as to overflow all the time. */
 201:../autoPilot/src/main.c **** 	LPC_TIM0->PR =  ( configCPU_CLOCK_HZ / 10000UL ) - 1UL;
 5663              		.loc 1 201 0
 5664 00b8 4FF04023 		mov	r3, #1073758208
 5665 00bc 42F2AB62 		movw	r2, #9899
 5666 00c0 DA60     		str	r2, [r3, #12]
 202:../autoPilot/src/main.c **** 
 203:../autoPilot/src/main.c **** 	/* Start the counter. */
 204:../autoPilot/src/main.c **** 	LPC_TIM0->TCR = TCR_COUNT_ENABLE;
 5667              		.loc 1 204 0
 5668 00c2 4FF04023 		mov	r3, #1073758208
 5669 00c6 7A68     		ldr	r2, [r7, #4]
 5670 00c8 5A60     		str	r2, [r3, #4]
 205:../autoPilot/src/main.c **** }
 5671              		.loc 1 205 0
 5672 00ca 07F11407 		add	r7, r7, #20
 5673 00ce BD46     		mov	sp, r7
 5674 00d0 80BC     		pop	{r7}
 5675 00d2 7047     		bx	lr
 5676              	.L10:
 5677              		.align	2
 5678              	.L9:
 5679 00d4 00C00F40 		.word	1074774016
 5680              		.cfi_endproc
 5681              	.LFE58:
 5683              		.bss
 5684              		.align	2
 5685              	ulTicksSinceLastDisplay.6628:
 5686 0000 00000000 		.space	4
 5687              		.text
 5688              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000014 taskHandles
                            *COM*:00000001 gpsRxReady
     /tmp/cc0r0BKZ.s:5489   .rodata:00000000 $d
     /tmp/cc0r0BKZ.s:5493   .text:00000000 $t
     /tmp/cc0r0BKZ.s:5498   .text:00000000 main
     /tmp/cc0r0BKZ.s:5551   .text:00000048 $d
     /tmp/cc0r0BKZ.s:5557   .text:00000054 $t
     /tmp/cc0r0BKZ.s:5562   .text:00000054 vApplicationTickHook
     /tmp/cc0r0BKZ.s:5588   .text:00000060 vApplicationStackOverflowHook
     /tmp/cc0r0BKZ.s:5618   .text:0000006c vConfigureTimerForRunTimeStats
     /tmp/cc0r0BKZ.s:5679   .text:000000d4 $d
     /tmp/cc0r0BKZ.s:5684   .bss:00000000 $d
     /tmp/cc0r0BKZ.s:5685   .bss:00000000 ulTicksSinceLastDisplay.6628
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
setSystem
xTaskGenericCreate
vTaskStartScheduler
vLedTask
