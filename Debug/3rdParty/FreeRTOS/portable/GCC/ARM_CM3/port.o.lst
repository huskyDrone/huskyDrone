   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"port.c"
  23              	.Ltext0:
  24              		.file 1 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c"
 2781              		.align	2
 2784              	ulKernelPriority:
 2785 0000 F8000000 		.word	248
 2786              		.data
 2787              		.align	2
 2790              	uxCriticalNesting:
 2791 0000 AAAAAAAA 		.word	-1431655766
 2792              		.text
 2793              		.align	2
 2794              		.global	pxPortInitialiseStack
 2795              		.thumb
 2796              		.thumb_func
 2798              	pxPortInitialiseStack:
 2799              	.LFB55:
   1:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
   2:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	
   4:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
   5:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
   6:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
   7:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    available.                                                         *
  10:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  11:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  18:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  20:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *                                                                       *
  22:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     ***************************************************************************
  23:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  24:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  25:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
  26:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  27:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     more details. You should have received a copy of the GNU General Public
  37:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     FreeRTOS WEB site.
  41:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  42:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     1 tab == 4 spaces!
  43:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  44:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     contact details.
  46:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  47:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     critical systems.
  49:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  50:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****     licensing and training services.
  52:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** */
  53:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  54:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  55:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  56:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  57:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  58:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
  59:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  60:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  61:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  62:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  64:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif
  68:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  69:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the NVIC. */
  70:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  81:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  84:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  85:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** from inline assembler easier. */
  86:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  87:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  88:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  89:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** variable. */
  90:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  91:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  92:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
  93:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.
  94:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
  95:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** static void prvSetupTimerInterrupt( void );
  96:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  97:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
  98:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
  99:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 100:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 101:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 102:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 103:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 104:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 105:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 106:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 107:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 108:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 109:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 110:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 111:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 112:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 113:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 114:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 115:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2800              		.loc 1 115 0
 2801              		@ args = 0, pretend = 0, frame = 16
 2802              		@ frame_needed = 1, uses_anonymous_args = 0
 2803              		@ link register save eliminated.
 2804 0000 80B4     		push	{r7}
 2805              	.LCFI0:
 2806 0002 85B0     		sub	sp, sp, #20
 2807              	.LCFI1:
 2808 0004 00AF     		add	r7, sp, #0
 2809              	.LCFI2:
 2810 0006 F860     		str	r0, [r7, #12]
 2811 0008 B960     		str	r1, [r7, #8]
 2812 000a 7A60     		str	r2, [r7, #4]
 116:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 117:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	interrupt. */
 118:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 2813              		.loc 1 118 0
 2814 000c FB68     		ldr	r3, [r7, #12]
 2815 000e A3F10403 		sub	r3, r3, #4
 2816 0012 FB60     		str	r3, [r7, #12]
 119:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 2817              		.loc 1 119 0
 2818 0014 FB68     		ldr	r3, [r7, #12]
 2819 0016 4FF08072 		mov	r2, #16777216
 2820 001a 1A60     		str	r2, [r3, #0]
 120:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 2821              		.loc 1 120 0
 2822 001c FB68     		ldr	r3, [r7, #12]
 2823 001e A3F10403 		sub	r3, r3, #4
 2824 0022 FB60     		str	r3, [r7, #12]
 121:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 2825              		.loc 1 121 0
 2826 0024 BA68     		ldr	r2, [r7, #8]
 2827 0026 FB68     		ldr	r3, [r7, #12]
 2828 0028 1A60     		str	r2, [r3, #0]
 122:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack--;
 2829              		.loc 1 122 0
 2830 002a FB68     		ldr	r3, [r7, #12]
 2831 002c A3F10403 		sub	r3, r3, #4
 2832 0030 FB60     		str	r3, [r7, #12]
 123:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = 0;	/* LR */
 2833              		.loc 1 123 0
 2834 0032 FB68     		ldr	r3, [r7, #12]
 2835 0034 4FF00002 		mov	r2, #0
 2836 0038 1A60     		str	r2, [r3, #0]
 124:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 2837              		.loc 1 124 0
 2838 003a FB68     		ldr	r3, [r7, #12]
 2839 003c A3F11403 		sub	r3, r3, #20
 2840 0040 FB60     		str	r3, [r7, #12]
 125:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 2841              		.loc 1 125 0
 2842 0042 7A68     		ldr	r2, [r7, #4]
 2843 0044 FB68     		ldr	r3, [r7, #12]
 2844 0046 1A60     		str	r2, [r3, #0]
 126:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 2845              		.loc 1 126 0
 2846 0048 FB68     		ldr	r3, [r7, #12]
 2847 004a A3F12003 		sub	r3, r3, #32
 2848 004e FB60     		str	r3, [r7, #12]
 127:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 128:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	return pxTopOfStack;
 2849              		.loc 1 128 0
 2850 0050 FB68     		ldr	r3, [r7, #12]
 129:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 2851              		.loc 1 129 0
 2852 0052 1846     		mov	r0, r3
 2853 0054 07F11407 		add	r7, r7, #20
 2854 0058 BD46     		mov	sp, r7
 2855 005a 80BC     		pop	{r7}
 2856 005c 7047     		bx	lr
 2857              	.LFE55:
 2859 005e 00BF     		.align	2
 2860              		.global	vPortSVCHandler
 2861              		.thumb
 2862              		.thumb_func
 2864              	vPortSVCHandler:
 2865              	.LFB56:
 130:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 131:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 132:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 133:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2866              		.loc 1 133 0
 2867              		@ Naked Function: prologue and epilogue provided by programmer.
 2868              		@ args = 0, pretend = 0, frame = 0
 2869              		@ frame_needed = 1, uses_anonymous_args = 0
 134:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	__asm volatile (
 2870              		.loc 1 134 0
 2871              	@ 134 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 2872 0060 064B     			ldr	r3, pxCurrentTCBConst2		
 2873 0062 1968     		ldr r1, [r3]					
 2874 0064 0868     		ldr r0, [r1]					
 2875 0066 B0E8F00F 		ldmia r0!, {r4-r11}				
 2876 006a 80F30988 		msr psp, r0						
 2877 006e 4FF00000 		mov r0, #0 						
 2878 0072 80F31188 		msr	basepri, r0					
 2879 0076 4EF00D0E 		orr r14, #0xd					
 2880 007a 7047     		bx r14							
 2881              										
 2882              		.align 2						
 2883 007c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 2884              	
 2885              	@ 0 "" 2
 135:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 136:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 137:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 138:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 139:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 140:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 141:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 142:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 143:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	bx r14							\n"
 144:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"									\n"
 145:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"	.align 2						\n"
 146:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 147:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 				);
 148:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 2886              		.loc 1 148 0
 2887              		.thumb
 2888              	.LFE56:
 2890              		.align	2
 2891              		.global	vPortStartFirstTask
 2892              		.thumb
 2893              		.thumb_func
 2895              	vPortStartFirstTask:
 2896              	.LFB57:
 149:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 150:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 151:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortStartFirstTask( void )
 152:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2897              		.loc 1 152 0
 2898              		@ Naked Function: prologue and epilogue provided by programmer.
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 1, uses_anonymous_args = 0
 153:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	__asm volatile(
 2901              		.loc 1 153 0
 2902              	@ 153 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 2903 0080 6248     		 ldr r0, =0xE000ED08 	
 2904 0082 0068     	 ldr r0, [r0] 			
 2905 0084 0068     	 ldr r0, [r0] 			
 2906 0086 80F30888 	 msr msp, r0			
 2907 008a 62B6     	 cpsie i				
 2908 008c 00DF     	 svc 0					
 2909 008e 00BF     	 nop					
 2910              	
 2911              	@ 0 "" 2
 154:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 155:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 156:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 157:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 158:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 159:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 160:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 					" nop					\n"
 161:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 				);
 162:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 2912              		.loc 1 162 0
 2913              		.thumb
 2914              	.LFE57:
 2916              		.align	2
 2917              		.global	xPortStartScheduler
 2918              		.thumb
 2919              		.thumb_func
 2921              	xPortStartScheduler:
 2922              	.LFB58:
 163:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 164:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 165:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 166:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 167:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 168:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** portBASE_TYPE xPortStartScheduler( void )
 169:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2923              		.loc 1 169 0
 2924              		@ args = 0, pretend = 0, frame = 0
 2925              		@ frame_needed = 1, uses_anonymous_args = 0
 2926 0090 80B5     		push	{r7, lr}
 2927              	.LCFI3:
 2928 0092 00AF     		add	r7, sp, #0
 2929              	.LCFI4:
 170:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 171:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 2930              		.loc 1 171 0
 2931 0094 4EF62053 		movw	r3, #:lower16:-536810208
 2932 0098 CEF20003 		movt	r3, #:upper16:-536810208
 2933 009c 4EF62052 		movw	r2, #:lower16:-536810208
 2934 00a0 CEF20002 		movt	r2, #:upper16:-536810208
 2935 00a4 1268     		ldr	r2, [r2, #0]
 2936 00a6 42F47802 		orr	r2, r2, #16252928
 2937 00aa 1A60     		str	r2, [r3, #0]
 172:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 2938              		.loc 1 172 0
 2939 00ac 4EF62053 		movw	r3, #:lower16:-536810208
 2940 00b0 CEF20003 		movt	r3, #:upper16:-536810208
 2941 00b4 4EF62052 		movw	r2, #:lower16:-536810208
 2942 00b8 CEF20002 		movt	r2, #:upper16:-536810208
 2943 00bc 1268     		ldr	r2, [r2, #0]
 2944 00be 42F07842 		orr	r2, r2, #-134217728
 2945 00c2 1A60     		str	r2, [r3, #0]
 173:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 174:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 175:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	here already. */
 176:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	prvSetupTimerInterrupt();
 2946              		.loc 1 176 0
 2947 00c4 00F08CF8 		bl	prvSetupTimerInterrupt
 177:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 178:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 179:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 2948              		.loc 1 179 0
 2949 00c8 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 2950 00cc C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 2951 00d0 4FF00002 		mov	r2, #0
 2952 00d4 1A60     		str	r2, [r3, #0]
 180:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 181:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Start the first task. */
 182:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	vPortStartFirstTask();
 2953              		.loc 1 182 0
 2954 00d6 FFF7FEFF 		bl	vPortStartFirstTask
 183:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 184:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Should not get here! */
 185:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	return 0;
 2955              		.loc 1 185 0
 2956 00da 4FF00003 		mov	r3, #0
 186:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 2957              		.loc 1 186 0
 2958 00de 1846     		mov	r0, r3
 2959 00e0 80BD     		pop	{r7, pc}
 2960              	.LFE58:
 2962 00e2 00BF     		.align	2
 2963              		.global	vPortEndScheduler
 2964              		.thumb
 2965              		.thumb_func
 2967              	vPortEndScheduler:
 2968              	.LFB59:
 187:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 188:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 189:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 190:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2969              		.loc 1 190 0
 2970              		@ args = 0, pretend = 0, frame = 0
 2971              		@ frame_needed = 1, uses_anonymous_args = 0
 2972              		@ link register save eliminated.
 2973 00e4 80B4     		push	{r7}
 2974              	.LCFI5:
 2975 00e6 00AF     		add	r7, sp, #0
 2976              	.LCFI6:
 191:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* It is unlikely that the CM3 port will require this function as there
 192:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	is nothing to return to.  */
 193:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 2977              		.loc 1 193 0
 2978 00e8 BD46     		mov	sp, r7
 2979 00ea 80BC     		pop	{r7}
 2980 00ec 7047     		bx	lr
 2981              	.LFE59:
 2983 00ee 00BF     		.align	2
 2984              		.global	vPortYieldFromISR
 2985              		.thumb
 2986              		.thumb_func
 2988              	vPortYieldFromISR:
 2989              	.LFB60:
 194:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 195:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 196:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortYieldFromISR( void )
 197:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 2990              		.loc 1 197 0
 2991              		@ args = 0, pretend = 0, frame = 0
 2992              		@ frame_needed = 1, uses_anonymous_args = 0
 2993              		@ link register save eliminated.
 2994 00f0 80B4     		push	{r7}
 2995              	.LCFI7:
 2996 00f2 00AF     		add	r7, sp, #0
 2997              	.LCFI8:
 198:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Set a PendSV to request a context switch. */
 199:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 2998              		.loc 1 199 0
 2999 00f4 4EF60453 		movw	r3, #:lower16:-536810236
 3000 00f8 CEF20003 		movt	r3, #:upper16:-536810236
 3001 00fc 4FF08052 		mov	r2, #268435456
 3002 0100 1A60     		str	r2, [r3, #0]
 200:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3003              		.loc 1 200 0
 3004 0102 BD46     		mov	sp, r7
 3005 0104 80BC     		pop	{r7}
 3006 0106 7047     		bx	lr
 3007              	.LFE60:
 3009              		.align	2
 3010              		.global	vPortEnterCritical
 3011              		.thumb
 3012              		.thumb_func
 3014              	vPortEnterCritical:
 3015              	.LFB61:
 201:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 202:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 203:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 204:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 3016              		.loc 1 204 0
 3017              		@ args = 0, pretend = 0, frame = 0
 3018              		@ frame_needed = 1, uses_anonymous_args = 0
 3019              		@ link register save eliminated.
 3020 0108 80B4     		push	{r7}
 3021              	.LCFI9:
 3022 010a 00AF     		add	r7, sp, #0
 3023              	.LCFI10:
 205:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 3024              		.loc 1 205 0
 3025              	@ 205 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 3026 010c 4FF02800 			mov r0, #40								
 3027 0110 80F31188 		msr basepri, r0							
 3028              	
 3029              	@ 0 "" 2
 206:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting++;
 3030              		.loc 1 206 0
 3031              		.thumb
 3032 0114 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 3033 0118 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 3034 011c 1B68     		ldr	r3, [r3, #0]
 3035 011e 03F10102 		add	r2, r3, #1
 3036 0122 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 3037 0126 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 3038 012a 1A60     		str	r2, [r3, #0]
 207:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3039              		.loc 1 207 0
 3040 012c BD46     		mov	sp, r7
 3041 012e 80BC     		pop	{r7}
 3042 0130 7047     		bx	lr
 3043              	.LFE61:
 3045 0132 00BF     		.align	2
 3046              		.global	vPortExitCritical
 3047              		.thumb
 3048              		.thumb_func
 3050              	vPortExitCritical:
 3051              	.LFB62:
 208:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 209:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 210:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 211:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 3052              		.loc 1 211 0
 3053              		@ args = 0, pretend = 0, frame = 0
 3054              		@ frame_needed = 1, uses_anonymous_args = 0
 3055              		@ link register save eliminated.
 3056 0134 80B4     		push	{r7}
 3057              	.LCFI11:
 3058 0136 00AF     		add	r7, sp, #0
 3059              	.LCFI12:
 212:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	uxCriticalNesting--;
 3060              		.loc 1 212 0
 3061 0138 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 3062 013c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 3063 0140 1B68     		ldr	r3, [r3, #0]
 3064 0142 03F1FF32 		add	r2, r3, #-1
 3065 0146 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 3066 014a C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 3067 014e 1A60     		str	r2, [r3, #0]
 213:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 3068              		.loc 1 213 0
 3069 0150 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 3070 0154 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 3071 0158 1B68     		ldr	r3, [r3, #0]
 3072 015a 002B     		cmp	r3, #0
 3073 015c 03D1     		bne	.L17
 214:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	{
 215:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 3074              		.loc 1 215 0
 3075              	@ 215 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 3076 015e 4FF00000 			mov r0, #0					
 3077 0162 80F31188 		msr basepri, r0				
 3078              	
 3079              	@ 0 "" 2
 3080              		.thumb
 3081              	.L17:
 216:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	}
 217:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3082              		.loc 1 217 0
 3083 0166 BD46     		mov	sp, r7
 3084 0168 80BC     		pop	{r7}
 3085 016a 7047     		bx	lr
 3086              	.LFE62:
 3088              		.align	2
 3089              		.global	xPortPendSVHandler
 3090              		.thumb
 3091              		.thumb_func
 3093              	xPortPendSVHandler:
 3094              	.LFB63:
 218:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 219:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 220:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 221:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 3095              		.loc 1 221 0
 3096              		@ Naked Function: prologue and epilogue provided by programmer.
 3097              		@ args = 0, pretend = 0, frame = 0
 3098              		@ frame_needed = 1, uses_anonymous_args = 0
 222:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* This is a naked function. */
 223:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 224:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	__asm volatile
 3099              		.loc 1 224 0
 3100              	@ 224 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 3101 016c EFF30980 			mrs r0, psp							
 3102              											
 3103 0170 0C4B     		ldr	r3, pxCurrentTCBConst			
 3104 0172 1A68     		ldr	r2, [r3]						
 3105              											
 3106 0174 20E9F00F 		stmdb r0!, {r4-r11}					
 3107 0178 1060     		str r0, [r2]						
 3108              											
 3109 017a 2DE90840 		stmdb sp!, {r3, r14}				
 3110 017e 4FF02800 		mov r0, #40							
 3111 0182 80F31188 		msr basepri, r0						
 3112 0186 FFF7FEFF 		bl vTaskSwitchContext				
 3113 018a 4FF00000 		mov r0, #0							
 3114 018e 80F31188 		msr basepri, r0						
 3115 0192 BDE80840 		ldmia sp!, {r3, r14}				
 3116              											
 3117 0196 1968     		ldr r1, [r3]						
 3118 0198 0868     		ldr r0, [r1]						
 3119 019a B0E8F00F 		ldmia r0!, {r4-r11}					
 3120 019e 80F30988 		msr psp, r0							
 3121 01a2 7047     		bx r14								
 3122              											
 3123              		.align 2							
 3124 01a4 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 3125              	
 3126              	@ 0 "" 2
 225:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	(
 226:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 227:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 228:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 229:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 230:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 231:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 232:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 233:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 234:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 235:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 236:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 237:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 238:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 239:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 240:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 241:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 242:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 243:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 244:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 245:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 246:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	bx r14								\n"
 247:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"										\n"
 248:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"	.align 2							\n"
 249:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 250:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 251:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	);
 252:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3127              		.loc 1 252 0
 3128              		.thumb
 3129              	.LFE63:
 3131              		.align	2
 3132              		.global	xPortSysTickHandler
 3133              		.thumb
 3134              		.thumb_func
 3136              	xPortSysTickHandler:
 3137              	.LFB64:
 253:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 254:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 255:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 256:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 3138              		.loc 1 256 0
 3139              		@ args = 0, pretend = 0, frame = 8
 3140              		@ frame_needed = 1, uses_anonymous_args = 0
 3141 01a8 80B5     		push	{r7, lr}
 3142              	.LCFI13:
 3143 01aa 82B0     		sub	sp, sp, #8
 3144              	.LCFI14:
 3145 01ac 00AF     		add	r7, sp, #0
 3146              	.LCFI15:
 257:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** unsigned long ulDummy;
 258:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 259:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* If using preemption, also force a context switch. */
 260:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	#if configUSE_PREEMPTION == 1
 261:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 3147              		.loc 1 261 0
 3148 01ae 4EF60453 		movw	r3, #:lower16:-536810236
 3149 01b2 CEF20003 		movt	r3, #:upper16:-536810236
 3150 01b6 4FF08052 		mov	r2, #268435456
 3151 01ba 1A60     		str	r2, [r3, #0]
 262:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	#endif
 263:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 264:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 3152              		.loc 1 264 0
 3153 01bc 4FF00003 		mov	r3, #0
 3154 01c0 7B60     		str	r3, [r7, #4]
 3155              	@ 264 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 3156 01c2 4FF02800 			mov r0, #40								
 3157 01c6 80F31188 		msr basepri, r0							
 3158              	
 3159              	@ 0 "" 2
 265:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	{
 266:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 		vTaskIncrementTick();
 3160              		.loc 1 266 0
 3161              		.thumb
 3162 01ca FFF7FEFF 		bl	vTaskIncrementTick
 267:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	}
 268:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 3163              		.loc 1 268 0
 3164              	@ 268 "../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 3165 01ce 4FF00000 			mov r0, #0					
 3166 01d2 80F31188 		msr basepri, r0				
 3167              	
 3168              	@ 0 "" 2
 269:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3169              		.loc 1 269 0
 3170              		.thumb
 3171 01d6 07F10807 		add	r7, r7, #8
 3172 01da BD46     		mov	sp, r7
 3173 01dc 80BD     		pop	{r7, pc}
 3174              	.LFE64:
 3176 01de 00BF     		.align	2
 3177              		.thumb
 3178              		.thumb_func
 3180              	prvSetupTimerInterrupt:
 3181              	.LFB65:
 270:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 271:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 272:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 273:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 274:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * frequency.
 275:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 276:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** void prvSetupTimerInterrupt( void )
 277:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 3182              		.loc 1 277 0
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 1, uses_anonymous_args = 0
 3185              		@ link register save eliminated.
 3186 01e0 80B4     		push	{r7}
 3187              	.LCFI16:
 3188 01e2 00AF     		add	r7, sp, #0
 3189              	.LCFI17:
 278:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 279:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 3190              		.loc 1 279 0
 3191 01e4 4EF21403 		movw	r3, #:lower16:-536813548
 3192 01e8 CEF20003 		movt	r3, #:upper16:-536813548
 3193 01ec 48F2B722 		movw	r2, #:lower16:98999
 3194 01f0 C0F20102 		movt	r2, #:upper16:98999
 3195 01f4 1A60     		str	r2, [r3, #0]
 280:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 3196              		.loc 1 280 0
 3197 01f6 4EF21003 		movw	r3, #:lower16:-536813552
 3198 01fa CEF20003 		movt	r3, #:upper16:-536813552
 3199 01fe 4FF00702 		mov	r2, #7
 3200 0202 1A60     		str	r2, [r3, #0]
 281:../3rdParty/FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 3201              		.loc 1 281 0
 3202 0204 BD46     		mov	sp, r7
 3203 0206 80BC     		pop	{r7}
 3204 0208 7047     		bx	lr
 3205              	.LFE65:
 3413              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/tmp//ccNlUBaB.s:2784   .rodata:0000000000000000 ulKernelPriority
/var/tmp//ccNlUBaB.s:2781   .rodata:0000000000000000 $d
/var/tmp//ccNlUBaB.s:2787   .data:0000000000000000 $d
/var/tmp//ccNlUBaB.s:2790   .data:0000000000000000 uxCriticalNesting
/var/tmp//ccNlUBaB.s:2793   .text:0000000000000000 $t
/var/tmp//ccNlUBaB.s:2798   .text:0000000000000000 pxPortInitialiseStack
/var/tmp//ccNlUBaB.s:2864   .text:0000000000000060 vPortSVCHandler
/var/tmp//ccNlUBaB.s:2883   .text:000000000000007c pxCurrentTCBConst2
/var/tmp//ccNlUBaB.s:2883   .text:000000000000007c $d
/var/tmp//ccNlUBaB.s:2890   .text:0000000000000080 $t
/var/tmp//ccNlUBaB.s:2895   .text:0000000000000080 vPortStartFirstTask
/var/tmp//ccNlUBaB.s:2921   .text:0000000000000090 xPortStartScheduler
/var/tmp//ccNlUBaB.s:3180   .text:00000000000001e0 prvSetupTimerInterrupt
/var/tmp//ccNlUBaB.s:2967   .text:00000000000000e4 vPortEndScheduler
/var/tmp//ccNlUBaB.s:2988   .text:00000000000000f0 vPortYieldFromISR
/var/tmp//ccNlUBaB.s:3014   .text:0000000000000108 vPortEnterCritical
/var/tmp//ccNlUBaB.s:3050   .text:0000000000000134 vPortExitCritical
/var/tmp//ccNlUBaB.s:3093   .text:000000000000016c xPortPendSVHandler
/var/tmp//ccNlUBaB.s:3124   .text:00000000000001a4 pxCurrentTCBConst
/var/tmp//ccNlUBaB.s:3124   .text:00000000000001a4 $d
/var/tmp//ccNlUBaB.s:3131   .text:00000000000001a8 $t
/var/tmp//ccNlUBaB.s:3136   .text:00000000000001a8 xPortSysTickHandler
/var/tmp//ccNlUBaB.s:3220   .debug_frame:0000000000000010 $d
/var/tmp//ccNlUBaB.s:3414   .text:000000000000020a $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
