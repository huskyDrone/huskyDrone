   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"heap_2.c"
  23              	.Ltext0:
  24              		.file 1 "../3rdParty/FreeRTOS/portable/MemMang/heap_2.c"
 3326              		.align	3
 3327              	xHeap:
 3328 0000 00000000 		.space	19456
 3328      00000000 
 3328      00000000 
 3328      00000000 
 3328      00000000 
 3329              		.section	.rodata
 3330              		.align	1
 3333              	heapSTRUCT_SIZE:
 3334 0000 1000     		.short	16
 3335              		.bss
 3336              		.align	2
 3337              	xStart:
 3338 4c00 00000000 		.space	8
 3338      00000000 
 3339              		.align	2
 3340              	xEnd:
 3341 4c08 00000000 		.space	8
 3341      00000000 
 3342              		.data
 3343              		.align	2
 3346              	xFreeBytesRemaining:
 3347 0000 004C0000 		.word	19456
 3348              		.text
 3349              		.align	2
 3350              		.global	pvPortMalloc
 3351              		.thumb
 3352              		.thumb_func
 3354              	pvPortMalloc:
 3355              	.LFB55:
   1:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*
   2:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	
   4:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
   5:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     ***************************************************************************
   6:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *                                                                       *
   7:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    available.                                                         *
  10:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *                                                                       *
  11:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *                                                                       *
  18:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *                                                                       *
  20:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****      *                                                                       *
  22:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     ***************************************************************************
  23:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  24:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  25:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     This file is part of the FreeRTOS distribution.
  26:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  27:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     more details. You should have received a copy of the GNU General Public
  37:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     FreeRTOS WEB site.
  41:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  42:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     1 tab == 4 spaces!
  43:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  44:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     contact details.
  46:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  47:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     critical systems.
  49:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  50:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****     licensing and training services.
  52:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** */
  53:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  54:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*
  55:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that permits
  56:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * allocated blocks to be freed, but does not combine adjacent free blocks
  57:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * into a single larger block.
  58:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  *
  59:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * See heap_1.c and heap_3.c for alternative implementations, and the memory
  60:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * management pages of http://www.FreeRTOS.org for more information.
  61:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  */
  62:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #include <stdlib.h>
  63:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  64:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  65:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** all the API functions to use the MPU wrappers.  That should only be done when
  66:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** task.h is included from an application file. */
  67:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  68:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  69:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #include "FreeRTOS.h"
  70:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #include "task.h"
  71:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  72:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  73:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  74:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* Allocate the memory for the heap.  The struct is used to force byte
  75:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** alignment without using any non-portable code. */
  76:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** static union xRTOS_HEAP
  77:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
  78:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	#if portBYTE_ALIGNMENT == 8
  79:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		volatile portDOUBLE dDummy;
  80:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	#else
  81:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		volatile unsigned long ulDummy;
  82:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	#endif
  83:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];
  84:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** } xHeap;
  85:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  86:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* Define the linked list structure.  This is used to link free blocks in order
  87:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** of their size. */
  88:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** typedef struct A_BLOCK_LINK
  89:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
  90:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
  91:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
  92:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** } xBlockLink;
  93:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  94:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  95:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** static const unsigned short  heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( size
  96:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
  97:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
  98:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* Create a couple of list links to mark the start and end of the list. */
  99:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** static xBlockLink xStart, xEnd;
 100:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 101:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 102:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** fragmentation. */
 103:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** static size_t xFreeBytesRemaining = configTOTAL_HEAP_SIZE;
 104:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 105:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
 106:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 107:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*
 108:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * Insert a block into the list of free blocks - which is ordered by size of
 109:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * the block.  Small blocks at the start of the list and large blocks at the end
 110:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  * of the list.
 111:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c ****  */
 112:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
 113:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {																					\
 114:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** xBlockLink *pxIterator;																\
 115:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** size_t xBlockSize;																	\
 116:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 117:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xBlockSize = pxBlockToInsert->xBlockSize;										\
 118:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 119:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* Iterate through the list until a block is found that has a larger size */	\
 120:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* than the block we are inserting. */											\
 121:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIt
 122:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	{																				\
 123:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		/* There is nothing to do here - just iterate to the correct position. */	\
 124:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	}																				\
 125:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 126:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* Update the list to include the block being inserted in the correct */		\
 127:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* position. */																	\
 128:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
 129:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
 130:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 131:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 132:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 133:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** #define prvHeapInit()																\
 134:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {																					\
 135:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** xBlockLink *pxFirstFreeBlock;														\
 136:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 137:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* xStart is used to hold a pointer to the first item in the list of free */	\
 138:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* blocks.  The void cast is used to prevent compiler warnings. */				\
 139:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;								\
 140:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xStart.xBlockSize = ( size_t ) 0;												\
 141:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 142:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* xEnd is used to mark the end of the list of free blocks. */					\
 143:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xEnd.xBlockSize = configTOTAL_HEAP_SIZE;										\
 144:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xEnd.pxNextFreeBlock = NULL;													\
 145:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 																					\
 146:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* To start with there is a single free block that is sized to take up the		\
 147:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	entire heap space. */															\
 148:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;										\
 149:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock->xBlockSize = configTOTAL_HEAP_SIZE;							\
 150:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
 151:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 152:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 153:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 154:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** void *pvPortMalloc( size_t xWantedSize )
 155:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
 3356              		.loc 1 155 0
 3357              		@ args = 0, pretend = 0, frame = 40
 3358              		@ frame_needed = 1, uses_anonymous_args = 0
 3359 0000 80B5     		push	{r7, lr}
 3360              	.LCFI0:
 3361 0002 8AB0     		sub	sp, sp, #40
 3362              	.LCFI1:
 3363 0004 00AF     		add	r7, sp, #0
 3364              	.LCFI2:
 3365 0006 7860     		str	r0, [r7, #4]
 156:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 157:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
 158:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** void *pvReturn = NULL;
 3366              		.loc 1 158 0
 3367 0008 4FF00003 		mov	r3, #0
 3368 000c BB61     		str	r3, [r7, #24]
 159:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 160:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	vTaskSuspendAll();
 3369              		.loc 1 160 0
 3370 000e FFF7FEFF 		bl	vTaskSuspendAll
 161:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	{
 162:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		/* If this is the first call to malloc then the heap will require
 163:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		initialisation to setup the list of free blocks. */
 164:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		if( xHeapHasBeenInitialised == pdFALSE )
 3371              		.loc 1 164 0
 3372 0012 40F20003 		movw	r3, #:lower16:xHeapHasBeenInitialised.3317
 3373 0016 C0F20003 		movt	r3, #:upper16:xHeapHasBeenInitialised.3317
 3374 001a 1B68     		ldr	r3, [r3, #0]
 3375 001c 002B     		cmp	r3, #0
 3376 001e 33D1     		bne	.L2
 3377              	.LBB2:
 165:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		{
 166:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			prvHeapInit();
 3378              		.loc 1 166 0
 3379 0020 40F20002 		movw	r2, #:lower16:xHeap
 3380 0024 C0F20002 		movt	r2, #:upper16:xHeap
 3381 0028 40F20003 		movw	r3, #:lower16:xStart
 3382 002c C0F20003 		movt	r3, #:upper16:xStart
 3383 0030 1A60     		str	r2, [r3, #0]
 3384 0032 40F20003 		movw	r3, #:lower16:xStart
 3385 0036 C0F20003 		movt	r3, #:upper16:xStart
 3386 003a 4FF00002 		mov	r2, #0
 3387 003e 5A60     		str	r2, [r3, #4]
 3388 0040 40F20003 		movw	r3, #:lower16:xEnd
 3389 0044 C0F20003 		movt	r3, #:upper16:xEnd
 3390 0048 4FF49842 		mov	r2, #19456
 3391 004c 5A60     		str	r2, [r3, #4]
 3392 004e 40F20003 		movw	r3, #:lower16:xEnd
 3393 0052 C0F20003 		movt	r3, #:upper16:xEnd
 3394 0056 4FF00002 		mov	r2, #0
 3395 005a 1A60     		str	r2, [r3, #0]
 3396 005c 40F20003 		movw	r3, #:lower16:xHeap
 3397 0060 C0F20003 		movt	r3, #:upper16:xHeap
 3398 0064 FB61     		str	r3, [r7, #28]
 3399 0066 FB69     		ldr	r3, [r7, #28]
 3400 0068 4FF49842 		mov	r2, #19456
 3401 006c 5A60     		str	r2, [r3, #4]
 3402 006e FA69     		ldr	r2, [r7, #28]
 3403 0070 40F20003 		movw	r3, #:lower16:xEnd
 3404 0074 C0F20003 		movt	r3, #:upper16:xEnd
 3405 0078 1360     		str	r3, [r2, #0]
 3406              	.LBE2:
 167:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			xHeapHasBeenInitialised = pdTRUE;
 3407              		.loc 1 167 0
 3408 007a 40F20003 		movw	r3, #:lower16:xHeapHasBeenInitialised.3317
 3409 007e C0F20003 		movt	r3, #:upper16:xHeapHasBeenInitialised.3317
 3410 0082 4FF00102 		mov	r2, #1
 3411 0086 1A60     		str	r2, [r3, #0]
 3412              	.L2:
 168:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		}
 169:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 170:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		/* The wanted size is increased so it can contain a xBlockLink
 171:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		structure in addition to the requested amount of bytes. */
 172:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		if( xWantedSize > 0 )
 3413              		.loc 1 172 0
 3414 0088 7B68     		ldr	r3, [r7, #4]
 3415 008a 002B     		cmp	r3, #0
 3416 008c 12D0     		beq	.L3
 173:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		{
 174:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			xWantedSize += heapSTRUCT_SIZE;
 3417              		.loc 1 174 0
 3418 008e 40F20003 		movw	r3, #:lower16:heapSTRUCT_SIZE
 3419 0092 C0F20003 		movt	r3, #:upper16:heapSTRUCT_SIZE
 3420 0096 1B88     		ldrh	r3, [r3, #0]
 3421 0098 7A68     		ldr	r2, [r7, #4]
 3422 009a 1344     		add	r3, r2, r3
 3423 009c 7B60     		str	r3, [r7, #4]
 175:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 176:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			/* Ensure that blocks are always aligned to the required number of bytes. */
 177:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 3424              		.loc 1 177 0
 3425 009e 7B68     		ldr	r3, [r7, #4]
 3426 00a0 03F00703 		and	r3, r3, #7
 3427 00a4 002B     		cmp	r3, #0
 3428 00a6 05D0     		beq	.L3
 178:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			{
 179:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				/* Byte alignment required. */
 180:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 3429              		.loc 1 180 0
 3430 00a8 7B68     		ldr	r3, [r7, #4]
 3431 00aa 23F00703 		bic	r3, r3, #7
 3432 00ae 03F10803 		add	r3, r3, #8
 3433 00b2 7B60     		str	r3, [r7, #4]
 3434              	.L3:
 181:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			}
 182:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		}
 183:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 184:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
 3435              		.loc 1 184 0
 3436 00b4 7B68     		ldr	r3, [r7, #4]
 3437 00b6 002B     		cmp	r3, #0
 3438 00b8 75D0     		beq	.L4
 3439 00ba 7A68     		ldr	r2, [r7, #4]
 3440 00bc 44F6FF33 		movw	r3, #19455
 3441 00c0 9A42     		cmp	r2, r3
 3442 00c2 70D8     		bhi	.L4
 185:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		{
 186:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			/* Blocks are stored in byte order - traverse the list from the start
 187:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			(smallest) block until one of adequate size is found. */
 188:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			pxPreviousBlock = &xStart;
 3443              		.loc 1 188 0
 3444 00c4 40F20003 		movw	r3, #:lower16:xStart
 3445 00c8 C0F20003 		movt	r3, #:upper16:xStart
 3446 00cc 3B61     		str	r3, [r7, #16]
 189:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			pxBlock = xStart.pxNextFreeBlock;
 3447              		.loc 1 189 0
 3448 00ce 40F20003 		movw	r3, #:lower16:xStart
 3449 00d2 C0F20003 		movt	r3, #:upper16:xStart
 3450 00d6 1B68     		ldr	r3, [r3, #0]
 3451 00d8 FB60     		str	r3, [r7, #12]
 190:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
 3452              		.loc 1 190 0
 3453 00da 04E0     		b	.L5
 3454              	.L7:
 191:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			{
 192:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				pxPreviousBlock = pxBlock;
 3455              		.loc 1 192 0
 3456 00dc FB68     		ldr	r3, [r7, #12]
 3457 00de 3B61     		str	r3, [r7, #16]
 193:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				pxBlock = pxBlock->pxNextFreeBlock;
 3458              		.loc 1 193 0
 3459 00e0 FB68     		ldr	r3, [r7, #12]
 3460 00e2 1B68     		ldr	r3, [r3, #0]
 3461 00e4 FB60     		str	r3, [r7, #12]
 3462              	.L5:
 3463              		.loc 1 190 0
 3464 00e6 FB68     		ldr	r3, [r7, #12]
 3465 00e8 5A68     		ldr	r2, [r3, #4]
 3466 00ea 7B68     		ldr	r3, [r7, #4]
 3467 00ec 9A42     		cmp	r2, r3
 3468 00ee 03D2     		bcs	.L6
 3469 00f0 FB68     		ldr	r3, [r7, #12]
 3470 00f2 1B68     		ldr	r3, [r3, #0]
 3471 00f4 002B     		cmp	r3, #0
 3472 00f6 F1D1     		bne	.L7
 3473              	.L6:
 194:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			}
 195:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 196:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			/* If we found the end marker then a block of adequate size was not found. */
 197:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			if( pxBlock != &xEnd )
 3474              		.loc 1 197 0
 3475 00f8 FA68     		ldr	r2, [r7, #12]
 3476 00fa 40F20003 		movw	r3, #:lower16:xEnd
 3477 00fe C0F20003 		movt	r3, #:upper16:xEnd
 3478 0102 9A42     		cmp	r2, r3
 3479 0104 4FD0     		beq	.L4
 198:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			{
 199:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				/* Return the memory space - jumping over the xBlockLink structure
 200:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				at its start. */
 201:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_S
 3480              		.loc 1 201 0
 3481 0106 3B69     		ldr	r3, [r7, #16]
 3482 0108 1A68     		ldr	r2, [r3, #0]
 3483 010a 40F20003 		movw	r3, #:lower16:heapSTRUCT_SIZE
 3484 010e C0F20003 		movt	r3, #:upper16:heapSTRUCT_SIZE
 3485 0112 1B88     		ldrh	r3, [r3, #0]
 3486 0114 1344     		add	r3, r2, r3
 3487 0116 BB61     		str	r3, [r7, #24]
 202:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 203:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				/* This block is being returned for use so must be taken our of the
 204:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				list of free blocks. */
 205:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 3488              		.loc 1 205 0
 3489 0118 FB68     		ldr	r3, [r7, #12]
 3490 011a 1A68     		ldr	r2, [r3, #0]
 3491 011c 3B69     		ldr	r3, [r7, #16]
 3492 011e 1A60     		str	r2, [r3, #0]
 206:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 207:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				/* If the block is larger than required it can be split into two. */
 208:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 3493              		.loc 1 208 0
 3494 0120 FB68     		ldr	r3, [r7, #12]
 3495 0122 5A68     		ldr	r2, [r3, #4]
 3496 0124 7B68     		ldr	r3, [r7, #4]
 3497 0126 C3EB0202 		rsb	r2, r3, r2
 3498 012a 40F20003 		movw	r3, #:lower16:heapSTRUCT_SIZE
 3499 012e C0F20003 		movt	r3, #:upper16:heapSTRUCT_SIZE
 3500 0132 1B88     		ldrh	r3, [r3, #0]
 3501 0134 4FEA4303 		lsl	r3, r3, #1
 3502 0138 9A42     		cmp	r2, r3
 3503 013a 26D9     		bls	.L8
 209:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				{
 210:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					/* This block is to be split into two.  Create a new block
 211:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					following the number of bytes requested. The void cast is
 212:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					used to prevent byte alignment warnings from the compiler. */
 213:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 3504              		.loc 1 213 0
 3505 013c FA68     		ldr	r2, [r7, #12]
 3506 013e 7B68     		ldr	r3, [r7, #4]
 3507 0140 1344     		add	r3, r2, r3
 3508 0142 7B61     		str	r3, [r7, #20]
 214:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 215:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					/* Calculate the sizes of two blocks split from the single
 216:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					block. */
 217:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 3509              		.loc 1 217 0
 3510 0144 FB68     		ldr	r3, [r7, #12]
 3511 0146 5A68     		ldr	r2, [r3, #4]
 3512 0148 7B68     		ldr	r3, [r7, #4]
 3513 014a C3EB0202 		rsb	r2, r3, r2
 3514 014e 7B69     		ldr	r3, [r7, #20]
 3515 0150 5A60     		str	r2, [r3, #4]
 218:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					pxBlock->xBlockSize = xWantedSize;
 3516              		.loc 1 218 0
 3517 0152 FB68     		ldr	r3, [r7, #12]
 3518 0154 7A68     		ldr	r2, [r7, #4]
 3519 0156 5A60     		str	r2, [r3, #4]
 3520              	.LBB3:
 219:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 220:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					/* Insert the new block into the list of free blocks. */
 221:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 3521              		.loc 1 221 0
 3522 0158 7B69     		ldr	r3, [r7, #20]
 3523 015a 5B68     		ldr	r3, [r3, #4]
 3524 015c 7B62     		str	r3, [r7, #36]
 3525 015e 40F20003 		movw	r3, #:lower16:xStart
 3526 0162 C0F20003 		movt	r3, #:upper16:xStart
 3527 0166 3B62     		str	r3, [r7, #32]
 3528 0168 02E0     		b	.L9
 3529              	.L10:
 3530 016a 3B6A     		ldr	r3, [r7, #32]
 3531 016c 1B68     		ldr	r3, [r3, #0]
 3532 016e 3B62     		str	r3, [r7, #32]
 3533              	.L9:
 3534 0170 3B6A     		ldr	r3, [r7, #32]
 3535 0172 1B68     		ldr	r3, [r3, #0]
 3536 0174 5A68     		ldr	r2, [r3, #4]
 3537 0176 7B6A     		ldr	r3, [r7, #36]
 3538 0178 9A42     		cmp	r2, r3
 3539 017a F6D3     		bcc	.L10
 3540 017c 3B6A     		ldr	r3, [r7, #32]
 3541 017e 1A68     		ldr	r2, [r3, #0]
 3542 0180 7B69     		ldr	r3, [r7, #20]
 3543 0182 1A60     		str	r2, [r3, #0]
 3544 0184 3B6A     		ldr	r3, [r7, #32]
 3545 0186 7A69     		ldr	r2, [r7, #20]
 3546 0188 1A60     		str	r2, [r3, #0]
 3547              	.L8:
 3548              	.LBE3:
 222:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				}
 223:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				
 224:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 				xFreeBytesRemaining -= pxBlock->xBlockSize;
 3549              		.loc 1 224 0
 3550 018a 40F20003 		movw	r3, #:lower16:xFreeBytesRemaining
 3551 018e C0F20003 		movt	r3, #:upper16:xFreeBytesRemaining
 3552 0192 1A68     		ldr	r2, [r3, #0]
 3553 0194 FB68     		ldr	r3, [r7, #12]
 3554 0196 5B68     		ldr	r3, [r3, #4]
 3555 0198 C3EB0202 		rsb	r2, r3, r2
 3556 019c 40F20003 		movw	r3, #:lower16:xFreeBytesRemaining
 3557 01a0 C0F20003 		movt	r3, #:upper16:xFreeBytesRemaining
 3558 01a4 1A60     		str	r2, [r3, #0]
 3559              	.L4:
 225:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			}
 226:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		}
 227:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	}
 228:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	xTaskResumeAll();
 3560              		.loc 1 228 0
 3561 01a6 FFF7FEFF 		bl	xTaskResumeAll
 229:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 230:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 231:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	{
 232:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		if( pvReturn == NULL )
 233:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		{
 234:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			extern void vApplicationMallocFailedHook( void );
 235:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			vApplicationMallocFailedHook();
 236:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		}
 237:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	}
 238:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	#endif
 239:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 240:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	return pvReturn;
 3562              		.loc 1 240 0
 3563 01aa BB69     		ldr	r3, [r7, #24]
 241:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 3564              		.loc 1 241 0
 3565 01ac 1846     		mov	r0, r3
 3566 01ae 07F12807 		add	r7, r7, #40
 3567 01b2 BD46     		mov	sp, r7
 3568 01b4 80BD     		pop	{r7, pc}
 3569              	.LFE55:
 3571 01b6 00BF     		.align	2
 3572              		.global	vPortFree
 3573              		.thumb
 3574              		.thumb_func
 3576              	vPortFree:
 3577              	.LFB56:
 242:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 243:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 244:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** void vPortFree( void *pv )
 245:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
 3578              		.loc 1 245 0
 3579              		@ args = 0, pretend = 0, frame = 24
 3580              		@ frame_needed = 1, uses_anonymous_args = 0
 3581 01b8 80B5     		push	{r7, lr}
 3582              	.LCFI3:
 3583 01ba 86B0     		sub	sp, sp, #24
 3584              	.LCFI4:
 3585 01bc 00AF     		add	r7, sp, #0
 3586              	.LCFI5:
 3587 01be 7860     		str	r0, [r7, #4]
 246:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** unsigned char *puc = ( unsigned char * ) pv;
 3588              		.loc 1 246 0
 3589 01c0 7B68     		ldr	r3, [r7, #4]
 3590 01c2 BB60     		str	r3, [r7, #8]
 247:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** xBlockLink *pxLink;
 248:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 249:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	if( pv )
 3591              		.loc 1 249 0
 3592 01c4 7B68     		ldr	r3, [r7, #4]
 3593 01c6 002B     		cmp	r3, #0
 3594 01c8 35D0     		beq	.L16
 250:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	{
 251:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		/* The memory being freed will have an xBlockLink structure immediately
 252:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		before it. */
 253:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		puc -= heapSTRUCT_SIZE;
 3595              		.loc 1 253 0
 3596 01ca 40F20003 		movw	r3, #:lower16:heapSTRUCT_SIZE
 3597 01ce C0F20003 		movt	r3, #:upper16:heapSTRUCT_SIZE
 3598 01d2 1B88     		ldrh	r3, [r3, #0]
 3599 01d4 C3F10003 		rsb	r3, r3, #0
 3600 01d8 BA68     		ldr	r2, [r7, #8]
 3601 01da 1344     		add	r3, r2, r3
 3602 01dc BB60     		str	r3, [r7, #8]
 254:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 255:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 256:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		pxLink = ( void * ) puc;
 3603              		.loc 1 256 0
 3604 01de BB68     		ldr	r3, [r7, #8]
 3605 01e0 FB60     		str	r3, [r7, #12]
 257:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 258:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		vTaskSuspendAll();
 3606              		.loc 1 258 0
 3607 01e2 FFF7FEFF 		bl	vTaskSuspendAll
 3608              	.LBB4:
 259:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		{
 260:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			/* Add this block to the list of free blocks. */
 261:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 3609              		.loc 1 261 0
 3610 01e6 FB68     		ldr	r3, [r7, #12]
 3611 01e8 5B68     		ldr	r3, [r3, #4]
 3612 01ea 7B61     		str	r3, [r7, #20]
 3613 01ec 40F20003 		movw	r3, #:lower16:xStart
 3614 01f0 C0F20003 		movt	r3, #:upper16:xStart
 3615 01f4 3B61     		str	r3, [r7, #16]
 3616 01f6 02E0     		b	.L14
 3617              	.L15:
 3618 01f8 3B69     		ldr	r3, [r7, #16]
 3619 01fa 1B68     		ldr	r3, [r3, #0]
 3620 01fc 3B61     		str	r3, [r7, #16]
 3621              	.L14:
 3622 01fe 3B69     		ldr	r3, [r7, #16]
 3623 0200 1B68     		ldr	r3, [r3, #0]
 3624 0202 5A68     		ldr	r2, [r3, #4]
 3625 0204 7B69     		ldr	r3, [r7, #20]
 3626 0206 9A42     		cmp	r2, r3
 3627 0208 F6D3     		bcc	.L15
 3628 020a 3B69     		ldr	r3, [r7, #16]
 3629 020c 1A68     		ldr	r2, [r3, #0]
 3630 020e FB68     		ldr	r3, [r7, #12]
 3631 0210 1A60     		str	r2, [r3, #0]
 3632 0212 3B69     		ldr	r3, [r7, #16]
 3633 0214 FA68     		ldr	r2, [r7, #12]
 3634 0216 1A60     		str	r2, [r3, #0]
 3635              	.LBE4:
 262:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 			xFreeBytesRemaining += pxLink->xBlockSize;
 3636              		.loc 1 262 0
 3637 0218 FB68     		ldr	r3, [r7, #12]
 3638 021a 5A68     		ldr	r2, [r3, #4]
 3639 021c 40F20003 		movw	r3, #:lower16:xFreeBytesRemaining
 3640 0220 C0F20003 		movt	r3, #:upper16:xFreeBytesRemaining
 3641 0224 1B68     		ldr	r3, [r3, #0]
 3642 0226 1A44     		add	r2, r2, r3
 3643 0228 40F20003 		movw	r3, #:lower16:xFreeBytesRemaining
 3644 022c C0F20003 		movt	r3, #:upper16:xFreeBytesRemaining
 3645 0230 1A60     		str	r2, [r3, #0]
 263:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		}
 264:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 		xTaskResumeAll();
 3646              		.loc 1 264 0
 3647 0232 FFF7FEFF 		bl	xTaskResumeAll
 3648              	.L16:
 265:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	}
 266:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 3649              		.loc 1 266 0
 3650 0236 07F11807 		add	r7, r7, #24
 3651 023a BD46     		mov	sp, r7
 3652 023c 80BD     		pop	{r7, pc}
 3653              	.LFE56:
 3655 023e 00BF     		.align	2
 3656              		.global	xPortGetFreeHeapSize
 3657              		.thumb
 3658              		.thumb_func
 3660              	xPortGetFreeHeapSize:
 3661              	.LFB57:
 267:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 268:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 269:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** size_t xPortGetFreeHeapSize( void )
 270:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
 3662              		.loc 1 270 0
 3663              		@ args = 0, pretend = 0, frame = 0
 3664              		@ frame_needed = 1, uses_anonymous_args = 0
 3665              		@ link register save eliminated.
 3666 0240 80B4     		push	{r7}
 3667              	.LCFI6:
 3668 0242 00AF     		add	r7, sp, #0
 3669              	.LCFI7:
 271:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	return xFreeBytesRemaining;
 3670              		.loc 1 271 0
 3671 0244 40F20003 		movw	r3, #:lower16:xFreeBytesRemaining
 3672 0248 C0F20003 		movt	r3, #:upper16:xFreeBytesRemaining
 3673 024c 1B68     		ldr	r3, [r3, #0]
 272:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 3674              		.loc 1 272 0
 3675 024e 1846     		mov	r0, r3
 3676 0250 BD46     		mov	sp, r7
 3677 0252 80BC     		pop	{r7}
 3678 0254 7047     		bx	lr
 3679              	.LFE57:
 3681 0256 00BF     		.align	2
 3682              		.global	vPortInitialiseBlocks
 3683              		.thumb
 3684              		.thumb_func
 3686              	vPortInitialiseBlocks:
 3687              	.LFB58:
 273:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** /*-----------------------------------------------------------*/
 274:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 
 275:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** void vPortInitialiseBlocks( void )
 276:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** {
 3688              		.loc 1 276 0
 3689              		@ args = 0, pretend = 0, frame = 0
 3690              		@ frame_needed = 1, uses_anonymous_args = 0
 3691              		@ link register save eliminated.
 3692 0258 80B4     		push	{r7}
 3693              	.LCFI8:
 3694 025a 00AF     		add	r7, sp, #0
 3695              	.LCFI9:
 277:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** 	/* This just exists to keep the linker quiet. */
 278:../3rdParty/FreeRTOS/portable/MemMang/heap_2.c **** }
 3696              		.loc 1 278 0
 3697 025c BD46     		mov	sp, r7
 3698 025e 80BC     		pop	{r7}
 3699 0260 7047     		bx	lr
 3700              	.LFE58:
 3702              		.bss
 3703              		.align	2
 3704              	xHeapHasBeenInitialised.3317:
 3705 4c10 00000000 		.space	4
 3812              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_2.c
/var/tmp//ccpDuSj0.s:3326   .bss:0000000000000000 $d
/var/tmp//ccpDuSj0.s:3327   .bss:0000000000000000 xHeap
/var/tmp//ccpDuSj0.s:3330   .rodata:0000000000000000 $d
/var/tmp//ccpDuSj0.s:3333   .rodata:0000000000000000 heapSTRUCT_SIZE
/var/tmp//ccpDuSj0.s:3337   .bss:0000000000004c00 xStart
/var/tmp//ccpDuSj0.s:3340   .bss:0000000000004c08 xEnd
/var/tmp//ccpDuSj0.s:3343   .data:0000000000000000 $d
/var/tmp//ccpDuSj0.s:3346   .data:0000000000000000 xFreeBytesRemaining
/var/tmp//ccpDuSj0.s:3349   .text:0000000000000000 $t
/var/tmp//ccpDuSj0.s:3354   .text:0000000000000000 pvPortMalloc
/var/tmp//ccpDuSj0.s:3704   .bss:0000000000004c10 xHeapHasBeenInitialised.3317
/var/tmp//ccpDuSj0.s:3576   .text:00000000000001b8 vPortFree
/var/tmp//ccpDuSj0.s:3660   .text:0000000000000240 xPortGetFreeHeapSize
/var/tmp//ccpDuSj0.s:3686   .text:0000000000000258 vPortInitialiseBlocks
/var/tmp//ccpDuSj0.s:3719   .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
