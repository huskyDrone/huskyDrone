   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"list.c"
  23              	.Ltext0:
  24              		.file 1 "../3rdParty/FreeRTOS/list.c"
 3245              		.align	2
 3246              		.global	vListInitialise
 3247              		.thumb
 3248              		.thumb_func
 3250              	vListInitialise:
 3251              	.LFB55:
   1:../3rdParty/FreeRTOS/list.c **** /*
   2:../3rdParty/FreeRTOS/list.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../3rdParty/FreeRTOS/list.c **** 
   4:../3rdParty/FreeRTOS/list.c **** 
   5:../3rdParty/FreeRTOS/list.c ****     ***************************************************************************
   6:../3rdParty/FreeRTOS/list.c ****      *                                                                       *
   7:../3rdParty/FreeRTOS/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../3rdParty/FreeRTOS/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../3rdParty/FreeRTOS/list.c ****      *    available.                                                         *
  10:../3rdParty/FreeRTOS/list.c ****      *                                                                       *
  11:../3rdParty/FreeRTOS/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../3rdParty/FreeRTOS/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../3rdParty/FreeRTOS/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../3rdParty/FreeRTOS/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../3rdParty/FreeRTOS/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../3rdParty/FreeRTOS/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../3rdParty/FreeRTOS/list.c ****      *                                                                       *
  18:../3rdParty/FreeRTOS/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../3rdParty/FreeRTOS/list.c ****      *                                                                       *
  20:../3rdParty/FreeRTOS/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../3rdParty/FreeRTOS/list.c ****      *                                                                       *
  22:../3rdParty/FreeRTOS/list.c ****     ***************************************************************************
  23:../3rdParty/FreeRTOS/list.c **** 
  24:../3rdParty/FreeRTOS/list.c **** 
  25:../3rdParty/FreeRTOS/list.c ****     This file is part of the FreeRTOS distribution.
  26:../3rdParty/FreeRTOS/list.c **** 
  27:../3rdParty/FreeRTOS/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../3rdParty/FreeRTOS/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../3rdParty/FreeRTOS/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../3rdParty/FreeRTOS/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../3rdParty/FreeRTOS/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../3rdParty/FreeRTOS/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../3rdParty/FreeRTOS/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../3rdParty/FreeRTOS/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../3rdParty/FreeRTOS/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../3rdParty/FreeRTOS/list.c ****     more details. You should have received a copy of the GNU General Public
  37:../3rdParty/FreeRTOS/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../3rdParty/FreeRTOS/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../3rdParty/FreeRTOS/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../3rdParty/FreeRTOS/list.c ****     FreeRTOS WEB site.
  41:../3rdParty/FreeRTOS/list.c **** 
  42:../3rdParty/FreeRTOS/list.c ****     1 tab == 4 spaces!
  43:../3rdParty/FreeRTOS/list.c **** 
  44:../3rdParty/FreeRTOS/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../3rdParty/FreeRTOS/list.c ****     contact details.
  46:../3rdParty/FreeRTOS/list.c **** 
  47:../3rdParty/FreeRTOS/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../3rdParty/FreeRTOS/list.c ****     critical systems.
  49:../3rdParty/FreeRTOS/list.c **** 
  50:../3rdParty/FreeRTOS/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../3rdParty/FreeRTOS/list.c ****     licensing and training services.
  52:../3rdParty/FreeRTOS/list.c **** */
  53:../3rdParty/FreeRTOS/list.c **** 
  54:../3rdParty/FreeRTOS/list.c **** 
  55:../3rdParty/FreeRTOS/list.c **** #include <stdlib.h>
  56:../3rdParty/FreeRTOS/list.c **** #include "FreeRTOS.h"
  57:../3rdParty/FreeRTOS/list.c **** #include "list.h"
  58:../3rdParty/FreeRTOS/list.c **** 
  59:../3rdParty/FreeRTOS/list.c **** /*-----------------------------------------------------------
  60:../3rdParty/FreeRTOS/list.c ****  * PUBLIC LIST API documented in list.h
  61:../3rdParty/FreeRTOS/list.c ****  *----------------------------------------------------------*/
  62:../3rdParty/FreeRTOS/list.c **** 
  63:../3rdParty/FreeRTOS/list.c **** void vListInitialise( xList *pxList )
  64:../3rdParty/FreeRTOS/list.c **** {
 3252              		.loc 1 64 0
 3253              		@ args = 0, pretend = 0, frame = 8
 3254              		@ frame_needed = 1, uses_anonymous_args = 0
 3255              		@ link register save eliminated.
 3256 0000 80B4     		push	{r7}
 3257              	.LCFI0:
 3258 0002 83B0     		sub	sp, sp, #12
 3259              	.LCFI1:
 3260 0004 00AF     		add	r7, sp, #0
 3261              	.LCFI2:
 3262 0006 7860     		str	r0, [r7, #4]
  65:../3rdParty/FreeRTOS/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:../3rdParty/FreeRTOS/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:../3rdParty/FreeRTOS/list.c **** 	as the only list entry. */
  68:../3rdParty/FreeRTOS/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 3263              		.loc 1 68 0
 3264 0008 7B68     		ldr	r3, [r7, #4]
 3265 000a 03F10803 		add	r3, r3, #8
 3266 000e 1A46     		mov	r2, r3
 3267 0010 7B68     		ldr	r3, [r7, #4]
 3268 0012 5A60     		str	r2, [r3, #4]
  69:../3rdParty/FreeRTOS/list.c **** 
  70:../3rdParty/FreeRTOS/list.c **** 	/* The list end value is the highest possible value in the list to
  71:../3rdParty/FreeRTOS/list.c **** 	ensure it remains at the end of the list. */
  72:../3rdParty/FreeRTOS/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
 3269              		.loc 1 72 0
 3270 0014 7B68     		ldr	r3, [r7, #4]
 3271 0016 4FF0FF32 		mov	r2, #-1
 3272 001a 9A60     		str	r2, [r3, #8]
  73:../3rdParty/FreeRTOS/list.c **** 
  74:../3rdParty/FreeRTOS/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:../3rdParty/FreeRTOS/list.c **** 	when the list is empty. */
  76:../3rdParty/FreeRTOS/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 3273              		.loc 1 76 0
 3274 001c 7B68     		ldr	r3, [r7, #4]
 3275 001e 03F10803 		add	r3, r3, #8
 3276 0022 1A46     		mov	r2, r3
 3277 0024 7B68     		ldr	r3, [r7, #4]
 3278 0026 DA60     		str	r2, [r3, #12]
  77:../3rdParty/FreeRTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 3279              		.loc 1 77 0
 3280 0028 7B68     		ldr	r3, [r7, #4]
 3281 002a 03F10803 		add	r3, r3, #8
 3282 002e 1A46     		mov	r2, r3
 3283 0030 7B68     		ldr	r3, [r7, #4]
 3284 0032 1A61     		str	r2, [r3, #16]
  78:../3rdParty/FreeRTOS/list.c **** 
  79:../3rdParty/FreeRTOS/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 3285              		.loc 1 79 0
 3286 0034 7B68     		ldr	r3, [r7, #4]
 3287 0036 4FF00002 		mov	r2, #0
 3288 003a 1A60     		str	r2, [r3, #0]
  80:../3rdParty/FreeRTOS/list.c **** }
 3289              		.loc 1 80 0
 3290 003c 07F10C07 		add	r7, r7, #12
 3291 0040 BD46     		mov	sp, r7
 3292 0042 80BC     		pop	{r7}
 3293 0044 7047     		bx	lr
 3294              	.LFE55:
 3296 0046 00BF     		.align	2
 3297              		.global	vListInitialiseItem
 3298              		.thumb
 3299              		.thumb_func
 3301              	vListInitialiseItem:
 3302              	.LFB56:
  81:../3rdParty/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  82:../3rdParty/FreeRTOS/list.c **** 
  83:../3rdParty/FreeRTOS/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:../3rdParty/FreeRTOS/list.c **** {
 3303              		.loc 1 84 0
 3304              		@ args = 0, pretend = 0, frame = 8
 3305              		@ frame_needed = 1, uses_anonymous_args = 0
 3306              		@ link register save eliminated.
 3307 0048 80B4     		push	{r7}
 3308              	.LCFI3:
 3309 004a 83B0     		sub	sp, sp, #12
 3310              	.LCFI4:
 3311 004c 00AF     		add	r7, sp, #0
 3312              	.LCFI5:
 3313 004e 7860     		str	r0, [r7, #4]
  85:../3rdParty/FreeRTOS/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:../3rdParty/FreeRTOS/list.c **** 	pxItem->pvContainer = NULL;
 3314              		.loc 1 86 0
 3315 0050 7B68     		ldr	r3, [r7, #4]
 3316 0052 4FF00002 		mov	r2, #0
 3317 0056 1A61     		str	r2, [r3, #16]
  87:../3rdParty/FreeRTOS/list.c **** }
 3318              		.loc 1 87 0
 3319 0058 07F10C07 		add	r7, r7, #12
 3320 005c BD46     		mov	sp, r7
 3321 005e 80BC     		pop	{r7}
 3322 0060 7047     		bx	lr
 3323              	.LFE56:
 3325 0062 00BF     		.align	2
 3326              		.global	vListInsertEnd
 3327              		.thumb
 3328              		.thumb_func
 3330              	vListInsertEnd:
 3331              	.LFB57:
  88:../3rdParty/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  89:../3rdParty/FreeRTOS/list.c **** 
  90:../3rdParty/FreeRTOS/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:../3rdParty/FreeRTOS/list.c **** {
 3332              		.loc 1 91 0
 3333              		@ args = 0, pretend = 0, frame = 16
 3334              		@ frame_needed = 1, uses_anonymous_args = 0
 3335              		@ link register save eliminated.
 3336 0064 80B4     		push	{r7}
 3337              	.LCFI6:
 3338 0066 85B0     		sub	sp, sp, #20
 3339              	.LCFI7:
 3340 0068 00AF     		add	r7, sp, #0
 3341              	.LCFI8:
 3342 006a 7860     		str	r0, [r7, #4]
 3343 006c 3960     		str	r1, [r7, #0]
  92:../3rdParty/FreeRTOS/list.c **** volatile xListItem * pxIndex;
  93:../3rdParty/FreeRTOS/list.c **** 
  94:../3rdParty/FreeRTOS/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:../3rdParty/FreeRTOS/list.c **** 	makes the new list item the last item to be removed by a call to
  96:../3rdParty/FreeRTOS/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:../3rdParty/FreeRTOS/list.c **** 	the pxIndex member. */
  98:../3rdParty/FreeRTOS/list.c **** 	pxIndex = pxList->pxIndex;
 3344              		.loc 1 98 0
 3345 006e 7B68     		ldr	r3, [r7, #4]
 3346 0070 5B68     		ldr	r3, [r3, #4]
 3347 0072 FB60     		str	r3, [r7, #12]
  99:../3rdParty/FreeRTOS/list.c **** 
 100:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 3348              		.loc 1 100 0
 3349 0074 FB68     		ldr	r3, [r7, #12]
 3350 0076 5A68     		ldr	r2, [r3, #4]
 3351 0078 3B68     		ldr	r3, [r7, #0]
 3352 007a 5A60     		str	r2, [r3, #4]
 101:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 3353              		.loc 1 101 0
 3354 007c 7B68     		ldr	r3, [r7, #4]
 3355 007e 5A68     		ldr	r2, [r3, #4]
 3356 0080 3B68     		ldr	r3, [r7, #0]
 3357 0082 9A60     		str	r2, [r3, #8]
 102:../3rdParty/FreeRTOS/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 3358              		.loc 1 102 0
 3359 0084 FB68     		ldr	r3, [r7, #12]
 3360 0086 5B68     		ldr	r3, [r3, #4]
 3361 0088 3A68     		ldr	r2, [r7, #0]
 3362 008a 9A60     		str	r2, [r3, #8]
 103:../3rdParty/FreeRTOS/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 3363              		.loc 1 103 0
 3364 008c 3A68     		ldr	r2, [r7, #0]
 3365 008e FB68     		ldr	r3, [r7, #12]
 3366 0090 5A60     		str	r2, [r3, #4]
 104:../3rdParty/FreeRTOS/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 3367              		.loc 1 104 0
 3368 0092 3A68     		ldr	r2, [r7, #0]
 3369 0094 7B68     		ldr	r3, [r7, #4]
 3370 0096 5A60     		str	r2, [r3, #4]
 105:../3rdParty/FreeRTOS/list.c **** 
 106:../3rdParty/FreeRTOS/list.c **** 	/* Remember which list the item is in. */
 107:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 3371              		.loc 1 107 0
 3372 0098 3B68     		ldr	r3, [r7, #0]
 3373 009a 7A68     		ldr	r2, [r7, #4]
 3374 009c 1A61     		str	r2, [r3, #16]
 108:../3rdParty/FreeRTOS/list.c **** 
 109:../3rdParty/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 3375              		.loc 1 109 0
 3376 009e 7B68     		ldr	r3, [r7, #4]
 3377 00a0 1B68     		ldr	r3, [r3, #0]
 3378 00a2 03F10102 		add	r2, r3, #1
 3379 00a6 7B68     		ldr	r3, [r7, #4]
 3380 00a8 1A60     		str	r2, [r3, #0]
 110:../3rdParty/FreeRTOS/list.c **** }
 3381              		.loc 1 110 0
 3382 00aa 07F11407 		add	r7, r7, #20
 3383 00ae BD46     		mov	sp, r7
 3384 00b0 80BC     		pop	{r7}
 3385 00b2 7047     		bx	lr
 3386              	.LFE57:
 3388              		.align	2
 3389              		.global	vListInsert
 3390              		.thumb
 3391              		.thumb_func
 3393              	vListInsert:
 3394              	.LFB58:
 111:../3rdParty/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 112:../3rdParty/FreeRTOS/list.c **** 
 113:../3rdParty/FreeRTOS/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:../3rdParty/FreeRTOS/list.c **** {
 3395              		.loc 1 114 0
 3396              		@ args = 0, pretend = 0, frame = 16
 3397              		@ frame_needed = 1, uses_anonymous_args = 0
 3398              		@ link register save eliminated.
 3399 00b4 80B4     		push	{r7}
 3400              	.LCFI9:
 3401 00b6 85B0     		sub	sp, sp, #20
 3402              	.LCFI10:
 3403 00b8 00AF     		add	r7, sp, #0
 3404              	.LCFI11:
 3405 00ba 7860     		str	r0, [r7, #4]
 3406 00bc 3960     		str	r1, [r7, #0]
 115:../3rdParty/FreeRTOS/list.c **** volatile xListItem *pxIterator;
 116:../3rdParty/FreeRTOS/list.c **** portTickType xValueOfInsertion;
 117:../3rdParty/FreeRTOS/list.c **** 
 118:../3rdParty/FreeRTOS/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:../3rdParty/FreeRTOS/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 3407              		.loc 1 119 0
 3408 00be 3B68     		ldr	r3, [r7, #0]
 3409 00c0 1B68     		ldr	r3, [r3, #0]
 3410 00c2 FB60     		str	r3, [r7, #12]
 120:../3rdParty/FreeRTOS/list.c **** 
 121:../3rdParty/FreeRTOS/list.c **** 	/* If the list already contains a list item with the same item value then
 122:../3rdParty/FreeRTOS/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:../3rdParty/FreeRTOS/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:../3rdParty/FreeRTOS/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:../3rdParty/FreeRTOS/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:../3rdParty/FreeRTOS/list.c **** 	to guard against this by checking the value first and modifying the
 127:../3rdParty/FreeRTOS/list.c **** 	algorithm slightly if necessary. */
 128:../3rdParty/FreeRTOS/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 3411              		.loc 1 128 0
 3412 00c4 FB68     		ldr	r3, [r7, #12]
 3413 00c6 B3F1FF3F 		cmp	r3, #-1
 3414 00ca 03D1     		bne	.L8
 129:../3rdParty/FreeRTOS/list.c **** 	{
 130:../3rdParty/FreeRTOS/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 3415              		.loc 1 130 0
 3416 00cc 7B68     		ldr	r3, [r7, #4]
 3417 00ce 1B69     		ldr	r3, [r3, #16]
 3418 00d0 BB60     		str	r3, [r7, #8]
 3419 00d2 0DE0     		b	.L9
 3420              	.L8:
 131:../3rdParty/FreeRTOS/list.c **** 	}
 132:../3rdParty/FreeRTOS/list.c **** 	else
 133:../3rdParty/FreeRTOS/list.c **** 	{
 134:../3rdParty/FreeRTOS/list.c **** 		/* *** NOTE ***********************************************************
 135:../3rdParty/FreeRTOS/list.c **** 		If you find your application is crashing here then likely causes are:
 136:../3rdParty/FreeRTOS/list.c **** 			1) Stack overflow -
 137:../3rdParty/FreeRTOS/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:../3rdParty/FreeRTOS/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:../3rdParty/FreeRTOS/list.c **** 			   parts where numerically high priority values denote low actual
 140:../3rdParty/FreeRTOS/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:../3rdParty/FreeRTOS/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:../3rdParty/FreeRTOS/list.c **** 			3) Calling an API function from within a critical section or when
 143:../3rdParty/FreeRTOS/list.c **** 			   the scheduler is suspended.
 144:../3rdParty/FreeRTOS/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:../3rdParty/FreeRTOS/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:../3rdParty/FreeRTOS/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:../3rdParty/FreeRTOS/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:../3rdParty/FreeRTOS/list.c **** 		**********************************************************************/
 149:../3rdParty/FreeRTOS/list.c **** 		
 150:../3rdParty/FreeRTOS/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 3421              		.loc 1 150 0
 3422 00d4 7B68     		ldr	r3, [r7, #4]
 3423 00d6 03F10803 		add	r3, r3, #8
 3424 00da BB60     		str	r3, [r7, #8]
 3425 00dc 02E0     		b	.L10
 3426              	.L11:
 3427 00de BB68     		ldr	r3, [r7, #8]
 3428 00e0 5B68     		ldr	r3, [r3, #4]
 3429 00e2 BB60     		str	r3, [r7, #8]
 3430              	.L10:
 3431 00e4 BB68     		ldr	r3, [r7, #8]
 3432 00e6 5B68     		ldr	r3, [r3, #4]
 3433 00e8 1A68     		ldr	r2, [r3, #0]
 3434 00ea FB68     		ldr	r3, [r7, #12]
 3435 00ec 9A42     		cmp	r2, r3
 3436 00ee F6D9     		bls	.L11
 3437              	.L9:
 151:../3rdParty/FreeRTOS/list.c **** 		{
 152:../3rdParty/FreeRTOS/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:../3rdParty/FreeRTOS/list.c **** 			wanted insertion position. */
 154:../3rdParty/FreeRTOS/list.c **** 		}
 155:../3rdParty/FreeRTOS/list.c **** 	}
 156:../3rdParty/FreeRTOS/list.c **** 
 157:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 3438              		.loc 1 157 0
 3439 00f0 BB68     		ldr	r3, [r7, #8]
 3440 00f2 5A68     		ldr	r2, [r3, #4]
 3441 00f4 3B68     		ldr	r3, [r7, #0]
 3442 00f6 5A60     		str	r2, [r3, #4]
 158:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 3443              		.loc 1 158 0
 3444 00f8 3B68     		ldr	r3, [r7, #0]
 3445 00fa 5B68     		ldr	r3, [r3, #4]
 3446 00fc 3A68     		ldr	r2, [r7, #0]
 3447 00fe 9A60     		str	r2, [r3, #8]
 159:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 3448              		.loc 1 159 0
 3449 0100 3B68     		ldr	r3, [r7, #0]
 3450 0102 BA68     		ldr	r2, [r7, #8]
 3451 0104 9A60     		str	r2, [r3, #8]
 160:../3rdParty/FreeRTOS/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 3452              		.loc 1 160 0
 3453 0106 3A68     		ldr	r2, [r7, #0]
 3454 0108 BB68     		ldr	r3, [r7, #8]
 3455 010a 5A60     		str	r2, [r3, #4]
 161:../3rdParty/FreeRTOS/list.c **** 
 162:../3rdParty/FreeRTOS/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:../3rdParty/FreeRTOS/list.c **** 	item later. */
 164:../3rdParty/FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 3456              		.loc 1 164 0
 3457 010c 3B68     		ldr	r3, [r7, #0]
 3458 010e 7A68     		ldr	r2, [r7, #4]
 3459 0110 1A61     		str	r2, [r3, #16]
 165:../3rdParty/FreeRTOS/list.c **** 
 166:../3rdParty/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 3460              		.loc 1 166 0
 3461 0112 7B68     		ldr	r3, [r7, #4]
 3462 0114 1B68     		ldr	r3, [r3, #0]
 3463 0116 03F10102 		add	r2, r3, #1
 3464 011a 7B68     		ldr	r3, [r7, #4]
 3465 011c 1A60     		str	r2, [r3, #0]
 167:../3rdParty/FreeRTOS/list.c **** }
 3466              		.loc 1 167 0
 3467 011e 07F11407 		add	r7, r7, #20
 3468 0122 BD46     		mov	sp, r7
 3469 0124 80BC     		pop	{r7}
 3470 0126 7047     		bx	lr
 3471              	.LFE58:
 3473              		.align	2
 3474              		.global	vListRemove
 3475              		.thumb
 3476              		.thumb_func
 3478              	vListRemove:
 3479              	.LFB59:
 168:../3rdParty/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 169:../3rdParty/FreeRTOS/list.c **** 
 170:../3rdParty/FreeRTOS/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:../3rdParty/FreeRTOS/list.c **** {
 3480              		.loc 1 171 0
 3481              		@ args = 0, pretend = 0, frame = 16
 3482              		@ frame_needed = 1, uses_anonymous_args = 0
 3483              		@ link register save eliminated.
 3484 0128 80B4     		push	{r7}
 3485              	.LCFI12:
 3486 012a 85B0     		sub	sp, sp, #20
 3487              	.LCFI13:
 3488 012c 00AF     		add	r7, sp, #0
 3489              	.LCFI14:
 3490 012e 7860     		str	r0, [r7, #4]
 172:../3rdParty/FreeRTOS/list.c **** xList * pxList;
 173:../3rdParty/FreeRTOS/list.c **** 
 174:../3rdParty/FreeRTOS/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 3491              		.loc 1 174 0
 3492 0130 7B68     		ldr	r3, [r7, #4]
 3493 0132 5B68     		ldr	r3, [r3, #4]
 3494 0134 7A68     		ldr	r2, [r7, #4]
 3495 0136 9268     		ldr	r2, [r2, #8]
 3496 0138 9A60     		str	r2, [r3, #8]
 175:../3rdParty/FreeRTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 3497              		.loc 1 175 0
 3498 013a 7B68     		ldr	r3, [r7, #4]
 3499 013c 9B68     		ldr	r3, [r3, #8]
 3500 013e 7A68     		ldr	r2, [r7, #4]
 3501 0140 5268     		ldr	r2, [r2, #4]
 3502 0142 5A60     		str	r2, [r3, #4]
 176:../3rdParty/FreeRTOS/list.c **** 	
 177:../3rdParty/FreeRTOS/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:../3rdParty/FreeRTOS/list.c **** 	item. */
 179:../3rdParty/FreeRTOS/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 3503              		.loc 1 179 0
 3504 0144 7B68     		ldr	r3, [r7, #4]
 3505 0146 1B69     		ldr	r3, [r3, #16]
 3506 0148 FB60     		str	r3, [r7, #12]
 180:../3rdParty/FreeRTOS/list.c **** 
 181:../3rdParty/FreeRTOS/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:../3rdParty/FreeRTOS/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 3507              		.loc 1 182 0
 3508 014a FB68     		ldr	r3, [r7, #12]
 3509 014c 5A68     		ldr	r2, [r3, #4]
 3510 014e 7B68     		ldr	r3, [r7, #4]
 3511 0150 9A42     		cmp	r2, r3
 3512 0152 03D1     		bne	.L14
 183:../3rdParty/FreeRTOS/list.c **** 	{
 184:../3rdParty/FreeRTOS/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 3513              		.loc 1 184 0
 3514 0154 7B68     		ldr	r3, [r7, #4]
 3515 0156 9A68     		ldr	r2, [r3, #8]
 3516 0158 FB68     		ldr	r3, [r7, #12]
 3517 015a 5A60     		str	r2, [r3, #4]
 3518              	.L14:
 185:../3rdParty/FreeRTOS/list.c **** 	}
 186:../3rdParty/FreeRTOS/list.c **** 
 187:../3rdParty/FreeRTOS/list.c **** 	pxItemToRemove->pvContainer = NULL;
 3519              		.loc 1 187 0
 3520 015c 7B68     		ldr	r3, [r7, #4]
 3521 015e 4FF00002 		mov	r2, #0
 3522 0162 1A61     		str	r2, [r3, #16]
 188:../3rdParty/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 3523              		.loc 1 188 0
 3524 0164 FB68     		ldr	r3, [r7, #12]
 3525 0166 1B68     		ldr	r3, [r3, #0]
 3526 0168 03F1FF32 		add	r2, r3, #-1
 3527 016c FB68     		ldr	r3, [r7, #12]
 3528 016e 1A60     		str	r2, [r3, #0]
 189:../3rdParty/FreeRTOS/list.c **** }
 3529              		.loc 1 189 0
 3530 0170 07F11407 		add	r7, r7, #20
 3531 0174 BD46     		mov	sp, r7
 3532 0176 80BC     		pop	{r7}
 3533 0178 7047     		bx	lr
 3534              	.LFE59:
 3667              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
/var/tmp//ccHFxUI7.s:3245   .text:0000000000000000 $t
/var/tmp//ccHFxUI7.s:3250   .text:0000000000000000 vListInitialise
/var/tmp//ccHFxUI7.s:3301   .text:0000000000000048 vListInitialiseItem
/var/tmp//ccHFxUI7.s:3330   .text:0000000000000064 vListInsertEnd
/var/tmp//ccHFxUI7.s:3393   .text:00000000000000b4 vListInsert
/var/tmp//ccHFxUI7.s:3478   .text:0000000000000128 vListRemove
/var/tmp//ccHFxUI7.s:3549   .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
