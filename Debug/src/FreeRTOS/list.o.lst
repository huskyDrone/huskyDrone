   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"list.c"
  23              	.Ltext0:
  24              		.file 1 "../src/FreeRTOS/list.c"
 3860              		.align	2
 3861              		.global	vListInitialise
 3862              		.thumb
 3863              		.thumb_func
 3865              	vListInitialise:
 3866              	.LFB29:
   1:../src/FreeRTOS/list.c **** /*
   2:../src/FreeRTOS/list.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../src/FreeRTOS/list.c **** 
   4:../src/FreeRTOS/list.c **** 
   5:../src/FreeRTOS/list.c ****     ***************************************************************************
   6:../src/FreeRTOS/list.c ****      *                                                                       *
   7:../src/FreeRTOS/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../src/FreeRTOS/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../src/FreeRTOS/list.c ****      *    available.                                                         *
  10:../src/FreeRTOS/list.c ****      *                                                                       *
  11:../src/FreeRTOS/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../src/FreeRTOS/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../src/FreeRTOS/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../src/FreeRTOS/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../src/FreeRTOS/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../src/FreeRTOS/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../src/FreeRTOS/list.c ****      *                                                                       *
  18:../src/FreeRTOS/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../src/FreeRTOS/list.c ****      *                                                                       *
  20:../src/FreeRTOS/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../src/FreeRTOS/list.c ****      *                                                                       *
  22:../src/FreeRTOS/list.c ****     ***************************************************************************
  23:../src/FreeRTOS/list.c **** 
  24:../src/FreeRTOS/list.c **** 
  25:../src/FreeRTOS/list.c ****     This file is part of the FreeRTOS distribution.
  26:../src/FreeRTOS/list.c **** 
  27:../src/FreeRTOS/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../src/FreeRTOS/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../src/FreeRTOS/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../src/FreeRTOS/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../src/FreeRTOS/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../src/FreeRTOS/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../src/FreeRTOS/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../src/FreeRTOS/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../src/FreeRTOS/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../src/FreeRTOS/list.c ****     more details. You should have received a copy of the GNU General Public
  37:../src/FreeRTOS/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../src/FreeRTOS/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../src/FreeRTOS/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../src/FreeRTOS/list.c ****     FreeRTOS WEB site.
  41:../src/FreeRTOS/list.c **** 
  42:../src/FreeRTOS/list.c ****     1 tab == 4 spaces!
  43:../src/FreeRTOS/list.c **** 
  44:../src/FreeRTOS/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../src/FreeRTOS/list.c ****     contact details.
  46:../src/FreeRTOS/list.c **** 
  47:../src/FreeRTOS/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../src/FreeRTOS/list.c ****     critical systems.
  49:../src/FreeRTOS/list.c **** 
  50:../src/FreeRTOS/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../src/FreeRTOS/list.c ****     licensing and training services.
  52:../src/FreeRTOS/list.c **** */
  53:../src/FreeRTOS/list.c **** 
  54:../src/FreeRTOS/list.c **** 
  55:../src/FreeRTOS/list.c **** #include <stdlib.h>
  56:../src/FreeRTOS/list.c **** #include "FreeRTOS.h"
  57:../src/FreeRTOS/list.c **** #include "list.h"
  58:../src/FreeRTOS/list.c **** 
  59:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------
  60:../src/FreeRTOS/list.c ****  * PUBLIC LIST API documented in list.h
  61:../src/FreeRTOS/list.c ****  *----------------------------------------------------------*/
  62:../src/FreeRTOS/list.c **** 
  63:../src/FreeRTOS/list.c **** void vListInitialise( xList *pxList )
  64:../src/FreeRTOS/list.c **** {
 3867              		.loc 1 64 0
 3868              		.cfi_startproc
 3869              		@ args = 0, pretend = 0, frame = 8
 3870              		@ frame_needed = 1, uses_anonymous_args = 0
 3871              		@ link register save eliminated.
 3872 0000 80B4     		push	{r7}
 3873              	.LCFI0:
 3874              		.cfi_def_cfa_offset 4
 3875 0002 83B0     		sub	sp, sp, #12
 3876              	.LCFI1:
 3877              		.cfi_def_cfa_offset 16
 3878 0004 00AF     		add	r7, sp, #0
 3879              		.cfi_offset 7, -4
 3880              	.LCFI2:
 3881              		.cfi_def_cfa_register 7
 3882 0006 7860     		str	r0, [r7, #4]
  65:../src/FreeRTOS/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:../src/FreeRTOS/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:../src/FreeRTOS/list.c **** 	as the only list entry. */
  68:../src/FreeRTOS/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 3883              		.loc 1 68 0
 3884 0008 7B68     		ldr	r3, [r7, #4]
 3885 000a 03F10803 		add	r3, r3, #8
 3886 000e 1A46     		mov	r2, r3
 3887 0010 7B68     		ldr	r3, [r7, #4]
 3888 0012 5A60     		str	r2, [r3, #4]
  69:../src/FreeRTOS/list.c **** 
  70:../src/FreeRTOS/list.c **** 	/* The list end value is the highest possible value in the list to
  71:../src/FreeRTOS/list.c **** 	ensure it remains at the end of the list. */
  72:../src/FreeRTOS/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
 3889              		.loc 1 72 0
 3890 0014 7B68     		ldr	r3, [r7, #4]
 3891 0016 4FF0FF32 		mov	r2, #-1
 3892 001a 9A60     		str	r2, [r3, #8]
  73:../src/FreeRTOS/list.c **** 
  74:../src/FreeRTOS/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:../src/FreeRTOS/list.c **** 	when the list is empty. */
  76:../src/FreeRTOS/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 3893              		.loc 1 76 0
 3894 001c 7B68     		ldr	r3, [r7, #4]
 3895 001e 03F10803 		add	r3, r3, #8
 3896 0022 1A46     		mov	r2, r3
 3897 0024 7B68     		ldr	r3, [r7, #4]
 3898 0026 DA60     		str	r2, [r3, #12]
  77:../src/FreeRTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 3899              		.loc 1 77 0
 3900 0028 7B68     		ldr	r3, [r7, #4]
 3901 002a 03F10803 		add	r3, r3, #8
 3902 002e 1A46     		mov	r2, r3
 3903 0030 7B68     		ldr	r3, [r7, #4]
 3904 0032 1A61     		str	r2, [r3, #16]
  78:../src/FreeRTOS/list.c **** 
  79:../src/FreeRTOS/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 3905              		.loc 1 79 0
 3906 0034 7B68     		ldr	r3, [r7, #4]
 3907 0036 4FF00002 		mov	r2, #0
 3908 003a 1A60     		str	r2, [r3, #0]
  80:../src/FreeRTOS/list.c **** }
 3909              		.loc 1 80 0
 3910 003c 07F10C07 		add	r7, r7, #12
 3911 0040 BD46     		mov	sp, r7
 3912 0042 80BC     		pop	{r7}
 3913 0044 7047     		bx	lr
 3914              		.cfi_endproc
 3915              	.LFE29:
 3917 0046 00BF     		.align	2
 3918              		.global	vListInitialiseItem
 3919              		.thumb
 3920              		.thumb_func
 3922              	vListInitialiseItem:
 3923              	.LFB30:
  81:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  82:../src/FreeRTOS/list.c **** 
  83:../src/FreeRTOS/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:../src/FreeRTOS/list.c **** {
 3924              		.loc 1 84 0
 3925              		.cfi_startproc
 3926              		@ args = 0, pretend = 0, frame = 8
 3927              		@ frame_needed = 1, uses_anonymous_args = 0
 3928              		@ link register save eliminated.
 3929 0048 80B4     		push	{r7}
 3930              	.LCFI3:
 3931              		.cfi_def_cfa_offset 4
 3932 004a 83B0     		sub	sp, sp, #12
 3933              	.LCFI4:
 3934              		.cfi_def_cfa_offset 16
 3935 004c 00AF     		add	r7, sp, #0
 3936              		.cfi_offset 7, -4
 3937              	.LCFI5:
 3938              		.cfi_def_cfa_register 7
 3939 004e 7860     		str	r0, [r7, #4]
  85:../src/FreeRTOS/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:../src/FreeRTOS/list.c **** 	pxItem->pvContainer = NULL;
 3940              		.loc 1 86 0
 3941 0050 7B68     		ldr	r3, [r7, #4]
 3942 0052 4FF00002 		mov	r2, #0
 3943 0056 1A61     		str	r2, [r3, #16]
  87:../src/FreeRTOS/list.c **** }
 3944              		.loc 1 87 0
 3945 0058 07F10C07 		add	r7, r7, #12
 3946 005c BD46     		mov	sp, r7
 3947 005e 80BC     		pop	{r7}
 3948 0060 7047     		bx	lr
 3949              		.cfi_endproc
 3950              	.LFE30:
 3952 0062 00BF     		.align	2
 3953              		.global	vListInsertEnd
 3954              		.thumb
 3955              		.thumb_func
 3957              	vListInsertEnd:
 3958              	.LFB31:
  88:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  89:../src/FreeRTOS/list.c **** 
  90:../src/FreeRTOS/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:../src/FreeRTOS/list.c **** {
 3959              		.loc 1 91 0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 16
 3962              		@ frame_needed = 1, uses_anonymous_args = 0
 3963              		@ link register save eliminated.
 3964 0064 80B4     		push	{r7}
 3965              	.LCFI6:
 3966              		.cfi_def_cfa_offset 4
 3967 0066 85B0     		sub	sp, sp, #20
 3968              	.LCFI7:
 3969              		.cfi_def_cfa_offset 24
 3970 0068 00AF     		add	r7, sp, #0
 3971              		.cfi_offset 7, -4
 3972              	.LCFI8:
 3973              		.cfi_def_cfa_register 7
 3974 006a 7860     		str	r0, [r7, #4]
 3975 006c 3960     		str	r1, [r7, #0]
  92:../src/FreeRTOS/list.c **** volatile xListItem * pxIndex;
  93:../src/FreeRTOS/list.c **** 
  94:../src/FreeRTOS/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:../src/FreeRTOS/list.c **** 	makes the new list item the last item to be removed by a call to
  96:../src/FreeRTOS/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:../src/FreeRTOS/list.c **** 	the pxIndex member. */
  98:../src/FreeRTOS/list.c **** 	pxIndex = pxList->pxIndex;
 3976              		.loc 1 98 0
 3977 006e 7B68     		ldr	r3, [r7, #4]
 3978 0070 5B68     		ldr	r3, [r3, #4]
 3979 0072 FB60     		str	r3, [r7, #12]
  99:../src/FreeRTOS/list.c **** 
 100:../src/FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 3980              		.loc 1 100 0
 3981 0074 FB68     		ldr	r3, [r7, #12]
 3982 0076 5A68     		ldr	r2, [r3, #4]
 3983 0078 3B68     		ldr	r3, [r7, #0]
 3984 007a 5A60     		str	r2, [r3, #4]
 101:../src/FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 3985              		.loc 1 101 0
 3986 007c 7B68     		ldr	r3, [r7, #4]
 3987 007e 5A68     		ldr	r2, [r3, #4]
 3988 0080 3B68     		ldr	r3, [r7, #0]
 3989 0082 9A60     		str	r2, [r3, #8]
 102:../src/FreeRTOS/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 3990              		.loc 1 102 0
 3991 0084 FB68     		ldr	r3, [r7, #12]
 3992 0086 5B68     		ldr	r3, [r3, #4]
 3993 0088 3A68     		ldr	r2, [r7, #0]
 3994 008a 9A60     		str	r2, [r3, #8]
 103:../src/FreeRTOS/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 3995              		.loc 1 103 0
 3996 008c 3A68     		ldr	r2, [r7, #0]
 3997 008e FB68     		ldr	r3, [r7, #12]
 3998 0090 5A60     		str	r2, [r3, #4]
 104:../src/FreeRTOS/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 3999              		.loc 1 104 0
 4000 0092 3A68     		ldr	r2, [r7, #0]
 4001 0094 7B68     		ldr	r3, [r7, #4]
 4002 0096 5A60     		str	r2, [r3, #4]
 105:../src/FreeRTOS/list.c **** 
 106:../src/FreeRTOS/list.c **** 	/* Remember which list the item is in. */
 107:../src/FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 4003              		.loc 1 107 0
 4004 0098 3B68     		ldr	r3, [r7, #0]
 4005 009a 7A68     		ldr	r2, [r7, #4]
 4006 009c 1A61     		str	r2, [r3, #16]
 108:../src/FreeRTOS/list.c **** 
 109:../src/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 4007              		.loc 1 109 0
 4008 009e 7B68     		ldr	r3, [r7, #4]
 4009 00a0 1B68     		ldr	r3, [r3, #0]
 4010 00a2 03F10102 		add	r2, r3, #1
 4011 00a6 7B68     		ldr	r3, [r7, #4]
 4012 00a8 1A60     		str	r2, [r3, #0]
 110:../src/FreeRTOS/list.c **** }
 4013              		.loc 1 110 0
 4014 00aa 07F11407 		add	r7, r7, #20
 4015 00ae BD46     		mov	sp, r7
 4016 00b0 80BC     		pop	{r7}
 4017 00b2 7047     		bx	lr
 4018              		.cfi_endproc
 4019              	.LFE31:
 4021              		.align	2
 4022              		.global	vListInsert
 4023              		.thumb
 4024              		.thumb_func
 4026              	vListInsert:
 4027              	.LFB32:
 111:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 112:../src/FreeRTOS/list.c **** 
 113:../src/FreeRTOS/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:../src/FreeRTOS/list.c **** {
 4028              		.loc 1 114 0
 4029              		.cfi_startproc
 4030              		@ args = 0, pretend = 0, frame = 16
 4031              		@ frame_needed = 1, uses_anonymous_args = 0
 4032              		@ link register save eliminated.
 4033 00b4 80B4     		push	{r7}
 4034              	.LCFI9:
 4035              		.cfi_def_cfa_offset 4
 4036 00b6 85B0     		sub	sp, sp, #20
 4037              	.LCFI10:
 4038              		.cfi_def_cfa_offset 24
 4039 00b8 00AF     		add	r7, sp, #0
 4040              		.cfi_offset 7, -4
 4041              	.LCFI11:
 4042              		.cfi_def_cfa_register 7
 4043 00ba 7860     		str	r0, [r7, #4]
 4044 00bc 3960     		str	r1, [r7, #0]
 115:../src/FreeRTOS/list.c **** volatile xListItem *pxIterator;
 116:../src/FreeRTOS/list.c **** portTickType xValueOfInsertion;
 117:../src/FreeRTOS/list.c **** 
 118:../src/FreeRTOS/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:../src/FreeRTOS/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 4045              		.loc 1 119 0
 4046 00be 3B68     		ldr	r3, [r7, #0]
 4047 00c0 1B68     		ldr	r3, [r3, #0]
 4048 00c2 BB60     		str	r3, [r7, #8]
 120:../src/FreeRTOS/list.c **** 
 121:../src/FreeRTOS/list.c **** 	/* If the list already contains a list item with the same item value then
 122:../src/FreeRTOS/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:../src/FreeRTOS/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:../src/FreeRTOS/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:../src/FreeRTOS/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:../src/FreeRTOS/list.c **** 	to guard against this by checking the value first and modifying the
 127:../src/FreeRTOS/list.c **** 	algorithm slightly if necessary. */
 128:../src/FreeRTOS/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 4049              		.loc 1 128 0
 4050 00c4 BB68     		ldr	r3, [r7, #8]
 4051 00c6 B3F1FF3F 		cmp	r3, #-1
 4052 00ca 03D1     		bne	.L5
 129:../src/FreeRTOS/list.c **** 	{
 130:../src/FreeRTOS/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 4053              		.loc 1 130 0
 4054 00cc 7B68     		ldr	r3, [r7, #4]
 4055 00ce 1B69     		ldr	r3, [r3, #16]
 4056 00d0 FB60     		str	r3, [r7, #12]
 4057 00d2 0DE0     		b	.L6
 4058              	.L5:
 131:../src/FreeRTOS/list.c **** 	}
 132:../src/FreeRTOS/list.c **** 	else
 133:../src/FreeRTOS/list.c **** 	{
 134:../src/FreeRTOS/list.c **** 		/* *** NOTE ***********************************************************
 135:../src/FreeRTOS/list.c **** 		If you find your application is crashing here then likely causes are:
 136:../src/FreeRTOS/list.c **** 			1) Stack overflow -
 137:../src/FreeRTOS/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:../src/FreeRTOS/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:../src/FreeRTOS/list.c **** 			   parts where numerically high priority values denote low actual
 140:../src/FreeRTOS/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:../src/FreeRTOS/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:../src/FreeRTOS/list.c **** 			3) Calling an API function from within a critical section or when
 143:../src/FreeRTOS/list.c **** 			   the scheduler is suspended.
 144:../src/FreeRTOS/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:../src/FreeRTOS/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:../src/FreeRTOS/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:../src/FreeRTOS/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:../src/FreeRTOS/list.c **** 		**********************************************************************/
 149:../src/FreeRTOS/list.c **** 		
 150:../src/FreeRTOS/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 4059              		.loc 1 150 0
 4060 00d4 7B68     		ldr	r3, [r7, #4]
 4061 00d6 03F10803 		add	r3, r3, #8
 4062 00da FB60     		str	r3, [r7, #12]
 4063 00dc 02E0     		b	.L7
 4064              	.L8:
 4065              		.loc 1 150 0 is_stmt 0 discriminator 2
 4066 00de FB68     		ldr	r3, [r7, #12]
 4067 00e0 5B68     		ldr	r3, [r3, #4]
 4068 00e2 FB60     		str	r3, [r7, #12]
 4069              	.L7:
 4070              		.loc 1 150 0 discriminator 1
 4071 00e4 FB68     		ldr	r3, [r7, #12]
 4072 00e6 5B68     		ldr	r3, [r3, #4]
 4073 00e8 1A68     		ldr	r2, [r3, #0]
 4074 00ea BB68     		ldr	r3, [r7, #8]
 4075 00ec 9A42     		cmp	r2, r3
 4076 00ee F6D9     		bls	.L8
 4077              	.L6:
 151:../src/FreeRTOS/list.c **** 		{
 152:../src/FreeRTOS/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:../src/FreeRTOS/list.c **** 			wanted insertion position. */
 154:../src/FreeRTOS/list.c **** 		}
 155:../src/FreeRTOS/list.c **** 	}
 156:../src/FreeRTOS/list.c **** 
 157:../src/FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 4078              		.loc 1 157 0 is_stmt 1
 4079 00f0 FB68     		ldr	r3, [r7, #12]
 4080 00f2 5A68     		ldr	r2, [r3, #4]
 4081 00f4 3B68     		ldr	r3, [r7, #0]
 4082 00f6 5A60     		str	r2, [r3, #4]
 158:../src/FreeRTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 4083              		.loc 1 158 0
 4084 00f8 3B68     		ldr	r3, [r7, #0]
 4085 00fa 5B68     		ldr	r3, [r3, #4]
 4086 00fc 3A68     		ldr	r2, [r7, #0]
 4087 00fe 9A60     		str	r2, [r3, #8]
 159:../src/FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 4088              		.loc 1 159 0
 4089 0100 3B68     		ldr	r3, [r7, #0]
 4090 0102 FA68     		ldr	r2, [r7, #12]
 4091 0104 9A60     		str	r2, [r3, #8]
 160:../src/FreeRTOS/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 4092              		.loc 1 160 0
 4093 0106 3A68     		ldr	r2, [r7, #0]
 4094 0108 FB68     		ldr	r3, [r7, #12]
 4095 010a 5A60     		str	r2, [r3, #4]
 161:../src/FreeRTOS/list.c **** 
 162:../src/FreeRTOS/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:../src/FreeRTOS/list.c **** 	item later. */
 164:../src/FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 4096              		.loc 1 164 0
 4097 010c 3B68     		ldr	r3, [r7, #0]
 4098 010e 7A68     		ldr	r2, [r7, #4]
 4099 0110 1A61     		str	r2, [r3, #16]
 165:../src/FreeRTOS/list.c **** 
 166:../src/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 4100              		.loc 1 166 0
 4101 0112 7B68     		ldr	r3, [r7, #4]
 4102 0114 1B68     		ldr	r3, [r3, #0]
 4103 0116 03F10102 		add	r2, r3, #1
 4104 011a 7B68     		ldr	r3, [r7, #4]
 4105 011c 1A60     		str	r2, [r3, #0]
 167:../src/FreeRTOS/list.c **** }
 4106              		.loc 1 167 0
 4107 011e 07F11407 		add	r7, r7, #20
 4108 0122 BD46     		mov	sp, r7
 4109 0124 80BC     		pop	{r7}
 4110 0126 7047     		bx	lr
 4111              		.cfi_endproc
 4112              	.LFE32:
 4114              		.align	2
 4115              		.global	vListRemove
 4116              		.thumb
 4117              		.thumb_func
 4119              	vListRemove:
 4120              	.LFB33:
 168:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 169:../src/FreeRTOS/list.c **** 
 170:../src/FreeRTOS/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:../src/FreeRTOS/list.c **** {
 4121              		.loc 1 171 0
 4122              		.cfi_startproc
 4123              		@ args = 0, pretend = 0, frame = 16
 4124              		@ frame_needed = 1, uses_anonymous_args = 0
 4125              		@ link register save eliminated.
 4126 0128 80B4     		push	{r7}
 4127              	.LCFI12:
 4128              		.cfi_def_cfa_offset 4
 4129 012a 85B0     		sub	sp, sp, #20
 4130              	.LCFI13:
 4131              		.cfi_def_cfa_offset 24
 4132 012c 00AF     		add	r7, sp, #0
 4133              		.cfi_offset 7, -4
 4134              	.LCFI14:
 4135              		.cfi_def_cfa_register 7
 4136 012e 7860     		str	r0, [r7, #4]
 172:../src/FreeRTOS/list.c **** xList * pxList;
 173:../src/FreeRTOS/list.c **** 
 174:../src/FreeRTOS/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 4137              		.loc 1 174 0
 4138 0130 7B68     		ldr	r3, [r7, #4]
 4139 0132 5B68     		ldr	r3, [r3, #4]
 4140 0134 7A68     		ldr	r2, [r7, #4]
 4141 0136 9268     		ldr	r2, [r2, #8]
 4142 0138 9A60     		str	r2, [r3, #8]
 175:../src/FreeRTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 4143              		.loc 1 175 0
 4144 013a 7B68     		ldr	r3, [r7, #4]
 4145 013c 9B68     		ldr	r3, [r3, #8]
 4146 013e 7A68     		ldr	r2, [r7, #4]
 4147 0140 5268     		ldr	r2, [r2, #4]
 4148 0142 5A60     		str	r2, [r3, #4]
 176:../src/FreeRTOS/list.c **** 	
 177:../src/FreeRTOS/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:../src/FreeRTOS/list.c **** 	item. */
 179:../src/FreeRTOS/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 4149              		.loc 1 179 0
 4150 0144 7B68     		ldr	r3, [r7, #4]
 4151 0146 1B69     		ldr	r3, [r3, #16]
 4152 0148 FB60     		str	r3, [r7, #12]
 180:../src/FreeRTOS/list.c **** 
 181:../src/FreeRTOS/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:../src/FreeRTOS/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 4153              		.loc 1 182 0
 4154 014a FB68     		ldr	r3, [r7, #12]
 4155 014c 5A68     		ldr	r2, [r3, #4]
 4156 014e 7B68     		ldr	r3, [r7, #4]
 4157 0150 9A42     		cmp	r2, r3
 4158 0152 03D1     		bne	.L10
 183:../src/FreeRTOS/list.c **** 	{
 184:../src/FreeRTOS/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 4159              		.loc 1 184 0
 4160 0154 7B68     		ldr	r3, [r7, #4]
 4161 0156 9A68     		ldr	r2, [r3, #8]
 4162 0158 FB68     		ldr	r3, [r7, #12]
 4163 015a 5A60     		str	r2, [r3, #4]
 4164              	.L10:
 185:../src/FreeRTOS/list.c **** 	}
 186:../src/FreeRTOS/list.c **** 
 187:../src/FreeRTOS/list.c **** 	pxItemToRemove->pvContainer = NULL;
 4165              		.loc 1 187 0
 4166 015c 7B68     		ldr	r3, [r7, #4]
 4167 015e 4FF00002 		mov	r2, #0
 4168 0162 1A61     		str	r2, [r3, #16]
 188:../src/FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 4169              		.loc 1 188 0
 4170 0164 FB68     		ldr	r3, [r7, #12]
 4171 0166 1B68     		ldr	r3, [r3, #0]
 4172 0168 03F1FF32 		add	r2, r3, #-1
 4173 016c FB68     		ldr	r3, [r7, #12]
 4174 016e 1A60     		str	r2, [r3, #0]
 189:../src/FreeRTOS/list.c **** }
 4175              		.loc 1 189 0
 4176 0170 07F11407 		add	r7, r7, #20
 4177 0174 BD46     		mov	sp, r7
 4178 0176 80BC     		pop	{r7}
 4179 0178 7047     		bx	lr
 4180              		.cfi_endproc
 4181              	.LFE33:
 4183              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/cc3LH1fi.s:3860   .text:00000000 $t
     /tmp/cc3LH1fi.s:3865   .text:00000000 vListInitialise
     /tmp/cc3LH1fi.s:3922   .text:00000048 vListInitialiseItem
     /tmp/cc3LH1fi.s:3957   .text:00000064 vListInsertEnd
     /tmp/cc3LH1fi.s:4026   .text:000000b4 vListInsert
     /tmp/cc3LH1fi.s:4119   .text:00000128 vListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
