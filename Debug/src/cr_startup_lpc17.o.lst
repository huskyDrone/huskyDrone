   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"cr_startup_lpc17.c"
  23              	.Ltext0:
  24              		.file 1 "../src/cr_startup_lpc17.c"
 995              		.align	2
 998              	g_pfnVectors:
 999 0000 00000000 		.word	_vStackTop
 1000 0004 00000000 		.word	ResetISR
 1001 0008 00000000 		.word	NMI_Handler
 1002 000c 00000000 		.word	HardFault_Handler
 1003 0010 00000000 		.word	MemManage_Handler
 1004 0014 00000000 		.word	BusFault_Handler
 1005 0018 00000000 		.word	UsageFault_Handler
 1006 001c 00000000 		.word	0
 1007 0020 00000000 		.word	0
 1008 0024 00000000 		.word	0
 1009 0028 00000000 		.word	0
 1010 002c 00000000 		.word	vPortSVCHandler
 1011 0030 00000000 		.word	DebugMon_Handler
 1012 0034 00000000 		.word	0
 1013 0038 00000000 		.word	xPortPendSVHandler
 1014 003c 00000000 		.word	xPortSysTickHandler
 1015 0040 00000000 		.word	WDT_IRQHandler
 1016 0044 00000000 		.word	TIMER0_IRQHandler
 1017 0048 00000000 		.word	TIMER1_IRQHandler
 1018 004c 00000000 		.word	TIMER2_IRQHandler
 1019 0050 00000000 		.word	TIMER3_IRQHandler
 1020 0054 00000000 		.word	UART0_IRQHandler
 1021 0058 00000000 		.word	UART1_IRQHandler
 1022 005c 00000000 		.word	UART2_IRQHandler
 1023 0060 00000000 		.word	UART3_IRQHandler
 1024 0064 00000000 		.word	PWM1_IRQHandler
 1025 0068 00000000 		.word	I2C0_IRQHandler
 1026 006c 00000000 		.word	I2C1_IRQHandler
 1027 0070 00000000 		.word	I2C2_IRQHandler
 1028 0074 00000000 		.word	SPI_IRQHandler
 1029 0078 00000000 		.word	SSP0_IRQHandler
 1030 007c 00000000 		.word	SSP1_IRQHandler
 1031 0080 00000000 		.word	PLL0_IRQHandler
 1032 0084 00000000 		.word	RTC_IRQHandler
 1033 0088 00000000 		.word	EINT0_IRQHandler
 1034 008c 00000000 		.word	EINT1_IRQHandler
 1035 0090 00000000 		.word	EINT2_IRQHandler
 1036 0094 00000000 		.word	EINT3_IRQHandler
 1037 0098 00000000 		.word	ADC_IRQHandler
 1038 009c 00000000 		.word	BOD_IRQHandler
 1039 00a0 00000000 		.word	USB_IRQHandler
 1040 00a4 00000000 		.word	CAN_IRQHandler
 1041 00a8 00000000 		.word	DMA_IRQHandler
 1042 00ac 00000000 		.word	I2S_IRQHandler
 1043 00b0 00000000 		.word	RIT_IRQHandler
 1044 00b4 00000000 		.word	MCPWM_IRQHandler
 1045 00b8 00000000 		.word	QEI_IRQHandler
 1046 00bc 00000000 		.word	PLL1_IRQHandler
 1047 00c0 00000000 		.word	USBActivity_IRQHandler
 1048 00c4 00000000 		.word	CANActivity_IRQHandler
 1049              		.text
 1050              		.align	2
 1051              		.global	ResetISR
 1052              		.thumb
 1053              		.thumb_func
 1055              	ResetISR:
 1056              	.LFB0:
   1:../src/cr_startup_lpc17.c **** //*****************************************************************************
   2:../src/cr_startup_lpc17.c **** //   +--+       
   3:../src/cr_startup_lpc17.c **** //   | ++----+   
   4:../src/cr_startup_lpc17.c **** //   +-++    |  
   5:../src/cr_startup_lpc17.c **** //     |     |  
   6:../src/cr_startup_lpc17.c **** //   +-+--+  |   
   7:../src/cr_startup_lpc17.c **** //   | +--+--+  
   8:../src/cr_startup_lpc17.c **** //   +----+    Copyright (c) 2009-10 Code Red Technologies Ltd.
   9:../src/cr_startup_lpc17.c **** //
  10:../src/cr_startup_lpc17.c **** // Microcontroller Startup code for use with Red Suite
  11:../src/cr_startup_lpc17.c **** //
  12:../src/cr_startup_lpc17.c **** // Software License Agreement
  13:../src/cr_startup_lpc17.c **** // 
  14:../src/cr_startup_lpc17.c **** // The software is owned by Code Red Technologies and/or its suppliers, and is 
  15:../src/cr_startup_lpc17.c **** // protected under applicable copyright laws.  All rights are reserved.  Any 
  16:../src/cr_startup_lpc17.c **** // use in violation of the foregoing restrictions may subject the user to criminal 
  17:../src/cr_startup_lpc17.c **** // sanctions under applicable laws, as well as to civil liability for the breach 
  18:../src/cr_startup_lpc17.c **** // of the terms and conditions of this license.
  19:../src/cr_startup_lpc17.c **** // 
  20:../src/cr_startup_lpc17.c **** // THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  21:../src/cr_startup_lpc17.c **** // OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  22:../src/cr_startup_lpc17.c **** // MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  23:../src/cr_startup_lpc17.c **** // USE OF THIS SOFTWARE FOR COMMERCIAL DEVELOPMENT AND/OR EDUCATION IS SUBJECT
  24:../src/cr_startup_lpc17.c **** // TO A CURRENT END USER LICENSE AGREEMENT (COMMERCIAL OR EDUCATIONAL) WITH
  25:../src/cr_startup_lpc17.c **** // CODE RED TECHNOLOGIES LTD. 
  26:../src/cr_startup_lpc17.c **** //
  27:../src/cr_startup_lpc17.c **** //*****************************************************************************
  28:../src/cr_startup_lpc17.c **** #if defined (__cplusplus)
  29:../src/cr_startup_lpc17.c **** #ifdef __REDLIB__
  30:../src/cr_startup_lpc17.c **** #error Redlib does not support C++
  31:../src/cr_startup_lpc17.c **** #else
  32:../src/cr_startup_lpc17.c **** //*****************************************************************************
  33:../src/cr_startup_lpc17.c **** //
  34:../src/cr_startup_lpc17.c **** // The entry point for the C++ library startup
  35:../src/cr_startup_lpc17.c **** //
  36:../src/cr_startup_lpc17.c **** //*****************************************************************************
  37:../src/cr_startup_lpc17.c **** extern "C" {
  38:../src/cr_startup_lpc17.c **** 	extern void __libc_init_array(void);
  39:../src/cr_startup_lpc17.c **** }
  40:../src/cr_startup_lpc17.c **** #endif
  41:../src/cr_startup_lpc17.c **** #endif
  42:../src/cr_startup_lpc17.c **** 
  43:../src/cr_startup_lpc17.c **** #define WEAK __attribute__ ((weak))
  44:../src/cr_startup_lpc17.c **** #define ALIAS(f) __attribute__ ((weak, alias (#f)))
  45:../src/cr_startup_lpc17.c **** 
  46:../src/cr_startup_lpc17.c **** // Code Red - if CMSIS is being used, then SystemInit() routine
  47:../src/cr_startup_lpc17.c **** // will be called by startup code rather than in application's main()
  48:../src/cr_startup_lpc17.c **** #if defined (__USE_CMSIS)
  49:../src/cr_startup_lpc17.c **** #include "system_LPC17xx.h"
  50:../src/cr_startup_lpc17.c **** #endif
  51:../src/cr_startup_lpc17.c **** 
  52:../src/cr_startup_lpc17.c **** //*****************************************************************************
  53:../src/cr_startup_lpc17.c **** #if defined (__cplusplus)
  54:../src/cr_startup_lpc17.c **** extern "C" {
  55:../src/cr_startup_lpc17.c **** #endif
  56:../src/cr_startup_lpc17.c **** 
  57:../src/cr_startup_lpc17.c **** //*****************************************************************************
  58:../src/cr_startup_lpc17.c **** //
  59:../src/cr_startup_lpc17.c **** // Forward declaration of the default handlers. These are aliased.
  60:../src/cr_startup_lpc17.c **** // When the application defines a handler (with the same name), this will 
  61:../src/cr_startup_lpc17.c **** // automatically take precedence over these weak definitions
  62:../src/cr_startup_lpc17.c **** //
  63:../src/cr_startup_lpc17.c **** //*****************************************************************************
  64:../src/cr_startup_lpc17.c ****      void ResetISR(void);
  65:../src/cr_startup_lpc17.c **** WEAK void NMI_Handler(void);
  66:../src/cr_startup_lpc17.c **** WEAK void HardFault_Handler(void);
  67:../src/cr_startup_lpc17.c **** WEAK void MemManage_Handler(void);
  68:../src/cr_startup_lpc17.c **** WEAK void BusFault_Handler(void);
  69:../src/cr_startup_lpc17.c **** WEAK void UsageFault_Handler(void);
  70:../src/cr_startup_lpc17.c **** WEAK void SVCall_Handler(void);
  71:../src/cr_startup_lpc17.c **** WEAK void DebugMon_Handler(void);
  72:../src/cr_startup_lpc17.c **** WEAK void PendSV_Handler(void);
  73:../src/cr_startup_lpc17.c **** WEAK void SysTick_Handler(void);
  74:../src/cr_startup_lpc17.c **** WEAK void IntDefaultHandler(void);
  75:../src/cr_startup_lpc17.c **** 
  76:../src/cr_startup_lpc17.c **** //*****************************************************************************
  77:../src/cr_startup_lpc17.c **** //
  78:../src/cr_startup_lpc17.c **** // Forward declaration of the specific IRQ handlers. These are aliased
  79:../src/cr_startup_lpc17.c **** // to the IntDefaultHandler, which is a 'forever' loop. When the application
  80:../src/cr_startup_lpc17.c **** // defines a handler (with the same name), this will automatically take 
  81:../src/cr_startup_lpc17.c **** // precedence over these weak definitions
  82:../src/cr_startup_lpc17.c **** //
  83:../src/cr_startup_lpc17.c **** //*****************************************************************************
  84:../src/cr_startup_lpc17.c **** void WDT_IRQHandler(void) ALIAS(IntDefaultHandler);
  85:../src/cr_startup_lpc17.c **** void TIMER0_IRQHandler(void) ALIAS(IntDefaultHandler);
  86:../src/cr_startup_lpc17.c **** void TIMER1_IRQHandler(void) ALIAS(IntDefaultHandler);
  87:../src/cr_startup_lpc17.c **** void TIMER2_IRQHandler(void) ALIAS(IntDefaultHandler);
  88:../src/cr_startup_lpc17.c **** void TIMER3_IRQHandler(void) ALIAS(IntDefaultHandler);
  89:../src/cr_startup_lpc17.c **** void UART0_IRQHandler(void) ALIAS(IntDefaultHandler);
  90:../src/cr_startup_lpc17.c **** void UART1_IRQHandler(void) ALIAS(IntDefaultHandler);
  91:../src/cr_startup_lpc17.c **** void UART2_IRQHandler(void) ALIAS(IntDefaultHandler);
  92:../src/cr_startup_lpc17.c **** void UART3_IRQHandler(void) ALIAS(IntDefaultHandler);
  93:../src/cr_startup_lpc17.c **** void PWM1_IRQHandler(void) ALIAS(IntDefaultHandler);
  94:../src/cr_startup_lpc17.c **** void I2C0_IRQHandler(void) ALIAS(IntDefaultHandler);
  95:../src/cr_startup_lpc17.c **** void I2C1_IRQHandler(void) ALIAS(IntDefaultHandler);
  96:../src/cr_startup_lpc17.c **** void I2C2_IRQHandler(void) ALIAS(IntDefaultHandler);
  97:../src/cr_startup_lpc17.c **** void SPI_IRQHandler(void) ALIAS(IntDefaultHandler);
  98:../src/cr_startup_lpc17.c **** void SSP0_IRQHandler(void) ALIAS(IntDefaultHandler);
  99:../src/cr_startup_lpc17.c **** void SSP1_IRQHandler(void) ALIAS(IntDefaultHandler);
 100:../src/cr_startup_lpc17.c **** void PLL0_IRQHandler(void) ALIAS(IntDefaultHandler);
 101:../src/cr_startup_lpc17.c **** void RTC_IRQHandler(void) ALIAS(IntDefaultHandler);
 102:../src/cr_startup_lpc17.c **** void EINT0_IRQHandler(void) ALIAS(IntDefaultHandler);
 103:../src/cr_startup_lpc17.c **** void EINT1_IRQHandler(void) ALIAS(IntDefaultHandler);
 104:../src/cr_startup_lpc17.c **** void EINT2_IRQHandler(void) ALIAS(IntDefaultHandler);
 105:../src/cr_startup_lpc17.c **** void EINT3_IRQHandler(void) ALIAS(IntDefaultHandler);
 106:../src/cr_startup_lpc17.c **** void ADC_IRQHandler(void) ALIAS(IntDefaultHandler);
 107:../src/cr_startup_lpc17.c **** void BOD_IRQHandler(void) ALIAS(IntDefaultHandler);
 108:../src/cr_startup_lpc17.c **** void USB_IRQHandler(void) ALIAS(IntDefaultHandler);
 109:../src/cr_startup_lpc17.c **** void CAN_IRQHandler(void) ALIAS(IntDefaultHandler);
 110:../src/cr_startup_lpc17.c **** void DMA_IRQHandler(void) ALIAS(IntDefaultHandler);
 111:../src/cr_startup_lpc17.c **** void I2S_IRQHandler(void) ALIAS(IntDefaultHandler);
 112:../src/cr_startup_lpc17.c **** void ENET_IRQHandler(void) ALIAS(IntDefaultHandler);
 113:../src/cr_startup_lpc17.c **** void RIT_IRQHandler(void) ALIAS(IntDefaultHandler);
 114:../src/cr_startup_lpc17.c **** void MCPWM_IRQHandler(void) ALIAS(IntDefaultHandler);
 115:../src/cr_startup_lpc17.c **** void QEI_IRQHandler(void) ALIAS(IntDefaultHandler);
 116:../src/cr_startup_lpc17.c **** void PLL1_IRQHandler(void) ALIAS(IntDefaultHandler);
 117:../src/cr_startup_lpc17.c **** void USBActivity_IRQHandler(void) ALIAS(IntDefaultHandler);
 118:../src/cr_startup_lpc17.c **** void CANActivity_IRQHandler(void) ALIAS(IntDefaultHandler);
 119:../src/cr_startup_lpc17.c **** 
 120:../src/cr_startup_lpc17.c **** extern void xPortSysTickHandler(void);
 121:../src/cr_startup_lpc17.c **** extern void xPortPendSVHandler(void);
 122:../src/cr_startup_lpc17.c **** extern void vPortSVCHandler( void );
 123:../src/cr_startup_lpc17.c **** //extern void vEMAC_ISR( void );
 124:../src/cr_startup_lpc17.c **** 
 125:../src/cr_startup_lpc17.c **** //*****************************************************************************
 126:../src/cr_startup_lpc17.c **** //
 127:../src/cr_startup_lpc17.c **** // The entry point for the application.
 128:../src/cr_startup_lpc17.c **** // __main() is the entry point for Redlib based applications
 129:../src/cr_startup_lpc17.c **** // main() is the entry point for Newlib based applications
 130:../src/cr_startup_lpc17.c **** //
 131:../src/cr_startup_lpc17.c **** //*****************************************************************************
 132:../src/cr_startup_lpc17.c **** #if defined (__REDLIB__)
 133:../src/cr_startup_lpc17.c **** extern void __main(void);
 134:../src/cr_startup_lpc17.c **** #endif
 135:../src/cr_startup_lpc17.c **** extern int main(void);
 136:../src/cr_startup_lpc17.c **** //*****************************************************************************
 137:../src/cr_startup_lpc17.c **** //
 138:../src/cr_startup_lpc17.c **** // External declaration for the pointer to the stack top from the Linker Script
 139:../src/cr_startup_lpc17.c **** //
 140:../src/cr_startup_lpc17.c **** //*****************************************************************************
 141:../src/cr_startup_lpc17.c **** extern void _vStackTop(void);
 142:../src/cr_startup_lpc17.c **** 
 143:../src/cr_startup_lpc17.c **** //*****************************************************************************
 144:../src/cr_startup_lpc17.c **** #if defined (__cplusplus)
 145:../src/cr_startup_lpc17.c **** } // extern "C"
 146:../src/cr_startup_lpc17.c **** #endif
 147:../src/cr_startup_lpc17.c **** //*****************************************************************************
 148:../src/cr_startup_lpc17.c **** //
 149:../src/cr_startup_lpc17.c **** // The vector table.
 150:../src/cr_startup_lpc17.c **** // This relies on the linker script to place at correct location in memory.
 151:../src/cr_startup_lpc17.c **** //
 152:../src/cr_startup_lpc17.c **** //*****************************************************************************
 153:../src/cr_startup_lpc17.c **** extern void (* const g_pfnVectors[])(void);
 154:../src/cr_startup_lpc17.c **** __attribute__ ((section(".isr_vector")))
 155:../src/cr_startup_lpc17.c **** void (* const g_pfnVectors[])(void) =
 156:../src/cr_startup_lpc17.c **** {
 157:../src/cr_startup_lpc17.c **** 	// Core Level - CM3
 158:../src/cr_startup_lpc17.c **** 	(void *)&_vStackTop,					// The initial stack pointer
 159:../src/cr_startup_lpc17.c **** 	ResetISR,								// The reset handler
 160:../src/cr_startup_lpc17.c **** 	NMI_Handler,							// The NMI handler
 161:../src/cr_startup_lpc17.c **** 	HardFault_Handler,						// The hard fault handler
 162:../src/cr_startup_lpc17.c **** 	MemManage_Handler,						// The MPU fault handler
 163:../src/cr_startup_lpc17.c **** 	BusFault_Handler,						// The bus fault handler
 164:../src/cr_startup_lpc17.c **** 	UsageFault_Handler,						// The usage fault handler
 165:../src/cr_startup_lpc17.c **** 	0,										// Reserved
 166:../src/cr_startup_lpc17.c **** 	0,										// Reserved
 167:../src/cr_startup_lpc17.c **** 	0,										// Reserved
 168:../src/cr_startup_lpc17.c **** 	0,										// Reserved
 169:../src/cr_startup_lpc17.c **** 	vPortSVCHandler,                        // SVCall handler
 170:../src/cr_startup_lpc17.c **** 	DebugMon_Handler,						// Debug monitor handler
 171:../src/cr_startup_lpc17.c **** 	0,										// Reserved
 172:../src/cr_startup_lpc17.c **** 	xPortPendSVHandler,                     // The PendSV handler
 173:../src/cr_startup_lpc17.c **** 	xPortSysTickHandler,                    // The SysTick handler
 174:../src/cr_startup_lpc17.c **** 
 175:../src/cr_startup_lpc17.c **** 	// Chip Level - LPC17
 176:../src/cr_startup_lpc17.c **** 	WDT_IRQHandler,							// 16, 0x40 - WDT
 177:../src/cr_startup_lpc17.c **** 	TIMER0_IRQHandler,						// 17, 0x44 - TIMER0
 178:../src/cr_startup_lpc17.c **** 	TIMER1_IRQHandler,						// 18, 0x48 - TIMER1
 179:../src/cr_startup_lpc17.c **** 	TIMER2_IRQHandler,						// 19, 0x4c - TIMER2
 180:../src/cr_startup_lpc17.c **** 	TIMER3_IRQHandler,						// 20, 0x50 - TIMER3
 181:../src/cr_startup_lpc17.c **** 	UART0_IRQHandler,						// 21, 0x54 - UART0
 182:../src/cr_startup_lpc17.c **** 	UART1_IRQHandler,						// 22, 0x58 - UART1
 183:../src/cr_startup_lpc17.c **** 	UART2_IRQHandler,						// 23, 0x5c - UART2
 184:../src/cr_startup_lpc17.c **** 	UART3_IRQHandler,						// 24, 0x60 - UART3
 185:../src/cr_startup_lpc17.c **** 	PWM1_IRQHandler,						// 25, 0x64 - PWM1
 186:../src/cr_startup_lpc17.c **** 	I2C0_IRQHandler,						// 26, 0x68 - I2C0
 187:../src/cr_startup_lpc17.c **** 	I2C1_IRQHandler,						// 27, 0x6c - I2C1
 188:../src/cr_startup_lpc17.c **** 	I2C2_IRQHandler,						// 28, 0x70 - I2C2
 189:../src/cr_startup_lpc17.c **** 	SPI_IRQHandler,							// 29, 0x74 - SPI
 190:../src/cr_startup_lpc17.c **** 	SSP0_IRQHandler,						// 30, 0x78 - SSP0
 191:../src/cr_startup_lpc17.c **** 	SSP1_IRQHandler,						// 31, 0x7c - SSP1
 192:../src/cr_startup_lpc17.c **** 	PLL0_IRQHandler,						// 32, 0x80 - PLL0 (Main PLL)
 193:../src/cr_startup_lpc17.c **** 	RTC_IRQHandler,							// 33, 0x84 - RTC
 194:../src/cr_startup_lpc17.c **** 	EINT0_IRQHandler,						// 34, 0x88 - EINT0
 195:../src/cr_startup_lpc17.c **** 	EINT1_IRQHandler,						// 35, 0x8c - EINT1
 196:../src/cr_startup_lpc17.c **** 	EINT2_IRQHandler,						// 36, 0x90 - EINT2
 197:../src/cr_startup_lpc17.c **** 	EINT3_IRQHandler,						// 37, 0x94 - EINT3
 198:../src/cr_startup_lpc17.c **** 	ADC_IRQHandler,							// 38, 0x98 - ADC
 199:../src/cr_startup_lpc17.c **** 	BOD_IRQHandler,							// 39, 0x9c - BOD
 200:../src/cr_startup_lpc17.c **** 	USB_IRQHandler,							// 40, 0xA0 - USB
 201:../src/cr_startup_lpc17.c **** 	CAN_IRQHandler,							// 41, 0xa4 - CAN
 202:../src/cr_startup_lpc17.c **** 	DMA_IRQHandler,							// 42, 0xa8 - GP DMA
 203:../src/cr_startup_lpc17.c **** 	I2S_IRQHandler,							// 43, 0xac - I2S
 204:../src/cr_startup_lpc17.c **** //	    vEMAC_ISR,                      		// Ethernet.
 205:../src/cr_startup_lpc17.c **** 	RIT_IRQHandler,							// 45, 0xb4 - RITINT
 206:../src/cr_startup_lpc17.c **** 	MCPWM_IRQHandler,						// 46, 0xb8 - Motor Control PWM
 207:../src/cr_startup_lpc17.c **** 	QEI_IRQHandler,							// 47, 0xbc - Quadrature Encoder
 208:../src/cr_startup_lpc17.c **** 	PLL1_IRQHandler,						// 48, 0xc0 - PLL1 (USB PLL)
 209:../src/cr_startup_lpc17.c **** 	USBActivity_IRQHandler,					// 49, 0xc4 - USB Activity interrupt to wakeup
 210:../src/cr_startup_lpc17.c **** 	CANActivity_IRQHandler, 				// 50, 0xc8 - CAN Activity interrupt to wakeup
 211:../src/cr_startup_lpc17.c **** };
 212:../src/cr_startup_lpc17.c **** 
 213:../src/cr_startup_lpc17.c **** //*****************************************************************************
 214:../src/cr_startup_lpc17.c **** //
 215:../src/cr_startup_lpc17.c **** // The following are constructs created by the linker, indicating where the
 216:../src/cr_startup_lpc17.c **** // the "data" and "bss" segments reside in memory.  The initializers for the
 217:../src/cr_startup_lpc17.c **** // for the "data" segment resides immediately following the "text" segment.
 218:../src/cr_startup_lpc17.c **** //
 219:../src/cr_startup_lpc17.c **** //*****************************************************************************
 220:../src/cr_startup_lpc17.c **** extern unsigned long _etext;
 221:../src/cr_startup_lpc17.c **** extern unsigned long _data;
 222:../src/cr_startup_lpc17.c **** extern unsigned long _edata;
 223:../src/cr_startup_lpc17.c **** extern unsigned long _bss;
 224:../src/cr_startup_lpc17.c **** extern unsigned long _ebss;
 225:../src/cr_startup_lpc17.c **** 
 226:../src/cr_startup_lpc17.c **** //*****************************************************************************
 227:../src/cr_startup_lpc17.c **** // Reset entry point for your code.
 228:../src/cr_startup_lpc17.c **** // Sets up a simple runtime environment and initializes the C/C++
 229:../src/cr_startup_lpc17.c **** // library.
 230:../src/cr_startup_lpc17.c **** //
 231:../src/cr_startup_lpc17.c **** //*****************************************************************************
 232:../src/cr_startup_lpc17.c **** void
 233:../src/cr_startup_lpc17.c **** ResetISR(void) {
 1057              		.loc 1 233 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 8
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061 0000 80B5     		push	{r7, lr}
 1062              	.LCFI0:
 1063              		.cfi_def_cfa_offset 8
 1064 0002 82B0     		sub	sp, sp, #8
 1065              	.LCFI1:
 1066              		.cfi_def_cfa_offset 16
 1067 0004 00AF     		add	r7, sp, #0
 1068              		.cfi_offset 14, -4
 1069              		.cfi_offset 7, -8
 1070              	.LCFI2:
 1071              		.cfi_def_cfa_register 7
 234:../src/cr_startup_lpc17.c ****     unsigned long *pulSrc, *pulDest;
 235:../src/cr_startup_lpc17.c **** 
 236:../src/cr_startup_lpc17.c ****     //
 237:../src/cr_startup_lpc17.c ****     // Copy the data segment initializers from flash to SRAM.
 238:../src/cr_startup_lpc17.c ****     //
 239:../src/cr_startup_lpc17.c ****     pulSrc = &_etext;
 1072              		.loc 1 239 0
 1073 0006 104B     		ldr	r3, .L5
 1074 0008 7B60     		str	r3, [r7, #4]
 240:../src/cr_startup_lpc17.c ****     for(pulDest = &_data; pulDest < &_edata; )
 1075              		.loc 1 240 0
 1076 000a 104B     		ldr	r3, .L5+4
 1077 000c 3B60     		str	r3, [r7, #0]
 1078 000e 0BE0     		b	.L2
 1079              	.L3:
 241:../src/cr_startup_lpc17.c ****     {
 242:../src/cr_startup_lpc17.c ****         *pulDest++ = *pulSrc++;
 1080              		.loc 1 242 0
 1081 0010 7B68     		ldr	r3, [r7, #4]
 1082 0012 1A68     		ldr	r2, [r3, #0]
 1083 0014 3B68     		ldr	r3, [r7, #0]
 1084 0016 1A60     		str	r2, [r3, #0]
 1085 0018 3B68     		ldr	r3, [r7, #0]
 1086 001a 03F10403 		add	r3, r3, #4
 1087 001e 3B60     		str	r3, [r7, #0]
 1088 0020 7B68     		ldr	r3, [r7, #4]
 1089 0022 03F10403 		add	r3, r3, #4
 1090 0026 7B60     		str	r3, [r7, #4]
 1091              	.L2:
 240:../src/cr_startup_lpc17.c ****     for(pulDest = &_data; pulDest < &_edata; )
 1092              		.loc 1 240 0 discriminator 1
 1093 0028 3A68     		ldr	r2, [r7, #0]
 1094 002a 094B     		ldr	r3, .L5+8
 1095 002c 9A42     		cmp	r2, r3
 1096 002e EFD3     		bcc	.L3
 243:../src/cr_startup_lpc17.c ****     }
 244:../src/cr_startup_lpc17.c **** 
 245:../src/cr_startup_lpc17.c ****     //
 246:../src/cr_startup_lpc17.c ****     // Zero fill the bss segment.  This is done with inline assembly since this
 247:../src/cr_startup_lpc17.c ****     // will clear the value of pulDest if it is not kept in a register.
 248:../src/cr_startup_lpc17.c ****     //
 249:../src/cr_startup_lpc17.c ****     __asm("    ldr     r0, =_bss\n"
 1097              		.loc 1 249 0
 1098              	@ 249 "../src/cr_startup_lpc17.c" 1
 1099 0030 1648     		    ldr     r0, =_bss
 1100 0032 1749     	    ldr     r1, =_ebss
 1101 0034 4FF00002 	    mov     r2, #0
 1102              	    .thumb_func
 1103              	zero_loop:
 1104 0038 8842     	        cmp     r0, r1
 1105 003a B8BF     	        it      lt
 1106 003c 40F8042B 	        strlt   r2, [r0], #4
 1107 0040 FADB     	        blt     zero_loop
 1108              	@ 0 "" 2
 250:../src/cr_startup_lpc17.c ****           "    ldr     r1, =_ebss\n"
 251:../src/cr_startup_lpc17.c ****           "    mov     r2, #0\n"
 252:../src/cr_startup_lpc17.c ****           "    .thumb_func\n"
 253:../src/cr_startup_lpc17.c ****           "zero_loop:\n"
 254:../src/cr_startup_lpc17.c ****           "        cmp     r0, r1\n"
 255:../src/cr_startup_lpc17.c ****           "        it      lt\n"
 256:../src/cr_startup_lpc17.c ****           "        strlt   r2, [r0], #4\n"
 257:../src/cr_startup_lpc17.c ****           "        blt     zero_loop");
 258:../src/cr_startup_lpc17.c **** 
 259:../src/cr_startup_lpc17.c **** #ifdef __USE_CMSIS
 260:../src/cr_startup_lpc17.c **** 	SystemInit();
 261:../src/cr_startup_lpc17.c **** #endif
 262:../src/cr_startup_lpc17.c **** 
 263:../src/cr_startup_lpc17.c **** #if defined (__cplusplus)
 264:../src/cr_startup_lpc17.c **** 	//
 265:../src/cr_startup_lpc17.c **** 	// Call C++ library initialisation
 266:../src/cr_startup_lpc17.c **** 	//
 267:../src/cr_startup_lpc17.c **** 	__libc_init_array();
 268:../src/cr_startup_lpc17.c **** #endif
 269:../src/cr_startup_lpc17.c **** 
 270:../src/cr_startup_lpc17.c **** #if defined (__REDLIB__)
 271:../src/cr_startup_lpc17.c **** 	// Call the Redlib library, which in turn calls main()
 272:../src/cr_startup_lpc17.c **** 	__main() ;
 273:../src/cr_startup_lpc17.c **** #else
 274:../src/cr_startup_lpc17.c **** 	main();
 1109              		.loc 1 274 0
 1110              		.thumb
 1111 0042 FFF7FEFF 		bl	main
 1112              	.L4:
 275:../src/cr_startup_lpc17.c **** #endif
 276:../src/cr_startup_lpc17.c **** 
 277:../src/cr_startup_lpc17.c **** 	//
 278:../src/cr_startup_lpc17.c **** 	// main() shouldn't return, but if it does, we'll just enter an infinite loop 
 279:../src/cr_startup_lpc17.c **** 	//
 280:../src/cr_startup_lpc17.c **** 	while (1) {
 281:../src/cr_startup_lpc17.c **** 		;
 282:../src/cr_startup_lpc17.c **** 	}
 1113              		.loc 1 282 0 discriminator 1
 1114 0046 FEE7     		b	.L4
 1115              	.L6:
 1116              		.align	2
 1117              	.L5:
 1118 0048 00000000 		.word	_etext
 1119 004c 00000000 		.word	_data
 1120 0050 00000000 		.word	_edata
 1121              		.cfi_endproc
 1122              	.LFE0:
 1124              		.align	2
 1125              		.weak	NMI_Handler
 1126              		.thumb
 1127              		.thumb_func
 1129              	NMI_Handler:
 1130              	.LFB1:
 283:../src/cr_startup_lpc17.c **** }
 284:../src/cr_startup_lpc17.c **** 
 285:../src/cr_startup_lpc17.c **** //*****************************************************************************
 286:../src/cr_startup_lpc17.c **** //
 287:../src/cr_startup_lpc17.c **** // This is the code that gets called when the processor receives a NMI.  This
 288:../src/cr_startup_lpc17.c **** // simply enters an infinite loop, preserving the system state for examination
 289:../src/cr_startup_lpc17.c **** // by a debugger.
 290:../src/cr_startup_lpc17.c **** //
 291:../src/cr_startup_lpc17.c **** //*****************************************************************************
 292:../src/cr_startup_lpc17.c **** void NMI_Handler(void)
 293:../src/cr_startup_lpc17.c **** {
 1131              		.loc 1 293 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 0
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135              		@ link register save eliminated.
 1136 0054 80B4     		push	{r7}
 1137              	.LCFI3:
 1138              		.cfi_def_cfa_offset 4
 1139 0056 00AF     		add	r7, sp, #0
 1140              		.cfi_offset 7, -4
 1141              	.LCFI4:
 1142              		.cfi_def_cfa_register 7
 1143              	.L8:
 294:../src/cr_startup_lpc17.c ****     while(1)
 295:../src/cr_startup_lpc17.c ****     {
 296:../src/cr_startup_lpc17.c ****     }
 1144              		.loc 1 296 0 discriminator 1
 1145 0058 FEE7     		b	.L8
 1146              		.cfi_endproc
 1147              	.LFE1:
 1149 005a 00BF     		.align	2
 1150              		.weak	HardFault_Handler
 1151              		.thumb
 1152              		.thumb_func
 1154              	HardFault_Handler:
 1155              	.LFB2:
 297:../src/cr_startup_lpc17.c **** }
 298:../src/cr_startup_lpc17.c **** 
 299:../src/cr_startup_lpc17.c **** void HardFault_Handler(void)
 300:../src/cr_startup_lpc17.c **** {
 1156              		.loc 1 300 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161 005c 80B4     		push	{r7}
 1162              	.LCFI5:
 1163              		.cfi_def_cfa_offset 4
 1164 005e 00AF     		add	r7, sp, #0
 1165              		.cfi_offset 7, -4
 1166              	.LCFI6:
 1167              		.cfi_def_cfa_register 7
 1168              	.L10:
 301:../src/cr_startup_lpc17.c ****     while(1)
 302:../src/cr_startup_lpc17.c ****     {
 303:../src/cr_startup_lpc17.c ****     }
 1169              		.loc 1 303 0 discriminator 1
 1170 0060 FEE7     		b	.L10
 1171              		.cfi_endproc
 1172              	.LFE2:
 1174 0062 00BF     		.align	2
 1175              		.weak	MemManage_Handler
 1176              		.thumb
 1177              		.thumb_func
 1179              	MemManage_Handler:
 1180              	.LFB3:
 304:../src/cr_startup_lpc17.c **** }
 305:../src/cr_startup_lpc17.c **** 
 306:../src/cr_startup_lpc17.c **** void MemManage_Handler(void)
 307:../src/cr_startup_lpc17.c **** {
 1181              		.loc 1 307 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 1, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 1186 0064 80B4     		push	{r7}
 1187              	.LCFI7:
 1188              		.cfi_def_cfa_offset 4
 1189 0066 00AF     		add	r7, sp, #0
 1190              		.cfi_offset 7, -4
 1191              	.LCFI8:
 1192              		.cfi_def_cfa_register 7
 1193              	.L12:
 308:../src/cr_startup_lpc17.c ****     while(1)
 309:../src/cr_startup_lpc17.c ****     {
 310:../src/cr_startup_lpc17.c ****     }
 1194              		.loc 1 310 0 discriminator 1
 1195 0068 FEE7     		b	.L12
 1196              		.cfi_endproc
 1197              	.LFE3:
 1199 006a 00BF     		.align	2
 1200              		.weak	BusFault_Handler
 1201              		.thumb
 1202              		.thumb_func
 1204              	BusFault_Handler:
 1205              	.LFB4:
 311:../src/cr_startup_lpc17.c **** }
 312:../src/cr_startup_lpc17.c **** 
 313:../src/cr_startup_lpc17.c **** void BusFault_Handler(void)
 314:../src/cr_startup_lpc17.c **** {
 1206              		.loc 1 314 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 1, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211 006c 80B4     		push	{r7}
 1212              	.LCFI9:
 1213              		.cfi_def_cfa_offset 4
 1214 006e 00AF     		add	r7, sp, #0
 1215              		.cfi_offset 7, -4
 1216              	.LCFI10:
 1217              		.cfi_def_cfa_register 7
 1218              	.L14:
 315:../src/cr_startup_lpc17.c ****     while(1)
 316:../src/cr_startup_lpc17.c ****     {
 317:../src/cr_startup_lpc17.c ****     }
 1219              		.loc 1 317 0 discriminator 1
 1220 0070 FEE7     		b	.L14
 1221              		.cfi_endproc
 1222              	.LFE4:
 1224 0072 00BF     		.align	2
 1225              		.weak	UsageFault_Handler
 1226              		.thumb
 1227              		.thumb_func
 1229              	UsageFault_Handler:
 1230              	.LFB5:
 318:../src/cr_startup_lpc17.c **** }
 319:../src/cr_startup_lpc17.c **** 
 320:../src/cr_startup_lpc17.c **** void UsageFault_Handler(void)
 321:../src/cr_startup_lpc17.c **** {
 1231              		.loc 1 321 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 1, uses_anonymous_args = 0
 1235              		@ link register save eliminated.
 1236 0074 80B4     		push	{r7}
 1237              	.LCFI11:
 1238              		.cfi_def_cfa_offset 4
 1239 0076 00AF     		add	r7, sp, #0
 1240              		.cfi_offset 7, -4
 1241              	.LCFI12:
 1242              		.cfi_def_cfa_register 7
 1243              	.L16:
 322:../src/cr_startup_lpc17.c ****     while(1)
 323:../src/cr_startup_lpc17.c ****     {
 324:../src/cr_startup_lpc17.c ****     }
 1244              		.loc 1 324 0 discriminator 1
 1245 0078 FEE7     		b	.L16
 1246              		.cfi_endproc
 1247              	.LFE5:
 1249 007a 00BF     		.align	2
 1250              		.weak	DebugMon_Handler
 1251              		.thumb
 1252              		.thumb_func
 1254              	DebugMon_Handler:
 1255              	.LFB6:
 325:../src/cr_startup_lpc17.c **** }
 326:../src/cr_startup_lpc17.c **** 
 327:../src/cr_startup_lpc17.c **** 
 328:../src/cr_startup_lpc17.c **** void DebugMon_Handler(void)
 329:../src/cr_startup_lpc17.c **** {
 1256              		.loc 1 329 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 1, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 1261 007c 80B4     		push	{r7}
 1262              	.LCFI13:
 1263              		.cfi_def_cfa_offset 4
 1264 007e 00AF     		add	r7, sp, #0
 1265              		.cfi_offset 7, -4
 1266              	.LCFI14:
 1267              		.cfi_def_cfa_register 7
 1268              	.L18:
 330:../src/cr_startup_lpc17.c ****     while(1)
 331:../src/cr_startup_lpc17.c ****     {
 332:../src/cr_startup_lpc17.c ****     }
 1269              		.loc 1 332 0 discriminator 1
 1270 0080 FEE7     		b	.L18
 1271              		.cfi_endproc
 1272              	.LFE6:
 1274 0082 00BF     		.align	2
 1275              		.weak	IntDefaultHandler
 1276              		.thumb
 1277              		.thumb_func
 1279              	IntDefaultHandler:
 1280              	.LFB7:
 333:../src/cr_startup_lpc17.c **** }
 334:../src/cr_startup_lpc17.c **** 
 335:../src/cr_startup_lpc17.c **** //*****************************************************************************
 336:../src/cr_startup_lpc17.c **** //
 337:../src/cr_startup_lpc17.c **** // Processor ends up here if an unexpected interrupt occurs or a handler
 338:../src/cr_startup_lpc17.c **** // is not present in the application code.
 339:../src/cr_startup_lpc17.c **** //
 340:../src/cr_startup_lpc17.c **** //*****************************************************************************
 341:../src/cr_startup_lpc17.c **** void IntDefaultHandler(void)
 342:../src/cr_startup_lpc17.c **** {
 1281              		.loc 1 342 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286 0084 80B4     		push	{r7}
 1287              	.LCFI15:
 1288              		.cfi_def_cfa_offset 4
 1289 0086 00AF     		add	r7, sp, #0
 1290              		.cfi_offset 7, -4
 1291              	.LCFI16:
 1292              		.cfi_def_cfa_register 7
 1293              	.L20:
 343:../src/cr_startup_lpc17.c ****     //
 344:../src/cr_startup_lpc17.c ****     // Go into an infinite loop.
 345:../src/cr_startup_lpc17.c ****     //
 346:../src/cr_startup_lpc17.c ****     while(1)
 347:../src/cr_startup_lpc17.c ****     {
 348:../src/cr_startup_lpc17.c ****     }
 1294              		.loc 1 348 0 discriminator 1
 1295 0088 FEE7     		b	.L20
 1296              		.cfi_endproc
 1297              	.LFE7:
 1299              		.weak	WDT_IRQHandler
 1300              		.thumb_set WDT_IRQHandler,IntDefaultHandler
 1301              		.weak	TIMER0_IRQHandler
 1302              		.thumb_set TIMER0_IRQHandler,IntDefaultHandler
 1303              		.weak	TIMER1_IRQHandler
 1304              		.thumb_set TIMER1_IRQHandler,IntDefaultHandler
 1305              		.weak	TIMER2_IRQHandler
 1306              		.thumb_set TIMER2_IRQHandler,IntDefaultHandler
 1307              		.weak	TIMER3_IRQHandler
 1308              		.thumb_set TIMER3_IRQHandler,IntDefaultHandler
 1309              		.weak	UART0_IRQHandler
 1310              		.thumb_set UART0_IRQHandler,IntDefaultHandler
 1311              		.weak	UART1_IRQHandler
 1312              		.thumb_set UART1_IRQHandler,IntDefaultHandler
 1313              		.weak	UART2_IRQHandler
 1314              		.thumb_set UART2_IRQHandler,IntDefaultHandler
 1315              		.weak	UART3_IRQHandler
 1316              		.thumb_set UART3_IRQHandler,IntDefaultHandler
 1317              		.weak	PWM1_IRQHandler
 1318              		.thumb_set PWM1_IRQHandler,IntDefaultHandler
 1319              		.weak	I2C0_IRQHandler
 1320              		.thumb_set I2C0_IRQHandler,IntDefaultHandler
 1321              		.weak	I2C1_IRQHandler
 1322              		.thumb_set I2C1_IRQHandler,IntDefaultHandler
 1323              		.weak	I2C2_IRQHandler
 1324              		.thumb_set I2C2_IRQHandler,IntDefaultHandler
 1325              		.weak	SPI_IRQHandler
 1326              		.thumb_set SPI_IRQHandler,IntDefaultHandler
 1327              		.weak	SSP0_IRQHandler
 1328              		.thumb_set SSP0_IRQHandler,IntDefaultHandler
 1329              		.weak	SSP1_IRQHandler
 1330              		.thumb_set SSP1_IRQHandler,IntDefaultHandler
 1331              		.weak	PLL0_IRQHandler
 1332              		.thumb_set PLL0_IRQHandler,IntDefaultHandler
 1333              		.weak	RTC_IRQHandler
 1334              		.thumb_set RTC_IRQHandler,IntDefaultHandler
 1335              		.weak	EINT0_IRQHandler
 1336              		.thumb_set EINT0_IRQHandler,IntDefaultHandler
 1337              		.weak	EINT1_IRQHandler
 1338              		.thumb_set EINT1_IRQHandler,IntDefaultHandler
 1339              		.weak	EINT2_IRQHandler
 1340              		.thumb_set EINT2_IRQHandler,IntDefaultHandler
 1341              		.weak	EINT3_IRQHandler
 1342              		.thumb_set EINT3_IRQHandler,IntDefaultHandler
 1343              		.weak	ADC_IRQHandler
 1344              		.thumb_set ADC_IRQHandler,IntDefaultHandler
 1345              		.weak	BOD_IRQHandler
 1346              		.thumb_set BOD_IRQHandler,IntDefaultHandler
 1347              		.weak	USB_IRQHandler
 1348              		.thumb_set USB_IRQHandler,IntDefaultHandler
 1349              		.weak	CAN_IRQHandler
 1350              		.thumb_set CAN_IRQHandler,IntDefaultHandler
 1351              		.weak	DMA_IRQHandler
 1352              		.thumb_set DMA_IRQHandler,IntDefaultHandler
 1353              		.weak	I2S_IRQHandler
 1354              		.thumb_set I2S_IRQHandler,IntDefaultHandler
 1355              		.weak	ENET_IRQHandler
 1356              		.thumb_set ENET_IRQHandler,IntDefaultHandler
 1357              		.weak	RIT_IRQHandler
 1358              		.thumb_set RIT_IRQHandler,IntDefaultHandler
 1359              		.weak	MCPWM_IRQHandler
 1360              		.thumb_set MCPWM_IRQHandler,IntDefaultHandler
 1361              		.weak	QEI_IRQHandler
 1362              		.thumb_set QEI_IRQHandler,IntDefaultHandler
 1363              		.weak	PLL1_IRQHandler
 1364              		.thumb_set PLL1_IRQHandler,IntDefaultHandler
 1365              		.weak	USBActivity_IRQHandler
 1366              		.thumb_set USBActivity_IRQHandler,IntDefaultHandler
 1367              		.weak	CANActivity_IRQHandler
 1368              		.thumb_set CANActivity_IRQHandler,IntDefaultHandler
 1369              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 cr_startup_lpc17.c
     /tmp/ccbyOUXy.s:998    .isr_vector:00000000 g_pfnVectors
     /tmp/ccbyOUXy.s:995    .isr_vector:00000000 $d
     /tmp/ccbyOUXy.s:1055   .text:00000000 ResetISR
     /tmp/ccbyOUXy.s:1129   .text:00000054 NMI_Handler
     /tmp/ccbyOUXy.s:1154   .text:0000005c HardFault_Handler
     /tmp/ccbyOUXy.s:1179   .text:00000064 MemManage_Handler
     /tmp/ccbyOUXy.s:1204   .text:0000006c BusFault_Handler
     /tmp/ccbyOUXy.s:1229   .text:00000074 UsageFault_Handler
     /tmp/ccbyOUXy.s:1254   .text:0000007c DebugMon_Handler
     /tmp/ccbyOUXy.s:1279   .text:00000084 WDT_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 TIMER0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 TIMER1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 TIMER2_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 TIMER3_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 UART0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 UART1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 UART2_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 UART3_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 PWM1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 I2C0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 I2C1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 I2C2_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 SPI_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 SSP0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 SSP1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 PLL0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 RTC_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 EINT0_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 EINT1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 EINT2_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 EINT3_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 ADC_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 BOD_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 USB_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 CAN_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 DMA_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 I2S_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 RIT_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 MCPWM_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 QEI_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 PLL1_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 USBActivity_IRQHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 CANActivity_IRQHandler
     /tmp/ccbyOUXy.s:1050   .text:00000000 $t
     /tmp/ccbyOUXy.s:1103   .text:00000038 zero_loop
     /tmp/ccbyOUXy.s:1118   .text:00000048 $d
     /tmp/ccbyOUXy.s:1124   .text:00000054 $t
     /tmp/ccbyOUXy.s:1279   .text:00000084 IntDefaultHandler
     /tmp/ccbyOUXy.s:1279   .text:00000084 ENET_IRQHandler
     /tmp/ccbyOUXy.s:1370   .text:0000008a $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_vStackTop
vPortSVCHandler
xPortPendSVHandler
xPortSysTickHandler
_bss
_ebss
main
_etext
_data
_edata
