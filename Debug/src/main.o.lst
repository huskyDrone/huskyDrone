   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"main.c"
  23              	.Ltext0:
  24              		.file 1 "../src/main.c"
 4403              		.align	2
 4404              	.LC0:
 4405 0000 416C6C20 		.ascii	"All tasks are executing without error.\000"
 4405      7461736B 
 4405      73206172 
 4405      65206578 
 4405      65637574 
 4406              		.data
 4407              		.align	2
 4410              	pcStatusMessage:
 4411 0000 00000000 		.word	.LC0
 4412              		.section	.rodata
 4413 0027 00       		.align	2
 4414              	.LC1:
 4415 0028 4C454400 		.ascii	"LED\000"
 4416              		.align	2
 4417              	.LC2:
 4418 002c 25642E25 		.ascii	"%d.%d.%d.%d\000"
 4418      642E2564 
 4418      2E256400 
 4419              		.text
 4420              		.align	2
 4421              		.global	main
 4422              		.thumb
 4423              		.thumb_func
 4425              	main:
 4426              	.LFB29:
   1:../src/main.c **** /*
   2:../src/main.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../src/main.c **** 	
   4:../src/main.c **** 
   5:../src/main.c ****     ***************************************************************************
   6:../src/main.c ****      *                                                                       *
   7:../src/main.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../src/main.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../src/main.c ****      *    available.                                                         *
  10:../src/main.c ****      *                                                                       *
  11:../src/main.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../src/main.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../src/main.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../src/main.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../src/main.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../src/main.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../src/main.c ****      *                                                                       *
  18:../src/main.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../src/main.c ****      *                                                                       *
  20:../src/main.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../src/main.c ****      *                                                                       *
  22:../src/main.c ****     ***************************************************************************
  23:../src/main.c **** 
  24:../src/main.c **** 
  25:../src/main.c ****     This file is part of the FreeRTOS distribution.
  26:../src/main.c **** 
  27:../src/main.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../src/main.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../src/main.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../src/main.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../src/main.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../src/main.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../src/main.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../src/main.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../src/main.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../src/main.c ****     more details. You should have received a copy of the GNU General Public
  37:../src/main.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../src/main.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../src/main.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../src/main.c ****     FreeRTOS WEB site.
  41:../src/main.c **** 
  42:../src/main.c ****     1 tab == 4 spaces!
  43:../src/main.c **** 
  44:../src/main.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../src/main.c ****     contact details.
  46:../src/main.c **** 
  47:../src/main.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../src/main.c ****     critical systems.
  49:../src/main.c **** 
  50:../src/main.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../src/main.c ****     licensing and training services.
  52:../src/main.c **** */
  53:../src/main.c **** 
  54:../src/main.c **** 
  55:../src/main.c **** //#error The batch file Demo\CORTEX_LPC1768_GCC_RedSuite\CreateProjectDirectoryStructure.bat must b
  56:../src/main.c **** 
  57:../src/main.c **** 
  58:../src/main.c **** 
  59:../src/main.c **** /*
  60:../src/main.c ****  * Creates all the demo application tasks, then starts the scheduler.  The WEB
  61:../src/main.c ****  * documentation provides more details of the standard demo application tasks
  62:../src/main.c ****  * (which just exist to test the kernel port and provide an example of how to use
  63:../src/main.c ****  * each FreeRTOS API function).
  64:../src/main.c ****  *
  65:../src/main.c ****  * In addition to the standard demo tasks, the following tasks and tests are
  66:../src/main.c ****  * defined and/or created within this file:
  67:../src/main.c ****  *
  68:../src/main.c ****  * "Check" hook -  This only executes fully every five seconds from the tick
  69:../src/main.c ****  * hook.  Its main function is to check that all the standard demo tasks are
  70:../src/main.c ****  * still operational.  The status can be viewed using on the Task Stats page
  71:../src/main.c ****  * served by the WEB server.
  72:../src/main.c ****  *
  73:../src/main.c ****  * "uIP" task -  This is the task that handles the uIP stack.  All TCP/IP
  74:../src/main.c ****  * processing is performed in this task.
  75:../src/main.c ****  * 
  76:../src/main.c ****  * "USB" task - Enumerates the USB device as a CDC class, then echoes back all
  77:../src/main.c ****  * received characters with a configurable offset (for example, if the offset
  78:../src/main.c ****  * is 1 and 'A' is received then 'B' will be sent back).  A dumb terminal such
  79:../src/main.c ****  * as Hyperterminal can be used to talk to the USB task.
  80:../src/main.c ****  */
  81:../src/main.c **** 
  82:../src/main.c **** /* Standard includes. */
  83:../src/main.c **** #include "stdio.h"
  84:../src/main.c **** 
  85:../src/main.c **** /* Scheduler includes. */
  86:../src/main.c **** #include "FreeRTOSConfig.h"
  87:../src/main.c **** #include "FreeRTOS.h"
  88:../src/main.c **** #include "task.h"
  89:../src/main.c **** #include "queue.h"
  90:../src/main.c **** #include "semphr.h"
  91:../src/main.c **** 
  92:../src/main.c **** #include "testTask.h"
  93:../src/main.c **** 
  94:../src/main.c **** /*
  95:../src/main.c **** #include "BlockQ.h"
  96:../src/main.c **** #include "integer.h"
  97:../src/main.c **** #include "blocktim.h"
  98:../src/main.c **** #include "flash.h"
  99:../src/main.c **** #include "partest.h"
 100:../src/main.c **** #include "semtest.h"
 101:../src/main.c **** #include "PollQ.h"
 102:../src/main.c **** #include "GenQTest.h"
 103:../src/main.c **** #include "QPeek.h"
 104:../src/main.c **** #include "recmutex.h"
 105:../src/main.c **** */
 106:../src/main.c **** /* Red Suite includes. */
 107:../src/main.c **** //#include "lcd_driver.h"
 108:../src/main.c **** //#include "lcd.h"
 109:../src/main.c **** 
 110:../src/main.c **** /*-----------------------------------------------------------*/
 111:../src/main.c **** 
 112:../src/main.c **** /* The time between cycles of the 'check' functionality (defined within the
 113:../src/main.c **** tick hook. */
 114:../src/main.c **** #define mainCHECK_DELAY						( ( portTickType ) 5000 / portTICK_RATE_MS )
 115:../src/main.c **** 
 116:../src/main.c **** /* Task priorities. */
 117:../src/main.c **** #define mainQUEUE_POLL_PRIORITY				( tskIDLE_PRIORITY + 2 )
 118:../src/main.c **** #define mainSEM_TEST_PRIORITY				( tskIDLE_PRIORITY + 1 )
 119:../src/main.c **** #define mainBLOCK_Q_PRIORITY				( tskIDLE_PRIORITY + 2 )
 120:../src/main.c **** #define mainUIP_TASK_PRIORITY				( tskIDLE_PRIORITY + 3 )
 121:../src/main.c **** #define mainINTEGER_TASK_PRIORITY           ( tskIDLE_PRIORITY )
 122:../src/main.c **** #define mainGEN_QUEUE_TASK_PRIORITY			( tskIDLE_PRIORITY )
 123:../src/main.c **** #define mainFLASH_TASK_PRIORITY				( tskIDLE_PRIORITY + 2 )
 124:../src/main.c **** 
 125:../src/main.c **** /* The WEB server has a larger stack as it utilises stack hungry string
 126:../src/main.c **** handling library calls. */
 127:../src/main.c **** #define mainBASIC_WEB_STACK_SIZE            ( configMINIMAL_STACK_SIZE * 4 )
 128:../src/main.c **** 
 129:../src/main.c **** /* The message displayed by the WEB server when all tasks are executing
 130:../src/main.c **** without an error being reported. */
 131:../src/main.c **** #define mainPASS_STATUS_MESSAGE				"All tasks are executing without error."
 132:../src/main.c **** 
 133:../src/main.c **** /* Bit definitions. */
 134:../src/main.c **** #define PCONP_PCGPIO    0x00008000
 135:../src/main.c **** #define PLLFEED_FEED1   0x000000AA
 136:../src/main.c **** #define PLLFEED_FEED2   0x00000055
 137:../src/main.c **** /*-----------------------------------------------------------*/
 138:../src/main.c **** 
 139:../src/main.c **** /*
 140:../src/main.c ****  * Configure the hardware for the demo.
 141:../src/main.c ****  */
 142:../src/main.c **** static void prvSetupHardware( void );
 143:../src/main.c **** 
 144:../src/main.c **** /*
 145:../src/main.c ****  * The task that handles the uIP stack.  All TCP/IP processing is performed in
 146:../src/main.c ****  * this task.
 147:../src/main.c ****  */
 148:../src/main.c **** //extern void vuIP_Task( void *pvParameters );
 149:../src/main.c **** 
 150:../src/main.c **** /*
 151:../src/main.c ****  * The task that handles the USB stack.
 152:../src/main.c ****  */
 153:../src/main.c **** //extern void vUSBTask( void *pvParameters );
 154:../src/main.c **** 
 155:../src/main.c **** /*
 156:../src/main.c ****  * Simply returns the current status message for display on served WEB pages.
 157:../src/main.c ****  */
 158:../src/main.c **** char *pcGetTaskStatusMessage( void );
 159:../src/main.c **** 
 160:../src/main.c **** void vLedConfig( void );
 161:../src/main.c **** 
 162:../src/main.c **** /*-----------------------------------------------------------*/
 163:../src/main.c **** 
 164:../src/main.c **** /* Holds the status message displayed by the WEB server. */
 165:../src/main.c **** static char *pcStatusMessage = mainPASS_STATUS_MESSAGE;
 166:../src/main.c **** 
 167:../src/main.c **** /*-----------------------------------------------------------*/
 168:../src/main.c **** 
 169:../src/main.c **** int main( void )
 170:../src/main.c **** {
 4427              		.loc 1 170 0
 4428              		.cfi_startproc
 4429              		@ args = 0, pretend = 0, frame = 16
 4430              		@ frame_needed = 1, uses_anonymous_args = 0
 4431 0000 80B5     		push	{r7, lr}
 4432              	.LCFI0:
 4433              		.cfi_def_cfa_offset 8
 4434 0002 88B0     		sub	sp, sp, #32
 4435              	.LCFI1:
 4436              		.cfi_def_cfa_offset 40
 4437 0004 04AF     		add	r7, sp, #16
 4438              		.cfi_offset 14, -4
 4439              		.cfi_offset 7, -8
 4440              	.LCFI2:
 4441              		.cfi_def_cfa 7, 24
 171:../src/main.c **** char cIPAddress[ 16 ]; /* Enough space for "xxx.xxx.xxx.xxx\0". */
 172:../src/main.c **** 
 173:../src/main.c **** 	/* Configure the hardware for use by this demo. */
 174:../src/main.c **** 	prvSetupHardware();
 4442              		.loc 1 174 0
 4443 0006 00F03DF8 		bl	prvSetupHardware
 175:../src/main.c **** 
 176:../src/main.c **** 	/* Start the standard demo tasks.  These are just here to exercise the
 177:../src/main.c **** 	kernel port and provide examples of how the FreeRTOS API can be used. */
 178:../src/main.c **** 	//vStartBlockingQueueTasks( mainBLOCK_Q_PRIORITY );
 179:../src/main.c ****     //vCreateBlockTimeTasks();
 180:../src/main.c ****     //vStartSemaphoreTasks( mainSEM_TEST_PRIORITY );
 181:../src/main.c ****    // vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 182:../src/main.c ****     //vStartIntegerMathTasks( mainINTEGER_TASK_PRIORITY );
 183:../src/main.c ****    // vStartGenericQueueTasks( mainGEN_QUEUE_TASK_PRIORITY );
 184:../src/main.c ****    // vStartQueuePeekTasks();
 185:../src/main.c ****    // vStartRecursiveMutexTasks();
 186:../src/main.c **** 	//vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 187:../src/main.c **** 
 188:../src/main.c ****     /* Create the USB task. */
 189:../src/main.c ****     //xTaskCreate( vUSBTask, ( signed char * ) "USB", configMINIMAL_STACK_SIZE, ( void * ) NULL, ts
 190:../src/main.c **** 
 191:../src/main.c ****     // Create the test task
 192:../src/main.c ****     xTaskCreate( vTestTask, ( signed char * ) "LED", configMINIMAL_STACK_SIZE, ( void * ) NULL, 1, 
 4444              		.loc 1 192 0
 4445 000a 134B     		ldr	r3, .L3
 4446 000c 4FF00102 		mov	r2, #1
 4447 0010 0092     		str	r2, [sp, #0]
 4448 0012 4FF00002 		mov	r2, #0
 4449 0016 0192     		str	r2, [sp, #4]
 4450 0018 4FF00002 		mov	r2, #0
 4451 001c 0292     		str	r2, [sp, #8]
 4452 001e 4FF00002 		mov	r2, #0
 4453 0022 0392     		str	r2, [sp, #12]
 4454 0024 0D48     		ldr	r0, .L3+4
 4455 0026 1946     		mov	r1, r3
 4456 0028 4FF05002 		mov	r2, #80
 4457 002c 4FF00003 		mov	r3, #0
 4458 0030 FFF7FEFF 		bl	xTaskGenericCreate
 193:../src/main.c **** 	
 194:../src/main.c **** 	/* Display the IP address, then create the uIP task.  The WEB server runs 
 195:../src/main.c **** 	in this task. */
 196:../src/main.c **** 	//LCDdriver_initialisation();
 197:../src/main.c **** 	//LCD_PrintString( 5, 10, "FreeRTOS.org", 14, COLOR_GREEN);
 198:../src/main.c **** 	sprintf( cIPAddress, "%d.%d.%d.%d", configIP_ADDR0, configIP_ADDR1, configIP_ADDR2, configIP_ADDR3
 4459              		.loc 1 198 0
 4460 0034 3B46     		mov	r3, r7
 4461 0036 4FF00002 		mov	r2, #0
 4462 003a 0092     		str	r2, [sp, #0]
 4463 003c 4FF0C902 		mov	r2, #201
 4464 0040 0192     		str	r2, [sp, #4]
 4465 0042 1846     		mov	r0, r3
 4466 0044 0649     		ldr	r1, .L3+8
 4467 0046 4FF0C002 		mov	r2, #192
 4468 004a 4FF0A803 		mov	r3, #168
 4469 004e FFF7FEFF 		bl	sprintf
 199:../src/main.c **** 	//LCD_PrintString( 5, 30, cIPAddress, 14, COLOR_RED);
 200:../src/main.c ****     //xTaskCreate( vuIP_Task, ( signed char * ) "uIP", mainBASIC_WEB_STACK_SIZE, ( void * ) NULL, m
 201:../src/main.c **** 
 202:../src/main.c ****     /* Start the scheduler. */
 203:../src/main.c **** 	vTaskStartScheduler();
 4470              		.loc 1 203 0
 4471 0052 FFF7FEFF 		bl	vTaskStartScheduler
 4472              	.L2:
 204:../src/main.c **** 
 205:../src/main.c ****     /* Will only get here if there was insufficient memory to create the idle
 206:../src/main.c ****     task.  The idle task is created within vTaskStartScheduler(). */
 207:../src/main.c **** 	for( ;; );
 4473              		.loc 1 207 0 discriminator 1
 4474 0056 FEE7     		b	.L2
 4475              	.L4:
 4476              		.align	2
 4477              	.L3:
 4478 0058 28000000 		.word	.LC1
 4479 005c 00000000 		.word	vTestTask
 4480 0060 2C000000 		.word	.LC2
 4481              		.cfi_endproc
 4482              	.LFE29:
 4484              		.align	2
 4485              		.global	vApplicationTickHook
 4486              		.thumb
 4487              		.thumb_func
 4489              	vApplicationTickHook:
 4490              	.LFB30:
 208:../src/main.c **** }
 209:../src/main.c **** /*-----------------------------------------------------------*/
 210:../src/main.c **** 
 211:../src/main.c **** void vApplicationTickHook( void )
 212:../src/main.c **** {
 4491              		.loc 1 212 0
 4492              		.cfi_startproc
 4493              		@ args = 0, pretend = 0, frame = 0
 4494              		@ frame_needed = 1, uses_anonymous_args = 0
 4495              		@ link register save eliminated.
 4496 0064 80B4     		push	{r7}
 4497              	.LCFI3:
 4498              		.cfi_def_cfa_offset 4
 4499 0066 00AF     		add	r7, sp, #0
 4500              		.cfi_offset 7, -4
 4501              	.LCFI4:
 4502              		.cfi_def_cfa_register 7
 213:../src/main.c **** static unsigned long ulTicksSinceLastDisplay = 0;
 214:../src/main.c **** 
 215:../src/main.c **** 	// Called from every tick interrupt as described in the comments at the top
 216:../src/main.c **** 	//of this file.
 217:../src/main.c **** 
 218:../src/main.c **** 	//Have enough ticks passed to make it	time to perform our health status
 219:../src/main.c **** 	//check again?
 220:../src/main.c **** /*
 221:../src/main.c **** 	ulTicksSinceLastDisplay++;
 222:../src/main.c **** 	if( ulTicksSinceLastDisplay >= mainCHECK_DELAY )
 223:../src/main.c **** 	{
 224:../src/main.c **** 		// Reset the counter so these checks run again in mainCHECK_DELA  ticks time.
 225:../src/main.c **** 		ulTicksSinceLastDisplay = 0;
 226:../src/main.c **** 
 227:../src/main.c **** 		// Has an error been found in any task?
 228:../src/main.c **** 		if( xAreGenericQueueTasksStillRunning() != pdTRUE )
 229:../src/main.c **** 		{
 230:../src/main.c **** 			pcStatusMessage = "An error has been detected in the Generic Queue test/demo.";
 231:../src/main.c **** 		}
 232:../src/main.c **** 		else if( xAreQueuePeekTasksStillRunning() != pdTRUE )
 233:../src/main.c **** 		{
 234:../src/main.c **** 			pcStatusMessage = "An error has been detected in the Peek Queue test/demo.";
 235:../src/main.c **** 		}
 236:../src/main.c **** 		else if( xAreBlockingQueuesStillRunning() != pdTRUE )
 237:../src/main.c **** 		{
 238:../src/main.c **** 			pcStatusMessage = "An error has been detected in the Block Queue test/demo.";
 239:../src/main.c **** 		}
 240:../src/main.c **** 		else if( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
 241:../src/main.c **** 		{
 242:../src/main.c **** 			pcStatusMessage = "An error has been detected in the Block Time test/demo.";
 243:../src/main.c **** 		}
 244:../src/main.c **** 	    else if( xAreSemaphoreTasksStillRunning() != pdTRUE )
 245:../src/main.c **** 	    {
 246:../src/main.c **** 	        pcStatusMessage = "An error has been detected in the Semaphore test/demo.";
 247:../src/main.c **** 	    }
 248:../src/main.c **** 	    else if( xArePollingQueuesStillRunning() != pdTRUE )
 249:../src/main.c **** 	    {
 250:../src/main.c **** 	        pcStatusMessage = "An error has been detected in the Poll Queue test/demo.";
 251:../src/main.c **** 	    }
 252:../src/main.c **** 	    else if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 253:../src/main.c **** 	    {
 254:../src/main.c **** 	        pcStatusMessage = "An error has been detected in the Int Math test/demo.";
 255:../src/main.c **** 	    }
 256:../src/main.c **** 	    else if( xAreRecursiveMutexTasksStillRunning() != pdTRUE )
 257:../src/main.c **** 	    {
 258:../src/main.c **** 	    	pcStatusMessage = "An error has been detected in the Mutex test/demo.";
 259:../src/main.c **** 	    }
 260:../src/main.c **** 	}
 261:../src/main.c **** 	*/
 262:../src/main.c **** }
 4503              		.loc 1 262 0
 4504 0068 BD46     		mov	sp, r7
 4505 006a 80BC     		pop	{r7}
 4506 006c 7047     		bx	lr
 4507              		.cfi_endproc
 4508              	.LFE30:
 4510 006e 00BF     		.align	2
 4511              		.global	pcGetTaskStatusMessage
 4512              		.thumb
 4513              		.thumb_func
 4515              	pcGetTaskStatusMessage:
 4516              	.LFB31:
 263:../src/main.c **** 
 264:../src/main.c **** /*-----------------------------------------------------------*/
 265:../src/main.c **** 
 266:../src/main.c **** char *pcGetTaskStatusMessage( void )
 267:../src/main.c **** {
 4517              		.loc 1 267 0
 4518              		.cfi_startproc
 4519              		@ args = 0, pretend = 0, frame = 0
 4520              		@ frame_needed = 1, uses_anonymous_args = 0
 4521              		@ link register save eliminated.
 4522 0070 80B4     		push	{r7}
 4523              	.LCFI5:
 4524              		.cfi_def_cfa_offset 4
 4525 0072 00AF     		add	r7, sp, #0
 4526              		.cfi_offset 7, -4
 4527              	.LCFI6:
 4528              		.cfi_def_cfa_register 7
 268:../src/main.c **** 	/* Not bothered about a critical section here. */
 269:../src/main.c **** 	return pcStatusMessage;
 4529              		.loc 1 269 0
 4530 0074 024B     		ldr	r3, .L7
 4531 0076 1B68     		ldr	r3, [r3, #0]
 270:../src/main.c **** }
 4532              		.loc 1 270 0
 4533 0078 1846     		mov	r0, r3
 4534 007a BD46     		mov	sp, r7
 4535 007c 80BC     		pop	{r7}
 4536 007e 7047     		bx	lr
 4537              	.L8:
 4538              		.align	2
 4539              	.L7:
 4540 0080 00000000 		.word	pcStatusMessage
 4541              		.cfi_endproc
 4542              	.LFE31:
 4544              		.align	2
 4545              		.thumb
 4546              		.thumb_func
 4548              	prvSetupHardware:
 4549              	.LFB32:
 271:../src/main.c **** /*-----------------------------------------------------------*/
 272:../src/main.c **** 
 273:../src/main.c **** void prvSetupHardware( void )
 274:../src/main.c **** {
 4550              		.loc 1 274 0
 4551              		.cfi_startproc
 4552              		@ args = 0, pretend = 0, frame = 0
 4553              		@ frame_needed = 1, uses_anonymous_args = 0
 4554 0084 80B5     		push	{r7, lr}
 4555              	.LCFI7:
 4556              		.cfi_def_cfa_offset 8
 4557 0086 00AF     		add	r7, sp, #0
 4558              		.cfi_offset 14, -4
 4559              		.cfi_offset 7, -8
 4560              	.LCFI8:
 4561              		.cfi_def_cfa_register 7
 275:../src/main.c **** 	/* Disable peripherals power. */
 276:../src/main.c **** 	LPC_SC->PCONP = 0;
 4562              		.loc 1 276 0
 4563 0088 7A4B     		ldr	r3, .L17
 4564 008a 4FF00002 		mov	r2, #0
 4565 008e C3F8C420 		str	r2, [r3, #196]
 277:../src/main.c **** 
 278:../src/main.c **** 	/* Enable GPIO power. */
 279:../src/main.c **** 	LPC_SC->PCONP = PCONP_PCGPIO;
 4566              		.loc 1 279 0
 4567 0092 784B     		ldr	r3, .L17
 4568 0094 4FF40042 		mov	r2, #32768
 4569 0098 C3F8C420 		str	r2, [r3, #196]
 280:../src/main.c **** 
 281:../src/main.c **** 	/* Disable TPIU. */
 282:../src/main.c **** 	LPC_PINCON->PINSEL10 = 0;
 4570              		.loc 1 282 0
 4571 009c 764B     		ldr	r3, .L17+4
 4572 009e 4FF00002 		mov	r2, #0
 4573 00a2 9A62     		str	r2, [r3, #40]
 283:../src/main.c **** 
 284:../src/main.c **** 	if ( LPC_SC->PLL0STAT & ( 1 << 25 ) )
 4574              		.loc 1 284 0
 4575 00a4 734B     		ldr	r3, .L17
 4576 00a6 D3F88830 		ldr	r3, [r3, #136]
 4577 00aa 03F00073 		and	r3, r3, #33554432
 4578 00ae 002B     		cmp	r3, #0
 4579 00b0 0ED0     		beq	.L10
 285:../src/main.c **** 	{
 286:../src/main.c **** 		/* Enable PLL, disconnected. */
 287:../src/main.c **** 		LPC_SC->PLL0CON = 1;
 4580              		.loc 1 287 0
 4581 00b2 704B     		ldr	r3, .L17
 4582 00b4 4FF00102 		mov	r2, #1
 4583 00b8 C3F88020 		str	r2, [r3, #128]
 288:../src/main.c **** 		LPC_SC->PLL0FEED = PLLFEED_FEED1;
 4584              		.loc 1 288 0
 4585 00bc 6D4B     		ldr	r3, .L17
 4586 00be 4FF0AA02 		mov	r2, #170
 4587 00c2 C3F88C20 		str	r2, [r3, #140]
 289:../src/main.c **** 		LPC_SC->PLL0FEED = PLLFEED_FEED2;
 4588              		.loc 1 289 0
 4589 00c6 6B4B     		ldr	r3, .L17
 4590 00c8 4FF05502 		mov	r2, #85
 4591 00cc C3F88C20 		str	r2, [r3, #140]
 4592              	.L10:
 290:../src/main.c **** 	}
 291:../src/main.c **** 	
 292:../src/main.c **** 	/* Disable PLL, disconnected. */
 293:../src/main.c **** 	LPC_SC->PLL0CON = 0;
 4593              		.loc 1 293 0
 4594 00d0 684B     		ldr	r3, .L17
 4595 00d2 4FF00002 		mov	r2, #0
 4596 00d6 C3F88020 		str	r2, [r3, #128]
 294:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED1;
 4597              		.loc 1 294 0
 4598 00da 664B     		ldr	r3, .L17
 4599 00dc 4FF0AA02 		mov	r2, #170
 4600 00e0 C3F88C20 		str	r2, [r3, #140]
 295:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED2;
 4601              		.loc 1 295 0
 4602 00e4 634B     		ldr	r3, .L17
 4603 00e6 4FF05502 		mov	r2, #85
 4604 00ea C3F88C20 		str	r2, [r3, #140]
 296:../src/main.c **** 	    
 297:../src/main.c **** 	/* Enable main OSC. */
 298:../src/main.c **** 	LPC_SC->SCS |= 0x20;
 4605              		.loc 1 298 0
 4606 00ee 614B     		ldr	r3, .L17
 4607 00f0 604A     		ldr	r2, .L17
 4608 00f2 D2F8A021 		ldr	r2, [r2, #416]
 4609 00f6 42F02002 		orr	r2, r2, #32
 4610 00fa C3F8A021 		str	r2, [r3, #416]
 299:../src/main.c **** 	while( !( LPC_SC->SCS & 0x40 ) );
 4611              		.loc 1 299 0
 4612 00fe 00BF     		nop
 4613              	.L11:
 4614              		.loc 1 299 0 is_stmt 0 discriminator 1
 4615 0100 5C4B     		ldr	r3, .L17
 4616 0102 D3F8A031 		ldr	r3, [r3, #416]
 4617 0106 03F04003 		and	r3, r3, #64
 4618 010a 002B     		cmp	r3, #0
 4619 010c F8D0     		beq	.L11
 300:../src/main.c **** 	
 301:../src/main.c **** 	/* select main OSC, 12MHz, as the PLL clock source. */
 302:../src/main.c **** 	LPC_SC->CLKSRCSEL = 0x1;
 4620              		.loc 1 302 0 is_stmt 1
 4621 010e 594B     		ldr	r3, .L17
 4622 0110 4FF00102 		mov	r2, #1
 4623 0114 C3F80C21 		str	r2, [r3, #268]
 303:../src/main.c **** 	
 304:../src/main.c **** 	LPC_SC->PLL0CFG = 0x20031;
 4624              		.loc 1 304 0
 4625 0118 564B     		ldr	r3, .L17
 4626 011a 584A     		ldr	r2, .L17+8
 4627 011c C3F88420 		str	r2, [r3, #132]
 305:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED1;
 4628              		.loc 1 305 0
 4629 0120 544B     		ldr	r3, .L17
 4630 0122 4FF0AA02 		mov	r2, #170
 4631 0126 C3F88C20 		str	r2, [r3, #140]
 306:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED2;
 4632              		.loc 1 306 0
 4633 012a 524B     		ldr	r3, .L17
 4634 012c 4FF05502 		mov	r2, #85
 4635 0130 C3F88C20 		str	r2, [r3, #140]
 307:../src/main.c **** 	      
 308:../src/main.c **** 	/* Enable PLL, disconnected. */
 309:../src/main.c **** 	LPC_SC->PLL0CON = 1;
 4636              		.loc 1 309 0
 4637 0134 4F4B     		ldr	r3, .L17
 4638 0136 4FF00102 		mov	r2, #1
 4639 013a C3F88020 		str	r2, [r3, #128]
 310:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED1;
 4640              		.loc 1 310 0
 4641 013e 4D4B     		ldr	r3, .L17
 4642 0140 4FF0AA02 		mov	r2, #170
 4643 0144 C3F88C20 		str	r2, [r3, #140]
 311:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED2;
 4644              		.loc 1 311 0
 4645 0148 4A4B     		ldr	r3, .L17
 4646 014a 4FF05502 		mov	r2, #85
 4647 014e C3F88C20 		str	r2, [r3, #140]
 312:../src/main.c **** 	
 313:../src/main.c **** 	/* Set clock divider. */
 314:../src/main.c **** 	LPC_SC->CCLKCFG = 0x03;
 4648              		.loc 1 314 0
 4649 0152 484B     		ldr	r3, .L17
 4650 0154 4FF00302 		mov	r2, #3
 4651 0158 C3F80421 		str	r2, [r3, #260]
 315:../src/main.c **** 	
 316:../src/main.c **** 	/* Configure flash accelerator. */
 317:../src/main.c **** 	LPC_SC->FLASHCFG = 0x403a;
 4652              		.loc 1 317 0
 4653 015c 454B     		ldr	r3, .L17
 4654 015e 44F23A02 		movw	r2, #16442
 4655 0162 1A60     		str	r2, [r3, #0]
 318:../src/main.c **** 	
 319:../src/main.c **** 	/* Check lock bit status. */
 320:../src/main.c **** 	while( ( ( LPC_SC->PLL0STAT & ( 1 << 26 ) ) == 0 ) );
 4656              		.loc 1 320 0
 4657 0164 00BF     		nop
 4658              	.L12:
 4659              		.loc 1 320 0 is_stmt 0 discriminator 1
 4660 0166 434B     		ldr	r3, .L17
 4661 0168 D3F88830 		ldr	r3, [r3, #136]
 4662 016c 03F08063 		and	r3, r3, #67108864
 4663 0170 002B     		cmp	r3, #0
 4664 0172 F8D0     		beq	.L12
 321:../src/main.c **** 	    
 322:../src/main.c **** 	/* Enable and connect. */
 323:../src/main.c **** 	LPC_SC->PLL0CON = 3;
 4665              		.loc 1 323 0 is_stmt 1
 4666 0174 3F4B     		ldr	r3, .L17
 4667 0176 4FF00302 		mov	r2, #3
 4668 017a C3F88020 		str	r2, [r3, #128]
 324:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED1;
 4669              		.loc 1 324 0
 4670 017e 3D4B     		ldr	r3, .L17
 4671 0180 4FF0AA02 		mov	r2, #170
 4672 0184 C3F88C20 		str	r2, [r3, #140]
 325:../src/main.c **** 	LPC_SC->PLL0FEED = PLLFEED_FEED2;
 4673              		.loc 1 325 0
 4674 0188 3A4B     		ldr	r3, .L17
 4675 018a 4FF05502 		mov	r2, #85
 4676 018e C3F88C20 		str	r2, [r3, #140]
 326:../src/main.c **** 	while( ( ( LPC_SC->PLL0STAT & ( 1 << 25 ) ) == 0 ) );
 4677              		.loc 1 326 0
 4678 0192 00BF     		nop
 4679              	.L13:
 4680              		.loc 1 326 0 is_stmt 0 discriminator 1
 4681 0194 374B     		ldr	r3, .L17
 4682 0196 D3F88830 		ldr	r3, [r3, #136]
 4683 019a 03F00073 		and	r3, r3, #33554432
 4684 019e 002B     		cmp	r3, #0
 4685 01a0 F8D0     		beq	.L13
 327:../src/main.c **** 
 328:../src/main.c **** 	
 329:../src/main.c **** 	
 330:../src/main.c **** 	
 331:../src/main.c **** 	/* Configure the clock for the USB. */
 332:../src/main.c **** 	  
 333:../src/main.c **** 	if( LPC_SC->PLL1STAT & ( 1 << 9 ) )
 4686              		.loc 1 333 0 is_stmt 1
 4687 01a2 344B     		ldr	r3, .L17
 4688 01a4 D3F8A830 		ldr	r3, [r3, #168]
 4689 01a8 03F40073 		and	r3, r3, #512
 4690 01ac 002B     		cmp	r3, #0
 4691 01ae 0ED0     		beq	.L14
 334:../src/main.c **** 	{
 335:../src/main.c **** 		/* Enable PLL, disconnected. */
 336:../src/main.c **** 		LPC_SC->PLL1CON = 1;
 4692              		.loc 1 336 0
 4693 01b0 304B     		ldr	r3, .L17
 4694 01b2 4FF00102 		mov	r2, #1
 4695 01b6 C3F8A020 		str	r2, [r3, #160]
 337:../src/main.c **** 		LPC_SC->PLL1FEED = PLLFEED_FEED1;
 4696              		.loc 1 337 0
 4697 01ba 2E4B     		ldr	r3, .L17
 4698 01bc 4FF0AA02 		mov	r2, #170
 4699 01c0 C3F8AC20 		str	r2, [r3, #172]
 338:../src/main.c **** 		LPC_SC->PLL1FEED = PLLFEED_FEED2;
 4700              		.loc 1 338 0
 4701 01c4 2B4B     		ldr	r3, .L17
 4702 01c6 4FF05502 		mov	r2, #85
 4703 01ca C3F8AC20 		str	r2, [r3, #172]
 4704              	.L14:
 339:../src/main.c **** 	}
 340:../src/main.c **** 	
 341:../src/main.c **** 	/* Disable PLL, disconnected. */
 342:../src/main.c **** 	LPC_SC->PLL1CON = 0;
 4705              		.loc 1 342 0
 4706 01ce 294B     		ldr	r3, .L17
 4707 01d0 4FF00002 		mov	r2, #0
 4708 01d4 C3F8A020 		str	r2, [r3, #160]
 343:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED1;
 4709              		.loc 1 343 0
 4710 01d8 264B     		ldr	r3, .L17
 4711 01da 4FF0AA02 		mov	r2, #170
 4712 01de C3F8AC20 		str	r2, [r3, #172]
 344:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED2;
 4713              		.loc 1 344 0
 4714 01e2 244B     		ldr	r3, .L17
 4715 01e4 4FF05502 		mov	r2, #85
 4716 01e8 C3F8AC20 		str	r2, [r3, #172]
 345:../src/main.c **** 	
 346:../src/main.c **** 	LPC_SC->PLL1CFG = 0x23;
 4717              		.loc 1 346 0
 4718 01ec 214B     		ldr	r3, .L17
 4719 01ee 4FF02302 		mov	r2, #35
 4720 01f2 C3F8A420 		str	r2, [r3, #164]
 347:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED1;
 4721              		.loc 1 347 0
 4722 01f6 1F4B     		ldr	r3, .L17
 4723 01f8 4FF0AA02 		mov	r2, #170
 4724 01fc C3F8AC20 		str	r2, [r3, #172]
 348:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED2;
 4725              		.loc 1 348 0
 4726 0200 1C4B     		ldr	r3, .L17
 4727 0202 4FF05502 		mov	r2, #85
 4728 0206 C3F8AC20 		str	r2, [r3, #172]
 349:../src/main.c **** 	      
 350:../src/main.c **** 	/* Enable PLL, disconnected. */
 351:../src/main.c **** 	LPC_SC->PLL1CON = 1;
 4729              		.loc 1 351 0
 4730 020a 1A4B     		ldr	r3, .L17
 4731 020c 4FF00102 		mov	r2, #1
 4732 0210 C3F8A020 		str	r2, [r3, #160]
 352:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED1;
 4733              		.loc 1 352 0
 4734 0214 174B     		ldr	r3, .L17
 4735 0216 4FF0AA02 		mov	r2, #170
 4736 021a C3F8AC20 		str	r2, [r3, #172]
 353:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED2;
 4737              		.loc 1 353 0
 4738 021e 154B     		ldr	r3, .L17
 4739 0220 4FF05502 		mov	r2, #85
 4740 0224 C3F8AC20 		str	r2, [r3, #172]
 354:../src/main.c **** 	while( ( ( LPC_SC->PLL1STAT & ( 1 << 10 ) ) == 0 ) );
 4741              		.loc 1 354 0
 4742 0228 00BF     		nop
 4743              	.L15:
 4744              		.loc 1 354 0 is_stmt 0 discriminator 1
 4745 022a 124B     		ldr	r3, .L17
 4746 022c D3F8A830 		ldr	r3, [r3, #168]
 4747 0230 03F48063 		and	r3, r3, #1024
 4748 0234 002B     		cmp	r3, #0
 4749 0236 F8D0     		beq	.L15
 355:../src/main.c **** 	
 356:../src/main.c **** 	/* Enable and connect. */
 357:../src/main.c **** 	LPC_SC->PLL1CON = 3;
 4750              		.loc 1 357 0 is_stmt 1
 4751 0238 0E4B     		ldr	r3, .L17
 4752 023a 4FF00302 		mov	r2, #3
 4753 023e C3F8A020 		str	r2, [r3, #160]
 358:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED1;
 4754              		.loc 1 358 0
 4755 0242 0C4B     		ldr	r3, .L17
 4756 0244 4FF0AA02 		mov	r2, #170
 4757 0248 C3F8AC20 		str	r2, [r3, #172]
 359:../src/main.c **** 	LPC_SC->PLL1FEED = PLLFEED_FEED2;
 4758              		.loc 1 359 0
 4759 024c 094B     		ldr	r3, .L17
 4760 024e 4FF05502 		mov	r2, #85
 4761 0252 C3F8AC20 		str	r2, [r3, #172]
 360:../src/main.c **** 	while( ( ( LPC_SC->PLL1STAT & ( 1 << 9 ) ) == 0 ) );
 4762              		.loc 1 360 0
 4763 0256 00BF     		nop
 4764              	.L16:
 4765              		.loc 1 360 0 is_stmt 0 discriminator 1
 4766 0258 064B     		ldr	r3, .L17
 4767 025a D3F8A830 		ldr	r3, [r3, #168]
 4768 025e 03F40073 		and	r3, r3, #512
 4769 0262 002B     		cmp	r3, #0
 4770 0264 F8D0     		beq	.L16
 361:../src/main.c **** 
 362:../src/main.c **** 	/*  Setup the peripheral bus to be the same as the PLL output (64 MHz). */
 363:../src/main.c **** 	LPC_SC->PCLKSEL0 = 0x05555555;
 4771              		.loc 1 363 0 is_stmt 1
 4772 0266 034B     		ldr	r3, .L17
 4773 0268 054A     		ldr	r2, .L17+12
 4774 026a C3F8A821 		str	r2, [r3, #424]
 364:../src/main.c **** 
 365:../src/main.c **** 	/* Configure the LEDs. */
 366:../src/main.c **** 	vLedConfig();
 4775              		.loc 1 366 0
 4776 026e FFF7FEFF 		bl	vLedConfig
 367:../src/main.c **** }
 4777              		.loc 1 367 0
 4778 0272 80BD     		pop	{r7, pc}
 4779              	.L18:
 4780              		.align	2
 4781              	.L17:
 4782 0274 00C00F40 		.word	1074774016
 4783 0278 00C00240 		.word	1073922048
 4784 027c 31000200 		.word	131121
 4785 0280 55555505 		.word	89478485
 4786              		.cfi_endproc
 4787              	.LFE32:
 4789              		.align	2
 4790              		.global	vLedConfig
 4791              		.thumb
 4792              		.thumb_func
 4794              	vLedConfig:
 4795              	.LFB33:
 368:../src/main.c **** /*-----------------------------------------------------------*/
 369:../src/main.c **** 
 370:../src/main.c **** void vLedConfig( void )
 371:../src/main.c **** {
 4796              		.loc 1 371 0
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 0
 4799              		@ frame_needed = 1, uses_anonymous_args = 0
 4800              		@ link register save eliminated.
 4801 0284 80B4     		push	{r7}
 4802              	.LCFI9:
 4803              		.cfi_def_cfa_offset 4
 4804 0286 00AF     		add	r7, sp, #0
 4805              		.cfi_offset 7, -4
 4806              	.LCFI10:
 4807              		.cfi_def_cfa_register 7
 372:../src/main.c **** 	/* LEDs on port 1. */
 373:../src/main.c **** 	LPC_GPIO3->FIODIR  = LED;
 4808              		.loc 1 373 0
 4809 0288 054B     		ldr	r3, .L20
 4810 028a 4FF00072 		mov	r2, #33554432
 4811 028e 1A60     		str	r2, [r3, #0]
 374:../src/main.c **** 
 375:../src/main.c **** 	/* Start will all LEDs off. */
 376:../src/main.c **** 	LPC_GPIO3->FIOCLR = LED;
 4812              		.loc 1 376 0
 4813 0290 034B     		ldr	r3, .L20
 4814 0292 4FF00072 		mov	r2, #33554432
 4815 0296 DA61     		str	r2, [r3, #28]
 377:../src/main.c **** }
 4816              		.loc 1 377 0
 4817 0298 BD46     		mov	sp, r7
 4818 029a 80BC     		pop	{r7}
 4819 029c 7047     		bx	lr
 4820              	.L21:
 4821 029e 00BF     		.align	2
 4822              	.L20:
 4823 02a0 60C00920 		.word	537509984
 4824              		.cfi_endproc
 4825              	.LFE33:
 4827              		.align	2
 4828              		.global	vApplicationStackOverflowHook
 4829              		.thumb
 4830              		.thumb_func
 4832              	vApplicationStackOverflowHook:
 4833              	.LFB34:
 378:../src/main.c **** 
 379:../src/main.c **** void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
 380:../src/main.c **** {
 4834              		.loc 1 380 0
 4835              		.cfi_startproc
 4836              		@ args = 0, pretend = 0, frame = 8
 4837              		@ frame_needed = 1, uses_anonymous_args = 0
 4838              		@ link register save eliminated.
 4839 02a4 80B4     		push	{r7}
 4840              	.LCFI11:
 4841              		.cfi_def_cfa_offset 4
 4842 02a6 83B0     		sub	sp, sp, #12
 4843              	.LCFI12:
 4844              		.cfi_def_cfa_offset 16
 4845 02a8 00AF     		add	r7, sp, #0
 4846              		.cfi_offset 7, -4
 4847              	.LCFI13:
 4848              		.cfi_def_cfa_register 7
 4849 02aa 7860     		str	r0, [r7, #4]
 4850 02ac 3960     		str	r1, [r7, #0]
 4851              	.L23:
 381:../src/main.c **** 	/* This function will get called if a task overflows its stack. */
 382:../src/main.c **** 
 383:../src/main.c **** 	( void ) pxTask;
 384:../src/main.c **** 	( void ) pcTaskName;
 385:../src/main.c **** 
 386:../src/main.c **** 	for( ;; );
 4852              		.loc 1 386 0 discriminator 1
 4853 02ae FEE7     		b	.L23
 4854              		.cfi_endproc
 4855              	.LFE34:
 4857              		.align	2
 4858              		.global	vConfigureTimerForRunTimeStats
 4859              		.thumb
 4860              		.thumb_func
 4862              	vConfigureTimerForRunTimeStats:
 4863              	.LFB35:
 387:../src/main.c **** }
 388:../src/main.c **** /*-----------------------------------------------------------*/
 389:../src/main.c **** 
 390:../src/main.c **** void vConfigureTimerForRunTimeStats( void )
 391:../src/main.c **** {
 4864              		.loc 1 391 0
 4865              		.cfi_startproc
 4866              		@ args = 0, pretend = 0, frame = 16
 4867              		@ frame_needed = 1, uses_anonymous_args = 0
 4868              		@ link register save eliminated.
 4869 02b0 80B4     		push	{r7}
 4870              	.LCFI14:
 4871              		.cfi_def_cfa_offset 4
 4872 02b2 85B0     		sub	sp, sp, #20
 4873              	.LCFI15:
 4874              		.cfi_def_cfa_offset 24
 4875 02b4 00AF     		add	r7, sp, #0
 4876              		.cfi_offset 7, -4
 4877              	.LCFI16:
 4878              		.cfi_def_cfa_register 7
 392:../src/main.c **** const unsigned long TCR_COUNT_RESET = 2, CTCR_CTM_TIMER = 0x00, TCR_COUNT_ENABLE = 0x01;
 4879              		.loc 1 392 0
 4880 02b6 4FF00203 		mov	r3, #2
 4881 02ba FB60     		str	r3, [r7, #12]
 4882 02bc 4FF00003 		mov	r3, #0
 4883 02c0 BB60     		str	r3, [r7, #8]
 4884 02c2 4FF00103 		mov	r3, #1
 4885 02c6 7B60     		str	r3, [r7, #4]
 393:../src/main.c **** 
 394:../src/main.c **** 	/* This function configures a timer that is used as the time base when
 395:../src/main.c **** 	collecting run time statistical information - basically the percentage
 396:../src/main.c **** 	of CPU time that each task is utilising.  It is called automatically when
 397:../src/main.c **** 	the scheduler is started (assuming configGENERATE_RUN_TIME_STATS is set
 398:../src/main.c **** 	to 1). */
 399:../src/main.c **** 
 400:../src/main.c **** 	/* Power up and feed the timer. */
 401:../src/main.c **** 	LPC_SC->PCONP |= 0x02UL;
 4886              		.loc 1 401 0
 4887 02c8 134B     		ldr	r3, .L25
 4888 02ca 134A     		ldr	r2, .L25
 4889 02cc D2F8C420 		ldr	r2, [r2, #196]
 4890 02d0 42F00202 		orr	r2, r2, #2
 4891 02d4 C3F8C420 		str	r2, [r3, #196]
 402:../src/main.c **** 	LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
 4892              		.loc 1 402 0
 4893 02d8 0F4B     		ldr	r3, .L25
 4894 02da 0F4A     		ldr	r2, .L25
 4895 02dc D2F8A821 		ldr	r2, [r2, #424]
 4896 02e0 22F00C02 		bic	r2, r2, #12
 4897 02e4 42F00402 		orr	r2, r2, #4
 4898 02e8 C3F8A821 		str	r2, [r3, #424]
 403:../src/main.c **** 
 404:../src/main.c **** 	/* Reset Timer 0 */
 405:../src/main.c **** 	LPC_TIM0->TCR = TCR_COUNT_RESET;
 4899              		.loc 1 405 0
 4900 02ec 4FF04023 		mov	r3, #1073758208
 4901 02f0 FA68     		ldr	r2, [r7, #12]
 4902 02f2 5A60     		str	r2, [r3, #4]
 406:../src/main.c **** 
 407:../src/main.c **** 	/* Just count up. */
 408:../src/main.c **** 	LPC_TIM0->CTCR = CTCR_CTM_TIMER;
 4903              		.loc 1 408 0
 4904 02f4 4FF04023 		mov	r3, #1073758208
 4905 02f8 BA68     		ldr	r2, [r7, #8]
 4906 02fa 1A67     		str	r2, [r3, #112]
 409:../src/main.c **** 
 410:../src/main.c **** 	/* Prescale to a frequency that is good enough to get a decent resolution,
 411:../src/main.c **** 	but not too fast so as to overflow all the time. */
 412:../src/main.c **** 	LPC_TIM0->PR =  ( configCPU_CLOCK_HZ / 10000UL ) - 1UL;
 4907              		.loc 1 412 0
 4908 02fc 4FF04023 		mov	r3, #1073758208
 4909 0300 42F2AB62 		movw	r2, #9899
 4910 0304 DA60     		str	r2, [r3, #12]
 413:../src/main.c **** 
 414:../src/main.c **** 	/* Start the counter. */
 415:../src/main.c **** 	LPC_TIM0->TCR = TCR_COUNT_ENABLE;
 4911              		.loc 1 415 0
 4912 0306 4FF04023 		mov	r3, #1073758208
 4913 030a 7A68     		ldr	r2, [r7, #4]
 4914 030c 5A60     		str	r2, [r3, #4]
 416:../src/main.c **** }
 4915              		.loc 1 416 0
 4916 030e 07F11407 		add	r7, r7, #20
 4917 0312 BD46     		mov	sp, r7
 4918 0314 80BC     		pop	{r7}
 4919 0316 7047     		bx	lr
 4920              	.L26:
 4921              		.align	2
 4922              	.L25:
 4923 0318 00C00F40 		.word	1074774016
 4924              		.cfi_endproc
 4925              	.LFE35:
 4927              		.bss
 4928              		.align	2
 4929              	ulTicksSinceLastDisplay.6123:
 4930 0000 00000000 		.space	4
 4931              		.text
 4932              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccDrtc7r.s:4403   .rodata:00000000 $d
     /tmp/ccDrtc7r.s:4407   .data:00000000 $d
     /tmp/ccDrtc7r.s:4410   .data:00000000 pcStatusMessage
     /tmp/ccDrtc7r.s:4420   .text:00000000 $t
     /tmp/ccDrtc7r.s:4425   .text:00000000 main
     /tmp/ccDrtc7r.s:4548   .text:00000084 prvSetupHardware
     /tmp/ccDrtc7r.s:4478   .text:00000058 $d
     /tmp/ccDrtc7r.s:4484   .text:00000064 $t
     /tmp/ccDrtc7r.s:4489   .text:00000064 vApplicationTickHook
     /tmp/ccDrtc7r.s:4515   .text:00000070 pcGetTaskStatusMessage
     /tmp/ccDrtc7r.s:4540   .text:00000080 $d
     /tmp/ccDrtc7r.s:4544   .text:00000084 $t
     /tmp/ccDrtc7r.s:4794   .text:00000284 vLedConfig
     /tmp/ccDrtc7r.s:4782   .text:00000274 $d
     /tmp/ccDrtc7r.s:4789   .text:00000284 $t
     /tmp/ccDrtc7r.s:4823   .text:000002a0 $d
     /tmp/ccDrtc7r.s:4827   .text:000002a4 $t
     /tmp/ccDrtc7r.s:4832   .text:000002a4 vApplicationStackOverflowHook
     /tmp/ccDrtc7r.s:4862   .text:000002b0 vConfigureTimerForRunTimeStats
     /tmp/ccDrtc7r.s:4923   .text:00000318 $d
     /tmp/ccDrtc7r.s:4928   .bss:00000000 $d
     /tmp/ccDrtc7r.s:4929   .bss:00000000 ulTicksSinceLastDisplay.6123
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskGenericCreate
sprintf
vTaskStartScheduler
vTestTask
