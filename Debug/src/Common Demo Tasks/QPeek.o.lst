   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"QPeek.c"
  23              	.Ltext0:
  24              		.file 1 "../src/Common Demo Tasks/QPeek.c"
 4119              		.align	2
 4120              	xErrorDetected:
 4121 0000 00000000 		.space	4
 4122              		.align	2
 4123              	ulLoopCounter:
 4124 0004 00000000 		.space	4
 4125              		.comm	xMediumPriorityTask,4,4
 4126              		.comm	xHighPriorityTask,4,4
 4127              		.comm	xHighestPriorityTask,4,4
 4128              		.section	.rodata
 4129              		.align	2
 4130              	.LC0:
 4131 0000 51506565 		.ascii	"QPeek_Test_Queue\000"
 4131      6B5F5465 
 4131      73745F51 
 4131      75657565 
 4131      00
 4132 0011 000000   		.align	2
 4133              	.LC1:
 4134 0014 5065656B 		.ascii	"PeekL\000"
 4134      4C00
 4135 001a 0000     		.align	2
 4136              	.LC2:
 4137 001c 5065656B 		.ascii	"PeekM\000"
 4137      4D00
 4138 0022 0000     		.align	2
 4139              	.LC3:
 4140 0024 5065656B 		.ascii	"PeekH1\000"
 4140      483100
 4141 002b 00       		.align	2
 4142              	.LC4:
 4143 002c 5065656B 		.ascii	"PeekH2\000"
 4143      483200
 4144 0033 00       		.text
 4145              		.align	2
 4146              		.global	vStartQueuePeekTasks
 4147              		.thumb
 4148              		.thumb_func
 4150              	vStartQueuePeekTasks:
 4151              	.LFB29:
   1:../src/Common Demo Tasks/QPeek.c **** /*
   2:../src/Common Demo Tasks/QPeek.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../src/Common Demo Tasks/QPeek.c **** 	
   4:../src/Common Demo Tasks/QPeek.c **** 
   5:../src/Common Demo Tasks/QPeek.c ****     ***************************************************************************
   6:../src/Common Demo Tasks/QPeek.c ****      *                                                                       *
   7:../src/Common Demo Tasks/QPeek.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../src/Common Demo Tasks/QPeek.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../src/Common Demo Tasks/QPeek.c ****      *    available.                                                         *
  10:../src/Common Demo Tasks/QPeek.c ****      *                                                                       *
  11:../src/Common Demo Tasks/QPeek.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../src/Common Demo Tasks/QPeek.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../src/Common Demo Tasks/QPeek.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../src/Common Demo Tasks/QPeek.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../src/Common Demo Tasks/QPeek.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../src/Common Demo Tasks/QPeek.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../src/Common Demo Tasks/QPeek.c ****      *                                                                       *
  18:../src/Common Demo Tasks/QPeek.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../src/Common Demo Tasks/QPeek.c ****      *                                                                       *
  20:../src/Common Demo Tasks/QPeek.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../src/Common Demo Tasks/QPeek.c ****      *                                                                       *
  22:../src/Common Demo Tasks/QPeek.c ****     ***************************************************************************
  23:../src/Common Demo Tasks/QPeek.c **** 
  24:../src/Common Demo Tasks/QPeek.c **** 
  25:../src/Common Demo Tasks/QPeek.c ****     This file is part of the FreeRTOS distribution.
  26:../src/Common Demo Tasks/QPeek.c **** 
  27:../src/Common Demo Tasks/QPeek.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../src/Common Demo Tasks/QPeek.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../src/Common Demo Tasks/QPeek.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../src/Common Demo Tasks/QPeek.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../src/Common Demo Tasks/QPeek.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../src/Common Demo Tasks/QPeek.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../src/Common Demo Tasks/QPeek.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../src/Common Demo Tasks/QPeek.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../src/Common Demo Tasks/QPeek.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../src/Common Demo Tasks/QPeek.c ****     more details. You should have received a copy of the GNU General Public
  37:../src/Common Demo Tasks/QPeek.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../src/Common Demo Tasks/QPeek.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../src/Common Demo Tasks/QPeek.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../src/Common Demo Tasks/QPeek.c ****     FreeRTOS WEB site.
  41:../src/Common Demo Tasks/QPeek.c **** 
  42:../src/Common Demo Tasks/QPeek.c ****     1 tab == 4 spaces!
  43:../src/Common Demo Tasks/QPeek.c **** 
  44:../src/Common Demo Tasks/QPeek.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../src/Common Demo Tasks/QPeek.c ****     contact details.
  46:../src/Common Demo Tasks/QPeek.c **** 
  47:../src/Common Demo Tasks/QPeek.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../src/Common Demo Tasks/QPeek.c ****     critical systems.
  49:../src/Common Demo Tasks/QPeek.c **** 
  50:../src/Common Demo Tasks/QPeek.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../src/Common Demo Tasks/QPeek.c ****     licensing and training services.
  52:../src/Common Demo Tasks/QPeek.c **** */
  53:../src/Common Demo Tasks/QPeek.c **** 
  54:../src/Common Demo Tasks/QPeek.c **** 
  55:../src/Common Demo Tasks/QPeek.c **** /* 
  56:../src/Common Demo Tasks/QPeek.c ****  * Tests the behaviour when data is peeked from a queue when there are
  57:../src/Common Demo Tasks/QPeek.c ****  * multiple tasks blocked on the queue.
  58:../src/Common Demo Tasks/QPeek.c ****  */
  59:../src/Common Demo Tasks/QPeek.c **** 
  60:../src/Common Demo Tasks/QPeek.c **** 
  61:../src/Common Demo Tasks/QPeek.c **** #include <stdlib.h>
  62:../src/Common Demo Tasks/QPeek.c **** 
  63:../src/Common Demo Tasks/QPeek.c **** /* Scheduler include files. */
  64:../src/Common Demo Tasks/QPeek.c **** #include "FreeRTOS.h"
  65:../src/Common Demo Tasks/QPeek.c **** #include "task.h"
  66:../src/Common Demo Tasks/QPeek.c **** #include "queue.h"
  67:../src/Common Demo Tasks/QPeek.c **** #include "semphr.h"
  68:../src/Common Demo Tasks/QPeek.c **** 
  69:../src/Common Demo Tasks/QPeek.c **** /* Demo program include files. */
  70:../src/Common Demo Tasks/QPeek.c **** #include "QPeek.h"
  71:../src/Common Demo Tasks/QPeek.c **** 
  72:../src/Common Demo Tasks/QPeek.c **** #define qpeekQUEUE_LENGTH		( 5 )
  73:../src/Common Demo Tasks/QPeek.c **** #define qpeekNO_BLOCK			( 0 )
  74:../src/Common Demo Tasks/QPeek.c **** #define qpeekSHORT_DELAY		( 10 )
  75:../src/Common Demo Tasks/QPeek.c **** 
  76:../src/Common Demo Tasks/QPeek.c **** #define qpeekLOW_PRIORITY			( tskIDLE_PRIORITY + 0 )
  77:../src/Common Demo Tasks/QPeek.c **** #define qpeekMEDIUM_PRIORITY		( tskIDLE_PRIORITY + 1 )
  78:../src/Common Demo Tasks/QPeek.c **** #define qpeekHIGH_PRIORITY			( tskIDLE_PRIORITY + 2 )
  79:../src/Common Demo Tasks/QPeek.c **** #define qpeekHIGHEST_PRIORITY		( tskIDLE_PRIORITY + 3 )
  80:../src/Common Demo Tasks/QPeek.c **** 
  81:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
  82:../src/Common Demo Tasks/QPeek.c **** 
  83:../src/Common Demo Tasks/QPeek.c **** /*
  84:../src/Common Demo Tasks/QPeek.c ****  * The following three tasks are used to demonstrate the peeking behaviour.
  85:../src/Common Demo Tasks/QPeek.c ****  * Each task is given a different priority to demonstrate the order in which
  86:../src/Common Demo Tasks/QPeek.c ****  * tasks are woken as data is peeked from a queue.
  87:../src/Common Demo Tasks/QPeek.c ****  */
  88:../src/Common Demo Tasks/QPeek.c **** static void prvLowPriorityPeekTask( void *pvParameters );
  89:../src/Common Demo Tasks/QPeek.c **** static void prvMediumPriorityPeekTask( void *pvParameters );
  90:../src/Common Demo Tasks/QPeek.c **** static void prvHighPriorityPeekTask( void *pvParameters );
  91:../src/Common Demo Tasks/QPeek.c **** static void prvHighestPriorityPeekTask( void *pvParameters );
  92:../src/Common Demo Tasks/QPeek.c **** 
  93:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
  94:../src/Common Demo Tasks/QPeek.c **** 
  95:../src/Common Demo Tasks/QPeek.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
  96:../src/Common Demo Tasks/QPeek.c **** detected in any of the tasks. */
  97:../src/Common Demo Tasks/QPeek.c **** static volatile portBASE_TYPE xErrorDetected = pdFALSE;
  98:../src/Common Demo Tasks/QPeek.c **** 
  99:../src/Common Demo Tasks/QPeek.c **** /* Counter that is incremented on each cycle of a test.  This is used to
 100:../src/Common Demo Tasks/QPeek.c **** detect a stalled task - a test that is no longer running. */
 101:../src/Common Demo Tasks/QPeek.c **** static volatile unsigned portLONG ulLoopCounter = 0;
 102:../src/Common Demo Tasks/QPeek.c **** 
 103:../src/Common Demo Tasks/QPeek.c **** /* Handles to the test tasks. */
 104:../src/Common Demo Tasks/QPeek.c **** xTaskHandle xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
 105:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 106:../src/Common Demo Tasks/QPeek.c **** 
 107:../src/Common Demo Tasks/QPeek.c **** void vStartQueuePeekTasks( void )
 108:../src/Common Demo Tasks/QPeek.c **** {
 4152              		.loc 1 108 0
 4153              		.cfi_startproc
 4154              		@ args = 0, pretend = 0, frame = 8
 4155              		@ frame_needed = 1, uses_anonymous_args = 0
 4156 0000 80B5     		push	{r7, lr}
 4157              	.LCFI0:
 4158              		.cfi_def_cfa_offset 8
 4159 0002 86B0     		sub	sp, sp, #24
 4160              	.LCFI1:
 4161              		.cfi_def_cfa_offset 32
 4162 0004 04AF     		add	r7, sp, #16
 4163              		.cfi_offset 14, -4
 4164              		.cfi_offset 7, -8
 4165              	.LCFI2:
 4166              		.cfi_def_cfa 7, 16
 109:../src/Common Demo Tasks/QPeek.c **** xQueueHandle xQueue;
 110:../src/Common Demo Tasks/QPeek.c **** 
 111:../src/Common Demo Tasks/QPeek.c **** 	/* Create the queue that we are going to use for the test/demo. */
 112:../src/Common Demo Tasks/QPeek.c **** 	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( unsigned portLONG ) );
 4167              		.loc 1 112 0
 4168 0006 4FF00500 		mov	r0, #5
 4169 000a 4FF00401 		mov	r1, #4
 4170 000e 4FF00002 		mov	r2, #0
 4171 0012 FFF7FEFF 		bl	xQueueGenericCreate
 4172 0016 7860     		str	r0, [r7, #4]
 113:../src/Common Demo Tasks/QPeek.c **** 
 114:../src/Common Demo Tasks/QPeek.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 115:../src/Common Demo Tasks/QPeek.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 116:../src/Common Demo Tasks/QPeek.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 117:../src/Common Demo Tasks/QPeek.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 118:../src/Common Demo Tasks/QPeek.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 119:../src/Common Demo Tasks/QPeek.c **** 	defined to be less than 1. */
 120:../src/Common Demo Tasks/QPeek.c **** 	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "QPeek_Test_Queue" );
 4173              		.loc 1 120 0
 4174 0018 2A4B     		ldr	r3, .L2
 4175 001a 7868     		ldr	r0, [r7, #4]
 4176 001c 1946     		mov	r1, r3
 4177 001e FFF7FEFF 		bl	vQueueAddToRegistry
 121:../src/Common Demo Tasks/QPeek.c **** 
 122:../src/Common Demo Tasks/QPeek.c **** 	/* Create the demo tasks and pass it the queue just created.  We are
 123:../src/Common Demo Tasks/QPeek.c **** 	passing the queue handle by value so it does not matter that it is declared
 124:../src/Common Demo Tasks/QPeek.c **** 	on the stack here. */
 125:../src/Common Demo Tasks/QPeek.c **** 	xTaskCreate( prvLowPriorityPeekTask, ( signed portCHAR * )"PeekL", configMINIMAL_STACK_SIZE, ( voi
 4178              		.loc 1 125 0
 4179 0022 294B     		ldr	r3, .L2+4
 4180 0024 4FF00002 		mov	r2, #0
 4181 0028 0092     		str	r2, [sp, #0]
 4182 002a 4FF00002 		mov	r2, #0
 4183 002e 0192     		str	r2, [sp, #4]
 4184 0030 4FF00002 		mov	r2, #0
 4185 0034 0292     		str	r2, [sp, #8]
 4186 0036 4FF00002 		mov	r2, #0
 4187 003a 0392     		str	r2, [sp, #12]
 4188 003c 2348     		ldr	r0, .L2+8
 4189 003e 1946     		mov	r1, r3
 4190 0040 4FF05002 		mov	r2, #80
 4191 0044 7B68     		ldr	r3, [r7, #4]
 4192 0046 FFF7FEFF 		bl	xTaskGenericCreate
 126:../src/Common Demo Tasks/QPeek.c **** 	xTaskCreate( prvMediumPriorityPeekTask, ( signed portCHAR * )"PeekM", configMINIMAL_STACK_SIZE, ( 
 4193              		.loc 1 126 0
 4194 004a 214B     		ldr	r3, .L2+12
 4195 004c 4FF00102 		mov	r2, #1
 4196 0050 0092     		str	r2, [sp, #0]
 4197 0052 204A     		ldr	r2, .L2+16
 4198 0054 0192     		str	r2, [sp, #4]
 4199 0056 4FF00002 		mov	r2, #0
 4200 005a 0292     		str	r2, [sp, #8]
 4201 005c 4FF00002 		mov	r2, #0
 4202 0060 0392     		str	r2, [sp, #12]
 4203 0062 1D48     		ldr	r0, .L2+20
 4204 0064 1946     		mov	r1, r3
 4205 0066 4FF05002 		mov	r2, #80
 4206 006a 7B68     		ldr	r3, [r7, #4]
 4207 006c FFF7FEFF 		bl	xTaskGenericCreate
 127:../src/Common Demo Tasks/QPeek.c **** 	xTaskCreate( prvHighPriorityPeekTask, ( signed portCHAR * )"PeekH1", configMINIMAL_STACK_SIZE, ( v
 4208              		.loc 1 127 0
 4209 0070 1A4B     		ldr	r3, .L2+24
 4210 0072 4FF00202 		mov	r2, #2
 4211 0076 0092     		str	r2, [sp, #0]
 4212 0078 194A     		ldr	r2, .L2+28
 4213 007a 0192     		str	r2, [sp, #4]
 4214 007c 4FF00002 		mov	r2, #0
 4215 0080 0292     		str	r2, [sp, #8]
 4216 0082 4FF00002 		mov	r2, #0
 4217 0086 0392     		str	r2, [sp, #12]
 4218 0088 1648     		ldr	r0, .L2+32
 4219 008a 1946     		mov	r1, r3
 4220 008c 4FF05002 		mov	r2, #80
 4221 0090 7B68     		ldr	r3, [r7, #4]
 4222 0092 FFF7FEFF 		bl	xTaskGenericCreate
 128:../src/Common Demo Tasks/QPeek.c **** 	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, 
 4223              		.loc 1 128 0
 4224 0096 144B     		ldr	r3, .L2+36
 4225 0098 4FF00302 		mov	r2, #3
 4226 009c 0092     		str	r2, [sp, #0]
 4227 009e 134A     		ldr	r2, .L2+40
 4228 00a0 0192     		str	r2, [sp, #4]
 4229 00a2 4FF00002 		mov	r2, #0
 4230 00a6 0292     		str	r2, [sp, #8]
 4231 00a8 4FF00002 		mov	r2, #0
 4232 00ac 0392     		str	r2, [sp, #12]
 4233 00ae 1048     		ldr	r0, .L2+44
 4234 00b0 1946     		mov	r1, r3
 4235 00b2 4FF05002 		mov	r2, #80
 4236 00b6 7B68     		ldr	r3, [r7, #4]
 4237 00b8 FFF7FEFF 		bl	xTaskGenericCreate
 129:../src/Common Demo Tasks/QPeek.c **** }
 4238              		.loc 1 129 0
 4239 00bc 07F10807 		add	r7, r7, #8
 4240 00c0 BD46     		mov	sp, r7
 4241 00c2 80BD     		pop	{r7, pc}
 4242              	.L3:
 4243              		.align	2
 4244              	.L2:
 4245 00c4 00000000 		.word	.LC0
 4246 00c8 14000000 		.word	.LC1
 4247 00cc 00000000 		.word	prvLowPriorityPeekTask
 4248 00d0 1C000000 		.word	.LC2
 4249 00d4 00000000 		.word	xMediumPriorityTask
 4250 00d8 00000000 		.word	prvMediumPriorityPeekTask
 4251 00dc 24000000 		.word	.LC3
 4252 00e0 00000000 		.word	xHighPriorityTask
 4253 00e4 00000000 		.word	prvHighPriorityPeekTask
 4254 00e8 2C000000 		.word	.LC4
 4255 00ec 00000000 		.word	xHighestPriorityTask
 4256 00f0 00000000 		.word	prvHighestPriorityPeekTask
 4257              		.cfi_endproc
 4258              	.LFE29:
 4260              		.align	2
 4261              		.thumb
 4262              		.thumb_func
 4264              	prvHighestPriorityPeekTask:
 4265              	.LFB30:
 130:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 131:../src/Common Demo Tasks/QPeek.c **** 
 132:../src/Common Demo Tasks/QPeek.c **** static void prvHighestPriorityPeekTask( void *pvParameters )
 133:../src/Common Demo Tasks/QPeek.c **** {
 4266              		.loc 1 133 0
 4267              		.cfi_startproc
 4268              		@ args = 0, pretend = 0, frame = 16
 4269              		@ frame_needed = 1, uses_anonymous_args = 0
 4270 00f4 80B5     		push	{r7, lr}
 4271              	.LCFI3:
 4272              		.cfi_def_cfa_offset 8
 4273 00f6 84B0     		sub	sp, sp, #16
 4274              	.LCFI4:
 4275              		.cfi_def_cfa_offset 24
 4276 00f8 00AF     		add	r7, sp, #0
 4277              		.cfi_offset 14, -4
 4278              		.cfi_offset 7, -8
 4279              	.LCFI5:
 4280              		.cfi_def_cfa_register 7
 4281 00fa 7860     		str	r0, [r7, #4]
 134:../src/Common Demo Tasks/QPeek.c **** xQueueHandle xQueue = ( xQueueHandle ) pvParameters;
 4282              		.loc 1 134 0
 4283 00fc 7B68     		ldr	r3, [r7, #4]
 4284 00fe FB60     		str	r3, [r7, #12]
 4285              	.L15:
 135:../src/Common Demo Tasks/QPeek.c **** unsigned portLONG ulValue;
 136:../src/Common Demo Tasks/QPeek.c **** 
 137:../src/Common Demo Tasks/QPeek.c **** 	#ifdef USE_STDIO
 138:../src/Common Demo Tasks/QPeek.c **** 	{
 139:../src/Common Demo Tasks/QPeek.c **** 		void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 140:../src/Common Demo Tasks/QPeek.c **** 	
 141:../src/Common Demo Tasks/QPeek.c **** 		const portCHAR * const pcTaskStartMsg = "Queue peek test started.\r\n";
 142:../src/Common Demo Tasks/QPeek.c **** 
 143:../src/Common Demo Tasks/QPeek.c **** 		/* Queue a message for printing to say the task has started. */
 144:../src/Common Demo Tasks/QPeek.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 145:../src/Common Demo Tasks/QPeek.c **** 	}
 146:../src/Common Demo Tasks/QPeek.c **** 	#endif
 147:../src/Common Demo Tasks/QPeek.c **** 
 148:../src/Common Demo Tasks/QPeek.c **** 	for( ;; )
 149:../src/Common Demo Tasks/QPeek.c **** 	{
 150:../src/Common Demo Tasks/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 151:../src/Common Demo Tasks/QPeek.c **** 		block, allowing the high priority task to execute. */
 152:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4286              		.loc 1 152 0
 4287 0100 07F10803 		add	r3, r7, #8
 4288 0104 F868     		ldr	r0, [r7, #12]
 4289 0106 1946     		mov	r1, r3
 4290 0108 4FF0FF32 		mov	r2, #-1
 4291 010c 4FF00103 		mov	r3, #1
 4292 0110 FFF7FEFF 		bl	xQueueGenericReceive
 4293 0114 0346     		mov	r3, r0
 4294 0116 012B     		cmp	r3, #1
 4295 0118 03D0     		beq	.L5
 153:../src/Common Demo Tasks/QPeek.c **** 		{
 154:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 155:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4296              		.loc 1 155 0
 4297 011a 3B4B     		ldr	r3, .L16
 4298 011c 4FF00102 		mov	r2, #1
 4299 0120 1A60     		str	r2, [r3, #0]
 4300              	.L5:
 156:../src/Common Demo Tasks/QPeek.c **** 		}
 157:../src/Common Demo Tasks/QPeek.c **** 
 158:../src/Common Demo Tasks/QPeek.c **** 		/* When we reach here the high and medium priority tasks should still
 159:../src/Common Demo Tasks/QPeek.c **** 		be blocked on the queue.  We unblocked because the low priority task
 160:../src/Common Demo Tasks/QPeek.c **** 		wrote a value to the queue, which we should have peeked.  Peeking the
 161:../src/Common Demo Tasks/QPeek.c **** 		data (rather than receiving it) will leave the data on the queue, so
 162:../src/Common Demo Tasks/QPeek.c **** 		the high priority task should then have also been unblocked, but not
 163:../src/Common Demo Tasks/QPeek.c **** 		yet executed. */
 164:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x11223344 )
 4301              		.loc 1 164 0
 4302 0122 BA68     		ldr	r2, [r7, #8]
 4303 0124 394B     		ldr	r3, .L16+4
 4304 0126 9A42     		cmp	r2, r3
 4305 0128 03D0     		beq	.L6
 165:../src/Common Demo Tasks/QPeek.c **** 		{
 166:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value. */
 167:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4306              		.loc 1 167 0
 4307 012a 374B     		ldr	r3, .L16
 4308 012c 4FF00102 		mov	r2, #1
 4309 0130 1A60     		str	r2, [r3, #0]
 4310              	.L6:
 168:../src/Common Demo Tasks/QPeek.c **** 		}
 169:../src/Common Demo Tasks/QPeek.c **** 
 170:../src/Common Demo Tasks/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 4311              		.loc 1 170 0
 4312 0132 F868     		ldr	r0, [r7, #12]
 4313 0134 FFF7FEFF 		bl	uxQueueMessagesWaiting
 4314 0138 0346     		mov	r3, r0
 4315 013a 012B     		cmp	r3, #1
 4316 013c 03D0     		beq	.L7
 171:../src/Common Demo Tasks/QPeek.c **** 		{
 172:../src/Common Demo Tasks/QPeek.c **** 			/* The message should have been left on the queue. */
 173:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4317              		.loc 1 173 0
 4318 013e 324B     		ldr	r3, .L16
 4319 0140 4FF00102 		mov	r2, #1
 4320 0144 1A60     		str	r2, [r3, #0]
 4321              	.L7:
 174:../src/Common Demo Tasks/QPeek.c **** 		}
 175:../src/Common Demo Tasks/QPeek.c **** 
 176:../src/Common Demo Tasks/QPeek.c **** 		/* Now we are going to actually receive the data, so when the high
 177:../src/Common Demo Tasks/QPeek.c **** 		priority task runs it will find the queue empty and return to the
 178:../src/Common Demo Tasks/QPeek.c **** 		blocked state. */
 179:../src/Common Demo Tasks/QPeek.c **** 		ulValue = 0;
 4322              		.loc 1 179 0
 4323 0146 4FF00003 		mov	r3, #0
 4324 014a BB60     		str	r3, [r7, #8]
 180:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 4325              		.loc 1 180 0
 4326 014c 07F10803 		add	r3, r7, #8
 4327 0150 F868     		ldr	r0, [r7, #12]
 4328 0152 1946     		mov	r1, r3
 4329 0154 4FF00002 		mov	r2, #0
 4330 0158 4FF00003 		mov	r3, #0
 4331 015c FFF7FEFF 		bl	xQueueGenericReceive
 4332 0160 0346     		mov	r3, r0
 4333 0162 012B     		cmp	r3, #1
 4334 0164 03D0     		beq	.L8
 181:../src/Common Demo Tasks/QPeek.c **** 		{
 182:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to receive the value. */
 183:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4335              		.loc 1 183 0
 4336 0166 284B     		ldr	r3, .L16
 4337 0168 4FF00102 		mov	r2, #1
 4338 016c 1A60     		str	r2, [r3, #0]
 4339              	.L8:
 184:../src/Common Demo Tasks/QPeek.c **** 		}
 185:../src/Common Demo Tasks/QPeek.c **** 
 186:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x11223344 )
 4340              		.loc 1 186 0
 4341 016e BA68     		ldr	r2, [r7, #8]
 4342 0170 264B     		ldr	r3, .L16+4
 4343 0172 9A42     		cmp	r2, r3
 4344 0174 03D0     		beq	.L9
 187:../src/Common Demo Tasks/QPeek.c **** 		{
 188:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value - which should have been
 189:../src/Common Demo Tasks/QPeek.c **** 			the same value as was peeked. */
 190:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4345              		.loc 1 190 0
 4346 0176 244B     		ldr	r3, .L16
 4347 0178 4FF00102 		mov	r2, #1
 4348 017c 1A60     		str	r2, [r3, #0]
 4349              	.L9:
 191:../src/Common Demo Tasks/QPeek.c **** 		}
 192:../src/Common Demo Tasks/QPeek.c **** 
 193:../src/Common Demo Tasks/QPeek.c **** 		/* Now we will block again as the queue is once more empty.  The low 
 194:../src/Common Demo Tasks/QPeek.c **** 		priority task can then execute again. */
 195:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4350              		.loc 1 195 0
 4351 017e 07F10803 		add	r3, r7, #8
 4352 0182 F868     		ldr	r0, [r7, #12]
 4353 0184 1946     		mov	r1, r3
 4354 0186 4FF0FF32 		mov	r2, #-1
 4355 018a 4FF00103 		mov	r3, #1
 4356 018e FFF7FEFF 		bl	xQueueGenericReceive
 4357 0192 0346     		mov	r3, r0
 4358 0194 012B     		cmp	r3, #1
 4359 0196 03D0     		beq	.L10
 196:../src/Common Demo Tasks/QPeek.c **** 		{
 197:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 198:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4360              		.loc 1 198 0
 4361 0198 1B4B     		ldr	r3, .L16
 4362 019a 4FF00102 		mov	r2, #1
 4363 019e 1A60     		str	r2, [r3, #0]
 4364              	.L10:
 199:../src/Common Demo Tasks/QPeek.c **** 		}
 200:../src/Common Demo Tasks/QPeek.c **** 
 201:../src/Common Demo Tasks/QPeek.c **** 		/* When we get here the low priority task should have again written to the
 202:../src/Common Demo Tasks/QPeek.c **** 		queue. */
 203:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x01234567 )
 4365              		.loc 1 203 0
 4366 01a0 BA68     		ldr	r2, [r7, #8]
 4367 01a2 1B4B     		ldr	r3, .L16+8
 4368 01a4 9A42     		cmp	r2, r3
 4369 01a6 03D0     		beq	.L11
 204:../src/Common Demo Tasks/QPeek.c **** 		{
 205:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value. */
 206:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4370              		.loc 1 206 0
 4371 01a8 174B     		ldr	r3, .L16
 4372 01aa 4FF00102 		mov	r2, #1
 4373 01ae 1A60     		str	r2, [r3, #0]
 4374              	.L11:
 207:../src/Common Demo Tasks/QPeek.c **** 		}
 208:../src/Common Demo Tasks/QPeek.c **** 
 209:../src/Common Demo Tasks/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 4375              		.loc 1 209 0
 4376 01b0 F868     		ldr	r0, [r7, #12]
 4377 01b2 FFF7FEFF 		bl	uxQueueMessagesWaiting
 4378 01b6 0346     		mov	r3, r0
 4379 01b8 012B     		cmp	r3, #1
 4380 01ba 03D0     		beq	.L12
 210:../src/Common Demo Tasks/QPeek.c **** 		{
 211:../src/Common Demo Tasks/QPeek.c **** 			/* The message should have been left on the queue. */
 212:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4381              		.loc 1 212 0
 4382 01bc 124B     		ldr	r3, .L16
 4383 01be 4FF00102 		mov	r2, #1
 4384 01c2 1A60     		str	r2, [r3, #0]
 4385              	.L12:
 213:../src/Common Demo Tasks/QPeek.c **** 		}
 214:../src/Common Demo Tasks/QPeek.c **** 
 215:../src/Common Demo Tasks/QPeek.c **** 		/* We only peeked the data, so suspending ourselves now should enable
 216:../src/Common Demo Tasks/QPeek.c **** 		the high priority task to also peek the data.  The high priority task
 217:../src/Common Demo Tasks/QPeek.c **** 		will have been unblocked when we peeked the data as we left the data
 218:../src/Common Demo Tasks/QPeek.c **** 		in the queue. */
 219:../src/Common Demo Tasks/QPeek.c **** 		vTaskSuspend( NULL );
 4386              		.loc 1 219 0
 4387 01c4 4FF00000 		mov	r0, #0
 4388 01c8 FFF7FEFF 		bl	vTaskSuspend
 220:../src/Common Demo Tasks/QPeek.c **** 
 221:../src/Common Demo Tasks/QPeek.c **** 
 222:../src/Common Demo Tasks/QPeek.c **** 
 223:../src/Common Demo Tasks/QPeek.c **** 		/* This time we are going to do the same as the above test, but the
 224:../src/Common Demo Tasks/QPeek.c **** 		high priority task is going to receive the data, rather than peek it.
 225:../src/Common Demo Tasks/QPeek.c **** 		This means that the medium priority task should never peek the value. */
 226:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4389              		.loc 1 226 0
 4390 01cc 07F10803 		add	r3, r7, #8
 4391 01d0 F868     		ldr	r0, [r7, #12]
 4392 01d2 1946     		mov	r1, r3
 4393 01d4 4FF0FF32 		mov	r2, #-1
 4394 01d8 4FF00103 		mov	r3, #1
 4395 01dc FFF7FEFF 		bl	xQueueGenericReceive
 4396 01e0 0346     		mov	r3, r0
 4397 01e2 012B     		cmp	r3, #1
 4398 01e4 03D0     		beq	.L13
 227:../src/Common Demo Tasks/QPeek.c **** 		{
 228:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4399              		.loc 1 228 0
 4400 01e6 084B     		ldr	r3, .L16
 4401 01e8 4FF00102 		mov	r2, #1
 4402 01ec 1A60     		str	r2, [r3, #0]
 4403              	.L13:
 229:../src/Common Demo Tasks/QPeek.c **** 		}
 230:../src/Common Demo Tasks/QPeek.c **** 
 231:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0xaabbaabb )
 4404              		.loc 1 231 0
 4405 01ee BA68     		ldr	r2, [r7, #8]
 4406 01f0 084B     		ldr	r3, .L16+12
 4407 01f2 9A42     		cmp	r2, r3
 4408 01f4 03D0     		beq	.L14
 232:../src/Common Demo Tasks/QPeek.c **** 		{
 233:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4409              		.loc 1 233 0
 4410 01f6 044B     		ldr	r3, .L16
 4411 01f8 4FF00102 		mov	r2, #1
 4412 01fc 1A60     		str	r2, [r3, #0]
 4413              	.L14:
 234:../src/Common Demo Tasks/QPeek.c **** 		}
 235:../src/Common Demo Tasks/QPeek.c **** 
 236:../src/Common Demo Tasks/QPeek.c **** 		vTaskSuspend( NULL );		
 4414              		.loc 1 236 0
 4415 01fe 4FF00000 		mov	r0, #0
 4416 0202 FFF7FEFF 		bl	vTaskSuspend
 237:../src/Common Demo Tasks/QPeek.c **** 	}
 4417              		.loc 1 237 0
 4418 0206 7BE7     		b	.L15
 4419              	.L17:
 4420              		.align	2
 4421              	.L16:
 4422 0208 00000000 		.word	xErrorDetected
 4423 020c 44332211 		.word	287454020
 4424 0210 67452301 		.word	19088743
 4425 0214 BBAABBAA 		.word	-1430541637
 4426              		.cfi_endproc
 4427              	.LFE30:
 4429              		.align	2
 4430              		.thumb
 4431              		.thumb_func
 4433              	prvHighPriorityPeekTask:
 4434              	.LFB31:
 238:../src/Common Demo Tasks/QPeek.c **** }
 239:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 240:../src/Common Demo Tasks/QPeek.c **** 
 241:../src/Common Demo Tasks/QPeek.c **** static void prvHighPriorityPeekTask( void *pvParameters )
 242:../src/Common Demo Tasks/QPeek.c **** {
 4435              		.loc 1 242 0
 4436              		.cfi_startproc
 4437              		@ args = 0, pretend = 0, frame = 16
 4438              		@ frame_needed = 1, uses_anonymous_args = 0
 4439 0218 80B5     		push	{r7, lr}
 4440              	.LCFI6:
 4441              		.cfi_def_cfa_offset 8
 4442 021a 84B0     		sub	sp, sp, #16
 4443              	.LCFI7:
 4444              		.cfi_def_cfa_offset 24
 4445 021c 00AF     		add	r7, sp, #0
 4446              		.cfi_offset 14, -4
 4447              		.cfi_offset 7, -8
 4448              	.LCFI8:
 4449              		.cfi_def_cfa_register 7
 4450 021e 7860     		str	r0, [r7, #4]
 243:../src/Common Demo Tasks/QPeek.c **** xQueueHandle xQueue = ( xQueueHandle ) pvParameters;
 4451              		.loc 1 243 0
 4452 0220 7B68     		ldr	r3, [r7, #4]
 4453 0222 FB60     		str	r3, [r7, #12]
 4454              	.L24:
 244:../src/Common Demo Tasks/QPeek.c **** unsigned portLONG ulValue;
 245:../src/Common Demo Tasks/QPeek.c **** 
 246:../src/Common Demo Tasks/QPeek.c **** 	for( ;; )
 247:../src/Common Demo Tasks/QPeek.c **** 	{
 248:../src/Common Demo Tasks/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 249:../src/Common Demo Tasks/QPeek.c **** 		block, allowing the medium priority task to execute.  Both the high
 250:../src/Common Demo Tasks/QPeek.c **** 		and highest priority tasks will then be blocked on the queue. */
 251:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4455              		.loc 1 251 0
 4456 0224 07F10803 		add	r3, r7, #8
 4457 0228 F868     		ldr	r0, [r7, #12]
 4458 022a 1946     		mov	r1, r3
 4459 022c 4FF0FF32 		mov	r2, #-1
 4460 0230 4FF00103 		mov	r3, #1
 4461 0234 FFF7FEFF 		bl	xQueueGenericReceive
 4462 0238 0346     		mov	r3, r0
 4463 023a 012B     		cmp	r3, #1
 4464 023c 03D0     		beq	.L19
 252:../src/Common Demo Tasks/QPeek.c **** 		{
 253:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 254:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4465              		.loc 1 254 0
 4466 023e 1C4B     		ldr	r3, .L25
 4467 0240 4FF00102 		mov	r2, #1
 4468 0244 1A60     		str	r2, [r3, #0]
 4469              	.L19:
 255:../src/Common Demo Tasks/QPeek.c **** 		}
 256:../src/Common Demo Tasks/QPeek.c **** 
 257:../src/Common Demo Tasks/QPeek.c **** 		/* When we get here the highest priority task should have peeked the data
 258:../src/Common Demo Tasks/QPeek.c **** 		(unblocking this task) then suspended (allowing this task to also peek
 259:../src/Common Demo Tasks/QPeek.c **** 		the data). */
 260:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x01234567 )
 4470              		.loc 1 260 0
 4471 0246 BA68     		ldr	r2, [r7, #8]
 4472 0248 1A4B     		ldr	r3, .L25+4
 4473 024a 9A42     		cmp	r2, r3
 4474 024c 03D0     		beq	.L20
 261:../src/Common Demo Tasks/QPeek.c **** 		{
 262:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value. */
 263:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4475              		.loc 1 263 0
 4476 024e 184B     		ldr	r3, .L25
 4477 0250 4FF00102 		mov	r2, #1
 4478 0254 1A60     		str	r2, [r3, #0]
 4479              	.L20:
 264:../src/Common Demo Tasks/QPeek.c **** 		}
 265:../src/Common Demo Tasks/QPeek.c **** 
 266:../src/Common Demo Tasks/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 4480              		.loc 1 266 0
 4481 0256 F868     		ldr	r0, [r7, #12]
 4482 0258 FFF7FEFF 		bl	uxQueueMessagesWaiting
 4483 025c 0346     		mov	r3, r0
 4484 025e 012B     		cmp	r3, #1
 4485 0260 03D0     		beq	.L21
 267:../src/Common Demo Tasks/QPeek.c **** 		{
 268:../src/Common Demo Tasks/QPeek.c **** 			/* The message should have been left on the queue. */
 269:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4486              		.loc 1 269 0
 4487 0262 134B     		ldr	r3, .L25
 4488 0264 4FF00102 		mov	r2, #1
 4489 0268 1A60     		str	r2, [r3, #0]
 4490              	.L21:
 270:../src/Common Demo Tasks/QPeek.c **** 		}
 271:../src/Common Demo Tasks/QPeek.c **** 
 272:../src/Common Demo Tasks/QPeek.c **** 		/* We only peeked the data, so suspending ourselves now should enable
 273:../src/Common Demo Tasks/QPeek.c **** 		the medium priority task to also peek the data.  The medium priority task
 274:../src/Common Demo Tasks/QPeek.c **** 		will have been unblocked when we peeked the data as we left the data
 275:../src/Common Demo Tasks/QPeek.c **** 		in the queue. */
 276:../src/Common Demo Tasks/QPeek.c **** 		vTaskSuspend( NULL );
 4491              		.loc 1 276 0
 4492 026a 4FF00000 		mov	r0, #0
 4493 026e FFF7FEFF 		bl	vTaskSuspend
 277:../src/Common Demo Tasks/QPeek.c **** 
 278:../src/Common Demo Tasks/QPeek.c **** 
 279:../src/Common Demo Tasks/QPeek.c **** 		/* This time we are going actually receive the value, so the medium
 280:../src/Common Demo Tasks/QPeek.c **** 		priority task will never peek the data - we removed it from the queue. */
 281:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4494              		.loc 1 281 0
 4495 0272 07F10803 		add	r3, r7, #8
 4496 0276 F868     		ldr	r0, [r7, #12]
 4497 0278 1946     		mov	r1, r3
 4498 027a 4FF0FF32 		mov	r2, #-1
 4499 027e 4FF00003 		mov	r3, #0
 4500 0282 FFF7FEFF 		bl	xQueueGenericReceive
 4501 0286 0346     		mov	r3, r0
 4502 0288 012B     		cmp	r3, #1
 4503 028a 03D0     		beq	.L22
 282:../src/Common Demo Tasks/QPeek.c **** 		{
 283:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4504              		.loc 1 283 0
 4505 028c 084B     		ldr	r3, .L25
 4506 028e 4FF00102 		mov	r2, #1
 4507 0292 1A60     		str	r2, [r3, #0]
 4508              	.L22:
 284:../src/Common Demo Tasks/QPeek.c **** 		}
 285:../src/Common Demo Tasks/QPeek.c **** 
 286:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0xaabbaabb )
 4509              		.loc 1 286 0
 4510 0294 BA68     		ldr	r2, [r7, #8]
 4511 0296 084B     		ldr	r3, .L25+8
 4512 0298 9A42     		cmp	r2, r3
 4513 029a 03D0     		beq	.L23
 287:../src/Common Demo Tasks/QPeek.c **** 		{
 288:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4514              		.loc 1 288 0
 4515 029c 044B     		ldr	r3, .L25
 4516 029e 4FF00102 		mov	r2, #1
 4517 02a2 1A60     		str	r2, [r3, #0]
 4518              	.L23:
 289:../src/Common Demo Tasks/QPeek.c **** 		}
 290:../src/Common Demo Tasks/QPeek.c **** 
 291:../src/Common Demo Tasks/QPeek.c **** 		vTaskSuspend( NULL );				
 4519              		.loc 1 291 0
 4520 02a4 4FF00000 		mov	r0, #0
 4521 02a8 FFF7FEFF 		bl	vTaskSuspend
 292:../src/Common Demo Tasks/QPeek.c **** 	}
 4522              		.loc 1 292 0
 4523 02ac BAE7     		b	.L24
 4524              	.L26:
 4525 02ae 00BF     		.align	2
 4526              	.L25:
 4527 02b0 00000000 		.word	xErrorDetected
 4528 02b4 67452301 		.word	19088743
 4529 02b8 BBAABBAA 		.word	-1430541637
 4530              		.cfi_endproc
 4531              	.LFE31:
 4533              		.align	2
 4534              		.thumb
 4535              		.thumb_func
 4537              	prvMediumPriorityPeekTask:
 4538              	.LFB32:
 293:../src/Common Demo Tasks/QPeek.c **** }
 294:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 295:../src/Common Demo Tasks/QPeek.c **** 
 296:../src/Common Demo Tasks/QPeek.c **** static void prvMediumPriorityPeekTask( void *pvParameters )
 297:../src/Common Demo Tasks/QPeek.c **** {
 4539              		.loc 1 297 0
 4540              		.cfi_startproc
 4541              		@ args = 0, pretend = 0, frame = 16
 4542              		@ frame_needed = 1, uses_anonymous_args = 0
 4543 02bc 80B5     		push	{r7, lr}
 4544              	.LCFI9:
 4545              		.cfi_def_cfa_offset 8
 4546 02be 84B0     		sub	sp, sp, #16
 4547              	.LCFI10:
 4548              		.cfi_def_cfa_offset 24
 4549 02c0 00AF     		add	r7, sp, #0
 4550              		.cfi_offset 14, -4
 4551              		.cfi_offset 7, -8
 4552              	.LCFI11:
 4553              		.cfi_def_cfa_register 7
 4554 02c2 7860     		str	r0, [r7, #4]
 298:../src/Common Demo Tasks/QPeek.c **** xQueueHandle xQueue = ( xQueueHandle ) pvParameters;
 4555              		.loc 1 298 0
 4556 02c4 7B68     		ldr	r3, [r7, #4]
 4557 02c6 FB60     		str	r3, [r7, #12]
 4558              	.L31:
 299:../src/Common Demo Tasks/QPeek.c **** unsigned portLONG ulValue;
 300:../src/Common Demo Tasks/QPeek.c **** 
 301:../src/Common Demo Tasks/QPeek.c **** 	for( ;; )
 302:../src/Common Demo Tasks/QPeek.c **** 	{
 303:../src/Common Demo Tasks/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 304:../src/Common Demo Tasks/QPeek.c **** 		block, allowing the low priority task to execute.  The highest, high
 305:../src/Common Demo Tasks/QPeek.c **** 		and medium priority tasks will then all be blocked on the queue. */
 306:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 4559              		.loc 1 306 0
 4560 02c8 07F10803 		add	r3, r7, #8
 4561 02cc F868     		ldr	r0, [r7, #12]
 4562 02ce 1946     		mov	r1, r3
 4563 02d0 4FF0FF32 		mov	r2, #-1
 4564 02d4 4FF00103 		mov	r3, #1
 4565 02d8 FFF7FEFF 		bl	xQueueGenericReceive
 4566 02dc 0346     		mov	r3, r0
 4567 02de 012B     		cmp	r3, #1
 4568 02e0 03D0     		beq	.L28
 307:../src/Common Demo Tasks/QPeek.c **** 		{
 308:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 309:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4569              		.loc 1 309 0
 4570 02e2 104B     		ldr	r3, .L32
 4571 02e4 4FF00102 		mov	r2, #1
 4572 02e8 1A60     		str	r2, [r3, #0]
 4573              	.L28:
 310:../src/Common Demo Tasks/QPeek.c **** 		}
 311:../src/Common Demo Tasks/QPeek.c **** 
 312:../src/Common Demo Tasks/QPeek.c **** 		/* When we get here the high priority task should have peeked the data
 313:../src/Common Demo Tasks/QPeek.c **** 		(unblocking this task) then suspended (allowing this task to also peek
 314:../src/Common Demo Tasks/QPeek.c **** 		the data). */
 315:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x01234567 )
 4574              		.loc 1 315 0
 4575 02ea BA68     		ldr	r2, [r7, #8]
 4576 02ec 0E4B     		ldr	r3, .L32+4
 4577 02ee 9A42     		cmp	r2, r3
 4578 02f0 03D0     		beq	.L29
 316:../src/Common Demo Tasks/QPeek.c **** 		{
 317:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value. */
 318:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4579              		.loc 1 318 0
 4580 02f2 0C4B     		ldr	r3, .L32
 4581 02f4 4FF00102 		mov	r2, #1
 4582 02f8 1A60     		str	r2, [r3, #0]
 4583              	.L29:
 319:../src/Common Demo Tasks/QPeek.c **** 		}
 320:../src/Common Demo Tasks/QPeek.c **** 
 321:../src/Common Demo Tasks/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 4584              		.loc 1 321 0
 4585 02fa F868     		ldr	r0, [r7, #12]
 4586 02fc FFF7FEFF 		bl	uxQueueMessagesWaiting
 4587 0300 0346     		mov	r3, r0
 4588 0302 012B     		cmp	r3, #1
 4589 0304 03D0     		beq	.L30
 322:../src/Common Demo Tasks/QPeek.c **** 		{
 323:../src/Common Demo Tasks/QPeek.c **** 			/* The message should have been left on the queue. */
 324:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4590              		.loc 1 324 0
 4591 0306 074B     		ldr	r3, .L32
 4592 0308 4FF00102 		mov	r2, #1
 4593 030c 1A60     		str	r2, [r3, #0]
 4594              	.L30:
 325:../src/Common Demo Tasks/QPeek.c **** 		}
 326:../src/Common Demo Tasks/QPeek.c **** 
 327:../src/Common Demo Tasks/QPeek.c **** 		/* Just so we know the test is still running. */
 328:../src/Common Demo Tasks/QPeek.c **** 		ulLoopCounter++;
 4595              		.loc 1 328 0
 4596 030e 074B     		ldr	r3, .L32+8
 4597 0310 1B68     		ldr	r3, [r3, #0]
 4598 0312 03F10102 		add	r2, r3, #1
 4599 0316 054B     		ldr	r3, .L32+8
 4600 0318 1A60     		str	r2, [r3, #0]
 329:../src/Common Demo Tasks/QPeek.c **** 
 330:../src/Common Demo Tasks/QPeek.c **** 		/* Now we can suspend ourselves so the low priority task can execute
 331:../src/Common Demo Tasks/QPeek.c **** 		again. */
 332:../src/Common Demo Tasks/QPeek.c **** 		vTaskSuspend( NULL );
 4601              		.loc 1 332 0
 4602 031a 4FF00000 		mov	r0, #0
 4603 031e FFF7FEFF 		bl	vTaskSuspend
 333:../src/Common Demo Tasks/QPeek.c **** 	}
 4604              		.loc 1 333 0
 4605 0322 D1E7     		b	.L31
 4606              	.L33:
 4607              		.align	2
 4608              	.L32:
 4609 0324 00000000 		.word	xErrorDetected
 4610 0328 67452301 		.word	19088743
 4611 032c 04000000 		.word	ulLoopCounter
 4612              		.cfi_endproc
 4613              	.LFE32:
 4615              		.align	2
 4616              		.thumb
 4617              		.thumb_func
 4619              	prvLowPriorityPeekTask:
 4620              	.LFB33:
 334:../src/Common Demo Tasks/QPeek.c **** }
 335:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 336:../src/Common Demo Tasks/QPeek.c **** 
 337:../src/Common Demo Tasks/QPeek.c **** static void prvLowPriorityPeekTask( void *pvParameters )
 338:../src/Common Demo Tasks/QPeek.c **** {
 4621              		.loc 1 338 0
 4622              		.cfi_startproc
 4623              		@ args = 0, pretend = 0, frame = 16
 4624              		@ frame_needed = 1, uses_anonymous_args = 0
 4625 0330 80B5     		push	{r7, lr}
 4626              	.LCFI12:
 4627              		.cfi_def_cfa_offset 8
 4628 0332 84B0     		sub	sp, sp, #16
 4629              	.LCFI13:
 4630              		.cfi_def_cfa_offset 24
 4631 0334 00AF     		add	r7, sp, #0
 4632              		.cfi_offset 14, -4
 4633              		.cfi_offset 7, -8
 4634              	.LCFI14:
 4635              		.cfi_def_cfa_register 7
 4636 0336 7860     		str	r0, [r7, #4]
 339:../src/Common Demo Tasks/QPeek.c **** xQueueHandle xQueue = ( xQueueHandle ) pvParameters;
 4637              		.loc 1 339 0
 4638 0338 7B68     		ldr	r3, [r7, #4]
 4639 033a FB60     		str	r3, [r7, #12]
 4640              	.L41:
 340:../src/Common Demo Tasks/QPeek.c **** unsigned portLONG ulValue;
 341:../src/Common Demo Tasks/QPeek.c **** 
 342:../src/Common Demo Tasks/QPeek.c **** 	for( ;; )
 343:../src/Common Demo Tasks/QPeek.c **** 	{
 344:../src/Common Demo Tasks/QPeek.c **** 		/* Write some data to the queue.  This should unblock the highest 
 345:../src/Common Demo Tasks/QPeek.c **** 		priority task that is waiting to peek data from the queue. */
 346:../src/Common Demo Tasks/QPeek.c **** 		ulValue = 0x11223344;
 4641              		.loc 1 346 0
 4642 033c 444B     		ldr	r3, .L42
 4643 033e BB60     		str	r3, [r7, #8]
 347:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 4644              		.loc 1 347 0
 4645 0340 07F10803 		add	r3, r7, #8
 4646 0344 F868     		ldr	r0, [r7, #12]
 4647 0346 1946     		mov	r1, r3
 4648 0348 4FF00002 		mov	r2, #0
 4649 034c 4FF00003 		mov	r3, #0
 4650 0350 FFF7FEFF 		bl	xQueueGenericSend
 4651 0354 0346     		mov	r3, r0
 4652 0356 012B     		cmp	r3, #1
 4653 0358 03D0     		beq	.L35
 348:../src/Common Demo Tasks/QPeek.c **** 		{
 349:../src/Common Demo Tasks/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 350:../src/Common Demo Tasks/QPeek.c **** 			had a problem writing to the queue. */
 351:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4654              		.loc 1 351 0
 4655 035a 3E4B     		ldr	r3, .L42+4
 4656 035c 4FF00102 		mov	r2, #1
 4657 0360 1A60     		str	r2, [r3, #0]
 4658              	.L35:
 352:../src/Common Demo Tasks/QPeek.c **** 		}
 353:../src/Common Demo Tasks/QPeek.c **** 
 354:../src/Common Demo Tasks/QPeek.c **** 		/* By the time we get here the data should have been removed from
 355:../src/Common Demo Tasks/QPeek.c **** 		the queue. */
 356:../src/Common Demo Tasks/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 4659              		.loc 1 356 0
 4660 0362 F868     		ldr	r0, [r7, #12]
 4661 0364 FFF7FEFF 		bl	uxQueueMessagesWaiting
 4662 0368 0346     		mov	r3, r0
 4663 036a 002B     		cmp	r3, #0
 4664 036c 03D0     		beq	.L36
 357:../src/Common Demo Tasks/QPeek.c **** 		{
 358:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4665              		.loc 1 358 0
 4666 036e 394B     		ldr	r3, .L42+4
 4667 0370 4FF00102 		mov	r2, #1
 4668 0374 1A60     		str	r2, [r3, #0]
 4669              	.L36:
 359:../src/Common Demo Tasks/QPeek.c **** 		}
 360:../src/Common Demo Tasks/QPeek.c **** 
 361:../src/Common Demo Tasks/QPeek.c **** 		/* Write another value to the queue, again waking the highest priority
 362:../src/Common Demo Tasks/QPeek.c **** 		task that is blocked on the queue. */
 363:../src/Common Demo Tasks/QPeek.c **** 		ulValue = 0x01234567;
 4670              		.loc 1 363 0
 4671 0376 384B     		ldr	r3, .L42+8
 4672 0378 BB60     		str	r3, [r7, #8]
 364:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 4673              		.loc 1 364 0
 4674 037a 07F10803 		add	r3, r7, #8
 4675 037e F868     		ldr	r0, [r7, #12]
 4676 0380 1946     		mov	r1, r3
 4677 0382 4FF00002 		mov	r2, #0
 4678 0386 4FF00003 		mov	r3, #0
 4679 038a FFF7FEFF 		bl	xQueueGenericSend
 4680 038e 0346     		mov	r3, r0
 4681 0390 012B     		cmp	r3, #1
 4682 0392 03D0     		beq	.L37
 365:../src/Common Demo Tasks/QPeek.c **** 		{
 366:../src/Common Demo Tasks/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 367:../src/Common Demo Tasks/QPeek.c **** 			had a problem writing to the queue. */
 368:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4683              		.loc 1 368 0
 4684 0394 2F4B     		ldr	r3, .L42+4
 4685 0396 4FF00102 		mov	r2, #1
 4686 039a 1A60     		str	r2, [r3, #0]
 4687              	.L37:
 369:../src/Common Demo Tasks/QPeek.c **** 		}
 370:../src/Common Demo Tasks/QPeek.c **** 
 371:../src/Common Demo Tasks/QPeek.c **** 		/* All the other tasks should now have successfully peeked the data.
 372:../src/Common Demo Tasks/QPeek.c **** 		The data is still in the queue so we should be able to receive it. */
 373:../src/Common Demo Tasks/QPeek.c **** 		ulValue = 0;
 4688              		.loc 1 373 0
 4689 039c 4FF00003 		mov	r3, #0
 4690 03a0 BB60     		str	r3, [r7, #8]
 374:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 4691              		.loc 1 374 0
 4692 03a2 07F10803 		add	r3, r7, #8
 4693 03a6 F868     		ldr	r0, [r7, #12]
 4694 03a8 1946     		mov	r1, r3
 4695 03aa 4FF00002 		mov	r2, #0
 4696 03ae 4FF00003 		mov	r3, #0
 4697 03b2 FFF7FEFF 		bl	xQueueGenericReceive
 4698 03b6 0346     		mov	r3, r0
 4699 03b8 012B     		cmp	r3, #1
 4700 03ba 03D0     		beq	.L38
 375:../src/Common Demo Tasks/QPeek.c **** 		{
 376:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to receive the data. */
 377:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4701              		.loc 1 377 0
 4702 03bc 254B     		ldr	r3, .L42+4
 4703 03be 4FF00102 		mov	r2, #1
 4704 03c2 1A60     		str	r2, [r3, #0]
 4705              	.L38:
 378:../src/Common Demo Tasks/QPeek.c **** 		}
 379:../src/Common Demo Tasks/QPeek.c **** 
 380:../src/Common Demo Tasks/QPeek.c **** 		if( ulValue != 0x01234567 )
 381:../src/Common Demo Tasks/QPeek.c **** 		{
 382:../src/Common Demo Tasks/QPeek.c **** 			/* We did not receive the expected value. */
 383:../src/Common Demo Tasks/QPeek.c **** 		}
 384:../src/Common Demo Tasks/QPeek.c **** 		
 385:../src/Common Demo Tasks/QPeek.c **** 		/* Lets just delay a while as this is an intensive test as we don't
 386:../src/Common Demo Tasks/QPeek.c **** 		want to starve other tests of processing time. */
 387:../src/Common Demo Tasks/QPeek.c **** 		vTaskDelay( qpeekSHORT_DELAY );
 4706              		.loc 1 387 0
 4707 03c4 4FF00A00 		mov	r0, #10
 4708 03c8 FFF7FEFF 		bl	vTaskDelay
 388:../src/Common Demo Tasks/QPeek.c **** 
 389:../src/Common Demo Tasks/QPeek.c **** 		/* Unsuspend the other tasks so we can repeat the test - this time
 390:../src/Common Demo Tasks/QPeek.c **** 		however not all the other tasks will peek the data as the high
 391:../src/Common Demo Tasks/QPeek.c **** 		priority task is actually going to remove it from the queue.  Send
 392:../src/Common Demo Tasks/QPeek.c **** 		to front is used just to be different.  As the queue is empty it
 393:../src/Common Demo Tasks/QPeek.c **** 		makes no difference to the result. */
 394:../src/Common Demo Tasks/QPeek.c **** 		vTaskResume( xMediumPriorityTask );
 4709              		.loc 1 394 0
 4710 03cc 234B     		ldr	r3, .L42+12
 4711 03ce 1B68     		ldr	r3, [r3, #0]
 4712 03d0 1846     		mov	r0, r3
 4713 03d2 FFF7FEFF 		bl	vTaskResume
 395:../src/Common Demo Tasks/QPeek.c **** 		vTaskResume( xHighPriorityTask );
 4714              		.loc 1 395 0
 4715 03d6 224B     		ldr	r3, .L42+16
 4716 03d8 1B68     		ldr	r3, [r3, #0]
 4717 03da 1846     		mov	r0, r3
 4718 03dc FFF7FEFF 		bl	vTaskResume
 396:../src/Common Demo Tasks/QPeek.c **** 		vTaskResume( xHighestPriorityTask );
 4719              		.loc 1 396 0
 4720 03e0 204B     		ldr	r3, .L42+20
 4721 03e2 1B68     		ldr	r3, [r3, #0]
 4722 03e4 1846     		mov	r0, r3
 4723 03e6 FFF7FEFF 		bl	vTaskResume
 397:../src/Common Demo Tasks/QPeek.c **** 
 398:../src/Common Demo Tasks/QPeek.c **** 		ulValue = 0xaabbaabb;
 4724              		.loc 1 398 0
 4725 03ea 1F4B     		ldr	r3, .L42+24
 4726 03ec BB60     		str	r3, [r7, #8]
 399:../src/Common Demo Tasks/QPeek.c **** 		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 4727              		.loc 1 399 0
 4728 03ee 07F10803 		add	r3, r7, #8
 4729 03f2 F868     		ldr	r0, [r7, #12]
 4730 03f4 1946     		mov	r1, r3
 4731 03f6 4FF00002 		mov	r2, #0
 4732 03fa 4FF00103 		mov	r3, #1
 4733 03fe FFF7FEFF 		bl	xQueueGenericSend
 4734 0402 0346     		mov	r3, r0
 4735 0404 012B     		cmp	r3, #1
 4736 0406 03D0     		beq	.L39
 400:../src/Common Demo Tasks/QPeek.c **** 		{
 401:../src/Common Demo Tasks/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 402:../src/Common Demo Tasks/QPeek.c **** 			had a problem writing to the queue. */
 403:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4737              		.loc 1 403 0
 4738 0408 124B     		ldr	r3, .L42+4
 4739 040a 4FF00102 		mov	r2, #1
 4740 040e 1A60     		str	r2, [r3, #0]
 4741              	.L39:
 404:../src/Common Demo Tasks/QPeek.c **** 		}
 405:../src/Common Demo Tasks/QPeek.c **** 
 406:../src/Common Demo Tasks/QPeek.c **** 		/* This time we should find that the queue is empty.  The high priority
 407:../src/Common Demo Tasks/QPeek.c **** 		task actually removed the data rather than just peeking it. */
 408:../src/Common Demo Tasks/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 4742              		.loc 1 408 0
 4743 0410 07F10803 		add	r3, r7, #8
 4744 0414 F868     		ldr	r0, [r7, #12]
 4745 0416 1946     		mov	r1, r3
 4746 0418 4FF00002 		mov	r2, #0
 4747 041c 4FF00103 		mov	r3, #1
 4748 0420 FFF7FEFF 		bl	xQueueGenericReceive
 4749 0424 0346     		mov	r3, r0
 4750 0426 002B     		cmp	r3, #0
 4751 0428 03D0     		beq	.L40
 409:../src/Common Demo Tasks/QPeek.c **** 		{
 410:../src/Common Demo Tasks/QPeek.c **** 			/* We expected to receive the data. */
 411:../src/Common Demo Tasks/QPeek.c **** 			xErrorDetected = pdTRUE;
 4752              		.loc 1 411 0
 4753 042a 0A4B     		ldr	r3, .L42+4
 4754 042c 4FF00102 		mov	r2, #1
 4755 0430 1A60     		str	r2, [r3, #0]
 4756              	.L40:
 412:../src/Common Demo Tasks/QPeek.c **** 		}
 413:../src/Common Demo Tasks/QPeek.c **** 
 414:../src/Common Demo Tasks/QPeek.c **** 		/* Unsuspend the highest and high priority tasks so we can go back
 415:../src/Common Demo Tasks/QPeek.c **** 		and repeat the whole thing.  The medium priority task should not be
 416:../src/Common Demo Tasks/QPeek.c **** 		suspended as it was not able to peek the data in this last case. */
 417:../src/Common Demo Tasks/QPeek.c **** 		vTaskResume( xHighPriorityTask );
 4757              		.loc 1 417 0
 4758 0432 0B4B     		ldr	r3, .L42+16
 4759 0434 1B68     		ldr	r3, [r3, #0]
 4760 0436 1846     		mov	r0, r3
 4761 0438 FFF7FEFF 		bl	vTaskResume
 418:../src/Common Demo Tasks/QPeek.c **** 		vTaskResume( xHighestPriorityTask );		
 4762              		.loc 1 418 0
 4763 043c 094B     		ldr	r3, .L42+20
 4764 043e 1B68     		ldr	r3, [r3, #0]
 4765 0440 1846     		mov	r0, r3
 4766 0442 FFF7FEFF 		bl	vTaskResume
 419:../src/Common Demo Tasks/QPeek.c **** 
 420:../src/Common Demo Tasks/QPeek.c **** 		/* Lets just delay a while as this is an intensive test as we don't
 421:../src/Common Demo Tasks/QPeek.c **** 		want to starve other tests of processing time. */
 422:../src/Common Demo Tasks/QPeek.c **** 		vTaskDelay( qpeekSHORT_DELAY );
 4767              		.loc 1 422 0
 4768 0446 4FF00A00 		mov	r0, #10
 4769 044a FFF7FEFF 		bl	vTaskDelay
 423:../src/Common Demo Tasks/QPeek.c **** 	}
 4770              		.loc 1 423 0
 4771 044e 75E7     		b	.L41
 4772              	.L43:
 4773              		.align	2
 4774              	.L42:
 4775 0450 44332211 		.word	287454020
 4776 0454 00000000 		.word	xErrorDetected
 4777 0458 67452301 		.word	19088743
 4778 045c 00000000 		.word	xMediumPriorityTask
 4779 0460 00000000 		.word	xHighPriorityTask
 4780 0464 00000000 		.word	xHighestPriorityTask
 4781 0468 BBAABBAA 		.word	-1430541637
 4782              		.cfi_endproc
 4783              	.LFE33:
 4785              		.align	2
 4786              		.global	xAreQueuePeekTasksStillRunning
 4787              		.thumb
 4788              		.thumb_func
 4790              	xAreQueuePeekTasksStillRunning:
 4791              	.LFB34:
 424:../src/Common Demo Tasks/QPeek.c **** }
 425:../src/Common Demo Tasks/QPeek.c **** /*-----------------------------------------------------------*/
 426:../src/Common Demo Tasks/QPeek.c **** 
 427:../src/Common Demo Tasks/QPeek.c **** /* This is called to check that all the created tasks are still running. */
 428:../src/Common Demo Tasks/QPeek.c **** portBASE_TYPE xAreQueuePeekTasksStillRunning( void )
 429:../src/Common Demo Tasks/QPeek.c **** {
 4792              		.loc 1 429 0
 4793              		.cfi_startproc
 4794              		@ args = 0, pretend = 0, frame = 0
 4795              		@ frame_needed = 1, uses_anonymous_args = 0
 4796              		@ link register save eliminated.
 4797 046c 80B4     		push	{r7}
 4798              	.LCFI15:
 4799              		.cfi_def_cfa_offset 4
 4800 046e 00AF     		add	r7, sp, #0
 4801              		.cfi_offset 7, -4
 4802              	.LCFI16:
 4803              		.cfi_def_cfa_register 7
 430:../src/Common Demo Tasks/QPeek.c **** static unsigned portLONG ulLastLoopCounter = 0;
 431:../src/Common Demo Tasks/QPeek.c **** 
 432:../src/Common Demo Tasks/QPeek.c **** 	/* If the demo task is still running then we expect the loopcounter to
 433:../src/Common Demo Tasks/QPeek.c **** 	have incremented since this function was last called. */
 434:../src/Common Demo Tasks/QPeek.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 4804              		.loc 1 434 0
 4805 0470 0B4B     		ldr	r3, .L46
 4806 0472 1A68     		ldr	r2, [r3, #0]
 4807 0474 0B4B     		ldr	r3, .L46+4
 4808 0476 1B68     		ldr	r3, [r3, #0]
 4809 0478 9A42     		cmp	r2, r3
 4810 047a 03D1     		bne	.L45
 435:../src/Common Demo Tasks/QPeek.c **** 	{
 436:../src/Common Demo Tasks/QPeek.c **** 		xErrorDetected = pdTRUE;
 4811              		.loc 1 436 0
 4812 047c 0A4B     		ldr	r3, .L46+8
 4813 047e 4FF00102 		mov	r2, #1
 4814 0482 1A60     		str	r2, [r3, #0]
 4815              	.L45:
 437:../src/Common Demo Tasks/QPeek.c **** 	}
 438:../src/Common Demo Tasks/QPeek.c **** 
 439:../src/Common Demo Tasks/QPeek.c **** 	ulLastLoopCounter = ulLoopCounter;
 4816              		.loc 1 439 0
 4817 0484 074B     		ldr	r3, .L46+4
 4818 0486 1A68     		ldr	r2, [r3, #0]
 4819 0488 054B     		ldr	r3, .L46
 4820 048a 1A60     		str	r2, [r3, #0]
 440:../src/Common Demo Tasks/QPeek.c **** 
 441:../src/Common Demo Tasks/QPeek.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 442:../src/Common Demo Tasks/QPeek.c **** 	to true. */
 443:../src/Common Demo Tasks/QPeek.c **** 
 444:../src/Common Demo Tasks/QPeek.c **** 	return !xErrorDetected;
 4821              		.loc 1 444 0
 4822 048c 064B     		ldr	r3, .L46+8
 4823 048e 1B68     		ldr	r3, [r3, #0]
 4824 0490 002B     		cmp	r3, #0
 4825 0492 14BF     		ite	ne
 4826 0494 0023     		movne	r3, #0
 4827 0496 0123     		moveq	r3, #1
 445:../src/Common Demo Tasks/QPeek.c **** }
 4828              		.loc 1 445 0
 4829 0498 1846     		mov	r0, r3
 4830 049a BD46     		mov	sp, r7
 4831 049c 80BC     		pop	{r7}
 4832 049e 7047     		bx	lr
 4833              	.L47:
 4834              		.align	2
 4835              	.L46:
 4836 04a0 08000000 		.word	ulLastLoopCounter.5836
 4837 04a4 04000000 		.word	ulLoopCounter
 4838 04a8 00000000 		.word	xErrorDetected
 4839              		.cfi_endproc
 4840              	.LFE34:
 4842              		.bss
 4843              		.align	2
 4844              	ulLastLoopCounter.5836:
 4845 0008 00000000 		.space	4
 4846              		.text
 4847              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 QPeek.c
     /tmp/cckxoub4.s:4119   .bss:00000000 $d
     /tmp/cckxoub4.s:4120   .bss:00000000 xErrorDetected
     /tmp/cckxoub4.s:4123   .bss:00000004 ulLoopCounter
                            *COM*:00000004 xMediumPriorityTask
                            *COM*:00000004 xHighPriorityTask
                            *COM*:00000004 xHighestPriorityTask
     /tmp/cckxoub4.s:4129   .rodata:00000000 $d
     /tmp/cckxoub4.s:4145   .text:00000000 $t
     /tmp/cckxoub4.s:4150   .text:00000000 vStartQueuePeekTasks
     /tmp/cckxoub4.s:4245   .text:000000c4 $d
     /tmp/cckxoub4.s:4619   .text:00000330 prvLowPriorityPeekTask
     /tmp/cckxoub4.s:4537   .text:000002bc prvMediumPriorityPeekTask
     /tmp/cckxoub4.s:4433   .text:00000218 prvHighPriorityPeekTask
     /tmp/cckxoub4.s:4264   .text:000000f4 prvHighestPriorityPeekTask
     /tmp/cckxoub4.s:4260   .text:000000f4 $t
     /tmp/cckxoub4.s:4422   .text:00000208 $d
     /tmp/cckxoub4.s:4429   .text:00000218 $t
     /tmp/cckxoub4.s:4527   .text:000002b0 $d
     /tmp/cckxoub4.s:4533   .text:000002bc $t
     /tmp/cckxoub4.s:4609   .text:00000324 $d
     /tmp/cckxoub4.s:4615   .text:00000330 $t
     /tmp/cckxoub4.s:4775   .text:00000450 $d
     /tmp/cckxoub4.s:4785   .text:0000046c $t
     /tmp/cckxoub4.s:4790   .text:0000046c xAreQueuePeekTasksStillRunning
     /tmp/cckxoub4.s:4836   .text:000004a0 $d
     /tmp/cckxoub4.s:4844   .bss:00000008 ulLastLoopCounter.5836
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
xQueueGenericReceive
uxQueueMessagesWaiting
vTaskSuspend
xQueueGenericSend
vTaskDelay
vTaskResume
