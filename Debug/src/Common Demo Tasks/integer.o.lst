   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"integer.c"
  23              	.Ltext0:
  24              		.file 1 "../src/Common Demo Tasks/integer.c"
 3942              		.align	2
 3943              	xTaskCheck:
 3944 0000 00000000 		.space	4
 3945              		.section	.rodata
 3946              		.align	2
 3947              	.LC0:
 3948 0000 496E744D 		.ascii	"IntMath\000"
 3948      61746800 
 3949              		.text
 3950              		.align	2
 3951              		.global	vStartIntegerMathTasks
 3952              		.thumb
 3953              		.thumb_func
 3955              	vStartIntegerMathTasks:
 3956              	.LFB29:
   1:../src/Common Demo Tasks/integer.c **** /*
   2:../src/Common Demo Tasks/integer.c ****     FreeRTOS V7.1.0 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:../src/Common Demo Tasks/integer.c **** 	
   4:../src/Common Demo Tasks/integer.c **** 
   5:../src/Common Demo Tasks/integer.c ****     ***************************************************************************
   6:../src/Common Demo Tasks/integer.c ****      *                                                                       *
   7:../src/Common Demo Tasks/integer.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:../src/Common Demo Tasks/integer.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:../src/Common Demo Tasks/integer.c ****      *    available.                                                         *
  10:../src/Common Demo Tasks/integer.c ****      *                                                                       *
  11:../src/Common Demo Tasks/integer.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:../src/Common Demo Tasks/integer.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:../src/Common Demo Tasks/integer.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:../src/Common Demo Tasks/integer.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:../src/Common Demo Tasks/integer.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:../src/Common Demo Tasks/integer.c ****      *    for microcontrollers - completely free of charge!                  *
  17:../src/Common Demo Tasks/integer.c ****      *                                                                       *
  18:../src/Common Demo Tasks/integer.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:../src/Common Demo Tasks/integer.c ****      *                                                                       *
  20:../src/Common Demo Tasks/integer.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:../src/Common Demo Tasks/integer.c ****      *                                                                       *
  22:../src/Common Demo Tasks/integer.c ****     ***************************************************************************
  23:../src/Common Demo Tasks/integer.c **** 
  24:../src/Common Demo Tasks/integer.c **** 
  25:../src/Common Demo Tasks/integer.c ****     This file is part of the FreeRTOS distribution.
  26:../src/Common Demo Tasks/integer.c **** 
  27:../src/Common Demo Tasks/integer.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:../src/Common Demo Tasks/integer.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:../src/Common Demo Tasks/integer.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:../src/Common Demo Tasks/integer.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:../src/Common Demo Tasks/integer.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:../src/Common Demo Tasks/integer.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:../src/Common Demo Tasks/integer.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:../src/Common Demo Tasks/integer.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:../src/Common Demo Tasks/integer.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:../src/Common Demo Tasks/integer.c ****     more details. You should have received a copy of the GNU General Public
  37:../src/Common Demo Tasks/integer.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:../src/Common Demo Tasks/integer.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:../src/Common Demo Tasks/integer.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:../src/Common Demo Tasks/integer.c ****     FreeRTOS WEB site.
  41:../src/Common Demo Tasks/integer.c **** 
  42:../src/Common Demo Tasks/integer.c ****     1 tab == 4 spaces!
  43:../src/Common Demo Tasks/integer.c **** 
  44:../src/Common Demo Tasks/integer.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:../src/Common Demo Tasks/integer.c ****     contact details.
  46:../src/Common Demo Tasks/integer.c **** 
  47:../src/Common Demo Tasks/integer.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:../src/Common Demo Tasks/integer.c ****     critical systems.
  49:../src/Common Demo Tasks/integer.c **** 
  50:../src/Common Demo Tasks/integer.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:../src/Common Demo Tasks/integer.c ****     licensing and training services.
  52:../src/Common Demo Tasks/integer.c **** */
  53:../src/Common Demo Tasks/integer.c **** 
  54:../src/Common Demo Tasks/integer.c **** /*
  55:../src/Common Demo Tasks/integer.c ****  * This version of integer. c is for use on systems that have limited stack
  56:../src/Common Demo Tasks/integer.c ****  * space and no display facilities.  The complete version can be found in
  57:../src/Common Demo Tasks/integer.c ****  * the Demo/Common/Full directory.
  58:../src/Common Demo Tasks/integer.c ****  *
  59:../src/Common Demo Tasks/integer.c ****  * As with the full version, the tasks created in this file are a good test 
  60:../src/Common Demo Tasks/integer.c ****  * of the scheduler context switch mechanism.  The processor has to access 
  61:../src/Common Demo Tasks/integer.c ****  * 32bit variables in two or four chunks (depending on the processor).  The low 
  62:../src/Common Demo Tasks/integer.c ****  * priority of these tasks means there is a high probability that a context 
  63:../src/Common Demo Tasks/integer.c ****  * switch will occur mid calculation.  See flop. c documentation for 
  64:../src/Common Demo Tasks/integer.c ****  * more information.
  65:../src/Common Demo Tasks/integer.c ****  *
  66:../src/Common Demo Tasks/integer.c ****  */
  67:../src/Common Demo Tasks/integer.c **** 
  68:../src/Common Demo Tasks/integer.c **** /*
  69:../src/Common Demo Tasks/integer.c **** Changes from V1.2.1
  70:../src/Common Demo Tasks/integer.c **** 
  71:../src/Common Demo Tasks/integer.c **** 	+ The constants used in the calculations are larger to ensure the
  72:../src/Common Demo Tasks/integer.c **** 	  optimiser does not truncate them to 16 bits.
  73:../src/Common Demo Tasks/integer.c **** 
  74:../src/Common Demo Tasks/integer.c **** Changes from V1.2.3
  75:../src/Common Demo Tasks/integer.c **** 
  76:../src/Common Demo Tasks/integer.c **** 	+ uxTaskCheck is now just used as a boolean.  Instead of incrementing
  77:../src/Common Demo Tasks/integer.c **** 	  the variable each cycle of the task, the variable is simply set to
  78:../src/Common Demo Tasks/integer.c **** 	  true.  sAreIntegerMathsTaskStillRunning() sets it back to false and
  79:../src/Common Demo Tasks/integer.c **** 	  expects it to have been set back to true by the time it is called
  80:../src/Common Demo Tasks/integer.c **** 	  again.
  81:../src/Common Demo Tasks/integer.c **** 	+ A division has been included in the calculation.
  82:../src/Common Demo Tasks/integer.c **** */
  83:../src/Common Demo Tasks/integer.c **** 
  84:../src/Common Demo Tasks/integer.c **** #include <stdlib.h>
  85:../src/Common Demo Tasks/integer.c **** 
  86:../src/Common Demo Tasks/integer.c **** /* Scheduler include files. */
  87:../src/Common Demo Tasks/integer.c **** #include "FreeRTOS.h"
  88:../src/Common Demo Tasks/integer.c **** #include "task.h"
  89:../src/Common Demo Tasks/integer.c **** 
  90:../src/Common Demo Tasks/integer.c **** /* Demo program include files. */
  91:../src/Common Demo Tasks/integer.c **** #include "integer.h"
  92:../src/Common Demo Tasks/integer.c **** 
  93:../src/Common Demo Tasks/integer.c **** /* The constants used in the calculation. */
  94:../src/Common Demo Tasks/integer.c **** #define intgCONST1				( ( long ) 123 )
  95:../src/Common Demo Tasks/integer.c **** #define intgCONST2				( ( long ) 234567 )
  96:../src/Common Demo Tasks/integer.c **** #define intgCONST3				( ( long ) -3 )
  97:../src/Common Demo Tasks/integer.c **** #define intgCONST4				( ( long ) 7 )
  98:../src/Common Demo Tasks/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  99:../src/Common Demo Tasks/integer.c **** 
 100:../src/Common Demo Tasks/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
 101:../src/Common Demo Tasks/integer.c **** 
 102:../src/Common Demo Tasks/integer.c **** /* As this is the minimal version, we will only create one task. */
 103:../src/Common Demo Tasks/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
 104:../src/Common Demo Tasks/integer.c **** 
 105:../src/Common Demo Tasks/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
 106:../src/Common Demo Tasks/integer.c **** result against the expected result.  If the result is incorrect then the
 107:../src/Common Demo Tasks/integer.c **** context switch must have caused some corruption. */
 108:../src/Common Demo Tasks/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
 109:../src/Common Demo Tasks/integer.c **** 
 110:../src/Common Demo Tasks/integer.c **** /* Variables that are set to true within the calculation task to indicate
 111:../src/Common Demo Tasks/integer.c **** that the task is still executing.  The check task sets the variable back to
 112:../src/Common Demo Tasks/integer.c **** false, flagging an error if the variable is still false the next time it
 113:../src/Common Demo Tasks/integer.c **** is called. */
 114:../src/Common Demo Tasks/integer.c **** static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE )
 115:../src/Common Demo Tasks/integer.c **** 
 116:../src/Common Demo Tasks/integer.c **** /*-----------------------------------------------------------*/
 117:../src/Common Demo Tasks/integer.c **** 
 118:../src/Common Demo Tasks/integer.c **** void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
 119:../src/Common Demo Tasks/integer.c **** {
 3957              		.loc 1 119 0
 3958              		.cfi_startproc
 3959              		@ args = 0, pretend = 0, frame = 16
 3960              		@ frame_needed = 1, uses_anonymous_args = 0
 3961 0000 80B5     		push	{r7, lr}
 3962              	.LCFI0:
 3963              		.cfi_def_cfa_offset 8
 3964 0002 88B0     		sub	sp, sp, #32
 3965              	.LCFI1:
 3966              		.cfi_def_cfa_offset 40
 3967 0004 04AF     		add	r7, sp, #16
 3968              		.cfi_offset 14, -4
 3969              		.cfi_offset 7, -8
 3970              	.LCFI2:
 3971              		.cfi_def_cfa 7, 24
 3972 0006 7860     		str	r0, [r7, #4]
 120:../src/Common Demo Tasks/integer.c **** short sTask;
 121:../src/Common Demo Tasks/integer.c **** 
 122:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 3973              		.loc 1 122 0
 3974 0008 4FF00003 		mov	r3, #0
 3975 000c FB81     		strh	r3, [r7, #14]	@ movhi
 3976 000e 1BE0     		b	.L2
 3977              	.L3:
 123:../src/Common Demo Tasks/integer.c **** 	{
 124:../src/Common Demo Tasks/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( x
 3978              		.loc 1 124 0 discriminator 2
 3979 0010 114A     		ldr	r2, .L4
 3980 0012 B7F90E30 		ldrsh	r3, [r7, #14]
 3981 0016 4FEA8301 		lsl	r1, r3, #2
 3982 001a 104B     		ldr	r3, .L4+4
 3983 001c CB18     		adds	r3, r1, r3
 3984 001e 7968     		ldr	r1, [r7, #4]
 3985 0020 0091     		str	r1, [sp, #0]
 3986 0022 4FF00001 		mov	r1, #0
 3987 0026 0191     		str	r1, [sp, #4]
 3988 0028 4FF00001 		mov	r1, #0
 3989 002c 0291     		str	r1, [sp, #8]
 3990 002e 4FF00001 		mov	r1, #0
 3991 0032 0391     		str	r1, [sp, #12]
 3992 0034 0A48     		ldr	r0, .L4+8
 3993 0036 1146     		mov	r1, r2
 3994 0038 4FF05002 		mov	r2, #80
 3995 003c FFF7FEFF 		bl	xTaskGenericCreate
 122:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 3996              		.loc 1 122 0 discriminator 2
 3997 0040 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3998 0042 03F10103 		add	r3, r3, #1
 3999 0046 FB81     		strh	r3, [r7, #14]	@ movhi
 4000              	.L2:
 122:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 4001              		.loc 1 122 0 is_stmt 0 discriminator 1
 4002 0048 B7F90E30 		ldrsh	r3, [r7, #14]
 4003 004c 002B     		cmp	r3, #0
 4004 004e DFDD     		ble	.L3
 125:../src/Common Demo Tasks/integer.c **** 	}
 126:../src/Common Demo Tasks/integer.c **** }
 4005              		.loc 1 126 0 is_stmt 1
 4006 0050 07F11007 		add	r7, r7, #16
 4007 0054 BD46     		mov	sp, r7
 4008 0056 80BD     		pop	{r7, pc}
 4009              	.L5:
 4010              		.align	2
 4011              	.L4:
 4012 0058 00000000 		.word	.LC0
 4013 005c 00000000 		.word	xTaskCheck
 4014 0060 00000000 		.word	vCompeteingIntMathTask
 4015              		.cfi_endproc
 4016              	.LFE29:
 4018              		.align	2
 4019              		.thumb
 4020              		.thumb_func
 4022              	vCompeteingIntMathTask:
 4023              	.LFB30:
 127:../src/Common Demo Tasks/integer.c **** /*-----------------------------------------------------------*/
 128:../src/Common Demo Tasks/integer.c **** 
 129:../src/Common Demo Tasks/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
 130:../src/Common Demo Tasks/integer.c **** {
 4024              		.loc 1 130 0
 4025              		.cfi_startproc
 4026              		@ args = 0, pretend = 0, frame = 24
 4027              		@ frame_needed = 1, uses_anonymous_args = 0
 4028 0064 80B5     		push	{r7, lr}
 4029              	.LCFI3:
 4030              		.cfi_def_cfa_offset 8
 4031 0066 86B0     		sub	sp, sp, #24
 4032              	.LCFI4:
 4033              		.cfi_def_cfa_offset 32
 4034 0068 00AF     		add	r7, sp, #0
 4035              		.cfi_offset 14, -4
 4036              		.cfi_offset 7, -8
 4037              	.LCFI5:
 4038              		.cfi_def_cfa_register 7
 4039 006a 7860     		str	r0, [r7, #4]
 131:../src/Common Demo Tasks/integer.c **** /* These variables are all effectively set to constants so they are volatile to
 132:../src/Common Demo Tasks/integer.c **** ensure the compiler does not just get rid of them. */
 133:../src/Common Demo Tasks/integer.c **** volatile long lValue;
 134:../src/Common Demo Tasks/integer.c **** short sError = pdFALSE;
 4040              		.loc 1 134 0
 4041 006c 4FF00003 		mov	r3, #0
 4042 0070 FB82     		strh	r3, [r7, #22]	@ movhi
 135:../src/Common Demo Tasks/integer.c **** volatile signed portBASE_TYPE *pxTaskHasExecuted;
 136:../src/Common Demo Tasks/integer.c **** 
 137:../src/Common Demo Tasks/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
 138:../src/Common Demo Tasks/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
 139:../src/Common Demo Tasks/integer.c **** 	within each port. */
 140:../src/Common Demo Tasks/integer.c **** 	pxTaskHasExecuted = ( volatile signed portBASE_TYPE * ) pvParameters;
 4043              		.loc 1 140 0
 4044 0072 7B68     		ldr	r3, [r7, #4]
 4045 0074 3B61     		str	r3, [r7, #16]
 4046 0076 00E0     		b	.L9
 4047              	.L10:
 141:../src/Common Demo Tasks/integer.c **** 
 142:../src/Common Demo Tasks/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 143:../src/Common Demo Tasks/integer.c **** 	for( ;; )
 144:../src/Common Demo Tasks/integer.c **** 	{
 145:../src/Common Demo Tasks/integer.c **** 		/* Perform the calculation.  This will store partial value in
 146:../src/Common Demo Tasks/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
 147:../src/Common Demo Tasks/integer.c **** 		lValue = intgCONST1;
 148:../src/Common Demo Tasks/integer.c **** 		lValue += intgCONST2;
 149:../src/Common Demo Tasks/integer.c **** 
 150:../src/Common Demo Tasks/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 151:../src/Common Demo Tasks/integer.c **** 		#if configUSE_PREEMPTION == 0
 152:../src/Common Demo Tasks/integer.c **** 		{
 153:../src/Common Demo Tasks/integer.c **** 			taskYIELD();
 154:../src/Common Demo Tasks/integer.c **** 		}
 155:../src/Common Demo Tasks/integer.c **** 		#endif
 156:../src/Common Demo Tasks/integer.c **** 
 157:../src/Common Demo Tasks/integer.c **** 		/* Finish off the calculation. */
 158:../src/Common Demo Tasks/integer.c **** 		lValue *= intgCONST3;
 159:../src/Common Demo Tasks/integer.c **** 		lValue /= intgCONST4;
 160:../src/Common Demo Tasks/integer.c **** 
 161:../src/Common Demo Tasks/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the 
 162:../src/Common Demo Tasks/integer.c **** 		TaskHasExecuted variable so the check task can see an error has 
 163:../src/Common Demo Tasks/integer.c **** 		occurred. */
 164:../src/Common Demo Tasks/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 165:../src/Common Demo Tasks/integer.c **** 		{
 166:../src/Common Demo Tasks/integer.c **** 			sError = pdTRUE;
 167:../src/Common Demo Tasks/integer.c **** 		}
 168:../src/Common Demo Tasks/integer.c **** 
 169:../src/Common Demo Tasks/integer.c **** 		if( sError == pdFALSE )
 170:../src/Common Demo Tasks/integer.c **** 		{
 171:../src/Common Demo Tasks/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 172:../src/Common Demo Tasks/integer.c **** 			we are still executing.  This will be periodically cleared by
 173:../src/Common Demo Tasks/integer.c **** 			the check task. */
 174:../src/Common Demo Tasks/integer.c **** 			portENTER_CRITICAL();
 175:../src/Common Demo Tasks/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 176:../src/Common Demo Tasks/integer.c **** 			portEXIT_CRITICAL();
 177:../src/Common Demo Tasks/integer.c **** 		}
 178:../src/Common Demo Tasks/integer.c **** 
 179:../src/Common Demo Tasks/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 180:../src/Common Demo Tasks/integer.c **** 		#if configUSE_PREEMPTION == 0
 181:../src/Common Demo Tasks/integer.c **** 		{
 182:../src/Common Demo Tasks/integer.c **** 			taskYIELD();
 183:../src/Common Demo Tasks/integer.c **** 		}
 184:../src/Common Demo Tasks/integer.c **** 		#endif
 185:../src/Common Demo Tasks/integer.c **** 	}
 4048              		.loc 1 185 0
 4049 0078 00BF     		nop
 4050              	.L9:
 147:../src/Common Demo Tasks/integer.c **** 		lValue = intgCONST1;
 4051              		.loc 1 147 0
 4052 007a 4FF07B03 		mov	r3, #123
 4053 007e FB60     		str	r3, [r7, #12]
 148:../src/Common Demo Tasks/integer.c **** 		lValue += intgCONST2;
 4054              		.loc 1 148 0
 4055 0080 FA68     		ldr	r2, [r7, #12]
 4056 0082 144B     		ldr	r3, .L11
 4057 0084 D318     		adds	r3, r2, r3
 4058 0086 FB60     		str	r3, [r7, #12]
 158:../src/Common Demo Tasks/integer.c **** 		lValue *= intgCONST3;
 4059              		.loc 1 158 0
 4060 0088 FB68     		ldr	r3, [r7, #12]
 4061 008a 1A46     		mov	r2, r3
 4062 008c 4FEA8303 		lsl	r3, r3, #2
 4063 0090 D31A     		subs	r3, r2, r3
 4064 0092 FB60     		str	r3, [r7, #12]
 159:../src/Common Demo Tasks/integer.c **** 		lValue /= intgCONST4;
 4065              		.loc 1 159 0
 4066 0094 FB68     		ldr	r3, [r7, #12]
 4067 0096 104A     		ldr	r2, .L11+4
 4068 0098 82FB0312 		smull	r1, r2, r2, r3
 4069 009c D218     		adds	r2, r2, r3
 4070 009e 4FEAA202 		asr	r2, r2, #2
 4071 00a2 4FEAE373 		asr	r3, r3, #31
 4072 00a6 D31A     		subs	r3, r2, r3
 4073 00a8 FB60     		str	r3, [r7, #12]
 164:../src/Common Demo Tasks/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 4074              		.loc 1 164 0
 4075 00aa FA68     		ldr	r2, [r7, #12]
 4076 00ac 0B4B     		ldr	r3, .L11+8
 4077 00ae 9A42     		cmp	r2, r3
 4078 00b0 02D0     		beq	.L7
 166:../src/Common Demo Tasks/integer.c **** 			sError = pdTRUE;
 4079              		.loc 1 166 0
 4080 00b2 4FF00103 		mov	r3, #1
 4081 00b6 FB82     		strh	r3, [r7, #22]	@ movhi
 4082              	.L7:
 169:../src/Common Demo Tasks/integer.c **** 		if( sError == pdFALSE )
 4083              		.loc 1 169 0
 4084 00b8 B7F91630 		ldrsh	r3, [r7, #22]
 4085 00bc 002B     		cmp	r3, #0
 4086 00be DBD1     		bne	.L10
 174:../src/Common Demo Tasks/integer.c **** 			portENTER_CRITICAL();
 4087              		.loc 1 174 0
 4088 00c0 FFF7FEFF 		bl	vPortEnterCritical
 175:../src/Common Demo Tasks/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 4089              		.loc 1 175 0
 4090 00c4 3B69     		ldr	r3, [r7, #16]
 4091 00c6 4FF00102 		mov	r2, #1
 4092 00ca 1A60     		str	r2, [r3, #0]
 176:../src/Common Demo Tasks/integer.c **** 			portEXIT_CRITICAL();
 4093              		.loc 1 176 0
 4094 00cc FFF7FEFF 		bl	vPortExitCritical
 4095              		.loc 1 185 0
 4096 00d0 D3E7     		b	.L9
 4097              	.L12:
 4098 00d2 00BF     		.align	2
 4099              	.L11:
 4100 00d4 47940300 		.word	234567
 4101 00d8 93244992 		.word	-1840700269
 4102 00dc 1B77FEFF 		.word	-100581
 4103              		.cfi_endproc
 4104              	.LFE30:
 4106              		.align	2
 4107              		.global	xAreIntegerMathsTaskStillRunning
 4108              		.thumb
 4109              		.thumb_func
 4111              	xAreIntegerMathsTaskStillRunning:
 4112              	.LFB31:
 186:../src/Common Demo Tasks/integer.c **** }
 187:../src/Common Demo Tasks/integer.c **** /*-----------------------------------------------------------*/
 188:../src/Common Demo Tasks/integer.c **** 
 189:../src/Common Demo Tasks/integer.c **** /* This is called to check that all the created tasks are still running. */
 190:../src/Common Demo Tasks/integer.c **** portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
 191:../src/Common Demo Tasks/integer.c **** {
 4113              		.loc 1 191 0
 4114              		.cfi_startproc
 4115              		@ args = 0, pretend = 0, frame = 8
 4116              		@ frame_needed = 1, uses_anonymous_args = 0
 4117              		@ link register save eliminated.
 4118 00e0 80B4     		push	{r7}
 4119              	.LCFI6:
 4120              		.cfi_def_cfa_offset 4
 4121 00e2 83B0     		sub	sp, sp, #12
 4122              	.LCFI7:
 4123              		.cfi_def_cfa_offset 16
 4124 00e4 00AF     		add	r7, sp, #0
 4125              		.cfi_offset 7, -4
 4126              	.LCFI8:
 4127              		.cfi_def_cfa_register 7
 192:../src/Common Demo Tasks/integer.c **** portBASE_TYPE xReturn = pdTRUE;
 4128              		.loc 1 192 0
 4129 00e6 4FF00103 		mov	r3, #1
 4130 00ea 7B60     		str	r3, [r7, #4]
 193:../src/Common Demo Tasks/integer.c **** short sTask;
 194:../src/Common Demo Tasks/integer.c **** 
 195:../src/Common Demo Tasks/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables 
 196:../src/Common Demo Tasks/integer.c **** 	are still being set to true. */
 197:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 4131              		.loc 1 197 0
 4132 00ec 4FF00003 		mov	r3, #0
 4133 00f0 7B80     		strh	r3, [r7, #2]	@ movhi
 4134 00f2 14E0     		b	.L14
 4135              	.L16:
 198:../src/Common Demo Tasks/integer.c **** 	{
 199:../src/Common Demo Tasks/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
 4136              		.loc 1 199 0
 4137 00f4 B7F90220 		ldrsh	r2, [r7, #2]
 4138 00f8 0E4B     		ldr	r3, .L17
 4139 00fa 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4140 00fe 002B     		cmp	r3, #0
 4141 0100 02D1     		bne	.L15
 200:../src/Common Demo Tasks/integer.c **** 		{
 201:../src/Common Demo Tasks/integer.c **** 			/* The check has not incremented so an error exists. */
 202:../src/Common Demo Tasks/integer.c **** 			xReturn = pdFALSE;
 4142              		.loc 1 202 0
 4143 0102 4FF00003 		mov	r3, #0
 4144 0106 7B60     		str	r3, [r7, #4]
 4145              	.L15:
 203:../src/Common Demo Tasks/integer.c **** 		}
 204:../src/Common Demo Tasks/integer.c **** 
 205:../src/Common Demo Tasks/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 206:../src/Common Demo Tasks/integer.c **** 		the next time around. */
 207:../src/Common Demo Tasks/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 4146              		.loc 1 207 0
 4147 0108 B7F90220 		ldrsh	r2, [r7, #2]
 4148 010c 094B     		ldr	r3, .L17
 4149 010e 4FF00001 		mov	r1, #0
 4150 0112 43F82210 		str	r1, [r3, r2, lsl #2]
 197:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 4151              		.loc 1 197 0
 4152 0116 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4153 0118 03F10103 		add	r3, r3, #1
 4154 011c 7B80     		strh	r3, [r7, #2]	@ movhi
 4155              	.L14:
 197:../src/Common Demo Tasks/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 4156              		.loc 1 197 0 is_stmt 0 discriminator 1
 4157 011e B7F90230 		ldrsh	r3, [r7, #2]
 4158 0122 002B     		cmp	r3, #0
 4159 0124 E6DD     		ble	.L16
 208:../src/Common Demo Tasks/integer.c **** 	}
 209:../src/Common Demo Tasks/integer.c **** 
 210:../src/Common Demo Tasks/integer.c **** 	return xReturn;
 4160              		.loc 1 210 0 is_stmt 1
 4161 0126 7B68     		ldr	r3, [r7, #4]
 211:../src/Common Demo Tasks/integer.c **** }
 4162              		.loc 1 211 0
 4163 0128 1846     		mov	r0, r3
 4164 012a 07F10C07 		add	r7, r7, #12
 4165 012e BD46     		mov	sp, r7
 4166 0130 80BC     		pop	{r7}
 4167 0132 7047     		bx	lr
 4168              	.L18:
 4169              		.align	2
 4170              	.L17:
 4171 0134 00000000 		.word	xTaskCheck
 4172              		.cfi_endproc
 4173              	.LFE31:
 4175              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 integer.c
     /tmp/ccn1tuSL.s:3942   .bss:00000000 $d
     /tmp/ccn1tuSL.s:3943   .bss:00000000 xTaskCheck
     /tmp/ccn1tuSL.s:3946   .rodata:00000000 $d
     /tmp/ccn1tuSL.s:3950   .text:00000000 $t
     /tmp/ccn1tuSL.s:3955   .text:00000000 vStartIntegerMathTasks
     /tmp/ccn1tuSL.s:4012   .text:00000058 $d
     /tmp/ccn1tuSL.s:4022   .text:00000064 vCompeteingIntMathTask
     /tmp/ccn1tuSL.s:4018   .text:00000064 $t
     /tmp/ccn1tuSL.s:4100   .text:000000d4 $d
     /tmp/ccn1tuSL.s:4106   .text:000000e0 $t
     /tmp/ccn1tuSL.s:4111   .text:000000e0 xAreIntegerMathsTaskStillRunning
     /tmp/ccn1tuSL.s:4171   .text:00000134 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskGenericCreate
vPortEnterCritical
vPortExitCritical
