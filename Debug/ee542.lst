
ee542.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a458  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000a458  0000a458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  10000000  0000a460  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004e4c  10000010  0000a470  00018010  2**3
                  ALLOC
  4 .debug_abbrev 00001e76  00000000  00000000  00018010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a8e2  00000000  00000000  00019e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00005fbe  00000000  00000000  00024768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 000c81e5  00000000  00000000  0002a726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003bf6  00000000  00000000  000f290b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000168f  00000000  00000000  000f6501  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000f88  00000000  00000000  000f7b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002e0  00000000  00000000  000f8b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003f2d  00000000  00000000  000f8df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000002a  00000000  00000000  000fcd25  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  000fcd4f  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00002584  00000000  00000000  000fcd80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	f0 7f 00 10 89 91 00 00 dd 91 00 00 e5 91 00 00     ................
      10:	ed 91 00 00 f5 91 00 00 fd 91 00 00 00 00 00 00     ................
	...
      2c:	6d 0b 00 00 05 92 00 00 00 00 00 00 4d 0c 00 00     m...........M...
      3c:	89 0c 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      4c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      5c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      6c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      7c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      8c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      9c:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      ac:	0d 92 00 00 0d 92 00 00 0d 92 00 00 0d 92 00 00     ................
      bc:	0d 92 00 00 0d 92 00 00 0d 92 00 00                 ............

000000c8 <setSystem>:
#include "lpc17xx_clkpwr.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_uart.h"

void setSystem(void)
{
      c8:	b580      	push	{r7, lr}
      ca:	af00      	add	r7, sp, #0
	// disable peripherals power
	LPC_SC->PCONP = 0;
      cc:	4b7a      	ldr	r3, [pc, #488]	; (2b8 <setSystem+0x1f0>)
      ce:	f04f 0200 	mov.w	r2, #0
      d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// enable GPIO power
	LPC_SC->PCONP = CLKPWR_PCONP_PCGPIO;
      d6:	4b78      	ldr	r3, [pc, #480]	; (2b8 <setSystem+0x1f0>)
      d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
      dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// disable TPIU
	LPC_PINCON->PINSEL10 = 0;
      e0:	4b76      	ldr	r3, [pc, #472]	; (2bc <setSystem+0x1f4>)
      e2:	f04f 0200 	mov.w	r2, #0
      e6:	629a      	str	r2, [r3, #40]	; 0x28

	if ( LPC_SC->PLL0STAT & ( 1 << 25 ) )
      e8:	4b73      	ldr	r3, [pc, #460]	; (2b8 <setSystem+0x1f0>)
      ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
      ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      f2:	2b00      	cmp	r3, #0
      f4:	d00e      	beq.n	114 <setSystem+0x4c>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL0CON = 1;
      f6:	4b70      	ldr	r3, [pc, #448]	; (2b8 <setSystem+0x1f0>)
      f8:	f04f 0201 	mov.w	r2, #1
      fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		LPC_SC->PLL0FEED = PLLFEED_FEED1;
     100:	4b6d      	ldr	r3, [pc, #436]	; (2b8 <setSystem+0x1f0>)
     102:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		LPC_SC->PLL0FEED = PLLFEED_FEED2;
     10a:	4b6b      	ldr	r3, [pc, #428]	; (2b8 <setSystem+0x1f0>)
     10c:	f04f 0255 	mov.w	r2, #85	; 0x55
     110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL0CON = 0;
     114:	4b68      	ldr	r3, [pc, #416]	; (2b8 <setSystem+0x1f0>)
     116:	f04f 0200 	mov.w	r2, #0
     11a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     11e:	4b66      	ldr	r3, [pc, #408]	; (2b8 <setSystem+0x1f0>)
     120:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     128:	4b63      	ldr	r3, [pc, #396]	; (2b8 <setSystem+0x1f0>)
     12a:	f04f 0255 	mov.w	r2, #85	; 0x55
     12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable main OSC. */
	LPC_SC->SCS |= 0x20;
     132:	4b61      	ldr	r3, [pc, #388]	; (2b8 <setSystem+0x1f0>)
     134:	4a60      	ldr	r2, [pc, #384]	; (2b8 <setSystem+0x1f0>)
     136:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
     13a:	f042 0220 	orr.w	r2, r2, #32
     13e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	while( !( LPC_SC->SCS & 0x40 ) );
     142:	bf00      	nop
     144:	4b5c      	ldr	r3, [pc, #368]	; (2b8 <setSystem+0x1f0>)
     146:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
     14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
     14e:	2b00      	cmp	r3, #0
     150:	d0f8      	beq.n	144 <setSystem+0x7c>

	/* select main OSC, 12MHz, as the PLL clock source. */
	LPC_SC->CLKSRCSEL = 0x1;
     152:	4b59      	ldr	r3, [pc, #356]	; (2b8 <setSystem+0x1f0>)
     154:	f04f 0201 	mov.w	r2, #1
     158:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	LPC_SC->PLL0CFG = 0x20031;
     15c:	4b56      	ldr	r3, [pc, #344]	; (2b8 <setSystem+0x1f0>)
     15e:	4a58      	ldr	r2, [pc, #352]	; (2c0 <setSystem+0x1f8>)
     160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     164:	4b54      	ldr	r3, [pc, #336]	; (2b8 <setSystem+0x1f0>)
     166:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     16e:	4b52      	ldr	r3, [pc, #328]	; (2b8 <setSystem+0x1f0>)
     170:	f04f 0255 	mov.w	r2, #85	; 0x55
     174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable PLL, disconnected. */
	LPC_SC->PLL0CON = 1;
     178:	4b4f      	ldr	r3, [pc, #316]	; (2b8 <setSystem+0x1f0>)
     17a:	f04f 0201 	mov.w	r2, #1
     17e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     182:	4b4d      	ldr	r3, [pc, #308]	; (2b8 <setSystem+0x1f0>)
     184:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     18c:	4b4a      	ldr	r3, [pc, #296]	; (2b8 <setSystem+0x1f0>)
     18e:	f04f 0255 	mov.w	r2, #85	; 0x55
     192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Set clock divider. */
	LPC_SC->CCLKCFG = 0x03;
     196:	4b48      	ldr	r3, [pc, #288]	; (2b8 <setSystem+0x1f0>)
     198:	f04f 0203 	mov.w	r2, #3
     19c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	/* Configure flash accelerator. */
	LPC_SC->FLASHCFG = 0x403a;
     1a0:	4b45      	ldr	r3, [pc, #276]	; (2b8 <setSystem+0x1f0>)
     1a2:	f244 023a 	movw	r2, #16442	; 0x403a
     1a6:	601a      	str	r2, [r3, #0]

	/* Check lock bit status. */
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 26 ) ) == 0 ) );
     1a8:	bf00      	nop
     1aa:	4b43      	ldr	r3, [pc, #268]	; (2b8 <setSystem+0x1f0>)
     1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     1b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     1b4:	2b00      	cmp	r3, #0
     1b6:	d0f8      	beq.n	1aa <setSystem+0xe2>

	/* Enable and connect. */
	LPC_SC->PLL0CON = 3;
     1b8:	4b3f      	ldr	r3, [pc, #252]	; (2b8 <setSystem+0x1f0>)
     1ba:	f04f 0203 	mov.w	r2, #3
     1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     1c2:	4b3d      	ldr	r3, [pc, #244]	; (2b8 <setSystem+0x1f0>)
     1c4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     1cc:	4b3a      	ldr	r3, [pc, #232]	; (2b8 <setSystem+0x1f0>)
     1ce:	f04f 0255 	mov.w	r2, #85	; 0x55
     1d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 25 ) ) == 0 ) );
     1d6:	bf00      	nop
     1d8:	4b37      	ldr	r3, [pc, #220]	; (2b8 <setSystem+0x1f0>)
     1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     1e2:	2b00      	cmp	r3, #0
     1e4:	d0f8      	beq.n	1d8 <setSystem+0x110>



	/* Configure the clock for the USB. */

	if( LPC_SC->PLL1STAT & ( 1 << 9 ) )
     1e6:	4b34      	ldr	r3, [pc, #208]	; (2b8 <setSystem+0x1f0>)
     1e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     1ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
     1f0:	2b00      	cmp	r3, #0
     1f2:	d00e      	beq.n	212 <setSystem+0x14a>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL1CON = 1;
     1f4:	4b30      	ldr	r3, [pc, #192]	; (2b8 <setSystem+0x1f0>)
     1f6:	f04f 0201 	mov.w	r2, #1
     1fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		LPC_SC->PLL1FEED = PLLFEED_FEED1;
     1fe:	4b2e      	ldr	r3, [pc, #184]	; (2b8 <setSystem+0x1f0>)
     200:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     204:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		LPC_SC->PLL1FEED = PLLFEED_FEED2;
     208:	4b2b      	ldr	r3, [pc, #172]	; (2b8 <setSystem+0x1f0>)
     20a:	f04f 0255 	mov.w	r2, #85	; 0x55
     20e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL1CON = 0;
     212:	4b29      	ldr	r3, [pc, #164]	; (2b8 <setSystem+0x1f0>)
     214:	f04f 0200 	mov.w	r2, #0
     218:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     21c:	4b26      	ldr	r3, [pc, #152]	; (2b8 <setSystem+0x1f0>)
     21e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     222:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     226:	4b24      	ldr	r3, [pc, #144]	; (2b8 <setSystem+0x1f0>)
     228:	f04f 0255 	mov.w	r2, #85	; 0x55
     22c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	LPC_SC->PLL1CFG = 0x23;
     230:	4b21      	ldr	r3, [pc, #132]	; (2b8 <setSystem+0x1f0>)
     232:	f04f 0223 	mov.w	r2, #35	; 0x23
     236:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     23a:	4b1f      	ldr	r3, [pc, #124]	; (2b8 <setSystem+0x1f0>)
     23c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     240:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     244:	4b1c      	ldr	r3, [pc, #112]	; (2b8 <setSystem+0x1f0>)
     246:	f04f 0255 	mov.w	r2, #85	; 0x55
     24a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	/* Enable PLL, disconnected. */
	LPC_SC->PLL1CON = 1;
     24e:	4b1a      	ldr	r3, [pc, #104]	; (2b8 <setSystem+0x1f0>)
     250:	f04f 0201 	mov.w	r2, #1
     254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     258:	4b17      	ldr	r3, [pc, #92]	; (2b8 <setSystem+0x1f0>)
     25a:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     25e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     262:	4b15      	ldr	r3, [pc, #84]	; (2b8 <setSystem+0x1f0>)
     264:	f04f 0255 	mov.w	r2, #85	; 0x55
     268:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 10 ) ) == 0 ) );
     26c:	bf00      	nop
     26e:	4b12      	ldr	r3, [pc, #72]	; (2b8 <setSystem+0x1f0>)
     270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     278:	2b00      	cmp	r3, #0
     27a:	d0f8      	beq.n	26e <setSystem+0x1a6>

	/* Enable and connect. */
	LPC_SC->PLL1CON = 3;
     27c:	4b0e      	ldr	r3, [pc, #56]	; (2b8 <setSystem+0x1f0>)
     27e:	f04f 0203 	mov.w	r2, #3
     282:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     286:	4b0c      	ldr	r3, [pc, #48]	; (2b8 <setSystem+0x1f0>)
     288:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     28c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     290:	4b09      	ldr	r3, [pc, #36]	; (2b8 <setSystem+0x1f0>)
     292:	f04f 0255 	mov.w	r2, #85	; 0x55
     296:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 9 ) ) == 0 ) );
     29a:	bf00      	nop
     29c:	4b06      	ldr	r3, [pc, #24]	; (2b8 <setSystem+0x1f0>)
     29e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
     2a6:	2b00      	cmp	r3, #0
     2a8:	d0f8      	beq.n	29c <setSystem+0x1d4>

	/*  Setup the peripheral bus to be the same as the PLL output (64 MHz). */
	LPC_SC->PCLKSEL0 = 0x05555555;
     2aa:	4b03      	ldr	r3, [pc, #12]	; (2b8 <setSystem+0x1f0>)
     2ac:	4a05      	ldr	r2, [pc, #20]	; (2c4 <setSystem+0x1fc>)
     2ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	// configure the RED_LED
	configRedLed();
     2b2:	f000 f809 	bl	2c8 <configRedLed>
}
     2b6:	bd80      	pop	{r7, pc}
     2b8:	400fc000 	.word	0x400fc000
     2bc:	4002c000 	.word	0x4002c000
     2c0:	00020031 	.word	0x00020031
     2c4:	05555555 	.word	0x05555555

000002c8 <configRedLed>:

void configRedLed(void)
{
     2c8:	b480      	push	{r7}
     2ca:	af00      	add	r7, sp, #0
	// RED LED on port 3
	LPC_GPIO3->FIODIR  = RED_LED;
     2cc:	4b05      	ldr	r3, [pc, #20]	; (2e4 <configRedLed+0x1c>)
     2ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     2d2:	601a      	str	r2, [r3, #0]

	// start with the LED OFF
	LPC_GPIO3->FIOCLR = RED_LED;
     2d4:	4b03      	ldr	r3, [pc, #12]	; (2e4 <configRedLed+0x1c>)
     2d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     2da:	61da      	str	r2, [r3, #28]
}
     2dc:	46bd      	mov	sp, r7
     2de:	bc80      	pop	{r7}
     2e0:	4770      	bx	lr
     2e2:	bf00      	nop
     2e4:	2009c060 	.word	0x2009c060

000002e8 <configPwm>:

void configPwm(void)
{
     2e8:	b480      	push	{r7}
     2ea:	af00      	add	r7, sp, #0
	// enable the PWM power
	LPC_SC->PCONP |= CLKPWR_PCONP_PCPWM1;
     2ec:	4b09      	ldr	r3, [pc, #36]	; (314 <configPwm+0x2c>)
     2ee:	4a09      	ldr	r2, [pc, #36]	; (314 <configPwm+0x2c>)
     2f0:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
     2f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     2f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// set the clock divider to 1
	LPC_SC->PCLKSEL0 |= CLKPWR_PCLKSEL_PWM1;
     2fc:	4b05      	ldr	r3, [pc, #20]	; (314 <configPwm+0x2c>)
     2fe:	4a05      	ldr	r2, [pc, #20]	; (314 <configPwm+0x2c>)
     300:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
     304:	f042 020c 	orr.w	r2, r2, #12
     308:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
     30c:	46bd      	mov	sp, r7
     30e:	bc80      	pop	{r7}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	400fc000 	.word	0x400fc000

00000318 <configUART>:

void configUART(void)
{
     318:	b480      	push	{r7}
     31a:	b083      	sub	sp, #12
     31c:	af00      	add	r7, sp, #0
	UART_CFG_Type UART_initStructure;

	UART_initStructure.Baud_rate = 115200;
     31e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     322:	603b      	str	r3, [r7, #0]
	UART_initStructure.Databits = UART_DATABIT_8;
     324:	f04f 0303 	mov.w	r3, #3
     328:	717b      	strb	r3, [r7, #5]
	UART_initStructure.Parity = UART_PARITY_NONE;
     32a:	f04f 0300 	mov.w	r3, #0
     32e:	713b      	strb	r3, [r7, #4]
	UART_initStructure.Stopbits = UART_STOPBIT_1;
     330:	f04f 0300 	mov.w	r3, #0
     334:	71bb      	strb	r3, [r7, #6]
	//UART_Init(UART, &UART_initStructure);

	// enable the UART


}
     336:	f107 070c 	add.w	r7, r7, #12
     33a:	46bd      	mov	sp, r7
     33c:	bc80      	pop	{r7}
     33e:	4770      	bx	lr

00000340 <main>:
// contains the handles for all tasks
// define one more taskHandle than you need, zero the last entry
xTaskHandle taskHandles[5];  //TODO: need to know how many there will be

int main( void )
{
     340:	b580      	push	{r7, lr}
     342:	b084      	sub	sp, #16
     344:	af04      	add	r7, sp, #16
	// configure the system
    setSystem();
     346:	f7ff febf 	bl	c8 <setSystem>

    // create the LED task
    if(xTaskCreate(vLedTask, (signed portCHAR*) "LED",128,NULL, 1, &taskHandles[0]) != pdPASS)
     34a:	4b0f      	ldr	r3, [pc, #60]	; (388 <main+0x48>)
     34c:	f04f 0201 	mov.w	r2, #1
     350:	9200      	str	r2, [sp, #0]
     352:	4a0e      	ldr	r2, [pc, #56]	; (38c <main+0x4c>)
     354:	9201      	str	r2, [sp, #4]
     356:	f04f 0200 	mov.w	r2, #0
     35a:	9202      	str	r2, [sp, #8]
     35c:	f04f 0200 	mov.w	r2, #0
     360:	9203      	str	r2, [sp, #12]
     362:	480b      	ldr	r0, [pc, #44]	; (390 <main+0x50>)
     364:	4619      	mov	r1, r3
     366:	f04f 0280 	mov.w	r2, #128	; 0x80
     36a:	f04f 0300 	mov.w	r3, #0
     36e:	f001 fa55 	bl	181c <xTaskGenericCreate>
    {
    	//TODO: the task was not created, do something
    }

    taskHandles[4] = 0; //TODO: will need to change when we know how many tasks there will be
     372:	4b06      	ldr	r3, [pc, #24]	; (38c <main+0x4c>)
     374:	f04f 0200 	mov.w	r2, #0
     378:	611a      	str	r2, [r3, #16]

    // enable the interrupts
    portENABLE_INTERRUPTS();
     37a:	f04f 0000 	mov.w	r0, #0
     37e:	f380 8811 	msr	BASEPRI, r0

    // start the scheduler
	vTaskStartScheduler();
     382:	f001 fd9b 	bl	1ebc <vTaskStartScheduler>

    // will only get here if there was insufficient memory to create the idle
    // task.  The idle task is created within vTaskStartScheduler().
	for( ;; );
     386:	e7fe      	b.n	386 <main+0x46>
     388:	0000a2fc 	.word	0x0000a2fc
     38c:	10004dd0 	.word	0x10004dd0
     390:	00000419 	.word	0x00000419

00000394 <vApplicationTickHook>:
	return 0; // never gets here
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
     394:	b480      	push	{r7}
     396:	af00      	add	r7, sp, #0
	    {
	    	pcStatusMessage = "An error has been detected in the Mutex test/demo.";
	    }
	}
	*/
}
     398:	46bd      	mov	sp, r7
     39a:	bc80      	pop	{r7}
     39c:	4770      	bx	lr
     39e:	bf00      	nop

000003a0 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
     3a0:	b480      	push	{r7}
     3a2:	b083      	sub	sp, #12
     3a4:	af00      	add	r7, sp, #0
     3a6:	6078      	str	r0, [r7, #4]
     3a8:	6039      	str	r1, [r7, #0]
	/* This function will get called if a task overflows its stack. */

	( void ) pxTask;
	( void ) pcTaskName;

	for( ;; );
     3aa:	e7fe      	b.n	3aa <vApplicationStackOverflowHook+0xa>

000003ac <vConfigureTimerForRunTimeStats>:
}
/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
     3ac:	b480      	push	{r7}
     3ae:	b085      	sub	sp, #20
     3b0:	af00      	add	r7, sp, #0
const unsigned long TCR_COUNT_RESET = 2, CTCR_CTM_TIMER = 0x00, TCR_COUNT_ENABLE = 0x01;
     3b2:	f04f 0302 	mov.w	r3, #2
     3b6:	60fb      	str	r3, [r7, #12]
     3b8:	f04f 0300 	mov.w	r3, #0
     3bc:	60bb      	str	r3, [r7, #8]
     3be:	f04f 0301 	mov.w	r3, #1
     3c2:	607b      	str	r3, [r7, #4]
	of CPU time that each task is utilising.  It is called automatically when
	the scheduler is started (assuming configGENERATE_RUN_TIME_STATS is set
	to 1). */

	/* Power up and feed the timer. */
	LPC_SC->PCONP |= 0x02UL;
     3c4:	4b13      	ldr	r3, [pc, #76]	; (414 <vConfigureTimerForRunTimeStats+0x68>)
     3c6:	4a13      	ldr	r2, [pc, #76]	; (414 <vConfigureTimerForRunTimeStats+0x68>)
     3c8:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
     3cc:	f042 0202 	orr.w	r2, r2, #2
     3d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
     3d4:	4b0f      	ldr	r3, [pc, #60]	; (414 <vConfigureTimerForRunTimeStats+0x68>)
     3d6:	4a0f      	ldr	r2, [pc, #60]	; (414 <vConfigureTimerForRunTimeStats+0x68>)
     3d8:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
     3dc:	f022 020c 	bic.w	r2, r2, #12
     3e0:	f042 0204 	orr.w	r2, r2, #4
     3e4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	/* Reset Timer 0 */
	LPC_TIM0->TCR = TCR_COUNT_RESET;
     3e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     3ec:	68fa      	ldr	r2, [r7, #12]
     3ee:	605a      	str	r2, [r3, #4]

	/* Just count up. */
	LPC_TIM0->CTCR = CTCR_CTM_TIMER;
     3f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     3f4:	68ba      	ldr	r2, [r7, #8]
     3f6:	671a      	str	r2, [r3, #112]	; 0x70

	/* Prescale to a frequency that is good enough to get a decent resolution,
	but not too fast so as to overflow all the time. */
	LPC_TIM0->PR =  ( configCPU_CLOCK_HZ / 10000UL ) - 1UL;
     3f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     3fc:	f242 62ab 	movw	r2, #9899	; 0x26ab
     400:	60da      	str	r2, [r3, #12]

	/* Start the counter. */
	LPC_TIM0->TCR = TCR_COUNT_ENABLE;
     402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     406:	687a      	ldr	r2, [r7, #4]
     408:	605a      	str	r2, [r3, #4]
}
     40a:	f107 0714 	add.w	r7, r7, #20
     40e:	46bd      	mov	sp, r7
     410:	bc80      	pop	{r7}
     412:	4770      	bx	lr
     414:	400fc000 	.word	0x400fc000

00000418 <vLedTask>:
#include "hwConfig.h"
#include "platformConfig.h"
#include "taskLed.h"

void vLedTask( void *pvParameters )
{
     418:	b580      	push	{r7, lr}
     41a:	b084      	sub	sp, #16
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	portTickType xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
     420:	f001 fe2c 	bl	207c <xTaskGetTickCount>
     424:	4603      	mov	r3, r0
     426:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     428:	f107 030c 	add.w	r3, r7, #12
     42c:	4618      	mov	r0, r3
     42e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     432:	f001 faf9 	bl	1a28 <vTaskDelayUntil>

		// Turn the LED on
		LPC_GPIO3->FIOCLR = RED_LED;
     436:	4b08      	ldr	r3, [pc, #32]	; (458 <vLedTask+0x40>)
     438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     43c:	61da      	str	r2, [r3, #28]

		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     43e:	f107 030c 	add.w	r3, r7, #12
     442:	4618      	mov	r0, r3
     444:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     448:	f001 faee 	bl	1a28 <vTaskDelayUntil>

		// Turn the LED off
		LPC_GPIO3->FIOSET = RED_LED;
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <vLedTask+0x40>)
     44e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     452:	619a      	str	r2, [r3, #24]
	}
     454:	e7e8      	b.n	428 <vLedTask+0x10>
     456:	bf00      	nop
     458:	2009c060 	.word	0x2009c060

0000045c <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
     45c:	b480      	push	{r7}
     45e:	b083      	sub	sp, #12
     460:	af00      	add	r7, sp, #0
     462:	6078      	str	r0, [r7, #4]
     464:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
     466:	687b      	ldr	r3, [r7, #4]
     468:	2b00      	cmp	r3, #0
     46a:	d00a      	beq.n	482 <printchar+0x26>
		**str = (char)c;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	681b      	ldr	r3, [r3, #0]
     470:	683a      	ldr	r2, [r7, #0]
     472:	b2d2      	uxtb	r2, r2
     474:	701a      	strb	r2, [r3, #0]
		++(*str);
     476:	687b      	ldr	r3, [r7, #4]
     478:	681b      	ldr	r3, [r3, #0]
     47a:	f103 0201 	add.w	r2, r3, #1
     47e:	687b      	ldr	r3, [r7, #4]
     480:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
     482:	f107 070c 	add.w	r7, r7, #12
     486:	46bd      	mov	sp, r7
     488:	bc80      	pop	{r7}
     48a:	4770      	bx	lr

0000048c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
     48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     490:	b084      	sub	sp, #16
     492:	af00      	add	r7, sp, #0
     494:	60f8      	str	r0, [r7, #12]
     496:	60b9      	str	r1, [r7, #8]
     498:	607a      	str	r2, [r7, #4]
     49a:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
     49c:	f04f 0400 	mov.w	r4, #0
     4a0:	f04f 0620 	mov.w	r6, #32

	if (width > 0) {
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	2b00      	cmp	r3, #0
     4a8:	dd1d      	ble.n	4e6 <prints+0x5a>
		register int len = 0;
     4aa:	f04f 0500 	mov.w	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
     4ae:	f8d7 8008 	ldr.w	r8, [r7, #8]
     4b2:	e003      	b.n	4bc <prints+0x30>
     4b4:	f105 0501 	add.w	r5, r5, #1
     4b8:	f108 0801 	add.w	r8, r8, #1
     4bc:	f898 3000 	ldrb.w	r3, [r8]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d1f7      	bne.n	4b4 <prints+0x28>
		if (len >= width) width = 0;
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	429d      	cmp	r5, r3
     4c8:	db03      	blt.n	4d2 <prints+0x46>
     4ca:	f04f 0300 	mov.w	r3, #0
     4ce:	607b      	str	r3, [r7, #4]
     4d0:	e002      	b.n	4d8 <prints+0x4c>
		else width -= len;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	1b5b      	subs	r3, r3, r5
     4d6:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
     4d8:	683b      	ldr	r3, [r7, #0]
     4da:	f003 0302 	and.w	r3, r3, #2
     4de:	2b00      	cmp	r3, #0
     4e0:	d001      	beq.n	4e6 <prints+0x5a>
     4e2:	f04f 0630 	mov.w	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
     4e6:	683b      	ldr	r3, [r7, #0]
     4e8:	f003 0301 	and.w	r3, r3, #1
     4ec:	2b00      	cmp	r3, #0
     4ee:	d11b      	bne.n	528 <prints+0x9c>
		for ( ; width > 0; --width) {
     4f0:	e009      	b.n	506 <prints+0x7a>
			printchar (out, padchar);
     4f2:	68f8      	ldr	r0, [r7, #12]
     4f4:	4631      	mov	r1, r6
     4f6:	f7ff ffb1 	bl	45c <printchar>
			++pc;
     4fa:	f104 0401 	add.w	r4, r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	f103 33ff 	add.w	r3, r3, #4294967295
     504:	607b      	str	r3, [r7, #4]
     506:	687b      	ldr	r3, [r7, #4]
     508:	2b00      	cmp	r3, #0
     50a:	dcf2      	bgt.n	4f2 <prints+0x66>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     50c:	e00d      	b.n	52a <prints+0x9e>
		printchar (out, *string);
     50e:	68bb      	ldr	r3, [r7, #8]
     510:	781b      	ldrb	r3, [r3, #0]
     512:	68f8      	ldr	r0, [r7, #12]
     514:	4619      	mov	r1, r3
     516:	f7ff ffa1 	bl	45c <printchar>
		++pc;
     51a:	f104 0401 	add.w	r4, r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     51e:	68bb      	ldr	r3, [r7, #8]
     520:	f103 0301 	add.w	r3, r3, #1
     524:	60bb      	str	r3, [r7, #8]
     526:	e000      	b.n	52a <prints+0x9e>
     528:	bf00      	nop
     52a:	68bb      	ldr	r3, [r7, #8]
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	2b00      	cmp	r3, #0
     530:	d1ed      	bne.n	50e <prints+0x82>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     532:	e009      	b.n	548 <prints+0xbc>
		printchar (out, padchar);
     534:	68f8      	ldr	r0, [r7, #12]
     536:	4631      	mov	r1, r6
     538:	f7ff ff90 	bl	45c <printchar>
		++pc;
     53c:	f104 0401 	add.w	r4, r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     540:	687b      	ldr	r3, [r7, #4]
     542:	f103 33ff 	add.w	r3, r3, #4294967295
     546:	607b      	str	r3, [r7, #4]
     548:	687b      	ldr	r3, [r7, #4]
     54a:	2b00      	cmp	r3, #0
     54c:	dcf2      	bgt.n	534 <prints+0xa8>
		printchar (out, padchar);
		++pc;
	}

	return pc;
     54e:	4623      	mov	r3, r4
}
     550:	4618      	mov	r0, r3
     552:	f107 0710 	add.w	r7, r7, #16
     556:	46bd      	mov	sp, r7
     558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000055c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
     55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     560:	b089      	sub	sp, #36	; 0x24
     562:	af00      	add	r7, sp, #0
     564:	60f8      	str	r0, [r7, #12]
     566:	60b9      	str	r1, [r7, #8]
     568:	607a      	str	r2, [r7, #4]
     56a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
     56c:	f04f 0900 	mov.w	r9, #0
     570:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
     574:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
     576:	68bb      	ldr	r3, [r7, #8]
     578:	2b00      	cmp	r3, #0
     57a:	d10f      	bne.n	59c <printi+0x40>
		print_buf[0] = '0';
     57c:	f04f 0330 	mov.w	r3, #48	; 0x30
     580:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
     582:	f04f 0300 	mov.w	r3, #0
     586:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
     588:	f107 0314 	add.w	r3, r7, #20
     58c:	68f8      	ldr	r0, [r7, #12]
     58e:	4619      	mov	r1, r3
     590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     594:	f7ff ff7a 	bl	48c <prints>
     598:	4603      	mov	r3, r0
     59a:	e053      	b.n	644 <printi+0xe8>
	}

	if (sg && b == 10 && i < 0) {
     59c:	683b      	ldr	r3, [r7, #0]
     59e:	2b00      	cmp	r3, #0
     5a0:	d00b      	beq.n	5ba <printi+0x5e>
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2b0a      	cmp	r3, #10
     5a6:	d108      	bne.n	5ba <printi+0x5e>
     5a8:	68bb      	ldr	r3, [r7, #8]
     5aa:	2b00      	cmp	r3, #0
     5ac:	da05      	bge.n	5ba <printi+0x5e>
		neg = 1;
     5ae:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
     5b2:	68bb      	ldr	r3, [r7, #8]
     5b4:	f1c3 0300 	rsb	r3, r3, #0
     5b8:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
     5ba:	f107 0314 	add.w	r3, r7, #20
     5be:	f103 040b 	add.w	r4, r3, #11
	*s = '\0';
     5c2:	f04f 0300 	mov.w	r3, #0
     5c6:	7023      	strb	r3, [r4, #0]

	while (u) {
     5c8:	e016      	b.n	5f8 <printi+0x9c>
		t = (unsigned int)u % b;
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	fbb5 f2f3 	udiv	r2, r5, r3
     5d0:	fb03 f302 	mul.w	r3, r3, r2
     5d4:	1aeb      	subs	r3, r5, r3
     5d6:	461e      	mov	r6, r3
		if( t >= 10 )
     5d8:	2e09      	cmp	r6, #9
     5da:	dd03      	ble.n	5e4 <printi+0x88>
			t += letbase - '0' - 10;
     5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     5de:	f1a3 033a 	sub.w	r3, r3, #58	; 0x3a
     5e2:	18f6      	adds	r6, r6, r3
		*--s = (char)(t + '0');
     5e4:	f104 34ff 	add.w	r4, r4, #4294967295
     5e8:	b2f3      	uxtb	r3, r6
     5ea:	f103 0330 	add.w	r3, r3, #48	; 0x30
     5ee:	b2db      	uxtb	r3, r3
     5f0:	7023      	strb	r3, [r4, #0]
		u /= b;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
     5f8:	2d00      	cmp	r5, #0
     5fa:	d1e6      	bne.n	5ca <printi+0x6e>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
     5fc:	f1b9 0f00 	cmp.w	r9, #0
     600:	d018      	beq.n	634 <printi+0xd8>
		if( width && (pad & PAD_ZERO) ) {
     602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     604:	2b00      	cmp	r3, #0
     606:	d010      	beq.n	62a <printi+0xce>
     608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     60a:	f003 0302 	and.w	r3, r3, #2
     60e:	2b00      	cmp	r3, #0
     610:	d00b      	beq.n	62a <printi+0xce>
			printchar (out, '-');
     612:	68f8      	ldr	r0, [r7, #12]
     614:	f04f 012d 	mov.w	r1, #45	; 0x2d
     618:	f7ff ff20 	bl	45c <printchar>
			++pc;
     61c:	f108 0801 	add.w	r8, r8, #1
			--width;
     620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     622:	f103 33ff 	add.w	r3, r3, #4294967295
     626:	643b      	str	r3, [r7, #64]	; 0x40
     628:	e004      	b.n	634 <printi+0xd8>
		}
		else {
			*--s = '-';
     62a:	f104 34ff 	add.w	r4, r4, #4294967295
     62e:	f04f 032d 	mov.w	r3, #45	; 0x2d
     632:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
     634:	68f8      	ldr	r0, [r7, #12]
     636:	4621      	mov	r1, r4
     638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     63c:	f7ff ff26 	bl	48c <prints>
     640:	4603      	mov	r3, r0
     642:	4443      	add	r3, r8
}
     644:	4618      	mov	r0, r3
     646:	f107 0724 	add.w	r7, r7, #36	; 0x24
     64a:	46bd      	mov	sp, r7
     64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00000650 <print>:

static int print( char **out, const char *format, va_list args )
{
     650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     654:	b08a      	sub	sp, #40	; 0x28
     656:	af04      	add	r7, sp, #16
     658:	60f8      	str	r0, [r7, #12]
     65a:	60b9      	str	r1, [r7, #8]
     65c:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
     65e:	f04f 0400 	mov.w	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
     662:	e0e8      	b.n	836 <print+0x1e6>
		if (*format == '%') {
     664:	68bb      	ldr	r3, [r7, #8]
     666:	781b      	ldrb	r3, [r3, #0]
     668:	2b25      	cmp	r3, #37	; 0x25
     66a:	f040 80d8 	bne.w	81e <print+0x1ce>
			++format;
     66e:	68bb      	ldr	r3, [r7, #8]
     670:	f103 0301 	add.w	r3, r3, #1
     674:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
     676:	f04f 0600 	mov.w	r6, #0
     67a:	4635      	mov	r5, r6
			if (*format == '\0') break;
     67c:	68bb      	ldr	r3, [r7, #8]
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	2b00      	cmp	r3, #0
     682:	f000 80de 	beq.w	842 <print+0x1f2>
			if (*format == '%') goto out;
     686:	68bb      	ldr	r3, [r7, #8]
     688:	781b      	ldrb	r3, [r3, #0]
     68a:	2b25      	cmp	r3, #37	; 0x25
     68c:	f000 80c6 	beq.w	81c <print+0x1cc>
			if (*format == '-') {
     690:	68bb      	ldr	r3, [r7, #8]
     692:	781b      	ldrb	r3, [r3, #0]
     694:	2b2d      	cmp	r3, #45	; 0x2d
     696:	d10d      	bne.n	6b4 <print+0x64>
				++format;
     698:	68bb      	ldr	r3, [r7, #8]
     69a:	f103 0301 	add.w	r3, r3, #1
     69e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
     6a0:	f04f 0601 	mov.w	r6, #1
			}
			while (*format == '0') {
     6a4:	e007      	b.n	6b6 <print+0x66>
				++format;
     6a6:	68bb      	ldr	r3, [r7, #8]
     6a8:	f103 0301 	add.w	r3, r3, #1
     6ac:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
     6ae:	f046 0602 	orr.w	r6, r6, #2
     6b2:	e000      	b.n	6b6 <print+0x66>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
     6b4:	bf00      	nop
     6b6:	68bb      	ldr	r3, [r7, #8]
     6b8:	781b      	ldrb	r3, [r3, #0]
     6ba:	2b30      	cmp	r3, #48	; 0x30
     6bc:	d0f3      	beq.n	6a6 <print+0x56>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     6be:	e00f      	b.n	6e0 <print+0x90>
				width *= 10;
     6c0:	462b      	mov	r3, r5
     6c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
     6c6:	195b      	adds	r3, r3, r5
     6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     6cc:	461d      	mov	r5, r3
				width += *format - '0';
     6ce:	68bb      	ldr	r3, [r7, #8]
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     6d6:	18ed      	adds	r5, r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     6d8:	68bb      	ldr	r3, [r7, #8]
     6da:	f103 0301 	add.w	r3, r3, #1
     6de:	60bb      	str	r3, [r7, #8]
     6e0:	68bb      	ldr	r3, [r7, #8]
     6e2:	781b      	ldrb	r3, [r3, #0]
     6e4:	2b2f      	cmp	r3, #47	; 0x2f
     6e6:	d903      	bls.n	6f0 <print+0xa0>
     6e8:	68bb      	ldr	r3, [r7, #8]
     6ea:	781b      	ldrb	r3, [r3, #0]
     6ec:	2b39      	cmp	r3, #57	; 0x39
     6ee:	d9e7      	bls.n	6c0 <print+0x70>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
     6f0:	68bb      	ldr	r3, [r7, #8]
     6f2:	781b      	ldrb	r3, [r3, #0]
     6f4:	2b73      	cmp	r3, #115	; 0x73
     6f6:	d114      	bne.n	722 <print+0xd2>
				register char *s = (char *)va_arg( args, int );
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	f103 0204 	add.w	r2, r3, #4
     6fe:	607a      	str	r2, [r7, #4]
     700:	681b      	ldr	r3, [r3, #0]
     702:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
     704:	f1b8 0f00 	cmp.w	r8, #0
     708:	d001      	beq.n	70e <print+0xbe>
     70a:	4643      	mov	r3, r8
     70c:	e000      	b.n	710 <print+0xc0>
     70e:	4b55      	ldr	r3, [pc, #340]	; (864 <print+0x214>)
     710:	68f8      	ldr	r0, [r7, #12]
     712:	4619      	mov	r1, r3
     714:	462a      	mov	r2, r5
     716:	4633      	mov	r3, r6
     718:	f7ff feb8 	bl	48c <prints>
     71c:	4603      	mov	r3, r0
     71e:	18e4      	adds	r4, r4, r3
				continue;
     720:	e085      	b.n	82e <print+0x1de>
			}
			if( *format == 'd' ) {
     722:	68bb      	ldr	r3, [r7, #8]
     724:	781b      	ldrb	r3, [r3, #0]
     726:	2b64      	cmp	r3, #100	; 0x64
     728:	d114      	bne.n	754 <print+0x104>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
     72a:	687b      	ldr	r3, [r7, #4]
     72c:	f103 0204 	add.w	r2, r3, #4
     730:	607a      	str	r2, [r7, #4]
     732:	681b      	ldr	r3, [r3, #0]
     734:	9500      	str	r5, [sp, #0]
     736:	9601      	str	r6, [sp, #4]
     738:	f04f 0261 	mov.w	r2, #97	; 0x61
     73c:	9202      	str	r2, [sp, #8]
     73e:	68f8      	ldr	r0, [r7, #12]
     740:	4619      	mov	r1, r3
     742:	f04f 020a 	mov.w	r2, #10
     746:	f04f 0301 	mov.w	r3, #1
     74a:	f7ff ff07 	bl	55c <printi>
     74e:	4603      	mov	r3, r0
     750:	18e4      	adds	r4, r4, r3
				continue;
     752:	e06c      	b.n	82e <print+0x1de>
			}
			if( *format == 'x' ) {
     754:	68bb      	ldr	r3, [r7, #8]
     756:	781b      	ldrb	r3, [r3, #0]
     758:	2b78      	cmp	r3, #120	; 0x78
     75a:	d114      	bne.n	786 <print+0x136>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	f103 0204 	add.w	r2, r3, #4
     762:	607a      	str	r2, [r7, #4]
     764:	681b      	ldr	r3, [r3, #0]
     766:	9500      	str	r5, [sp, #0]
     768:	9601      	str	r6, [sp, #4]
     76a:	f04f 0261 	mov.w	r2, #97	; 0x61
     76e:	9202      	str	r2, [sp, #8]
     770:	68f8      	ldr	r0, [r7, #12]
     772:	4619      	mov	r1, r3
     774:	f04f 0210 	mov.w	r2, #16
     778:	f04f 0300 	mov.w	r3, #0
     77c:	f7ff feee 	bl	55c <printi>
     780:	4603      	mov	r3, r0
     782:	18e4      	adds	r4, r4, r3
				continue;
     784:	e053      	b.n	82e <print+0x1de>
			}
			if( *format == 'X' ) {
     786:	68bb      	ldr	r3, [r7, #8]
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	2b58      	cmp	r3, #88	; 0x58
     78c:	d114      	bne.n	7b8 <print+0x168>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
     78e:	687b      	ldr	r3, [r7, #4]
     790:	f103 0204 	add.w	r2, r3, #4
     794:	607a      	str	r2, [r7, #4]
     796:	681b      	ldr	r3, [r3, #0]
     798:	9500      	str	r5, [sp, #0]
     79a:	9601      	str	r6, [sp, #4]
     79c:	f04f 0241 	mov.w	r2, #65	; 0x41
     7a0:	9202      	str	r2, [sp, #8]
     7a2:	68f8      	ldr	r0, [r7, #12]
     7a4:	4619      	mov	r1, r3
     7a6:	f04f 0210 	mov.w	r2, #16
     7aa:	f04f 0300 	mov.w	r3, #0
     7ae:	f7ff fed5 	bl	55c <printi>
     7b2:	4603      	mov	r3, r0
     7b4:	18e4      	adds	r4, r4, r3
				continue;
     7b6:	e03a      	b.n	82e <print+0x1de>
			}
			if( *format == 'u' ) {
     7b8:	68bb      	ldr	r3, [r7, #8]
     7ba:	781b      	ldrb	r3, [r3, #0]
     7bc:	2b75      	cmp	r3, #117	; 0x75
     7be:	d114      	bne.n	7ea <print+0x19a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
     7c0:	687b      	ldr	r3, [r7, #4]
     7c2:	f103 0204 	add.w	r2, r3, #4
     7c6:	607a      	str	r2, [r7, #4]
     7c8:	681b      	ldr	r3, [r3, #0]
     7ca:	9500      	str	r5, [sp, #0]
     7cc:	9601      	str	r6, [sp, #4]
     7ce:	f04f 0261 	mov.w	r2, #97	; 0x61
     7d2:	9202      	str	r2, [sp, #8]
     7d4:	68f8      	ldr	r0, [r7, #12]
     7d6:	4619      	mov	r1, r3
     7d8:	f04f 020a 	mov.w	r2, #10
     7dc:	f04f 0300 	mov.w	r3, #0
     7e0:	f7ff febc 	bl	55c <printi>
     7e4:	4603      	mov	r3, r0
     7e6:	18e4      	adds	r4, r4, r3
				continue;
     7e8:	e021      	b.n	82e <print+0x1de>
			}
			if( *format == 'c' ) {
     7ea:	68bb      	ldr	r3, [r7, #8]
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	2b63      	cmp	r3, #99	; 0x63
     7f0:	d11d      	bne.n	82e <print+0x1de>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	f103 0204 	add.w	r2, r3, #4
     7f8:	607a      	str	r2, [r7, #4]
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	b2db      	uxtb	r3, r3
     7fe:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
     800:	f04f 0300 	mov.w	r3, #0
     804:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
     806:	f107 0314 	add.w	r3, r7, #20
     80a:	68f8      	ldr	r0, [r7, #12]
     80c:	4619      	mov	r1, r3
     80e:	462a      	mov	r2, r5
     810:	4633      	mov	r3, r6
     812:	f7ff fe3b 	bl	48c <prints>
     816:	4603      	mov	r3, r0
     818:	18e4      	adds	r4, r4, r3
				continue;
     81a:	e008      	b.n	82e <print+0x1de>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
     81c:	bf00      	nop
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
     81e:	68bb      	ldr	r3, [r7, #8]
     820:	781b      	ldrb	r3, [r3, #0]
     822:	68f8      	ldr	r0, [r7, #12]
     824:	4619      	mov	r1, r3
     826:	f7ff fe19 	bl	45c <printchar>
			++pc;
     82a:	f104 0401 	add.w	r4, r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
     82e:	68bb      	ldr	r3, [r7, #8]
     830:	f103 0301 	add.w	r3, r3, #1
     834:	60bb      	str	r3, [r7, #8]
     836:	68bb      	ldr	r3, [r7, #8]
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	2b00      	cmp	r3, #0
     83c:	f47f af12 	bne.w	664 <print+0x14>
     840:	e000      	b.n	844 <print+0x1f4>
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
     842:	bf00      	nop
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
     844:	68fb      	ldr	r3, [r7, #12]
     846:	2b00      	cmp	r3, #0
     848:	d004      	beq.n	854 <print+0x204>
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	f04f 0200 	mov.w	r2, #0
     852:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
     854:	4623      	mov	r3, r4
}
     856:	4618      	mov	r0, r3
     858:	f107 0718 	add.w	r7, r7, #24
     85c:	46bd      	mov	sp, r7
     85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     862:	bf00      	nop
     864:	0000a300 	.word	0x0000a300

00000868 <printf>:

int printf(const char *format, ...)
{
     868:	b40f      	push	{r0, r1, r2, r3}
     86a:	b580      	push	{r7, lr}
     86c:	b082      	sub	sp, #8
     86e:	af00      	add	r7, sp, #0
        va_list args;
        
        va_start( args, format );
     870:	f107 0314 	add.w	r3, r7, #20
     874:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
     876:	f04f 0000 	mov.w	r0, #0
     87a:	6939      	ldr	r1, [r7, #16]
     87c:	687a      	ldr	r2, [r7, #4]
     87e:	f7ff fee7 	bl	650 <print>
     882:	4603      	mov	r3, r0
}
     884:	4618      	mov	r0, r3
     886:	f107 0708 	add.w	r7, r7, #8
     88a:	46bd      	mov	sp, r7
     88c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     890:	b004      	add	sp, #16
     892:	4770      	bx	lr

00000894 <sprintf>:

int sprintf(char *out, const char *format, ...)
{
     894:	b40e      	push	{r1, r2, r3}
     896:	b580      	push	{r7, lr}
     898:	b085      	sub	sp, #20
     89a:	af00      	add	r7, sp, #0
     89c:	6078      	str	r0, [r7, #4]
        va_list args;
        
        va_start( args, format );
     89e:	f107 0320 	add.w	r3, r7, #32
     8a2:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
     8a4:	f107 0304 	add.w	r3, r7, #4
     8a8:	4618      	mov	r0, r3
     8aa:	69f9      	ldr	r1, [r7, #28]
     8ac:	68fa      	ldr	r2, [r7, #12]
     8ae:	f7ff fecf 	bl	650 <print>
     8b2:	4603      	mov	r3, r0
}
     8b4:	4618      	mov	r0, r3
     8b6:	f107 0714 	add.w	r7, r7, #20
     8ba:	46bd      	mov	sp, r7
     8bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     8c0:	b003      	add	sp, #12
     8c2:	4770      	bx	lr

000008c4 <snprintf>:


int snprintf( char *buf, unsigned int count, const char *format, ... )
{
     8c4:	b40c      	push	{r2, r3}
     8c6:	b580      	push	{r7, lr}
     8c8:	b084      	sub	sp, #16
     8ca:	af00      	add	r7, sp, #0
     8cc:	6078      	str	r0, [r7, #4]
     8ce:	6039      	str	r1, [r7, #0]
        va_list args;
        
        ( void ) count;
        
        va_start( args, format );
     8d0:	f107 031c 	add.w	r3, r7, #28
     8d4:	60fb      	str	r3, [r7, #12]
        return print( &buf, format, args );
     8d6:	f107 0304 	add.w	r3, r7, #4
     8da:	4618      	mov	r0, r3
     8dc:	69b9      	ldr	r1, [r7, #24]
     8de:	68fa      	ldr	r2, [r7, #12]
     8e0:	f7ff feb6 	bl	650 <print>
     8e4:	4603      	mov	r3, r0
}
     8e6:	4618      	mov	r0, r3
     8e8:	f107 0710 	add.w	r7, r7, #16
     8ec:	46bd      	mov	sp, r7
     8ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     8f2:	b002      	add	sp, #8
     8f4:	4770      	bx	lr
     8f6:	bf00      	nop

000008f8 <write>:
#endif


/* To keep linker happy. */
int	write( int i, char* c, int n)
{
     8f8:	b480      	push	{r7}
     8fa:	b085      	sub	sp, #20
     8fc:	af00      	add	r7, sp, #0
     8fe:	60f8      	str	r0, [r7, #12]
     900:	60b9      	str	r1, [r7, #8]
     902:	607a      	str	r2, [r7, #4]
	(void)i;
	(void)n;
	(void)c;
	return 0;
     904:	f04f 0300 	mov.w	r3, #0
}
     908:	4618      	mov	r0, r3
     90a:	f107 0714 	add.w	r7, r7, #20
     90e:	46bd      	mov	sp, r7
     910:	bc80      	pop	{r7}
     912:	4770      	bx	lr

00000914 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     914:	b580      	push	{r7, lr}
     916:	b08a      	sub	sp, #40	; 0x28
     918:	af00      	add	r7, sp, #0
     91a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     91c:	f04f 0300 	mov.w	r3, #0
     920:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
     922:	f001 fb13 	bl	1f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     926:	4b4c      	ldr	r3, [pc, #304]	; (a58 <pvPortMalloc+0x144>)
     928:	681b      	ldr	r3, [r3, #0]
     92a:	2b00      	cmp	r3, #0
     92c:	d11b      	bne.n	966 <pvPortMalloc+0x52>
		{
			prvHeapInit();
     92e:	4a4b      	ldr	r2, [pc, #300]	; (a5c <pvPortMalloc+0x148>)
     930:	4b4b      	ldr	r3, [pc, #300]	; (a60 <pvPortMalloc+0x14c>)
     932:	601a      	str	r2, [r3, #0]
     934:	4b4a      	ldr	r3, [pc, #296]	; (a60 <pvPortMalloc+0x14c>)
     936:	f04f 0200 	mov.w	r2, #0
     93a:	605a      	str	r2, [r3, #4]
     93c:	4b49      	ldr	r3, [pc, #292]	; (a64 <pvPortMalloc+0x150>)
     93e:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     942:	605a      	str	r2, [r3, #4]
     944:	4b47      	ldr	r3, [pc, #284]	; (a64 <pvPortMalloc+0x150>)
     946:	f04f 0200 	mov.w	r2, #0
     94a:	601a      	str	r2, [r3, #0]
     94c:	4b43      	ldr	r3, [pc, #268]	; (a5c <pvPortMalloc+0x148>)
     94e:	617b      	str	r3, [r7, #20]
     950:	697b      	ldr	r3, [r7, #20]
     952:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     956:	605a      	str	r2, [r3, #4]
     958:	697b      	ldr	r3, [r7, #20]
     95a:	4a42      	ldr	r2, [pc, #264]	; (a64 <pvPortMalloc+0x150>)
     95c:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
     95e:	4b3e      	ldr	r3, [pc, #248]	; (a58 <pvPortMalloc+0x144>)
     960:	f04f 0201 	mov.w	r2, #1
     964:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     966:	687b      	ldr	r3, [r7, #4]
     968:	2b00      	cmp	r3, #0
     96a:	d00f      	beq.n	98c <pvPortMalloc+0x78>
		{
			xWantedSize += heapSTRUCT_SIZE;
     96c:	4b3e      	ldr	r3, [pc, #248]	; (a68 <pvPortMalloc+0x154>)
     96e:	881b      	ldrh	r3, [r3, #0]
     970:	687a      	ldr	r2, [r7, #4]
     972:	18d3      	adds	r3, r2, r3
     974:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     976:	687b      	ldr	r3, [r7, #4]
     978:	f003 0307 	and.w	r3, r3, #7
     97c:	2b00      	cmp	r3, #0
     97e:	d005      	beq.n	98c <pvPortMalloc+0x78>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     980:	687b      	ldr	r3, [r7, #4]
     982:	f023 0307 	bic.w	r3, r3, #7
     986:	f103 0308 	add.w	r3, r3, #8
     98a:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	2b00      	cmp	r3, #0
     990:	d05a      	beq.n	a48 <pvPortMalloc+0x134>
     992:	687a      	ldr	r2, [r7, #4]
     994:	f644 33ff 	movw	r3, #19455	; 0x4bff
     998:	429a      	cmp	r2, r3
     99a:	d855      	bhi.n	a48 <pvPortMalloc+0x134>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     99c:	4b30      	ldr	r3, [pc, #192]	; (a60 <pvPortMalloc+0x14c>)
     99e:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
     9a0:	4b2f      	ldr	r3, [pc, #188]	; (a60 <pvPortMalloc+0x14c>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     9a6:	e004      	b.n	9b2 <pvPortMalloc+0x9e>
			{
				pxPreviousBlock = pxBlock;
     9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9aa:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
     9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9b4:	685a      	ldr	r2, [r3, #4]
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	429a      	cmp	r2, r3
     9ba:	d203      	bcs.n	9c4 <pvPortMalloc+0xb0>
     9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1f1      	bne.n	9a8 <pvPortMalloc+0x94>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     9c6:	4b27      	ldr	r3, [pc, #156]	; (a64 <pvPortMalloc+0x150>)
     9c8:	429a      	cmp	r2, r3
     9ca:	d03d      	beq.n	a48 <pvPortMalloc+0x134>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     9cc:	6a3b      	ldr	r3, [r7, #32]
     9ce:	681a      	ldr	r2, [r3, #0]
     9d0:	4b25      	ldr	r3, [pc, #148]	; (a68 <pvPortMalloc+0x154>)
     9d2:	881b      	ldrh	r3, [r3, #0]
     9d4:	18d3      	adds	r3, r2, r3
     9d6:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9da:	681a      	ldr	r2, [r3, #0]
     9dc:	6a3b      	ldr	r3, [r7, #32]
     9de:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9e2:	685a      	ldr	r2, [r3, #4]
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	1ad2      	subs	r2, r2, r3
     9e8:	4b1f      	ldr	r3, [pc, #124]	; (a68 <pvPortMalloc+0x154>)
     9ea:	881b      	ldrh	r3, [r3, #0]
     9ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9f0:	429a      	cmp	r2, r3
     9f2:	d922      	bls.n	a3a <pvPortMalloc+0x126>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
     9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	18d3      	adds	r3, r2, r3
     9fa:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9fe:	685a      	ldr	r2, [r3, #4]
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	1ad2      	subs	r2, r2, r3
     a04:	693b      	ldr	r3, [r7, #16]
     a06:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
     a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a0a:	687a      	ldr	r2, [r7, #4]
     a0c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     a0e:	693b      	ldr	r3, [r7, #16]
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
     a14:	4b12      	ldr	r3, [pc, #72]	; (a60 <pvPortMalloc+0x14c>)
     a16:	61bb      	str	r3, [r7, #24]
     a18:	e002      	b.n	a20 <pvPortMalloc+0x10c>
     a1a:	69bb      	ldr	r3, [r7, #24]
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	61bb      	str	r3, [r7, #24]
     a20:	69bb      	ldr	r3, [r7, #24]
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	685a      	ldr	r2, [r3, #4]
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	429a      	cmp	r2, r3
     a2a:	d3f6      	bcc.n	a1a <pvPortMalloc+0x106>
     a2c:	69bb      	ldr	r3, [r7, #24]
     a2e:	681a      	ldr	r2, [r3, #0]
     a30:	693b      	ldr	r3, [r7, #16]
     a32:	601a      	str	r2, [r3, #0]
     a34:	69bb      	ldr	r3, [r7, #24]
     a36:	693a      	ldr	r2, [r7, #16]
     a38:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
     a3a:	4b0c      	ldr	r3, [pc, #48]	; (a6c <pvPortMalloc+0x158>)
     a3c:	681a      	ldr	r2, [r3, #0]
     a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a40:	685b      	ldr	r3, [r3, #4]
     a42:	1ad2      	subs	r2, r2, r3
     a44:	4b09      	ldr	r3, [pc, #36]	; (a6c <pvPortMalloc+0x158>)
     a46:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
     a48:	f001 fa8e 	bl	1f68 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     a4c:	69fb      	ldr	r3, [r7, #28]
}
     a4e:	4618      	mov	r0, r3
     a50:	f107 0728 	add.w	r7, r7, #40	; 0x28
     a54:	46bd      	mov	sp, r7
     a56:	bd80      	pop	{r7, pc}
     a58:	10004c28 	.word	0x10004c28
     a5c:	10000018 	.word	0x10000018
     a60:	10004c18 	.word	0x10004c18
     a64:	10004c20 	.word	0x10004c20
     a68:	0000a308 	.word	0x0000a308
     a6c:	10000000 	.word	0x10000000

00000a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a70:	b580      	push	{r7, lr}
     a72:	b086      	sub	sp, #24
     a74:	af00      	add	r7, sp, #0
     a76:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	2b00      	cmp	r3, #0
     a80:	d029      	beq.n	ad6 <vPortFree+0x66>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     a82:	4b17      	ldr	r3, [pc, #92]	; (ae0 <vPortFree+0x70>)
     a84:	881b      	ldrh	r3, [r3, #0]
     a86:	f1c3 0300 	rsb	r3, r3, #0
     a8a:	693a      	ldr	r2, [r7, #16]
     a8c:	18d3      	adds	r3, r2, r3
     a8e:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
     a90:	693b      	ldr	r3, [r7, #16]
     a92:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
     a94:	f001 fa5a 	bl	1f4c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
     a98:	68fb      	ldr	r3, [r7, #12]
     a9a:	685b      	ldr	r3, [r3, #4]
     a9c:	60bb      	str	r3, [r7, #8]
     a9e:	4b11      	ldr	r3, [pc, #68]	; (ae4 <vPortFree+0x74>)
     aa0:	617b      	str	r3, [r7, #20]
     aa2:	e002      	b.n	aaa <vPortFree+0x3a>
     aa4:	697b      	ldr	r3, [r7, #20]
     aa6:	681b      	ldr	r3, [r3, #0]
     aa8:	617b      	str	r3, [r7, #20]
     aaa:	697b      	ldr	r3, [r7, #20]
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	685a      	ldr	r2, [r3, #4]
     ab0:	68bb      	ldr	r3, [r7, #8]
     ab2:	429a      	cmp	r2, r3
     ab4:	d3f6      	bcc.n	aa4 <vPortFree+0x34>
     ab6:	697b      	ldr	r3, [r7, #20]
     ab8:	681a      	ldr	r2, [r3, #0]
     aba:	68fb      	ldr	r3, [r7, #12]
     abc:	601a      	str	r2, [r3, #0]
     abe:	697b      	ldr	r3, [r7, #20]
     ac0:	68fa      	ldr	r2, [r7, #12]
     ac2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     ac4:	68fb      	ldr	r3, [r7, #12]
     ac6:	685a      	ldr	r2, [r3, #4]
     ac8:	4b07      	ldr	r3, [pc, #28]	; (ae8 <vPortFree+0x78>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	18d2      	adds	r2, r2, r3
     ace:	4b06      	ldr	r3, [pc, #24]	; (ae8 <vPortFree+0x78>)
     ad0:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
     ad2:	f001 fa49 	bl	1f68 <xTaskResumeAll>
	}
}
     ad6:	f107 0718 	add.w	r7, r7, #24
     ada:	46bd      	mov	sp, r7
     adc:	bd80      	pop	{r7, pc}
     ade:	bf00      	nop
     ae0:	0000a308 	.word	0x0000a308
     ae4:	10004c18 	.word	0x10004c18
     ae8:	10000000 	.word	0x10000000

00000aec <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     aec:	b480      	push	{r7}
     aee:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
     af0:	4b02      	ldr	r3, [pc, #8]	; (afc <xPortGetFreeHeapSize+0x10>)
     af2:	681b      	ldr	r3, [r3, #0]
}
     af4:	4618      	mov	r0, r3
     af6:	46bd      	mov	sp, r7
     af8:	bc80      	pop	{r7}
     afa:	4770      	bx	lr
     afc:	10000000 	.word	0x10000000

00000b00 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     b00:	b480      	push	{r7}
     b02:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
     b04:	46bd      	mov	sp, r7
     b06:	bc80      	pop	{r7}
     b08:	4770      	bx	lr
     b0a:	bf00      	nop

00000b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     b0c:	b480      	push	{r7}
     b0e:	b085      	sub	sp, #20
     b10:	af00      	add	r7, sp, #0
     b12:	60f8      	str	r0, [r7, #12]
     b14:	60b9      	str	r1, [r7, #8]
     b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	f1a3 0304 	sub.w	r3, r3, #4
     b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b26:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     b28:	68fb      	ldr	r3, [r7, #12]
     b2a:	f1a3 0304 	sub.w	r3, r3, #4
     b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
     b30:	68ba      	ldr	r2, [r7, #8]
     b32:	68fb      	ldr	r3, [r7, #12]
     b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     b36:	68fb      	ldr	r3, [r7, #12]
     b38:	f1a3 0304 	sub.w	r3, r3, #4
     b3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
     b3e:	68fb      	ldr	r3, [r7, #12]
     b40:	f04f 0200 	mov.w	r2, #0
     b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	f1a3 0314 	sub.w	r3, r3, #20
     b4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
     b4e:	687a      	ldr	r2, [r7, #4]
     b50:	68fb      	ldr	r3, [r7, #12]
     b52:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	f1a3 0320 	sub.w	r3, r3, #32
     b5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     b5c:	68fb      	ldr	r3, [r7, #12]
}
     b5e:	4618      	mov	r0, r3
     b60:	f107 0714 	add.w	r7, r7, #20
     b64:	46bd      	mov	sp, r7
     b66:	bc80      	pop	{r7}
     b68:	4770      	bx	lr
     b6a:	bf00      	nop

00000b6c <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     b6c:	4b06      	ldr	r3, [pc, #24]	; (b88 <pxCurrentTCBConst2>)
     b6e:	6819      	ldr	r1, [r3, #0]
     b70:	6808      	ldr	r0, [r1, #0]
     b72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     b76:	f380 8809 	msr	PSP, r0
     b7a:	f04f 0000 	mov.w	r0, #0
     b7e:	f380 8811 	msr	BASEPRI, r0
     b82:	f04e 0e0d 	orr.w	lr, lr, #13
     b86:	4770      	bx	lr

00000b88 <pxCurrentTCBConst2>:
     b88:	10004c30 	.word	0x10004c30

00000b8c <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
     b8c:	4854      	ldr	r0, [pc, #336]	; (ce0 <prvSetupTimerInterrupt+0x24>)
     b8e:	6800      	ldr	r0, [r0, #0]
     b90:	6800      	ldr	r0, [r0, #0]
     b92:	f380 8808 	msr	MSP, r0
     b96:	b662      	cpsie	i
     b98:	df00      	svc	0
     b9a:	bf00      	nop

00000b9c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
     b9c:	b580      	push	{r7, lr}
     b9e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     ba0:	4b0b      	ldr	r3, [pc, #44]	; (bd0 <xPortStartScheduler+0x34>)
     ba2:	4a0b      	ldr	r2, [pc, #44]	; (bd0 <xPortStartScheduler+0x34>)
     ba4:	6812      	ldr	r2, [r2, #0]
     ba6:	f442 0278 	orr.w	r2, r2, #16252928	; 0xf80000
     baa:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     bac:	4b08      	ldr	r3, [pc, #32]	; (bd0 <xPortStartScheduler+0x34>)
     bae:	4a08      	ldr	r2, [pc, #32]	; (bd0 <xPortStartScheduler+0x34>)
     bb0:	6812      	ldr	r2, [r2, #0]
     bb2:	f042 4278 	orr.w	r2, r2, #4160749568	; 0xf8000000
     bb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     bb8:	f000 f880 	bl	cbc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     bbc:	4b05      	ldr	r3, [pc, #20]	; (bd4 <xPortStartScheduler+0x38>)
     bbe:	f04f 0200 	mov.w	r2, #0
     bc2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     bc4:	f7ff ffe2 	bl	b8c <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
     bc8:	f04f 0300 	mov.w	r3, #0
}
     bcc:	4618      	mov	r0, r3
     bce:	bd80      	pop	{r7, pc}
     bd0:	e000ed20 	.word	0xe000ed20
     bd4:	10000004 	.word	0x10000004

00000bd8 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     bd8:	b480      	push	{r7}
     bda:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
     bdc:	46bd      	mov	sp, r7
     bde:	bc80      	pop	{r7}
     be0:	4770      	bx	lr
     be2:	bf00      	nop

00000be4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
     be4:	b480      	push	{r7}
     be6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     be8:	4b03      	ldr	r3, [pc, #12]	; (bf8 <vPortYieldFromISR+0x14>)
     bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     bee:	601a      	str	r2, [r3, #0]
}
     bf0:	46bd      	mov	sp, r7
     bf2:	bc80      	pop	{r7}
     bf4:	4770      	bx	lr
     bf6:	bf00      	nop
     bf8:	e000ed04 	.word	0xe000ed04

00000bfc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     bfc:	b480      	push	{r7}
     bfe:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
     c00:	f04f 0028 	mov.w	r0, #40	; 0x28
     c04:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
     c08:	4b04      	ldr	r3, [pc, #16]	; (c1c <vPortEnterCritical+0x20>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	f103 0201 	add.w	r2, r3, #1
     c10:	4b02      	ldr	r3, [pc, #8]	; (c1c <vPortEnterCritical+0x20>)
     c12:	601a      	str	r2, [r3, #0]
}
     c14:	46bd      	mov	sp, r7
     c16:	bc80      	pop	{r7}
     c18:	4770      	bx	lr
     c1a:	bf00      	nop
     c1c:	10000004 	.word	0x10000004

00000c20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     c20:	b480      	push	{r7}
     c22:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <vPortExitCritical+0x28>)
     c26:	681b      	ldr	r3, [r3, #0]
     c28:	f103 32ff 	add.w	r2, r3, #4294967295
     c2c:	4b06      	ldr	r3, [pc, #24]	; (c48 <vPortExitCritical+0x28>)
     c2e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <vPortExitCritical+0x28>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	2b00      	cmp	r3, #0
     c36:	d103      	bne.n	c40 <vPortExitCritical+0x20>
	{
		portENABLE_INTERRUPTS();
     c38:	f04f 0000 	mov.w	r0, #0
     c3c:	f380 8811 	msr	BASEPRI, r0
	}
}
     c40:	46bd      	mov	sp, r7
     c42:	bc80      	pop	{r7}
     c44:	4770      	bx	lr
     c46:	bf00      	nop
     c48:	10000004 	.word	0x10000004

00000c4c <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     c4c:	f3ef 8009 	mrs	r0, PSP
     c50:	4b0c      	ldr	r3, [pc, #48]	; (c84 <pxCurrentTCBConst>)
     c52:	681a      	ldr	r2, [r3, #0]
     c54:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c58:	6010      	str	r0, [r2, #0]
     c5a:	e92d 4008 	stmdb	sp!, {r3, lr}
     c5e:	f04f 0028 	mov.w	r0, #40	; 0x28
     c62:	f380 8811 	msr	BASEPRI, r0
     c66:	f001 fbeb 	bl	2440 <vTaskSwitchContext>
     c6a:	f04f 0000 	mov.w	r0, #0
     c6e:	f380 8811 	msr	BASEPRI, r0
     c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     c76:	6819      	ldr	r1, [r3, #0]
     c78:	6808      	ldr	r0, [r1, #0]
     c7a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c7e:	f380 8809 	msr	PSP, r0
     c82:	4770      	bx	lr

00000c84 <pxCurrentTCBConst>:
     c84:	10004c30 	.word	0x10004c30

00000c88 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     c8e:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <xPortSysTickHandler+0x30>)
     c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c94:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     c96:	f04f 0300 	mov.w	r3, #0
     c9a:	607b      	str	r3, [r7, #4]
     c9c:	f04f 0028 	mov.w	r0, #40	; 0x28
     ca0:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
     ca4:	f001 fb2c 	bl	2300 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     ca8:	f04f 0000 	mov.w	r0, #0
     cac:	f380 8811 	msr	BASEPRI, r0
}
     cb0:	f107 0708 	add.w	r7, r7, #8
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}
     cb8:	e000ed04 	.word	0xe000ed04

00000cbc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     cbc:	b480      	push	{r7}
     cbe:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     cc0:	4b04      	ldr	r3, [pc, #16]	; (cd4 <prvSetupTimerInterrupt+0x18>)
     cc2:	4a05      	ldr	r2, [pc, #20]	; (cd8 <prvSetupTimerInterrupt+0x1c>)
     cc4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     cc6:	4b05      	ldr	r3, [pc, #20]	; (cdc <prvSetupTimerInterrupt+0x20>)
     cc8:	f04f 0207 	mov.w	r2, #7
     ccc:	601a      	str	r2, [r3, #0]
}
     cce:	46bd      	mov	sp, r7
     cd0:	bc80      	pop	{r7}
     cd2:	4770      	bx	lr
     cd4:	e000e014 	.word	0xe000e014
     cd8:	000182b7 	.word	0x000182b7
     cdc:	e000e010 	.word	0xe000e010
     ce0:	e000ed08 	.word	0xe000ed08

00000ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     ce4:	b480      	push	{r7}
     ce6:	b083      	sub	sp, #12
     ce8:	af00      	add	r7, sp, #0
     cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	f103 0308 	add.w	r3, r3, #8
     cf2:	461a      	mov	r2, r3
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	f04f 32ff 	mov.w	r2, #4294967295
     cfe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	f103 0308 	add.w	r3, r3, #8
     d06:	461a      	mov	r2, r3
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	f103 0308 	add.w	r3, r3, #8
     d12:	461a      	mov	r2, r3
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	f04f 0200 	mov.w	r2, #0
     d1e:	601a      	str	r2, [r3, #0]
}
     d20:	f107 070c 	add.w	r7, r7, #12
     d24:	46bd      	mov	sp, r7
     d26:	bc80      	pop	{r7}
     d28:	4770      	bx	lr
     d2a:	bf00      	nop

00000d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     d2c:	b480      	push	{r7}
     d2e:	b083      	sub	sp, #12
     d30:	af00      	add	r7, sp, #0
     d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	f04f 0200 	mov.w	r2, #0
     d3a:	611a      	str	r2, [r3, #16]
}
     d3c:	f107 070c 	add.w	r7, r7, #12
     d40:	46bd      	mov	sp, r7
     d42:	bc80      	pop	{r7}
     d44:	4770      	bx	lr
     d46:	bf00      	nop

00000d48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     d48:	b480      	push	{r7}
     d4a:	b085      	sub	sp, #20
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	685b      	ldr	r3, [r3, #4]
     d56:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
     d58:	68fb      	ldr	r3, [r7, #12]
     d5a:	685a      	ldr	r2, [r3, #4]
     d5c:	683b      	ldr	r3, [r7, #0]
     d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	685a      	ldr	r2, [r3, #4]
     d64:	683b      	ldr	r3, [r7, #0]
     d66:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	685b      	ldr	r3, [r3, #4]
     d6c:	683a      	ldr	r2, [r7, #0]
     d6e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d70:	683a      	ldr	r2, [r7, #0]
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d76:	683a      	ldr	r2, [r7, #0]
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d7c:	683b      	ldr	r3, [r7, #0]
     d7e:	687a      	ldr	r2, [r7, #4]
     d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	f103 0201 	add.w	r2, r3, #1
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	601a      	str	r2, [r3, #0]
}
     d8e:	f107 0714 	add.w	r7, r7, #20
     d92:	46bd      	mov	sp, r7
     d94:	bc80      	pop	{r7}
     d96:	4770      	bx	lr

00000d98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d98:	b480      	push	{r7}
     d9a:	b085      	sub	sp, #20
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
     da0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     da2:	683b      	ldr	r3, [r7, #0]
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     da8:	68bb      	ldr	r3, [r7, #8]
     daa:	f1b3 3fff 	cmp.w	r3, #4294967295
     dae:	d103      	bne.n	db8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	691b      	ldr	r3, [r3, #16]
     db4:	60fb      	str	r3, [r7, #12]
     db6:	e00d      	b.n	dd4 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	f103 0308 	add.w	r3, r3, #8
     dbe:	60fb      	str	r3, [r7, #12]
     dc0:	e002      	b.n	dc8 <vListInsert+0x30>
     dc2:	68fb      	ldr	r3, [r7, #12]
     dc4:	685b      	ldr	r3, [r3, #4]
     dc6:	60fb      	str	r3, [r7, #12]
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	685b      	ldr	r3, [r3, #4]
     dcc:	681a      	ldr	r2, [r3, #0]
     dce:	68bb      	ldr	r3, [r7, #8]
     dd0:	429a      	cmp	r2, r3
     dd2:	d9f6      	bls.n	dc2 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	685a      	ldr	r2, [r3, #4]
     dd8:	683b      	ldr	r3, [r7, #0]
     dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     ddc:	683b      	ldr	r3, [r7, #0]
     dde:	685b      	ldr	r3, [r3, #4]
     de0:	683a      	ldr	r2, [r7, #0]
     de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     de4:	683b      	ldr	r3, [r7, #0]
     de6:	68fa      	ldr	r2, [r7, #12]
     de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     dea:	683a      	ldr	r2, [r7, #0]
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     df0:	683b      	ldr	r3, [r7, #0]
     df2:	687a      	ldr	r2, [r7, #4]
     df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	f103 0201 	add.w	r2, r3, #1
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	601a      	str	r2, [r3, #0]
}
     e02:	f107 0714 	add.w	r7, r7, #20
     e06:	46bd      	mov	sp, r7
     e08:	bc80      	pop	{r7}
     e0a:	4770      	bx	lr

00000e0c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     e0c:	b480      	push	{r7}
     e0e:	b085      	sub	sp, #20
     e10:	af00      	add	r7, sp, #0
     e12:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	685b      	ldr	r3, [r3, #4]
     e18:	687a      	ldr	r2, [r7, #4]
     e1a:	6892      	ldr	r2, [r2, #8]
     e1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	689b      	ldr	r3, [r3, #8]
     e22:	687a      	ldr	r2, [r7, #4]
     e24:	6852      	ldr	r2, [r2, #4]
     e26:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	691b      	ldr	r3, [r3, #16]
     e2c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e2e:	68fb      	ldr	r3, [r7, #12]
     e30:	685a      	ldr	r2, [r3, #4]
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	429a      	cmp	r2, r3
     e36:	d103      	bne.n	e40 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	689a      	ldr	r2, [r3, #8]
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	f04f 0200 	mov.w	r2, #0
     e46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	681b      	ldr	r3, [r3, #0]
     e4c:	f103 32ff 	add.w	r2, r3, #4294967295
     e50:	68fb      	ldr	r3, [r7, #12]
     e52:	601a      	str	r2, [r3, #0]
}
     e54:	f107 0714 	add.w	r7, r7, #20
     e58:	46bd      	mov	sp, r7
     e5a:	bc80      	pop	{r7}
     e5c:	4770      	bx	lr
     e5e:	bf00      	nop

00000e60 <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     e60:	b580      	push	{r7, lr}
     e62:	b088      	sub	sp, #32
     e64:	af00      	add	r7, sp, #0
     e66:	60f8      	str	r0, [r7, #12]
     e68:	60b9      	str	r1, [r7, #8]
     e6a:	4613      	mov	r3, r2
     e6c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
     e6e:	f04f 0300 	mov.w	r3, #0
     e72:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     e74:	68fb      	ldr	r3, [r7, #12]
     e76:	2b00      	cmp	r3, #0
     e78:	d05a      	beq.n	f30 <xQueueGenericCreate+0xd0>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     e7a:	f04f 0050 	mov.w	r0, #80	; 0x50
     e7e:	f7ff fd49 	bl	914 <pvPortMalloc>
     e82:	4603      	mov	r3, r0
     e84:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
     e86:	69bb      	ldr	r3, [r7, #24]
     e88:	2b00      	cmp	r3, #0
     e8a:	d051      	beq.n	f30 <xQueueGenericCreate+0xd0>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	68ba      	ldr	r2, [r7, #8]
     e90:	fb02 f303 	mul.w	r3, r2, r3
     e94:	f103 0301 	add.w	r3, r3, #1
     e98:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     e9a:	6978      	ldr	r0, [r7, #20]
     e9c:	f7ff fd3a 	bl	914 <pvPortMalloc>
     ea0:	4603      	mov	r3, r0
     ea2:	461a      	mov	r2, r3
     ea4:	69bb      	ldr	r3, [r7, #24]
     ea6:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
     ea8:	69bb      	ldr	r3, [r7, #24]
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	2b00      	cmp	r3, #0
     eae:	d03c      	beq.n	f2a <xQueueGenericCreate+0xca>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
     eb0:	69bb      	ldr	r3, [r7, #24]
     eb2:	681a      	ldr	r2, [r3, #0]
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	68b9      	ldr	r1, [r7, #8]
     eb8:	fb01 f303 	mul.w	r3, r1, r3
     ebc:	18d2      	adds	r2, r2, r3
     ebe:	69bb      	ldr	r3, [r7, #24]
     ec0:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     ec2:	69bb      	ldr	r3, [r7, #24]
     ec4:	f04f 0200 	mov.w	r2, #0
     ec8:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
     eca:	69bb      	ldr	r3, [r7, #24]
     ecc:	681a      	ldr	r2, [r3, #0]
     ece:	69bb      	ldr	r3, [r7, #24]
     ed0:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
     ed2:	69bb      	ldr	r3, [r7, #24]
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	68fb      	ldr	r3, [r7, #12]
     ed8:	f103 33ff 	add.w	r3, r3, #4294967295
     edc:	68b9      	ldr	r1, [r7, #8]
     ede:	fb01 f303 	mul.w	r3, r1, r3
     ee2:	18d2      	adds	r2, r2, r3
     ee4:	69bb      	ldr	r3, [r7, #24]
     ee6:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
     ee8:	69bb      	ldr	r3, [r7, #24]
     eea:	68fa      	ldr	r2, [r7, #12]
     eec:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     eee:	69bb      	ldr	r3, [r7, #24]
     ef0:	68ba      	ldr	r2, [r7, #8]
     ef2:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
     ef4:	69bb      	ldr	r3, [r7, #24]
     ef6:	f04f 32ff 	mov.w	r2, #4294967295
     efa:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
     efc:	69bb      	ldr	r3, [r7, #24]
     efe:	f04f 32ff 	mov.w	r2, #4294967295
     f02:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
     f04:	69bb      	ldr	r3, [r7, #24]
     f06:	79fa      	ldrb	r2, [r7, #7]
     f08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     f0c:	69bb      	ldr	r3, [r7, #24]
     f0e:	f103 0310 	add.w	r3, r3, #16
     f12:	4618      	mov	r0, r3
     f14:	f7ff fee6 	bl	ce4 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     f18:	69bb      	ldr	r3, [r7, #24]
     f1a:	f103 0324 	add.w	r3, r3, #36	; 0x24
     f1e:	4618      	mov	r0, r3
     f20:	f7ff fee0 	bl	ce4 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
     f24:	69bb      	ldr	r3, [r7, #24]
     f26:	61fb      	str	r3, [r7, #28]
     f28:	e002      	b.n	f30 <xQueueGenericCreate+0xd0>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     f2a:	69b8      	ldr	r0, [r7, #24]
     f2c:	f7ff fda0 	bl	a70 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
     f30:	69fb      	ldr	r3, [r7, #28]
}
     f32:	4618      	mov	r0, r3
     f34:	f107 0720 	add.w	r7, r7, #32
     f38:	46bd      	mov	sp, r7
     f3a:	bd80      	pop	{r7, pc}

00000f3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
     f3c:	b580      	push	{r7, lr}
     f3e:	b084      	sub	sp, #16
     f40:	af00      	add	r7, sp, #0
     f42:	4603      	mov	r3, r0
     f44:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;
	
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     f46:	f04f 0050 	mov.w	r0, #80	; 0x50
     f4a:	f7ff fce3 	bl	914 <pvPortMalloc>
     f4e:	4603      	mov	r3, r0
     f50:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
     f52:	68fb      	ldr	r3, [r7, #12]
     f54:	2b00      	cmp	r3, #0
     f56:	d03c      	beq.n	fd2 <xQueueCreateMutex+0x96>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	f04f 0200 	mov.w	r2, #0
     f5e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	f04f 0200 	mov.w	r2, #0
     f66:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     f68:	68fb      	ldr	r3, [r7, #12]
     f6a:	f04f 0200 	mov.w	r2, #0
     f6e:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
     f70:	68fb      	ldr	r3, [r7, #12]
     f72:	f04f 0200 	mov.w	r2, #0
     f76:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     f78:	68fb      	ldr	r3, [r7, #12]
     f7a:	f04f 0200 	mov.w	r2, #0
     f7e:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	f04f 0201 	mov.w	r2, #1
     f86:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	f04f 0200 	mov.w	r2, #0
     f8e:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
     f90:	68fb      	ldr	r3, [r7, #12]
     f92:	f04f 32ff 	mov.w	r2, #4294967295
     f96:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	f04f 32ff 	mov.w	r2, #4294967295
     f9e:	649a      	str	r2, [r3, #72]	; 0x48
			
			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
     fa0:	68fb      	ldr	r3, [r7, #12]
     fa2:	79fa      	ldrb	r2, [r7, #7]
     fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     fa8:	68fb      	ldr	r3, [r7, #12]
     faa:	f103 0310 	add.w	r3, r3, #16
     fae:	4618      	mov	r0, r3
     fb0:	f7ff fe98 	bl	ce4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     fb4:	68fb      	ldr	r3, [r7, #12]
     fb6:	f103 0324 	add.w	r3, r3, #36	; 0x24
     fba:	4618      	mov	r0, r3
     fbc:	f7ff fe92 	bl	ce4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
     fc0:	68f8      	ldr	r0, [r7, #12]
     fc2:	f04f 0100 	mov.w	r1, #0
     fc6:	f04f 0200 	mov.w	r2, #0
     fca:	f04f 0300 	mov.w	r3, #0
     fce:	f000 f861 	bl	1094 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
     fd2:	68fb      	ldr	r3, [r7, #12]
	}
     fd4:	4618      	mov	r0, r3
     fd6:	f107 0710 	add.w	r7, r7, #16
     fda:	46bd      	mov	sp, r7
     fdc:	bd80      	pop	{r7, pc}
     fde:	bf00      	nop

00000fe0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
	{
     fe0:	b590      	push	{r4, r7, lr}
     fe2:	b085      	sub	sp, #20
     fe4:	af00      	add	r7, sp, #0
     fe6:	6078      	str	r0, [r7, #4]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
     fe8:	687b      	ldr	r3, [r7, #4]
     fea:	685c      	ldr	r4, [r3, #4]
     fec:	f001 fe38 	bl	2c60 <xTaskGetCurrentTaskHandle>
     ff0:	4603      	mov	r3, r0
     ff2:	429c      	cmp	r4, r3
     ff4:	d116      	bne.n	1024 <xQueueGiveMutexRecursive+0x44>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->uxRecursiveCallCount )--;
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	f103 32ff 	add.w	r2, r3, #4294967295
     ffe:	687b      	ldr	r3, [r7, #4]
    1000:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->uxRecursiveCallCount == 0 )
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	68db      	ldr	r3, [r3, #12]
    1006:	2b00      	cmp	r3, #0
    1008:	d108      	bne.n	101c <xQueueGiveMutexRecursive+0x3c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    100a:	6878      	ldr	r0, [r7, #4]
    100c:	f04f 0100 	mov.w	r1, #0
    1010:	f04f 0200 	mov.w	r2, #0
    1014:	f04f 0300 	mov.w	r3, #0
    1018:	f000 f83c 	bl	1094 <xQueueGenericSend>
			}

			xReturn = pdPASS;
    101c:	f04f 0301 	mov.w	r3, #1
    1020:	60fb      	str	r3, [r7, #12]
    1022:	e002      	b.n	102a <xQueueGiveMutexRecursive+0x4a>
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
    1024:	f04f 0300 	mov.w	r3, #0
    1028:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    102a:	68fb      	ldr	r3, [r7, #12]
	}
    102c:	4618      	mov	r0, r3
    102e:	f107 0714 	add.w	r7, r7, #20
    1032:	46bd      	mov	sp, r7
    1034:	bd90      	pop	{r4, r7, pc}
    1036:	bf00      	nop

00001038 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
	{
    1038:	b590      	push	{r4, r7, lr}
    103a:	b085      	sub	sp, #20
    103c:	af00      	add	r7, sp, #0
    103e:	6078      	str	r0, [r7, #4]
    1040:	6039      	str	r1, [r7, #0]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	685c      	ldr	r4, [r3, #4]
    1046:	f001 fe0b 	bl	2c60 <xTaskGetCurrentTaskHandle>
    104a:	4603      	mov	r3, r0
    104c:	429c      	cmp	r4, r3
    104e:	d109      	bne.n	1064 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->uxRecursiveCallCount )++;
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	68db      	ldr	r3, [r3, #12]
    1054:	f103 0201 	add.w	r2, r3, #1
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
    105c:	f04f 0301 	mov.w	r3, #1
    1060:	60fb      	str	r3, [r7, #12]
    1062:	e011      	b.n	1088 <xQueueTakeMutexRecursive+0x50>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
    1064:	6878      	ldr	r0, [r7, #4]
    1066:	f04f 0100 	mov.w	r1, #0
    106a:	683a      	ldr	r2, [r7, #0]
    106c:	f04f 0300 	mov.w	r3, #0
    1070:	f000 f8e8 	bl	1244 <xQueueGenericReceive>
    1074:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	2b01      	cmp	r3, #1
    107a:	d105      	bne.n	1088 <xQueueTakeMutexRecursive+0x50>
			{
				( pxMutex->uxRecursiveCallCount )++;
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	68db      	ldr	r3, [r3, #12]
    1080:	f103 0201 	add.w	r2, r3, #1
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    1088:	68fb      	ldr	r3, [r7, #12]
	}
    108a:	4618      	mov	r0, r3
    108c:	f107 0714 	add.w	r7, r7, #20
    1090:	46bd      	mov	sp, r7
    1092:	bd90      	pop	{r4, r7, pc}

00001094 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1094:	b580      	push	{r7, lr}
    1096:	b088      	sub	sp, #32
    1098:	af00      	add	r7, sp, #0
    109a:	60f8      	str	r0, [r7, #12]
    109c:	60b9      	str	r1, [r7, #8]
    109e:	607a      	str	r2, [r7, #4]
    10a0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    10a2:	f04f 0300 	mov.w	r3, #0
    10a6:	61fb      	str	r3, [r7, #28]
    10a8:	e000      	b.n	10ac <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    10aa:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    10ac:	f7ff fda6 	bl	bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    10b4:	68fb      	ldr	r3, [r7, #12]
    10b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    10b8:	429a      	cmp	r2, r3
    10ba:	d218      	bcs.n	10ee <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    10bc:	68f8      	ldr	r0, [r7, #12]
    10be:	68b9      	ldr	r1, [r7, #8]
    10c0:	683a      	ldr	r2, [r7, #0]
    10c2:	f000 fa2d 	bl	1520 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10c6:	68fb      	ldr	r3, [r7, #12]
    10c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10ca:	2b00      	cmp	r3, #0
    10cc:	d00a      	beq.n	10e4 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    10d4:	4618      	mov	r0, r3
    10d6:	f001 fa79 	bl	25cc <xTaskRemoveFromEventList>
    10da:	4603      	mov	r3, r0
    10dc:	2b01      	cmp	r3, #1
    10de:	d101      	bne.n	10e4 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    10e0:	f7ff fd80 	bl	be4 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    10e4:	f7ff fd9c 	bl	c20 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    10e8:	f04f 0301 	mov.w	r3, #1
    10ec:	e05d      	b.n	11aa <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    10ee:	687b      	ldr	r3, [r7, #4]
    10f0:	2b00      	cmp	r3, #0
    10f2:	d104      	bne.n	10fe <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    10f4:	f7ff fd94 	bl	c20 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    10f8:	f04f 0300 	mov.w	r3, #0
    10fc:	e055      	b.n	11aa <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    10fe:	69fb      	ldr	r3, [r7, #28]
    1100:	2b00      	cmp	r3, #0
    1102:	d107      	bne.n	1114 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1104:	f107 0314 	add.w	r3, r7, #20
    1108:	4618      	mov	r0, r3
    110a:	f001 fab9 	bl	2680 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    110e:	f04f 0301 	mov.w	r3, #1
    1112:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    1114:	f7ff fd84 	bl	c20 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1118:	f000 ff18 	bl	1f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    111c:	f7ff fd6e 	bl	bfc <vPortEnterCritical>
    1120:	68fb      	ldr	r3, [r7, #12]
    1122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1124:	f1b3 3fff 	cmp.w	r3, #4294967295
    1128:	d103      	bne.n	1132 <xQueueGenericSend+0x9e>
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	f04f 0200 	mov.w	r2, #0
    1130:	645a      	str	r2, [r3, #68]	; 0x44
    1132:	68fb      	ldr	r3, [r7, #12]
    1134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1136:	f1b3 3fff 	cmp.w	r3, #4294967295
    113a:	d103      	bne.n	1144 <xQueueGenericSend+0xb0>
    113c:	68fb      	ldr	r3, [r7, #12]
    113e:	f04f 0200 	mov.w	r2, #0
    1142:	649a      	str	r2, [r3, #72]	; 0x48
    1144:	f7ff fd6c 	bl	c20 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1148:	f107 0214 	add.w	r2, r7, #20
    114c:	f107 0304 	add.w	r3, r7, #4
    1150:	4610      	mov	r0, r2
    1152:	4619      	mov	r1, r3
    1154:	f001 faaa 	bl	26ac <xTaskCheckForTimeOut>
    1158:	4603      	mov	r3, r0
    115a:	2b00      	cmp	r3, #0
    115c:	d11e      	bne.n	119c <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    115e:	68f8      	ldr	r0, [r7, #12]
    1160:	f000 fae0 	bl	1724 <prvIsQueueFull>
    1164:	4603      	mov	r3, r0
    1166:	2b00      	cmp	r3, #0
    1168:	d012      	beq.n	1190 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	f103 0210 	add.w	r2, r3, #16
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	4610      	mov	r0, r2
    1174:	4619      	mov	r1, r3
    1176:	f001 f9f5 	bl	2564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    117a:	68f8      	ldr	r0, [r7, #12]
    117c:	f000 fa5a 	bl	1634 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1180:	f000 fef2 	bl	1f68 <xTaskResumeAll>
    1184:	4603      	mov	r3, r0
    1186:	2b00      	cmp	r3, #0
    1188:	d18f      	bne.n	10aa <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    118a:	f7ff fd2b 	bl	be4 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    118e:	e78d      	b.n	10ac <xQueueGenericSend+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1190:	68f8      	ldr	r0, [r7, #12]
    1192:	f000 fa4f 	bl	1634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1196:	f000 fee7 	bl	1f68 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    119a:	e787      	b.n	10ac <xQueueGenericSend+0x18>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    119c:	68f8      	ldr	r0, [r7, #12]
    119e:	f000 fa49 	bl	1634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11a2:	f000 fee1 	bl	1f68 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    11a6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    11aa:	4618      	mov	r0, r3
    11ac:	f107 0720 	add.w	r7, r7, #32
    11b0:	46bd      	mov	sp, r7
    11b2:	bd80      	pop	{r7, pc}

000011b4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    11b4:	b580      	push	{r7, lr}
    11b6:	b086      	sub	sp, #24
    11b8:	af00      	add	r7, sp, #0
    11ba:	60f8      	str	r0, [r7, #12]
    11bc:	60b9      	str	r1, [r7, #8]
    11be:	607a      	str	r2, [r7, #4]
    11c0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    11c2:	f04f 0300 	mov.w	r3, #0
    11c6:	613b      	str	r3, [r7, #16]
    11c8:	f04f 0028 	mov.w	r0, #40	; 0x28
    11cc:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    11d4:	68fb      	ldr	r3, [r7, #12]
    11d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    11d8:	429a      	cmp	r2, r3
    11da:	d225      	bcs.n	1228 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    11dc:	68f8      	ldr	r0, [r7, #12]
    11de:	68b9      	ldr	r1, [r7, #8]
    11e0:	683a      	ldr	r2, [r7, #0]
    11e2:	f000 f99d 	bl	1520 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    11ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    11ee:	d111      	bne.n	1214 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11f0:	68fb      	ldr	r3, [r7, #12]
    11f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    11f4:	2b00      	cmp	r3, #0
    11f6:	d013      	beq.n	1220 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	f103 0324 	add.w	r3, r3, #36	; 0x24
    11fe:	4618      	mov	r0, r3
    1200:	f001 f9e4 	bl	25cc <xTaskRemoveFromEventList>
    1204:	4603      	mov	r3, r0
    1206:	2b00      	cmp	r3, #0
    1208:	d00a      	beq.n	1220 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	f04f 0201 	mov.w	r2, #1
    1210:	601a      	str	r2, [r3, #0]
    1212:	e005      	b.n	1220 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1214:	68fb      	ldr	r3, [r7, #12]
    1216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1218:	f103 0201 	add.w	r2, r3, #1
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    1220:	f04f 0301 	mov.w	r3, #1
    1224:	617b      	str	r3, [r7, #20]
    1226:	e002      	b.n	122e <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1228:	f04f 0300 	mov.w	r3, #0
    122c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    122e:	f04f 0000 	mov.w	r0, #0
    1232:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    1236:	697b      	ldr	r3, [r7, #20]
}
    1238:	4618      	mov	r0, r3
    123a:	f107 0718 	add.w	r7, r7, #24
    123e:	46bd      	mov	sp, r7
    1240:	bd80      	pop	{r7, pc}
    1242:	bf00      	nop

00001244 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1244:	b580      	push	{r7, lr}
    1246:	b088      	sub	sp, #32
    1248:	af00      	add	r7, sp, #0
    124a:	60f8      	str	r0, [r7, #12]
    124c:	60b9      	str	r1, [r7, #8]
    124e:	607a      	str	r2, [r7, #4]
    1250:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1252:	f04f 0300 	mov.w	r3, #0
    1256:	61fb      	str	r3, [r7, #28]
    1258:	e000      	b.n	125c <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    125a:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    125c:	f7ff fcce 	bl	bfc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1260:	68fb      	ldr	r3, [r7, #12]
    1262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1264:	2b00      	cmp	r3, #0
    1266:	d040      	beq.n	12ea <xQueueGenericReceive+0xa6>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	68db      	ldr	r3, [r3, #12]
    126c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    126e:	68f8      	ldr	r0, [r7, #12]
    1270:	68b9      	ldr	r1, [r7, #8]
    1272:	f000 f9b7 	bl	15e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1276:	683b      	ldr	r3, [r7, #0]
    1278:	2b00      	cmp	r3, #0
    127a:	d11f      	bne.n	12bc <xQueueGenericReceive+0x78>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1280:	f103 32ff 	add.w	r2, r3, #4294967295
    1284:	68fb      	ldr	r3, [r7, #12]
    1286:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	2b00      	cmp	r3, #0
    128e:	d105      	bne.n	129c <xQueueGenericReceive+0x58>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1290:	f001 fce6 	bl	2c60 <xTaskGetCurrentTaskHandle>
    1294:	4603      	mov	r3, r0
    1296:	461a      	mov	r2, r3
    1298:	68fb      	ldr	r3, [r7, #12]
    129a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	691b      	ldr	r3, [r3, #16]
    12a0:	2b00      	cmp	r3, #0
    12a2:	d01d      	beq.n	12e0 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	f103 0310 	add.w	r3, r3, #16
    12aa:	4618      	mov	r0, r3
    12ac:	f001 f98e 	bl	25cc <xTaskRemoveFromEventList>
    12b0:	4603      	mov	r3, r0
    12b2:	2b01      	cmp	r3, #1
    12b4:	d114      	bne.n	12e0 <xQueueGenericReceive+0x9c>
						{
							portYIELD_WITHIN_API();
    12b6:	f7ff fc95 	bl	be4 <vPortYieldFromISR>
    12ba:	e011      	b.n	12e0 <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	69ba      	ldr	r2, [r7, #24]
    12c0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12c6:	2b00      	cmp	r3, #0
    12c8:	d00a      	beq.n	12e0 <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    12ca:	68fb      	ldr	r3, [r7, #12]
    12cc:	f103 0324 	add.w	r3, r3, #36	; 0x24
    12d0:	4618      	mov	r0, r3
    12d2:	f001 f97b 	bl	25cc <xTaskRemoveFromEventList>
    12d6:	4603      	mov	r3, r0
    12d8:	2b00      	cmp	r3, #0
    12da:	d001      	beq.n	12e0 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    12dc:	f7ff fc82 	bl	be4 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    12e0:	f7ff fc9e 	bl	c20 <vPortExitCritical>
				return pdPASS;
    12e4:	f04f 0301 	mov.w	r3, #1
    12e8:	e06b      	b.n	13c2 <xQueueGenericReceive+0x17e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d104      	bne.n	12fa <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    12f0:	f7ff fc96 	bl	c20 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    12f4:	f04f 0300 	mov.w	r3, #0
    12f8:	e063      	b.n	13c2 <xQueueGenericReceive+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
    12fa:	69fb      	ldr	r3, [r7, #28]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d107      	bne.n	1310 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1300:	f107 0310 	add.w	r3, r7, #16
    1304:	4618      	mov	r0, r3
    1306:	f001 f9bb 	bl	2680 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    130a:	f04f 0301 	mov.w	r3, #1
    130e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    1310:	f7ff fc86 	bl	c20 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1314:	f000 fe1a 	bl	1f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1318:	f7ff fc70 	bl	bfc <vPortEnterCritical>
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1320:	f1b3 3fff 	cmp.w	r3, #4294967295
    1324:	d103      	bne.n	132e <xQueueGenericReceive+0xea>
    1326:	68fb      	ldr	r3, [r7, #12]
    1328:	f04f 0200 	mov.w	r2, #0
    132c:	645a      	str	r2, [r3, #68]	; 0x44
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1332:	f1b3 3fff 	cmp.w	r3, #4294967295
    1336:	d103      	bne.n	1340 <xQueueGenericReceive+0xfc>
    1338:	68fb      	ldr	r3, [r7, #12]
    133a:	f04f 0200 	mov.w	r2, #0
    133e:	649a      	str	r2, [r3, #72]	; 0x48
    1340:	f7ff fc6e 	bl	c20 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1344:	f107 0210 	add.w	r2, r7, #16
    1348:	f107 0304 	add.w	r3, r7, #4
    134c:	4610      	mov	r0, r2
    134e:	4619      	mov	r1, r3
    1350:	f001 f9ac 	bl	26ac <xTaskCheckForTimeOut>
    1354:	4603      	mov	r3, r0
    1356:	2b00      	cmp	r3, #0
    1358:	d12c      	bne.n	13b4 <xQueueGenericReceive+0x170>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    135a:	68f8      	ldr	r0, [r7, #12]
    135c:	f000 f9ba 	bl	16d4 <prvIsQueueEmpty>
    1360:	4603      	mov	r3, r0
    1362:	2b00      	cmp	r3, #0
    1364:	d020      	beq.n	13a8 <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d108      	bne.n	1380 <xQueueGenericReceive+0x13c>
					{
						portENTER_CRITICAL();
    136e:	f7ff fc45 	bl	bfc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	685b      	ldr	r3, [r3, #4]
    1376:	4618      	mov	r0, r3
    1378:	f001 fc82 	bl	2c80 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    137c:	f7ff fc50 	bl	c20 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	f103 0224 	add.w	r2, r3, #36	; 0x24
    1386:	687b      	ldr	r3, [r7, #4]
    1388:	4610      	mov	r0, r2
    138a:	4619      	mov	r1, r3
    138c:	f001 f8ea 	bl	2564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1390:	68f8      	ldr	r0, [r7, #12]
    1392:	f000 f94f 	bl	1634 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1396:	f000 fde7 	bl	1f68 <xTaskResumeAll>
    139a:	4603      	mov	r3, r0
    139c:	2b00      	cmp	r3, #0
    139e:	f47f af5c 	bne.w	125a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    13a2:	f7ff fc1f 	bl	be4 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    13a6:	e759      	b.n	125c <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    13a8:	68f8      	ldr	r0, [r7, #12]
    13aa:	f000 f943 	bl	1634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    13ae:	f000 fddb 	bl	1f68 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    13b2:	e753      	b.n	125c <xQueueGenericReceive+0x18>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    13b4:	68f8      	ldr	r0, [r7, #12]
    13b6:	f000 f93d 	bl	1634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    13ba:	f000 fdd5 	bl	1f68 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    13be:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    13c2:	4618      	mov	r0, r3
    13c4:	f107 0720 	add.w	r7, r7, #32
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}

000013cc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b086      	sub	sp, #24
    13d0:	af00      	add	r7, sp, #0
    13d2:	60f8      	str	r0, [r7, #12]
    13d4:	60b9      	str	r1, [r7, #8]
    13d6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    13d8:	f04f 0300 	mov.w	r3, #0
    13dc:	613b      	str	r3, [r7, #16]
    13de:	f04f 0028 	mov.w	r0, #40	; 0x28
    13e2:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    13e6:	68fb      	ldr	r3, [r7, #12]
    13e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    13ea:	2b00      	cmp	r3, #0
    13ec:	d02a      	beq.n	1444 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    13ee:	68f8      	ldr	r0, [r7, #12]
    13f0:	68b9      	ldr	r1, [r7, #8]
    13f2:	f000 f8f7 	bl	15e4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    13fa:	f103 32ff 	add.w	r2, r3, #4294967295
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1406:	f1b3 3fff 	cmp.w	r3, #4294967295
    140a:	d111      	bne.n	1430 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    140c:	68fb      	ldr	r3, [r7, #12]
    140e:	691b      	ldr	r3, [r3, #16]
    1410:	2b00      	cmp	r3, #0
    1412:	d013      	beq.n	143c <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	f103 0310 	add.w	r3, r3, #16
    141a:	4618      	mov	r0, r3
    141c:	f001 f8d6 	bl	25cc <xTaskRemoveFromEventList>
    1420:	4603      	mov	r3, r0
    1422:	2b00      	cmp	r3, #0
    1424:	d00a      	beq.n	143c <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	f04f 0201 	mov.w	r2, #1
    142c:	601a      	str	r2, [r3, #0]
    142e:	e005      	b.n	143c <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1434:	f103 0201 	add.w	r2, r3, #1
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    143c:	f04f 0301 	mov.w	r3, #1
    1440:	617b      	str	r3, [r7, #20]
    1442:	e002      	b.n	144a <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    1444:	f04f 0300 	mov.w	r3, #0
    1448:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    144a:	f04f 0000 	mov.w	r0, #0
    144e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    1452:	697b      	ldr	r3, [r7, #20]
}
    1454:	4618      	mov	r0, r3
    1456:	f107 0718 	add.w	r7, r7, #24
    145a:	46bd      	mov	sp, r7
    145c:	bd80      	pop	{r7, pc}
    145e:	bf00      	nop

00001460 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1460:	b580      	push	{r7, lr}
    1462:	b084      	sub	sp, #16
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1468:	f7ff fbc8 	bl	bfc <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1470:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    1472:	f7ff fbd5 	bl	c20 <vPortExitCritical>

	return uxReturn;
    1476:	68fb      	ldr	r3, [r7, #12]
}
    1478:	4618      	mov	r0, r3
    147a:	f107 0710 	add.w	r7, r7, #16
    147e:	46bd      	mov	sp, r7
    1480:	bd80      	pop	{r7, pc}
    1482:	bf00      	nop

00001484 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1484:	b480      	push	{r7}
    1486:	b085      	sub	sp, #20
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    148c:	687b      	ldr	r3, [r7, #4]
    148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1490:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    1492:	68fb      	ldr	r3, [r7, #12]
}
    1494:	4618      	mov	r0, r3
    1496:	f107 0714 	add.w	r7, r7, #20
    149a:	46bd      	mov	sp, r7
    149c:	bc80      	pop	{r7}
    149e:	4770      	bx	lr

000014a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b082      	sub	sp, #8
    14a4:	af00      	add	r7, sp, #0
    14a6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
    14a8:	6878      	ldr	r0, [r7, #4]
    14aa:	f000 f991 	bl	17d0 <vQueueUnregisterQueue>
	vPortFree( pxQueue->pcHead );
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	4618      	mov	r0, r3
    14b4:	f7ff fadc 	bl	a70 <vPortFree>
	vPortFree( pxQueue );
    14b8:	6878      	ldr	r0, [r7, #4]
    14ba:	f7ff fad9 	bl	a70 <vPortFree>
}
    14be:	f107 0708 	add.w	r7, r7, #8
    14c2:	46bd      	mov	sp, r7
    14c4:	bd80      	pop	{r7, pc}
    14c6:	bf00      	nop

000014c8 <ucQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
    14c8:	b480      	push	{r7}
    14ca:	b083      	sub	sp, #12
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueNumber;
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    14d6:	4618      	mov	r0, r3
    14d8:	f107 070c 	add.w	r7, r7, #12
    14dc:	46bd      	mov	sp, r7
    14de:	bc80      	pop	{r7}
    14e0:	4770      	bx	lr
    14e2:	bf00      	nop

000014e4 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
	{
    14e4:	b480      	push	{r7}
    14e6:	b083      	sub	sp, #12
    14e8:	af00      	add	r7, sp, #0
    14ea:	6078      	str	r0, [r7, #4]
    14ec:	460b      	mov	r3, r1
    14ee:	70fb      	strb	r3, [r7, #3]
		pxQueue->ucQueueNumber = ucQueueNumber;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	78fa      	ldrb	r2, [r7, #3]
    14f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
    14f8:	f107 070c 	add.w	r7, r7, #12
    14fc:	46bd      	mov	sp, r7
    14fe:	bc80      	pop	{r7}
    1500:	4770      	bx	lr
    1502:	bf00      	nop

00001504 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
    1504:	b480      	push	{r7}
    1506:	b083      	sub	sp, #12
    1508:	af00      	add	r7, sp, #0
    150a:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueType;
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	}
    1512:	4618      	mov	r0, r3
    1514:	f107 070c 	add.w	r7, r7, #12
    1518:	46bd      	mov	sp, r7
    151a:	bc80      	pop	{r7}
    151c:	4770      	bx	lr
    151e:	bf00      	nop

00001520 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1520:	b580      	push	{r7, lr}
    1522:	b084      	sub	sp, #16
    1524:	af00      	add	r7, sp, #0
    1526:	60f8      	str	r0, [r7, #12]
    1528:	60b9      	str	r1, [r7, #8]
    152a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    152c:	68fb      	ldr	r3, [r7, #12]
    152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1530:	2b00      	cmp	r3, #0
    1532:	d10d      	bne.n	1550 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	2b00      	cmp	r3, #0
    153a:	d148      	bne.n	15ce <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	4618      	mov	r0, r3
    1542:	f001 fbf7 	bl	2d34 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	f04f 0200 	mov.w	r2, #0
    154c:	605a      	str	r2, [r3, #4]
    154e:	e03e      	b.n	15ce <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	2b00      	cmp	r3, #0
    1554:	d11a      	bne.n	158c <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1556:	68fb      	ldr	r3, [r7, #12]
    1558:	689a      	ldr	r2, [r3, #8]
    155a:	68fb      	ldr	r3, [r7, #12]
    155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    155e:	4610      	mov	r0, r2
    1560:	68b9      	ldr	r1, [r7, #8]
    1562:	461a      	mov	r2, r3
    1564:	f008 fcda 	bl	9f1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	689a      	ldr	r2, [r3, #8]
    156c:	68fb      	ldr	r3, [r7, #12]
    156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1570:	18d2      	adds	r2, r2, r3
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	689a      	ldr	r2, [r3, #8]
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	685b      	ldr	r3, [r3, #4]
    157e:	429a      	cmp	r2, r3
    1580:	d325      	bcc.n	15ce <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	681a      	ldr	r2, [r3, #0]
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	609a      	str	r2, [r3, #8]
    158a:	e020      	b.n	15ce <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    158c:	68fb      	ldr	r3, [r7, #12]
    158e:	68da      	ldr	r2, [r3, #12]
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1594:	4610      	mov	r0, r2
    1596:	68b9      	ldr	r1, [r7, #8]
    1598:	461a      	mov	r2, r3
    159a:	f008 fcbf 	bl	9f1c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	68da      	ldr	r2, [r3, #12]
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15a6:	f1c3 0300 	rsb	r3, r3, #0
    15aa:	18d2      	adds	r2, r2, r3
    15ac:	68fb      	ldr	r3, [r7, #12]
    15ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	68da      	ldr	r2, [r3, #12]
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	429a      	cmp	r2, r3
    15ba:	d208      	bcs.n	15ce <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    15bc:	68fb      	ldr	r3, [r7, #12]
    15be:	685a      	ldr	r2, [r3, #4]
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15c4:	f1c3 0300 	rsb	r3, r3, #0
    15c8:	18d2      	adds	r2, r2, r3
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    15d2:	f103 0201 	add.w	r2, r3, #1
    15d6:	68fb      	ldr	r3, [r7, #12]
    15d8:	639a      	str	r2, [r3, #56]	; 0x38
}
    15da:	f107 0710 	add.w	r7, r7, #16
    15de:	46bd      	mov	sp, r7
    15e0:	bd80      	pop	{r7, pc}
    15e2:	bf00      	nop

000015e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b082      	sub	sp, #8
    15e8:	af00      	add	r7, sp, #0
    15ea:	6078      	str	r0, [r7, #4]
    15ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	681b      	ldr	r3, [r3, #0]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d019      	beq.n	162a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    15f6:	687b      	ldr	r3, [r7, #4]
    15f8:	68da      	ldr	r2, [r3, #12]
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15fe:	18d2      	adds	r2, r2, r3
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	68da      	ldr	r2, [r3, #12]
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	685b      	ldr	r3, [r3, #4]
    160c:	429a      	cmp	r2, r3
    160e:	d303      	bcc.n	1618 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	681a      	ldr	r2, [r3, #0]
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	68da      	ldr	r2, [r3, #12]
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1620:	6838      	ldr	r0, [r7, #0]
    1622:	4611      	mov	r1, r2
    1624:	461a      	mov	r2, r3
    1626:	f008 fc79 	bl	9f1c <memcpy>
	}
}
    162a:	f107 0708 	add.w	r7, r7, #8
    162e:	46bd      	mov	sp, r7
    1630:	bd80      	pop	{r7, pc}
    1632:	bf00      	nop

00001634 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    163c:	f7ff fade 	bl	bfc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1640:	e014      	b.n	166c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1642:	687b      	ldr	r3, [r7, #4]
    1644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1646:	2b00      	cmp	r3, #0
    1648:	d015      	beq.n	1676 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    164a:	687b      	ldr	r3, [r7, #4]
    164c:	f103 0324 	add.w	r3, r3, #36	; 0x24
    1650:	4618      	mov	r0, r3
    1652:	f000 ffbb 	bl	25cc <xTaskRemoveFromEventList>
    1656:	4603      	mov	r3, r0
    1658:	2b00      	cmp	r3, #0
    165a:	d001      	beq.n	1660 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    165c:	f001 f870 	bl	2740 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1664:	f103 32ff 	add.w	r2, r3, #4294967295
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1670:	2b00      	cmp	r3, #0
    1672:	dce6      	bgt.n	1642 <prvUnlockQueue+0xe>
    1674:	e000      	b.n	1678 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    1676:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	f04f 32ff 	mov.w	r2, #4294967295
    167e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1680:	f7ff face 	bl	c20 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1684:	f7ff faba 	bl	bfc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1688:	e014      	b.n	16b4 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	691b      	ldr	r3, [r3, #16]
    168e:	2b00      	cmp	r3, #0
    1690:	d015      	beq.n	16be <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	f103 0310 	add.w	r3, r3, #16
    1698:	4618      	mov	r0, r3
    169a:	f000 ff97 	bl	25cc <xTaskRemoveFromEventList>
    169e:	4603      	mov	r3, r0
    16a0:	2b00      	cmp	r3, #0
    16a2:	d001      	beq.n	16a8 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    16a4:	f001 f84c 	bl	2740 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    16ac:	f103 32ff 	add.w	r2, r3, #4294967295
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    16b8:	2b00      	cmp	r3, #0
    16ba:	dce6      	bgt.n	168a <prvUnlockQueue+0x56>
    16bc:	e000      	b.n	16c0 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    16be:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	f04f 32ff 	mov.w	r2, #4294967295
    16c6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    16c8:	f7ff faaa 	bl	c20 <vPortExitCritical>
}
    16cc:	f107 0708 	add.w	r7, r7, #8
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}

000016d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b084      	sub	sp, #16
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    16dc:	f7ff fa8e 	bl	bfc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    16e0:	687b      	ldr	r3, [r7, #4]
    16e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    16e4:	2b00      	cmp	r3, #0
    16e6:	bf14      	ite	ne
    16e8:	2300      	movne	r3, #0
    16ea:	2301      	moveq	r3, #1
    16ec:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    16ee:	f7ff fa97 	bl	c20 <vPortExitCritical>

	return xReturn;
    16f2:	68fb      	ldr	r3, [r7, #12]
}
    16f4:	4618      	mov	r0, r3
    16f6:	f107 0710 	add.w	r7, r7, #16
    16fa:	46bd      	mov	sp, r7
    16fc:	bd80      	pop	{r7, pc}
    16fe:	bf00      	nop

00001700 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1700:	b480      	push	{r7}
    1702:	b085      	sub	sp, #20
    1704:	af00      	add	r7, sp, #0
    1706:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1708:	687b      	ldr	r3, [r7, #4]
    170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    170c:	2b00      	cmp	r3, #0
    170e:	bf14      	ite	ne
    1710:	2300      	movne	r3, #0
    1712:	2301      	moveq	r3, #1
    1714:	60fb      	str	r3, [r7, #12]

	return xReturn;
    1716:	68fb      	ldr	r3, [r7, #12]
}
    1718:	4618      	mov	r0, r3
    171a:	f107 0714 	add.w	r7, r7, #20
    171e:	46bd      	mov	sp, r7
    1720:	bc80      	pop	{r7}
    1722:	4770      	bx	lr

00001724 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1724:	b580      	push	{r7, lr}
    1726:	b084      	sub	sp, #16
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    172c:	f7ff fa66 	bl	bfc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1738:	429a      	cmp	r2, r3
    173a:	bf14      	ite	ne
    173c:	2300      	movne	r3, #0
    173e:	2301      	moveq	r3, #1
    1740:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    1742:	f7ff fa6d 	bl	c20 <vPortExitCritical>

	return xReturn;
    1746:	68fb      	ldr	r3, [r7, #12]
}
    1748:	4618      	mov	r0, r3
    174a:	f107 0710 	add.w	r7, r7, #16
    174e:	46bd      	mov	sp, r7
    1750:	bd80      	pop	{r7, pc}
    1752:	bf00      	nop

00001754 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1754:	b480      	push	{r7}
    1756:	b085      	sub	sp, #20
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1760:	687b      	ldr	r3, [r7, #4]
    1762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1764:	429a      	cmp	r2, r3
    1766:	bf14      	ite	ne
    1768:	2300      	movne	r3, #0
    176a:	2301      	moveq	r3, #1
    176c:	60fb      	str	r3, [r7, #12]

	return xReturn;
    176e:	68fb      	ldr	r3, [r7, #12]
}
    1770:	4618      	mov	r0, r3
    1772:	f107 0714 	add.w	r7, r7, #20
    1776:	46bd      	mov	sp, r7
    1778:	bc80      	pop	{r7}
    177a:	4770      	bx	lr

0000177c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
    177c:	b480      	push	{r7}
    177e:	b085      	sub	sp, #20
    1780:	af00      	add	r7, sp, #0
    1782:	6078      	str	r0, [r7, #4]
    1784:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	60fb      	str	r3, [r7, #12]
    178c:	e016      	b.n	17bc <vQueueAddToRegistry+0x40>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    178e:	4b0f      	ldr	r3, [pc, #60]	; (17cc <vQueueAddToRegistry+0x50>)
    1790:	68fa      	ldr	r2, [r7, #12]
    1792:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1796:	2b00      	cmp	r3, #0
    1798:	d10c      	bne.n	17b4 <vQueueAddToRegistry+0x38>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    179a:	4b0c      	ldr	r3, [pc, #48]	; (17cc <vQueueAddToRegistry+0x50>)
    179c:	68fa      	ldr	r2, [r7, #12]
    179e:	6839      	ldr	r1, [r7, #0]
    17a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    17a4:	4a09      	ldr	r2, [pc, #36]	; (17cc <vQueueAddToRegistry+0x50>)
    17a6:	68fb      	ldr	r3, [r7, #12]
    17a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17ac:	18d3      	adds	r3, r2, r3
    17ae:	687a      	ldr	r2, [r7, #4]
    17b0:	605a      	str	r2, [r3, #4]
				break;
    17b2:	e006      	b.n	17c2 <vQueueAddToRegistry+0x46>
	{
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	f103 0301 	add.w	r3, r3, #1
    17ba:	60fb      	str	r3, [r7, #12]
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	2b09      	cmp	r3, #9
    17c0:	d9e5      	bls.n	178e <vQueueAddToRegistry+0x12>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
				break;
			}
		}
	}
    17c2:	f107 0714 	add.w	r7, r7, #20
    17c6:	46bd      	mov	sp, r7
    17c8:	bc80      	pop	{r7}
    17ca:	4770      	bx	lr
    17cc:	10004de4 	.word	0x10004de4

000017d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	static void vQueueUnregisterQueue( xQueueHandle xQueue )
	{
    17d0:	b480      	push	{r7}
    17d2:	b085      	sub	sp, #20
    17d4:	af00      	add	r7, sp, #0
    17d6:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    17d8:	f04f 0300 	mov.w	r3, #0
    17dc:	60fb      	str	r3, [r7, #12]
    17de:	e013      	b.n	1808 <vQueueUnregisterQueue+0x38>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    17e0:	4a0d      	ldr	r2, [pc, #52]	; (1818 <vQueueUnregisterQueue+0x48>)
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17e8:	18d3      	adds	r3, r2, r3
    17ea:	685a      	ldr	r2, [r3, #4]
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	429a      	cmp	r2, r3
    17f0:	d106      	bne.n	1800 <vQueueUnregisterQueue+0x30>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <vQueueUnregisterQueue+0x48>)
    17f4:	68fa      	ldr	r2, [r7, #12]
    17f6:	f04f 0100 	mov.w	r1, #0
    17fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				break;
    17fe:	e006      	b.n	180e <vQueueUnregisterQueue+0x3e>
	{
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	f103 0301 	add.w	r3, r3, #1
    1806:	60fb      	str	r3, [r7, #12]
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	2b09      	cmp	r3, #9
    180c:	d9e8      	bls.n	17e0 <vQueueUnregisterQueue+0x10>
				xQueueRegistry[ ux ].pcQueueName = NULL;
				break;
			}
		}

	}
    180e:	f107 0714 	add.w	r7, r7, #20
    1812:	46bd      	mov	sp, r7
    1814:	bc80      	pop	{r7}
    1816:	4770      	bx	lr
    1818:	10004de4 	.word	0x10004de4

0000181c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    181c:	b580      	push	{r7, lr}
    181e:	b08a      	sub	sp, #40	; 0x28
    1820:	af02      	add	r7, sp, #8
    1822:	60f8      	str	r0, [r7, #12]
    1824:	60b9      	str	r1, [r7, #8]
    1826:	603b      	str	r3, [r7, #0]
    1828:	4613      	mov	r3, r2
    182a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    182c:	88fb      	ldrh	r3, [r7, #6]
    182e:	4618      	mov	r0, r3
    1830:	6b39      	ldr	r1, [r7, #48]	; 0x30
    1832:	f001 f8bd 	bl	29b0 <prvAllocateTCBAndStack>
    1836:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    1838:	69bb      	ldr	r3, [r7, #24]
    183a:	2b00      	cmp	r3, #0
    183c:	d07c      	beq.n	1938 <xTaskGenericCreate+0x11c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    183e:	69bb      	ldr	r3, [r7, #24]
    1840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1842:	88fb      	ldrh	r3, [r7, #6]
    1844:	f103 33ff 	add.w	r3, r3, #4294967295
    1848:	ea4f 0383 	mov.w	r3, r3, lsl #2
    184c:	18d3      	adds	r3, r2, r3
    184e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    1850:	697b      	ldr	r3, [r7, #20]
    1852:	f023 0307 	bic.w	r3, r3, #7
    1856:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1858:	88fb      	ldrh	r3, [r7, #6]
    185a:	9300      	str	r3, [sp, #0]
    185c:	69b8      	ldr	r0, [r7, #24]
    185e:	68b9      	ldr	r1, [r7, #8]
    1860:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1864:	f000 ffaa 	bl	27bc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1868:	6978      	ldr	r0, [r7, #20]
    186a:	68f9      	ldr	r1, [r7, #12]
    186c:	683a      	ldr	r2, [r7, #0]
    186e:	f7ff f94d 	bl	b0c <pxPortInitialiseStack>
    1872:	4603      	mov	r3, r0
    1874:	461a      	mov	r2, r3
    1876:	69bb      	ldr	r3, [r7, #24]
    1878:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    187c:	2b00      	cmp	r3, #0
    187e:	d002      	beq.n	1886 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1882:	69ba      	ldr	r2, [r7, #24]
    1884:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1886:	f7ff f9b9 	bl	bfc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    188a:	4b37      	ldr	r3, [pc, #220]	; (1968 <xTaskGenericCreate+0x14c>)
    188c:	681b      	ldr	r3, [r3, #0]
    188e:	f103 0201 	add.w	r2, r3, #1
    1892:	4b35      	ldr	r3, [pc, #212]	; (1968 <xTaskGenericCreate+0x14c>)
    1894:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    1896:	4b35      	ldr	r3, [pc, #212]	; (196c <xTaskGenericCreate+0x150>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d109      	bne.n	18b2 <xTaskGenericCreate+0x96>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    189e:	4b33      	ldr	r3, [pc, #204]	; (196c <xTaskGenericCreate+0x150>)
    18a0:	69ba      	ldr	r2, [r7, #24]
    18a2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    18a4:	4b30      	ldr	r3, [pc, #192]	; (1968 <xTaskGenericCreate+0x14c>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2b01      	cmp	r3, #1
    18aa:	d10f      	bne.n	18cc <xTaskGenericCreate+0xb0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    18ac:	f000 ffc8 	bl	2840 <prvInitialiseTaskLists>
    18b0:	e00c      	b.n	18cc <xTaskGenericCreate+0xb0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    18b2:	4b2f      	ldr	r3, [pc, #188]	; (1970 <xTaskGenericCreate+0x154>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d108      	bne.n	18cc <xTaskGenericCreate+0xb0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    18ba:	4b2c      	ldr	r3, [pc, #176]	; (196c <xTaskGenericCreate+0x150>)
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18c2:	429a      	cmp	r2, r3
    18c4:	d802      	bhi.n	18cc <xTaskGenericCreate+0xb0>
					{
						pxCurrentTCB = pxNewTCB;
    18c6:	4b29      	ldr	r3, [pc, #164]	; (196c <xTaskGenericCreate+0x150>)
    18c8:	69ba      	ldr	r2, [r7, #24]
    18ca:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    18cc:	69bb      	ldr	r3, [r7, #24]
    18ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18d0:	4b28      	ldr	r3, [pc, #160]	; (1974 <xTaskGenericCreate+0x158>)
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	429a      	cmp	r2, r3
    18d6:	d903      	bls.n	18e0 <xTaskGenericCreate+0xc4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    18d8:	69bb      	ldr	r3, [r7, #24]
    18da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18dc:	4b25      	ldr	r3, [pc, #148]	; (1974 <xTaskGenericCreate+0x158>)
    18de:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
    18e0:	4b25      	ldr	r3, [pc, #148]	; (1978 <xTaskGenericCreate+0x15c>)
    18e2:	681a      	ldr	r2, [r3, #0]
    18e4:	69bb      	ldr	r3, [r7, #24]
    18e6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
    18e8:	4b23      	ldr	r3, [pc, #140]	; (1978 <xTaskGenericCreate+0x15c>)
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	f103 0201 	add.w	r2, r3, #1
    18f0:	4b21      	ldr	r3, [pc, #132]	; (1978 <xTaskGenericCreate+0x15c>)
    18f2:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    18f4:	69bb      	ldr	r3, [r7, #24]
    18f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18f8:	4b20      	ldr	r3, [pc, #128]	; (197c <xTaskGenericCreate+0x160>)
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	429a      	cmp	r2, r3
    18fe:	d903      	bls.n	1908 <xTaskGenericCreate+0xec>
    1900:	69bb      	ldr	r3, [r7, #24]
    1902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1904:	4b1d      	ldr	r3, [pc, #116]	; (197c <xTaskGenericCreate+0x160>)
    1906:	601a      	str	r2, [r3, #0]
    1908:	69bb      	ldr	r3, [r7, #24]
    190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    190c:	4613      	mov	r3, r2
    190e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1912:	189b      	adds	r3, r3, r2
    1914:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1918:	461a      	mov	r2, r3
    191a:	4b19      	ldr	r3, [pc, #100]	; (1980 <xTaskGenericCreate+0x164>)
    191c:	18d2      	adds	r2, r2, r3
    191e:	69bb      	ldr	r3, [r7, #24]
    1920:	f103 0304 	add.w	r3, r3, #4
    1924:	4610      	mov	r0, r2
    1926:	4619      	mov	r1, r3
    1928:	f7ff fa0e 	bl	d48 <vListInsertEnd>

			xReturn = pdPASS;
    192c:	f04f 0301 	mov.w	r3, #1
    1930:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1932:	f7ff f975 	bl	c20 <vPortExitCritical>
    1936:	e002      	b.n	193e <xTaskGenericCreate+0x122>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1938:	f04f 33ff 	mov.w	r3, #4294967295
    193c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    193e:	69fb      	ldr	r3, [r7, #28]
    1940:	2b01      	cmp	r3, #1
    1942:	d10b      	bne.n	195c <xTaskGenericCreate+0x140>
	{
		if( xSchedulerRunning != pdFALSE )
    1944:	4b0a      	ldr	r3, [pc, #40]	; (1970 <xTaskGenericCreate+0x154>)
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	2b00      	cmp	r3, #0
    194a:	d007      	beq.n	195c <xTaskGenericCreate+0x140>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    194c:	4b07      	ldr	r3, [pc, #28]	; (196c <xTaskGenericCreate+0x150>)
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1952:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1954:	429a      	cmp	r2, r3
    1956:	d201      	bcs.n	195c <xTaskGenericCreate+0x140>
			{
				portYIELD_WITHIN_API();
    1958:	f7ff f944 	bl	be4 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    195c:	69fb      	ldr	r3, [r7, #28]
}
    195e:	4618      	mov	r0, r3
    1960:	f107 0720 	add.w	r7, r7, #32
    1964:	46bd      	mov	sp, r7
    1966:	bd80      	pop	{r7, pc}
    1968:	10004d08 	.word	0x10004d08
    196c:	10004c30 	.word	0x10004c30
    1970:	10004d18 	.word	0x10004d18
    1974:	10004d10 	.word	0x10004d10
    1978:	10004d2c 	.word	0x10004d2c
    197c:	10004d14 	.word	0x10004d14
    1980:	10004c34 	.word	0x10004c34

00001984 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1984:	b580      	push	{r7, lr}
    1986:	b084      	sub	sp, #16
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    198c:	f7ff f936 	bl	bfc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1990:	4b20      	ldr	r3, [pc, #128]	; (1a14 <vTaskDelete+0x90>)
    1992:	681b      	ldr	r3, [r3, #0]
    1994:	687a      	ldr	r2, [r7, #4]
    1996:	429a      	cmp	r2, r3
    1998:	d102      	bne.n	19a0 <vTaskDelete+0x1c>
			{
				pxTaskToDelete = NULL;
    199a:	f04f 0300 	mov.w	r3, #0
    199e:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	2b00      	cmp	r3, #0
    19a4:	d102      	bne.n	19ac <vTaskDelete+0x28>
    19a6:	4b1b      	ldr	r3, [pc, #108]	; (1a14 <vTaskDelete+0x90>)
    19a8:	681b      	ldr	r3, [r3, #0]
    19aa:	e000      	b.n	19ae <vTaskDelete+0x2a>
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    19b0:	68fb      	ldr	r3, [r7, #12]
    19b2:	f103 0304 	add.w	r3, r3, #4
    19b6:	4618      	mov	r0, r3
    19b8:	f7ff fa28 	bl	e0c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19c0:	2b00      	cmp	r3, #0
    19c2:	d005      	beq.n	19d0 <vTaskDelete+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	f103 0318 	add.w	r3, r3, #24
    19ca:	4618      	mov	r0, r3
    19cc:	f7ff fa1e 	bl	e0c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    19d0:	68fb      	ldr	r3, [r7, #12]
    19d2:	f103 0304 	add.w	r3, r3, #4
    19d6:	4810      	ldr	r0, [pc, #64]	; (1a18 <vTaskDelete+0x94>)
    19d8:	4619      	mov	r1, r3
    19da:	f7ff f9b5 	bl	d48 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    19de:	4b0f      	ldr	r3, [pc, #60]	; (1a1c <vTaskDelete+0x98>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	f103 0201 	add.w	r2, r3, #1
    19e6:	4b0d      	ldr	r3, [pc, #52]	; (1a1c <vTaskDelete+0x98>)
    19e8:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTCBNumber++;
    19ea:	4b0d      	ldr	r3, [pc, #52]	; (1a20 <vTaskDelete+0x9c>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	f103 0201 	add.w	r2, r3, #1
    19f2:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <vTaskDelete+0x9c>)
    19f4:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    19f6:	f7ff f913 	bl	c20 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    19fa:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <vTaskDelete+0xa0>)
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	2b00      	cmp	r3, #0
    1a00:	d004      	beq.n	1a0c <vTaskDelete+0x88>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d101      	bne.n	1a0c <vTaskDelete+0x88>
			{
				portYIELD_WITHIN_API();
    1a08:	f7ff f8ec 	bl	be4 <vPortYieldFromISR>
			}
		}
	}
    1a0c:	f107 0710 	add.w	r7, r7, #16
    1a10:	46bd      	mov	sp, r7
    1a12:	bd80      	pop	{r7, pc}
    1a14:	10004c30 	.word	0x10004c30
    1a18:	10004cdc 	.word	0x10004cdc
    1a1c:	10004cf0 	.word	0x10004cf0
    1a20:	10004d2c 	.word	0x10004d2c
    1a24:	10004d18 	.word	0x10004d18

00001a28 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1a28:	b580      	push	{r7, lr}
    1a2a:	b086      	sub	sp, #24
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
    1a30:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1a32:	f04f 0300 	mov.w	r3, #0
    1a36:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1a38:	f000 fa88 	bl	1f4c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	681a      	ldr	r2, [r3, #0]
    1a40:	683b      	ldr	r3, [r7, #0]
    1a42:	18d3      	adds	r3, r2, r3
    1a44:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	681a      	ldr	r2, [r3, #0]
    1a4a:	4b1d      	ldr	r3, [pc, #116]	; (1ac0 <vTaskDelayUntil+0x98>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	429a      	cmp	r2, r3
    1a50:	d90d      	bls.n	1a6e <vTaskDelayUntil+0x46>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	681a      	ldr	r2, [r3, #0]
    1a56:	693b      	ldr	r3, [r7, #16]
    1a58:	429a      	cmp	r2, r3
    1a5a:	d915      	bls.n	1a88 <vTaskDelayUntil+0x60>
    1a5c:	4b18      	ldr	r3, [pc, #96]	; (1ac0 <vTaskDelayUntil+0x98>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	693a      	ldr	r2, [r7, #16]
    1a62:	429a      	cmp	r2, r3
    1a64:	d910      	bls.n	1a88 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    1a66:	f04f 0301 	mov.w	r3, #1
    1a6a:	617b      	str	r3, [r7, #20]
    1a6c:	e00c      	b.n	1a88 <vTaskDelayUntil+0x60>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	681a      	ldr	r2, [r3, #0]
    1a72:	693b      	ldr	r3, [r7, #16]
    1a74:	429a      	cmp	r2, r3
    1a76:	d804      	bhi.n	1a82 <vTaskDelayUntil+0x5a>
    1a78:	4b11      	ldr	r3, [pc, #68]	; (1ac0 <vTaskDelayUntil+0x98>)
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	693a      	ldr	r2, [r7, #16]
    1a7e:	429a      	cmp	r2, r3
    1a80:	d902      	bls.n	1a88 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    1a82:	f04f 0301 	mov.w	r3, #1
    1a86:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	693a      	ldr	r2, [r7, #16]
    1a8c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    1a8e:	697b      	ldr	r3, [r7, #20]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d009      	beq.n	1aa8 <vTaskDelayUntil+0x80>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1a94:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <vTaskDelayUntil+0x9c>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	f103 0304 	add.w	r3, r3, #4
    1a9c:	4618      	mov	r0, r3
    1a9e:	f7ff f9b5 	bl	e0c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1aa2:	6938      	ldr	r0, [r7, #16]
    1aa4:	f000 ff4c 	bl	2940 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1aa8:	f000 fa5e 	bl	1f68 <xTaskResumeAll>
    1aac:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1aae:	68fb      	ldr	r3, [r7, #12]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d101      	bne.n	1ab8 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
    1ab4:	f7ff f896 	bl	be4 <vPortYieldFromISR>
		}
	}
    1ab8:	f107 0718 	add.w	r7, r7, #24
    1abc:	46bd      	mov	sp, r7
    1abe:	bd80      	pop	{r7, pc}
    1ac0:	10004d0c 	.word	0x10004d0c
    1ac4:	10004c30 	.word	0x10004c30

00001ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b084      	sub	sp, #16
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1ad0:	f04f 0300 	mov.w	r3, #0
    1ad4:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d013      	beq.n	1b04 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
    1adc:	f000 fa36 	bl	1f4c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1ae0:	4b0d      	ldr	r3, [pc, #52]	; (1b18 <vTaskDelay+0x50>)
    1ae2:	681a      	ldr	r2, [r3, #0]
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	18d3      	adds	r3, r2, r3
    1ae8:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <vTaskDelay+0x54>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	f103 0304 	add.w	r3, r3, #4
    1af2:	4618      	mov	r0, r3
    1af4:	f7ff f98a 	bl	e0c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1af8:	68b8      	ldr	r0, [r7, #8]
    1afa:	f000 ff21 	bl	2940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1afe:	f000 fa33 	bl	1f68 <xTaskResumeAll>
    1b02:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1b04:	68fb      	ldr	r3, [r7, #12]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d101      	bne.n	1b0e <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
    1b0a:	f7ff f86b 	bl	be4 <vPortYieldFromISR>
		}
	}
    1b0e:	f107 0710 	add.w	r7, r7, #16
    1b12:	46bd      	mov	sp, r7
    1b14:	bd80      	pop	{r7, pc}
    1b16:	bf00      	nop
    1b18:	10004d0c 	.word	0x10004d0c
    1b1c:	10004c30 	.word	0x10004c30

00001b20 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    1b20:	b580      	push	{r7, lr}
    1b22:	b084      	sub	sp, #16
    1b24:	af00      	add	r7, sp, #0
    1b26:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    1b28:	f7ff f868 	bl	bfc <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d102      	bne.n	1b38 <uxTaskPriorityGet+0x18>
    1b32:	4b08      	ldr	r3, [pc, #32]	; (1b54 <uxTaskPriorityGet+0x34>)
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	e000      	b.n	1b3a <uxTaskPriorityGet+0x1a>
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b40:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    1b42:	f7ff f86d 	bl	c20 <vPortExitCritical>

		return uxReturn;
    1b46:	68bb      	ldr	r3, [r7, #8]
	}
    1b48:	4618      	mov	r0, r3
    1b4a:	f107 0710 	add.w	r7, r7, #16
    1b4e:	46bd      	mov	sp, r7
    1b50:	bd80      	pop	{r7, pc}
    1b52:	bf00      	nop
    1b54:	10004c30 	.word	0x10004c30

00001b58 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    1b58:	b580      	push	{r7, lr}
    1b5a:	b086      	sub	sp, #24
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
    1b60:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    1b62:	f04f 0300 	mov.w	r3, #0
    1b66:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    1b68:	683b      	ldr	r3, [r7, #0]
    1b6a:	2b04      	cmp	r3, #4
    1b6c:	d902      	bls.n	1b74 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    1b6e:	f04f 0304 	mov.w	r3, #4
    1b72:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    1b74:	f7ff f842 	bl	bfc <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    1b78:	4b39      	ldr	r3, [pc, #228]	; (1c60 <vTaskPrioritySet+0x108>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	687a      	ldr	r2, [r7, #4]
    1b7e:	429a      	cmp	r2, r3
    1b80:	d102      	bne.n	1b88 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    1b82:	f04f 0300 	mov.w	r3, #0
    1b86:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d102      	bne.n	1b94 <vTaskPrioritySet+0x3c>
    1b8e:	4b34      	ldr	r3, [pc, #208]	; (1c60 <vTaskPrioritySet+0x108>)
    1b90:	681b      	ldr	r3, [r3, #0]
    1b92:	e000      	b.n	1b96 <vTaskPrioritySet+0x3e>
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    1b98:	693b      	ldr	r3, [r7, #16]
    1b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1b9c:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    1b9e:	68fa      	ldr	r2, [r7, #12]
    1ba0:	683b      	ldr	r3, [r7, #0]
    1ba2:	429a      	cmp	r2, r3
    1ba4:	d056      	beq.n	1c54 <vTaskPrioritySet+0xfc>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    1ba6:	683a      	ldr	r2, [r7, #0]
    1ba8:	68fb      	ldr	r3, [r7, #12]
    1baa:	429a      	cmp	r2, r3
    1bac:	d906      	bls.n	1bbc <vTaskPrioritySet+0x64>
				{
					if( pxTask != NULL )
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d009      	beq.n	1bc8 <vTaskPrioritySet+0x70>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    1bb4:	f04f 0301 	mov.w	r3, #1
    1bb8:	617b      	str	r3, [r7, #20]
    1bba:	e005      	b.n	1bc8 <vTaskPrioritySet+0x70>
					}
				}
				else if( pxTask == NULL )
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d102      	bne.n	1bc8 <vTaskPrioritySet+0x70>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    1bc2:	f04f 0301 	mov.w	r3, #1
    1bc6:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1bc8:	693b      	ldr	r3, [r7, #16]
    1bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1bcc:	693b      	ldr	r3, [r7, #16]
    1bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bd0:	429a      	cmp	r2, r3
    1bd2:	d102      	bne.n	1bda <vTaskPrioritySet+0x82>
					{
						pxTCB->uxPriority = uxNewPriority;
    1bd4:	693b      	ldr	r3, [r7, #16]
    1bd6:	683a      	ldr	r2, [r7, #0]
    1bd8:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1bda:	693b      	ldr	r3, [r7, #16]
    1bdc:	683a      	ldr	r2, [r7, #0]
    1bde:	649a      	str	r2, [r3, #72]	; 0x48
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    1be0:	683b      	ldr	r3, [r7, #0]
    1be2:	f1c3 0205 	rsb	r2, r3, #5
    1be6:	693b      	ldr	r3, [r7, #16]
    1be8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    1bea:	693b      	ldr	r3, [r7, #16]
    1bec:	6959      	ldr	r1, [r3, #20]
    1bee:	68fa      	ldr	r2, [r7, #12]
    1bf0:	4613      	mov	r3, r2
    1bf2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1bf6:	189b      	adds	r3, r3, r2
    1bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1bfc:	461a      	mov	r2, r3
    1bfe:	4b19      	ldr	r3, [pc, #100]	; (1c64 <vTaskPrioritySet+0x10c>)
    1c00:	18d3      	adds	r3, r2, r3
    1c02:	4299      	cmp	r1, r3
    1c04:	d121      	bne.n	1c4a <vTaskPrioritySet+0xf2>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    1c06:	693b      	ldr	r3, [r7, #16]
    1c08:	f103 0304 	add.w	r3, r3, #4
    1c0c:	4618      	mov	r0, r3
    1c0e:	f7ff f8fd 	bl	e0c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1c12:	693b      	ldr	r3, [r7, #16]
    1c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c16:	4b14      	ldr	r3, [pc, #80]	; (1c68 <vTaskPrioritySet+0x110>)
    1c18:	681b      	ldr	r3, [r3, #0]
    1c1a:	429a      	cmp	r2, r3
    1c1c:	d903      	bls.n	1c26 <vTaskPrioritySet+0xce>
    1c1e:	693b      	ldr	r3, [r7, #16]
    1c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c22:	4b11      	ldr	r3, [pc, #68]	; (1c68 <vTaskPrioritySet+0x110>)
    1c24:	601a      	str	r2, [r3, #0]
    1c26:	693b      	ldr	r3, [r7, #16]
    1c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c2a:	4613      	mov	r3, r2
    1c2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c30:	189b      	adds	r3, r3, r2
    1c32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c36:	461a      	mov	r2, r3
    1c38:	4b0a      	ldr	r3, [pc, #40]	; (1c64 <vTaskPrioritySet+0x10c>)
    1c3a:	18d2      	adds	r2, r2, r3
    1c3c:	693b      	ldr	r3, [r7, #16]
    1c3e:	f103 0304 	add.w	r3, r3, #4
    1c42:	4610      	mov	r0, r2
    1c44:	4619      	mov	r1, r3
    1c46:	f7ff f87f 	bl	d48 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    1c4a:	697b      	ldr	r3, [r7, #20]
    1c4c:	2b01      	cmp	r3, #1
    1c4e:	d101      	bne.n	1c54 <vTaskPrioritySet+0xfc>
				{
					portYIELD_WITHIN_API();
    1c50:	f7fe ffc8 	bl	be4 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    1c54:	f7fe ffe4 	bl	c20 <vPortExitCritical>
	}
    1c58:	f107 0718 	add.w	r7, r7, #24
    1c5c:	46bd      	mov	sp, r7
    1c5e:	bd80      	pop	{r7, pc}
    1c60:	10004c30 	.word	0x10004c30
    1c64:	10004c34 	.word	0x10004c34
    1c68:	10004d14 	.word	0x10004d14

00001c6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
    1c72:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1c74:	f7fe ffc2 	bl	bfc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    1c78:	4b21      	ldr	r3, [pc, #132]	; (1d00 <vTaskSuspend+0x94>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	687a      	ldr	r2, [r7, #4]
    1c7e:	429a      	cmp	r2, r3
    1c80:	d102      	bne.n	1c88 <vTaskSuspend+0x1c>
			{
				pxTaskToSuspend = NULL;
    1c82:	f04f 0300 	mov.w	r3, #0
    1c86:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d102      	bne.n	1c94 <vTaskSuspend+0x28>
    1c8e:	4b1c      	ldr	r3, [pc, #112]	; (1d00 <vTaskSuspend+0x94>)
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	e000      	b.n	1c96 <vTaskSuspend+0x2a>
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1c98:	68fb      	ldr	r3, [r7, #12]
    1c9a:	f103 0304 	add.w	r3, r3, #4
    1c9e:	4618      	mov	r0, r3
    1ca0:	f7ff f8b4 	bl	e0c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d005      	beq.n	1cb8 <vTaskSuspend+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	f103 0318 	add.w	r3, r3, #24
    1cb2:	4618      	mov	r0, r3
    1cb4:	f7ff f8aa 	bl	e0c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    1cb8:	68fb      	ldr	r3, [r7, #12]
    1cba:	f103 0304 	add.w	r3, r3, #4
    1cbe:	4811      	ldr	r0, [pc, #68]	; (1d04 <vTaskSuspend+0x98>)
    1cc0:	4619      	mov	r1, r3
    1cc2:	f7ff f841 	bl	d48 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1cc6:	f7fe ffab 	bl	c20 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d113      	bne.n	1cf8 <vTaskSuspend+0x8c>
		{
			if( xSchedulerRunning != pdFALSE )
    1cd0:	4b0d      	ldr	r3, [pc, #52]	; (1d08 <vTaskSuspend+0x9c>)
    1cd2:	681b      	ldr	r3, [r3, #0]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d002      	beq.n	1cde <vTaskSuspend+0x72>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    1cd8:	f7fe ff84 	bl	be4 <vPortYieldFromISR>
    1cdc:	e00c      	b.n	1cf8 <vTaskSuspend+0x8c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1cde:	4b09      	ldr	r3, [pc, #36]	; (1d04 <vTaskSuspend+0x98>)
    1ce0:	681a      	ldr	r2, [r3, #0]
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <vTaskSuspend+0xa0>)
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	429a      	cmp	r2, r3
    1ce8:	d104      	bne.n	1cf4 <vTaskSuspend+0x88>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1cea:	4b05      	ldr	r3, [pc, #20]	; (1d00 <vTaskSuspend+0x94>)
    1cec:	f04f 0200 	mov.w	r2, #0
    1cf0:	601a      	str	r2, [r3, #0]
    1cf2:	e001      	b.n	1cf8 <vTaskSuspend+0x8c>
				}
				else
				{
					vTaskSwitchContext();
    1cf4:	f000 fba4 	bl	2440 <vTaskSwitchContext>
				}
			}
		}
	}
    1cf8:	f107 0710 	add.w	r7, r7, #16
    1cfc:	46bd      	mov	sp, r7
    1cfe:	bd80      	pop	{r7, pc}
    1d00:	10004c30 	.word	0x10004c30
    1d04:	10004cf4 	.word	0x10004cf4
    1d08:	10004d18 	.word	0x10004d18
    1d0c:	10004d08 	.word	0x10004d08

00001d10 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    1d10:	b480      	push	{r7}
    1d12:	b085      	sub	sp, #20
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    1d18:	f04f 0300 	mov.w	r3, #0
    1d1c:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1d22:	68bb      	ldr	r3, [r7, #8]
    1d24:	695a      	ldr	r2, [r3, #20]
    1d26:	4b0b      	ldr	r3, [pc, #44]	; (1d54 <xTaskIsTaskSuspended+0x44>)
    1d28:	429a      	cmp	r2, r3
    1d2a:	d10b      	bne.n	1d44 <xTaskIsTaskSuspended+0x34>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    1d2c:	68bb      	ldr	r3, [r7, #8]
    1d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d30:	4b09      	ldr	r3, [pc, #36]	; (1d58 <xTaskIsTaskSuspended+0x48>)
    1d32:	429a      	cmp	r2, r3
    1d34:	d006      	beq.n	1d44 <xTaskIsTaskSuspended+0x34>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    1d36:	68bb      	ldr	r3, [r7, #8]
    1d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d102      	bne.n	1d44 <xTaskIsTaskSuspended+0x34>
				{
					xReturn = pdTRUE;
    1d3e:	f04f 0301 	mov.w	r3, #1
    1d42:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    1d44:	68fb      	ldr	r3, [r7, #12]
	}
    1d46:	4618      	mov	r0, r3
    1d48:	f107 0714 	add.w	r7, r7, #20
    1d4c:	46bd      	mov	sp, r7
    1d4e:	bc80      	pop	{r7}
    1d50:	4770      	bx	lr
    1d52:	bf00      	nop
    1d54:	10004cf4 	.word	0x10004cf4
    1d58:	10004cc8 	.word	0x10004cc8

00001d5c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	b084      	sub	sp, #16
    1d60:	af00      	add	r7, sp, #0
    1d62:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1d68:	68fb      	ldr	r3, [r7, #12]
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d039      	beq.n	1de2 <vTaskResume+0x86>
    1d6e:	4b1f      	ldr	r3, [pc, #124]	; (1dec <vTaskResume+0x90>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	68fa      	ldr	r2, [r7, #12]
    1d74:	429a      	cmp	r2, r3
    1d76:	d034      	beq.n	1de2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    1d78:	f7fe ff40 	bl	bfc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1d7c:	68f8      	ldr	r0, [r7, #12]
    1d7e:	f7ff ffc7 	bl	1d10 <xTaskIsTaskSuspended>
    1d82:	4603      	mov	r3, r0
    1d84:	2b01      	cmp	r3, #1
    1d86:	d12a      	bne.n	1dde <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	f103 0304 	add.w	r3, r3, #4
    1d8e:	4618      	mov	r0, r3
    1d90:	f7ff f83c 	bl	e0c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d98:	4b15      	ldr	r3, [pc, #84]	; (1df0 <vTaskResume+0x94>)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	429a      	cmp	r2, r3
    1d9e:	d903      	bls.n	1da8 <vTaskResume+0x4c>
    1da0:	68fb      	ldr	r3, [r7, #12]
    1da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1da4:	4b12      	ldr	r3, [pc, #72]	; (1df0 <vTaskResume+0x94>)
    1da6:	601a      	str	r2, [r3, #0]
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dac:	4613      	mov	r3, r2
    1dae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1db2:	189b      	adds	r3, r3, r2
    1db4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1db8:	461a      	mov	r2, r3
    1dba:	4b0e      	ldr	r3, [pc, #56]	; (1df4 <vTaskResume+0x98>)
    1dbc:	18d2      	adds	r2, r2, r3
    1dbe:	68fb      	ldr	r3, [r7, #12]
    1dc0:	f103 0304 	add.w	r3, r3, #4
    1dc4:	4610      	mov	r0, r2
    1dc6:	4619      	mov	r1, r3
    1dc8:	f7fe ffbe 	bl	d48 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1dcc:	68fb      	ldr	r3, [r7, #12]
    1dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dd0:	4b06      	ldr	r3, [pc, #24]	; (1dec <vTaskResume+0x90>)
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d301      	bcc.n	1dde <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    1dda:	f7fe ff03 	bl	be4 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    1dde:	f7fe ff1f 	bl	c20 <vPortExitCritical>
		}
	}
    1de2:	f107 0710 	add.w	r7, r7, #16
    1de6:	46bd      	mov	sp, r7
    1de8:	bd80      	pop	{r7, pc}
    1dea:	bf00      	nop
    1dec:	10004c30 	.word	0x10004c30
    1df0:	10004d14 	.word	0x10004d14
    1df4:	10004c34 	.word	0x10004c34

00001df8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    1df8:	b580      	push	{r7, lr}
    1dfa:	b086      	sub	sp, #24
    1dfc:	af00      	add	r7, sp, #0
    1dfe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    1e00:	f04f 0300 	mov.w	r3, #0
    1e04:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1e0a:	f04f 0300 	mov.w	r3, #0
    1e0e:	60fb      	str	r3, [r7, #12]
    1e10:	f04f 0028 	mov.w	r0, #40	; 0x28
    1e14:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1e18:	6938      	ldr	r0, [r7, #16]
    1e1a:	f7ff ff79 	bl	1d10 <xTaskIsTaskSuspended>
    1e1e:	4603      	mov	r3, r0
    1e20:	2b01      	cmp	r3, #1
    1e22:	d137      	bne.n	1e94 <xTaskResumeFromISR+0x9c>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e24:	4b20      	ldr	r3, [pc, #128]	; (1ea8 <xTaskResumeFromISR+0xb0>)
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d12c      	bne.n	1e86 <xTaskResumeFromISR+0x8e>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    1e2c:	693b      	ldr	r3, [r7, #16]
    1e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e30:	4b1e      	ldr	r3, [pc, #120]	; (1eac <xTaskResumeFromISR+0xb4>)
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e36:	429a      	cmp	r2, r3
    1e38:	bf34      	ite	cc
    1e3a:	2300      	movcc	r3, #0
    1e3c:	2301      	movcs	r3, #1
    1e3e:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    1e40:	693b      	ldr	r3, [r7, #16]
    1e42:	f103 0304 	add.w	r3, r3, #4
    1e46:	4618      	mov	r0, r3
    1e48:	f7fe ffe0 	bl	e0c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1e4c:	693b      	ldr	r3, [r7, #16]
    1e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e50:	4b17      	ldr	r3, [pc, #92]	; (1eb0 <xTaskResumeFromISR+0xb8>)
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	429a      	cmp	r2, r3
    1e56:	d903      	bls.n	1e60 <xTaskResumeFromISR+0x68>
    1e58:	693b      	ldr	r3, [r7, #16]
    1e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e5c:	4b14      	ldr	r3, [pc, #80]	; (1eb0 <xTaskResumeFromISR+0xb8>)
    1e5e:	601a      	str	r2, [r3, #0]
    1e60:	693b      	ldr	r3, [r7, #16]
    1e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e64:	4613      	mov	r3, r2
    1e66:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1e6a:	189b      	adds	r3, r3, r2
    1e6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1e70:	461a      	mov	r2, r3
    1e72:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <xTaskResumeFromISR+0xbc>)
    1e74:	18d2      	adds	r2, r2, r3
    1e76:	693b      	ldr	r3, [r7, #16]
    1e78:	f103 0304 	add.w	r3, r3, #4
    1e7c:	4610      	mov	r0, r2
    1e7e:	4619      	mov	r1, r3
    1e80:	f7fe ff62 	bl	d48 <vListInsertEnd>
    1e84:	e006      	b.n	1e94 <xTaskResumeFromISR+0x9c>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1e86:	693b      	ldr	r3, [r7, #16]
    1e88:	f103 0318 	add.w	r3, r3, #24
    1e8c:	480a      	ldr	r0, [pc, #40]	; (1eb8 <xTaskResumeFromISR+0xc0>)
    1e8e:	4619      	mov	r1, r3
    1e90:	f7fe ff5a 	bl	d48 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1e94:	f04f 0000 	mov.w	r0, #0
    1e98:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    1e9c:	697b      	ldr	r3, [r7, #20]
	}
    1e9e:	4618      	mov	r0, r3
    1ea0:	f107 0718 	add.w	r7, r7, #24
    1ea4:	46bd      	mov	sp, r7
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	10004d1c 	.word	0x10004d1c
    1eac:	10004c30 	.word	0x10004c30
    1eb0:	10004d14 	.word	0x10004d14
    1eb4:	10004c34 	.word	0x10004c34
    1eb8:	10004cc8 	.word	0x10004cc8

00001ebc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b086      	sub	sp, #24
    1ec0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1ec2:	4b16      	ldr	r3, [pc, #88]	; (1f1c <vTaskStartScheduler+0x60>)
    1ec4:	f04f 0200 	mov.w	r2, #0
    1ec8:	9200      	str	r2, [sp, #0]
    1eca:	f04f 0200 	mov.w	r2, #0
    1ece:	9201      	str	r2, [sp, #4]
    1ed0:	f04f 0200 	mov.w	r2, #0
    1ed4:	9202      	str	r2, [sp, #8]
    1ed6:	f04f 0200 	mov.w	r2, #0
    1eda:	9203      	str	r2, [sp, #12]
    1edc:	4810      	ldr	r0, [pc, #64]	; (1f20 <vTaskStartScheduler+0x64>)
    1ede:	4619      	mov	r1, r3
    1ee0:	f04f 0250 	mov.w	r2, #80	; 0x50
    1ee4:	f04f 0300 	mov.w	r3, #0
    1ee8:	f7ff fc98 	bl	181c <xTaskGenericCreate>
    1eec:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1eee:	687b      	ldr	r3, [r7, #4]
    1ef0:	2b01      	cmp	r3, #1
    1ef2:	d10f      	bne.n	1f14 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1ef4:	f04f 0028 	mov.w	r0, #40	; 0x28
    1ef8:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    1efc:	4b09      	ldr	r3, [pc, #36]	; (1f24 <vTaskStartScheduler+0x68>)
    1efe:	f04f 0201 	mov.w	r2, #1
    1f02:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    1f04:	4b08      	ldr	r3, [pc, #32]	; (1f28 <vTaskStartScheduler+0x6c>)
    1f06:	f04f 0200 	mov.w	r2, #0
    1f0a:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    1f0c:	f7fe fa4e 	bl	3ac <vConfigureTimerForRunTimeStats>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1f10:	f7fe fe44 	bl	b9c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1f14:	f107 0708 	add.w	r7, r7, #8
    1f18:	46bd      	mov	sp, r7
    1f1a:	bd80      	pop	{r7, pc}
    1f1c:	0000a310 	.word	0x0000a310
    1f20:	000027ad 	.word	0x000027ad
    1f24:	10004d18 	.word	0x10004d18
    1f28:	10004d0c 	.word	0x10004d0c

00001f2c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1f30:	f04f 0028 	mov.w	r0, #40	; 0x28
    1f34:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <vTaskEndScheduler+0x1c>)
    1f3a:	f04f 0200 	mov.w	r2, #0
    1f3e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    1f40:	f7fe fe4a 	bl	bd8 <vPortEndScheduler>
}
    1f44:	bd80      	pop	{r7, pc}
    1f46:	bf00      	nop
    1f48:	10004d18 	.word	0x10004d18

00001f4c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1f4c:	b480      	push	{r7}
    1f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <vTaskSuspendAll+0x18>)
    1f52:	681b      	ldr	r3, [r3, #0]
    1f54:	f103 0201 	add.w	r2, r3, #1
    1f58:	4b02      	ldr	r3, [pc, #8]	; (1f64 <vTaskSuspendAll+0x18>)
    1f5a:	601a      	str	r2, [r3, #0]
}
    1f5c:	46bd      	mov	sp, r7
    1f5e:	bc80      	pop	{r7}
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop
    1f64:	10004d1c 	.word	0x10004d1c

00001f68 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1f68:	b590      	push	{r4, r7, lr}
    1f6a:	b083      	sub	sp, #12
    1f6c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1f6e:	f04f 0300 	mov.w	r3, #0
    1f72:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1f74:	f7fe fe42 	bl	bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    1f78:	4b38      	ldr	r3, [pc, #224]	; (205c <xTaskResumeAll+0xf4>)
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	f103 32ff 	add.w	r2, r3, #4294967295
    1f80:	4b36      	ldr	r3, [pc, #216]	; (205c <xTaskResumeAll+0xf4>)
    1f82:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1f84:	4b35      	ldr	r3, [pc, #212]	; (205c <xTaskResumeAll+0xf4>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d15e      	bne.n	204a <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1f8c:	4b34      	ldr	r3, [pc, #208]	; (2060 <xTaskResumeAll+0xf8>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	2b00      	cmp	r3, #0
    1f92:	d05a      	beq.n	204a <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1f94:	f04f 0300 	mov.w	r3, #0
    1f98:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1f9a:	e02e      	b.n	1ffa <xTaskResumeAll+0x92>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1f9c:	4b31      	ldr	r3, [pc, #196]	; (2064 <xTaskResumeAll+0xfc>)
    1f9e:	68db      	ldr	r3, [r3, #12]
    1fa0:	68db      	ldr	r3, [r3, #12]
    1fa2:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
    1fa4:	f104 0318 	add.w	r3, r4, #24
    1fa8:	4618      	mov	r0, r3
    1faa:	f7fe ff2f 	bl	e0c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1fae:	f104 0304 	add.w	r3, r4, #4
    1fb2:	4618      	mov	r0, r3
    1fb4:	f7fe ff2a 	bl	e0c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1fb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1fba:	4b2b      	ldr	r3, [pc, #172]	; (2068 <xTaskResumeAll+0x100>)
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	429a      	cmp	r2, r3
    1fc0:	d902      	bls.n	1fc8 <xTaskResumeAll+0x60>
    1fc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1fc4:	4b28      	ldr	r3, [pc, #160]	; (2068 <xTaskResumeAll+0x100>)
    1fc6:	601a      	str	r2, [r3, #0]
    1fc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1fca:	4613      	mov	r3, r2
    1fcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1fd0:	189b      	adds	r3, r3, r2
    1fd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1fd6:	461a      	mov	r2, r3
    1fd8:	4b24      	ldr	r3, [pc, #144]	; (206c <xTaskResumeAll+0x104>)
    1fda:	18d2      	adds	r2, r2, r3
    1fdc:	f104 0304 	add.w	r3, r4, #4
    1fe0:	4610      	mov	r0, r2
    1fe2:	4619      	mov	r1, r3
    1fe4:	f7fe feb0 	bl	d48 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1fe8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1fea:	4b21      	ldr	r3, [pc, #132]	; (2070 <xTaskResumeAll+0x108>)
    1fec:	681b      	ldr	r3, [r3, #0]
    1fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ff0:	429a      	cmp	r2, r3
    1ff2:	d302      	bcc.n	1ffa <xTaskResumeAll+0x92>
					{
						xYieldRequired = pdTRUE;
    1ff4:	f04f 0301 	mov.w	r3, #1
    1ff8:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1ffa:	4b1a      	ldr	r3, [pc, #104]	; (2064 <xTaskResumeAll+0xfc>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	2b00      	cmp	r3, #0
    2000:	d1cc      	bne.n	1f9c <xTaskResumeAll+0x34>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2002:	4b1c      	ldr	r3, [pc, #112]	; (2074 <xTaskResumeAll+0x10c>)
    2004:	681b      	ldr	r3, [r3, #0]
    2006:	2b00      	cmp	r3, #0
    2008:	d00f      	beq.n	202a <xTaskResumeAll+0xc2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    200a:	e007      	b.n	201c <xTaskResumeAll+0xb4>
					{
						vTaskIncrementTick();
    200c:	f000 f978 	bl	2300 <vTaskIncrementTick>
						--uxMissedTicks;
    2010:	4b18      	ldr	r3, [pc, #96]	; (2074 <xTaskResumeAll+0x10c>)
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	f103 32ff 	add.w	r2, r3, #4294967295
    2018:	4b16      	ldr	r3, [pc, #88]	; (2074 <xTaskResumeAll+0x10c>)
    201a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    201c:	4b15      	ldr	r3, [pc, #84]	; (2074 <xTaskResumeAll+0x10c>)
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	2b00      	cmp	r3, #0
    2022:	d1f3      	bne.n	200c <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2024:	f04f 0301 	mov.w	r3, #1
    2028:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    202a:	683b      	ldr	r3, [r7, #0]
    202c:	2b01      	cmp	r3, #1
    202e:	d003      	beq.n	2038 <xTaskResumeAll+0xd0>
    2030:	4b11      	ldr	r3, [pc, #68]	; (2078 <xTaskResumeAll+0x110>)
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	2b01      	cmp	r3, #1
    2036:	d108      	bne.n	204a <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
    2038:	f04f 0301 	mov.w	r3, #1
    203c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    203e:	4b0e      	ldr	r3, [pc, #56]	; (2078 <xTaskResumeAll+0x110>)
    2040:	f04f 0200 	mov.w	r2, #0
    2044:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    2046:	f7fe fdcd 	bl	be4 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    204a:	f7fe fde9 	bl	c20 <vPortExitCritical>

	return xAlreadyYielded;
    204e:	687b      	ldr	r3, [r7, #4]
}
    2050:	4618      	mov	r0, r3
    2052:	f107 070c 	add.w	r7, r7, #12
    2056:	46bd      	mov	sp, r7
    2058:	bd90      	pop	{r4, r7, pc}
    205a:	bf00      	nop
    205c:	10004d1c 	.word	0x10004d1c
    2060:	10004d08 	.word	0x10004d08
    2064:	10004cc8 	.word	0x10004cc8
    2068:	10004d14 	.word	0x10004d14
    206c:	10004c34 	.word	0x10004c34
    2070:	10004c30 	.word	0x10004c30
    2074:	10004d20 	.word	0x10004d20
    2078:	10004d24 	.word	0x10004d24

0000207c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2082:	f7fe fdbb 	bl	bfc <vPortEnterCritical>
	{
		xTicks = xTickCount;
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <xTaskGetTickCount+0x20>)
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    208c:	f7fe fdc8 	bl	c20 <vPortExitCritical>

	return xTicks;
    2090:	687b      	ldr	r3, [r7, #4]
}
    2092:	4618      	mov	r0, r3
    2094:	f107 0708 	add.w	r7, r7, #8
    2098:	46bd      	mov	sp, r7
    209a:	bd80      	pop	{r7, pc}
    209c:	10004d0c 	.word	0x10004d0c

000020a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    20a0:	b480      	push	{r7}
    20a2:	b083      	sub	sp, #12
    20a4:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20a6:	f04f 0300 	mov.w	r3, #0
    20aa:	607b      	str	r3, [r7, #4]
    20ac:	f04f 0028 	mov.w	r0, #40	; 0x28
    20b0:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    20b4:	4b06      	ldr	r3, [pc, #24]	; (20d0 <xTaskGetTickCountFromISR+0x30>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    20ba:	f04f 0000 	mov.w	r0, #0
    20be:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    20c2:	683b      	ldr	r3, [r7, #0]
}
    20c4:	4618      	mov	r0, r3
    20c6:	f107 070c 	add.w	r7, r7, #12
    20ca:	46bd      	mov	sp, r7
    20cc:	bc80      	pop	{r7}
    20ce:	4770      	bx	lr
    20d0:	10004d0c 	.word	0x10004d0c

000020d4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    20d4:	b480      	push	{r7}
    20d6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    20d8:	4b02      	ldr	r3, [pc, #8]	; (20e4 <uxTaskGetNumberOfTasks+0x10>)
    20da:	681b      	ldr	r3, [r3, #0]
}
    20dc:	4618      	mov	r0, r3
    20de:	46bd      	mov	sp, r7
    20e0:	bc80      	pop	{r7}
    20e2:	4770      	bx	lr
    20e4:	10004d08 	.word	0x10004d08

000020e8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    20e8:	b590      	push	{r4, r7, lr}
    20ea:	b085      	sub	sp, #20
    20ec:	af00      	add	r7, sp, #0
    20ee:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    20f0:	f7ff ff2c 	bl	1f4c <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
    20f4:	687b      	ldr	r3, [r7, #4]
    20f6:	f04f 0200 	mov.w	r2, #0
    20fa:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    20fc:	687c      	ldr	r4, [r7, #4]
    20fe:	4620      	mov	r0, r4
    2100:	f008 f890 	bl	a224 <strlen>
    2104:	4603      	mov	r3, r0
    2106:	18e3      	adds	r3, r4, r3
    2108:	4618      	mov	r0, r3
    210a:	4931      	ldr	r1, [pc, #196]	; (21d0 <vTaskList+0xe8>)
    210c:	f04f 0203 	mov.w	r2, #3
    2110:	f007 ff04 	bl	9f1c <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    2114:	4b2f      	ldr	r3, [pc, #188]	; (21d4 <vTaskList+0xec>)
    2116:	681b      	ldr	r3, [r3, #0]
    2118:	f103 0301 	add.w	r3, r3, #1
    211c:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    211e:	68fb      	ldr	r3, [r7, #12]
    2120:	f103 33ff 	add.w	r3, r3, #4294967295
    2124:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    2126:	68fa      	ldr	r2, [r7, #12]
    2128:	4613      	mov	r3, r2
    212a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    212e:	189b      	adds	r3, r3, r2
    2130:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2134:	461a      	mov	r2, r3
    2136:	4b28      	ldr	r3, [pc, #160]	; (21d8 <vTaskList+0xf0>)
    2138:	18d3      	adds	r3, r2, r3
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d00f      	beq.n	2160 <vTaskList+0x78>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    2140:	68fa      	ldr	r2, [r7, #12]
    2142:	4613      	mov	r3, r2
    2144:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2148:	189b      	adds	r3, r3, r2
    214a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    214e:	461a      	mov	r2, r3
    2150:	4b21      	ldr	r3, [pc, #132]	; (21d8 <vTaskList+0xf0>)
    2152:	18d3      	adds	r3, r2, r3
    2154:	6878      	ldr	r0, [r7, #4]
    2156:	4619      	mov	r1, r3
    2158:	f04f 0252 	mov.w	r2, #82	; 0x52
    215c:	f000 fc62 	bl	2a24 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	2b00      	cmp	r3, #0
    2164:	d1db      	bne.n	211e <vTaskList+0x36>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    2166:	4b1d      	ldr	r3, [pc, #116]	; (21dc <vTaskList+0xf4>)
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	2b00      	cmp	r3, #0
    216e:	d007      	beq.n	2180 <vTaskList+0x98>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    2170:	4b1a      	ldr	r3, [pc, #104]	; (21dc <vTaskList+0xf4>)
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	6878      	ldr	r0, [r7, #4]
    2176:	4619      	mov	r1, r3
    2178:	f04f 0242 	mov.w	r2, #66	; 0x42
    217c:	f000 fc52 	bl	2a24 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    2180:	4b17      	ldr	r3, [pc, #92]	; (21e0 <vTaskList+0xf8>)
    2182:	681b      	ldr	r3, [r3, #0]
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	2b00      	cmp	r3, #0
    2188:	d007      	beq.n	219a <vTaskList+0xb2>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    218a:	4b15      	ldr	r3, [pc, #84]	; (21e0 <vTaskList+0xf8>)
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	6878      	ldr	r0, [r7, #4]
    2190:	4619      	mov	r1, r3
    2192:	f04f 0242 	mov.w	r2, #66	; 0x42
    2196:	f000 fc45 	bl	2a24 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    219a:	4b12      	ldr	r3, [pc, #72]	; (21e4 <vTaskList+0xfc>)
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	2b00      	cmp	r3, #0
    21a0:	d005      	beq.n	21ae <vTaskList+0xc6>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
    21a2:	6878      	ldr	r0, [r7, #4]
    21a4:	490f      	ldr	r1, [pc, #60]	; (21e4 <vTaskList+0xfc>)
    21a6:	f04f 0244 	mov.w	r2, #68	; 0x44
    21aa:	f000 fc3b 	bl	2a24 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    21ae:	4b0e      	ldr	r3, [pc, #56]	; (21e8 <vTaskList+0x100>)
    21b0:	681b      	ldr	r3, [r3, #0]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d005      	beq.n	21c2 <vTaskList+0xda>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
    21b6:	6878      	ldr	r0, [r7, #4]
    21b8:	490b      	ldr	r1, [pc, #44]	; (21e8 <vTaskList+0x100>)
    21ba:	f04f 0253 	mov.w	r2, #83	; 0x53
    21be:	f000 fc31 	bl	2a24 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    21c2:	f7ff fed1 	bl	1f68 <xTaskResumeAll>
	}
    21c6:	f107 0714 	add.w	r7, r7, #20
    21ca:	46bd      	mov	sp, r7
    21cc:	bd90      	pop	{r4, r7, pc}
    21ce:	bf00      	nop
    21d0:	0000a318 	.word	0x0000a318
    21d4:	10004d10 	.word	0x10004d10
    21d8:	10004c34 	.word	0x10004c34
    21dc:	10004cc0 	.word	0x10004cc0
    21e0:	10004cc4 	.word	0x10004cc4
    21e4:	10004cdc 	.word	0x10004cdc
    21e8:	10004cf4 	.word	0x10004cf4

000021ec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
    21ec:	b590      	push	{r4, r7, lr}
    21ee:	b085      	sub	sp, #20
    21f0:	af00      	add	r7, sp, #0
    21f2:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    21f4:	f7ff feaa 	bl	1f4c <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    21f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    21fc:	689b      	ldr	r3, [r3, #8]
    21fe:	60bb      	str	r3, [r7, #8]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
    2200:	68ba      	ldr	r2, [r7, #8]
    2202:	4b37      	ldr	r3, [pc, #220]	; (22e0 <vTaskGetRunTimeStats+0xf4>)
    2204:	fba3 1302 	umull	r1, r3, r3, r2
    2208:	ea4f 1353 	mov.w	r3, r3, lsr #5
    220c:	60bb      	str	r3, [r7, #8]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	f04f 0200 	mov.w	r2, #0
    2214:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    2216:	687c      	ldr	r4, [r7, #4]
    2218:	4620      	mov	r0, r4
    221a:	f008 f803 	bl	a224 <strlen>
    221e:	4603      	mov	r3, r0
    2220:	18e3      	adds	r3, r4, r3
    2222:	4618      	mov	r0, r3
    2224:	492f      	ldr	r1, [pc, #188]	; (22e4 <vTaskGetRunTimeStats+0xf8>)
    2226:	f04f 0203 	mov.w	r2, #3
    222a:	f007 fe77 	bl	9f1c <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    222e:	4b2e      	ldr	r3, [pc, #184]	; (22e8 <vTaskGetRunTimeStats+0xfc>)
    2230:	681b      	ldr	r3, [r3, #0]
    2232:	f103 0301 	add.w	r3, r3, #1
    2236:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	f103 33ff 	add.w	r3, r3, #4294967295
    223e:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    2240:	68fa      	ldr	r2, [r7, #12]
    2242:	4613      	mov	r3, r2
    2244:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2248:	189b      	adds	r3, r3, r2
    224a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    224e:	461a      	mov	r2, r3
    2250:	4b26      	ldr	r3, [pc, #152]	; (22ec <vTaskGetRunTimeStats+0x100>)
    2252:	18d3      	adds	r3, r2, r3
    2254:	681b      	ldr	r3, [r3, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	d00e      	beq.n	2278 <vTaskGetRunTimeStats+0x8c>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime );
    225a:	68fa      	ldr	r2, [r7, #12]
    225c:	4613      	mov	r3, r2
    225e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2262:	189b      	adds	r3, r3, r2
    2264:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2268:	461a      	mov	r2, r3
    226a:	4b20      	ldr	r3, [pc, #128]	; (22ec <vTaskGetRunTimeStats+0x100>)
    226c:	18d3      	adds	r3, r2, r3
    226e:	6878      	ldr	r0, [r7, #4]
    2270:	4619      	mov	r1, r3
    2272:	68ba      	ldr	r2, [r7, #8]
    2274:	f000 fc34 	bl	2ae0 <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    2278:	68fb      	ldr	r3, [r7, #12]
    227a:	2b00      	cmp	r3, #0
    227c:	d1dc      	bne.n	2238 <vTaskGetRunTimeStats+0x4c>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    227e:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <vTaskGetRunTimeStats+0x104>)
    2280:	681b      	ldr	r3, [r3, #0]
    2282:	681b      	ldr	r3, [r3, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	d006      	beq.n	2296 <vTaskGetRunTimeStats+0xaa>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime );
    2288:	4b19      	ldr	r3, [pc, #100]	; (22f0 <vTaskGetRunTimeStats+0x104>)
    228a:	681b      	ldr	r3, [r3, #0]
    228c:	6878      	ldr	r0, [r7, #4]
    228e:	4619      	mov	r1, r3
    2290:	68ba      	ldr	r2, [r7, #8]
    2292:	f000 fc25 	bl	2ae0 <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    2296:	4b17      	ldr	r3, [pc, #92]	; (22f4 <vTaskGetRunTimeStats+0x108>)
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	2b00      	cmp	r3, #0
    229e:	d006      	beq.n	22ae <vTaskGetRunTimeStats+0xc2>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime );
    22a0:	4b14      	ldr	r3, [pc, #80]	; (22f4 <vTaskGetRunTimeStats+0x108>)
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	6878      	ldr	r0, [r7, #4]
    22a6:	4619      	mov	r1, r3
    22a8:	68ba      	ldr	r2, [r7, #8]
    22aa:	f000 fc19 	bl	2ae0 <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    22ae:	4b12      	ldr	r3, [pc, #72]	; (22f8 <vTaskGetRunTimeStats+0x10c>)
    22b0:	681b      	ldr	r3, [r3, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d004      	beq.n	22c0 <vTaskGetRunTimeStats+0xd4>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime );
    22b6:	6878      	ldr	r0, [r7, #4]
    22b8:	490f      	ldr	r1, [pc, #60]	; (22f8 <vTaskGetRunTimeStats+0x10c>)
    22ba:	68ba      	ldr	r2, [r7, #8]
    22bc:	f000 fc10 	bl	2ae0 <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    22c0:	4b0e      	ldr	r3, [pc, #56]	; (22fc <vTaskGetRunTimeStats+0x110>)
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	2b00      	cmp	r3, #0
    22c6:	d004      	beq.n	22d2 <vTaskGetRunTimeStats+0xe6>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
    22c8:	6878      	ldr	r0, [r7, #4]
    22ca:	490c      	ldr	r1, [pc, #48]	; (22fc <vTaskGetRunTimeStats+0x110>)
    22cc:	68ba      	ldr	r2, [r7, #8]
    22ce:	f000 fc07 	bl	2ae0 <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    22d2:	f7ff fe49 	bl	1f68 <xTaskResumeAll>
	}
    22d6:	f107 0714 	add.w	r7, r7, #20
    22da:	46bd      	mov	sp, r7
    22dc:	bd90      	pop	{r4, r7, pc}
    22de:	bf00      	nop
    22e0:	51eb851f 	.word	0x51eb851f
    22e4:	0000a318 	.word	0x0000a318
    22e8:	10004d10 	.word	0x10004d10
    22ec:	10004c34 	.word	0x10004c34
    22f0:	10004cc0 	.word	0x10004cc0
    22f4:	10004cc4 	.word	0x10004cc4
    22f8:	10004cdc 	.word	0x10004cdc
    22fc:	10004cf4 	.word	0x10004cf4

00002300 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2300:	b580      	push	{r7, lr}
    2302:	b084      	sub	sp, #16
    2304:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2306:	4b45      	ldr	r3, [pc, #276]	; (241c <vTaskIncrementTick+0x11c>)
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	d17a      	bne.n	2404 <vTaskIncrementTick+0x104>
	{
		++xTickCount;
    230e:	4b44      	ldr	r3, [pc, #272]	; (2420 <vTaskIncrementTick+0x120>)
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	f103 0201 	add.w	r2, r3, #1
    2316:	4b42      	ldr	r3, [pc, #264]	; (2420 <vTaskIncrementTick+0x120>)
    2318:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    231a:	4b41      	ldr	r3, [pc, #260]	; (2420 <vTaskIncrementTick+0x120>)
    231c:	681b      	ldr	r3, [r3, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d122      	bne.n	2368 <vTaskIncrementTick+0x68>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2322:	4b40      	ldr	r3, [pc, #256]	; (2424 <vTaskIncrementTick+0x124>)
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2328:	4b3f      	ldr	r3, [pc, #252]	; (2428 <vTaskIncrementTick+0x128>)
    232a:	681a      	ldr	r2, [r3, #0]
    232c:	4b3d      	ldr	r3, [pc, #244]	; (2424 <vTaskIncrementTick+0x124>)
    232e:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    2330:	4b3d      	ldr	r3, [pc, #244]	; (2428 <vTaskIncrementTick+0x128>)
    2332:	68fa      	ldr	r2, [r7, #12]
    2334:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    2336:	4b3d      	ldr	r3, [pc, #244]	; (242c <vTaskIncrementTick+0x12c>)
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	f103 0201 	add.w	r2, r3, #1
    233e:	4b3b      	ldr	r3, [pc, #236]	; (242c <vTaskIncrementTick+0x12c>)
    2340:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2342:	4b38      	ldr	r3, [pc, #224]	; (2424 <vTaskIncrementTick+0x124>)
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	2b00      	cmp	r3, #0
    234a:	d104      	bne.n	2356 <vTaskIncrementTick+0x56>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    234c:	4b38      	ldr	r3, [pc, #224]	; (2430 <vTaskIncrementTick+0x130>)
    234e:	f04f 32ff 	mov.w	r2, #4294967295
    2352:	601a      	str	r2, [r3, #0]
    2354:	e008      	b.n	2368 <vTaskIncrementTick+0x68>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2356:	4b33      	ldr	r3, [pc, #204]	; (2424 <vTaskIncrementTick+0x124>)
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	68db      	ldr	r3, [r3, #12]
    235c:	68db      	ldr	r3, [r3, #12]
    235e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2360:	68bb      	ldr	r3, [r7, #8]
    2362:	685a      	ldr	r2, [r3, #4]
    2364:	4b32      	ldr	r3, [pc, #200]	; (2430 <vTaskIncrementTick+0x130>)
    2366:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2368:	4b2d      	ldr	r3, [pc, #180]	; (2420 <vTaskIncrementTick+0x120>)
    236a:	681a      	ldr	r2, [r3, #0]
    236c:	4b30      	ldr	r3, [pc, #192]	; (2430 <vTaskIncrementTick+0x130>)
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	429a      	cmp	r2, r3
    2372:	d34d      	bcc.n	2410 <vTaskIncrementTick+0x110>
    2374:	4b2b      	ldr	r3, [pc, #172]	; (2424 <vTaskIncrementTick+0x124>)
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	2b00      	cmp	r3, #0
    237c:	d104      	bne.n	2388 <vTaskIncrementTick+0x88>
    237e:	4b2c      	ldr	r3, [pc, #176]	; (2430 <vTaskIncrementTick+0x130>)
    2380:	f04f 32ff 	mov.w	r2, #4294967295
    2384:	601a      	str	r2, [r3, #0]
    2386:	e043      	b.n	2410 <vTaskIncrementTick+0x110>
    2388:	4b26      	ldr	r3, [pc, #152]	; (2424 <vTaskIncrementTick+0x124>)
    238a:	681b      	ldr	r3, [r3, #0]
    238c:	68db      	ldr	r3, [r3, #12]
    238e:	68db      	ldr	r3, [r3, #12]
    2390:	60bb      	str	r3, [r7, #8]
    2392:	68bb      	ldr	r3, [r7, #8]
    2394:	685b      	ldr	r3, [r3, #4]
    2396:	607b      	str	r3, [r7, #4]
    2398:	4b21      	ldr	r3, [pc, #132]	; (2420 <vTaskIncrementTick+0x120>)
    239a:	681a      	ldr	r2, [r3, #0]
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	429a      	cmp	r2, r3
    23a0:	d203      	bcs.n	23aa <vTaskIncrementTick+0xaa>
    23a2:	4b23      	ldr	r3, [pc, #140]	; (2430 <vTaskIncrementTick+0x130>)
    23a4:	687a      	ldr	r2, [r7, #4]
    23a6:	601a      	str	r2, [r3, #0]
    23a8:	e032      	b.n	2410 <vTaskIncrementTick+0x110>
    23aa:	68bb      	ldr	r3, [r7, #8]
    23ac:	f103 0304 	add.w	r3, r3, #4
    23b0:	4618      	mov	r0, r3
    23b2:	f7fe fd2b 	bl	e0c <vListRemove>
    23b6:	68bb      	ldr	r3, [r7, #8]
    23b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23ba:	2b00      	cmp	r3, #0
    23bc:	d005      	beq.n	23ca <vTaskIncrementTick+0xca>
    23be:	68bb      	ldr	r3, [r7, #8]
    23c0:	f103 0318 	add.w	r3, r3, #24
    23c4:	4618      	mov	r0, r3
    23c6:	f7fe fd21 	bl	e0c <vListRemove>
    23ca:	68bb      	ldr	r3, [r7, #8]
    23cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23ce:	4b19      	ldr	r3, [pc, #100]	; (2434 <vTaskIncrementTick+0x134>)
    23d0:	681b      	ldr	r3, [r3, #0]
    23d2:	429a      	cmp	r2, r3
    23d4:	d903      	bls.n	23de <vTaskIncrementTick+0xde>
    23d6:	68bb      	ldr	r3, [r7, #8]
    23d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23da:	4b16      	ldr	r3, [pc, #88]	; (2434 <vTaskIncrementTick+0x134>)
    23dc:	601a      	str	r2, [r3, #0]
    23de:	68bb      	ldr	r3, [r7, #8]
    23e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23e2:	4613      	mov	r3, r2
    23e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    23e8:	189b      	adds	r3, r3, r2
    23ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    23ee:	461a      	mov	r2, r3
    23f0:	4b11      	ldr	r3, [pc, #68]	; (2438 <vTaskIncrementTick+0x138>)
    23f2:	18d2      	adds	r2, r2, r3
    23f4:	68bb      	ldr	r3, [r7, #8]
    23f6:	f103 0304 	add.w	r3, r3, #4
    23fa:	4610      	mov	r0, r2
    23fc:	4619      	mov	r1, r3
    23fe:	f7fe fca3 	bl	d48 <vListInsertEnd>
    2402:	e7b7      	b.n	2374 <vTaskIncrementTick+0x74>
	}
	else
	{
		++uxMissedTicks;
    2404:	4b0d      	ldr	r3, [pc, #52]	; (243c <vTaskIncrementTick+0x13c>)
    2406:	681b      	ldr	r3, [r3, #0]
    2408:	f103 0201 	add.w	r2, r3, #1
    240c:	4b0b      	ldr	r3, [pc, #44]	; (243c <vTaskIncrementTick+0x13c>)
    240e:	601a      	str	r2, [r3, #0]

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    2410:	4b0a      	ldr	r3, [pc, #40]	; (243c <vTaskIncrementTick+0x13c>)
    2412:	681b      	ldr	r3, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2414:	f107 0710 	add.w	r7, r7, #16
    2418:	46bd      	mov	sp, r7
    241a:	bd80      	pop	{r7, pc}
    241c:	10004d1c 	.word	0x10004d1c
    2420:	10004d0c 	.word	0x10004d0c
    2424:	10004cc0 	.word	0x10004cc0
    2428:	10004cc4 	.word	0x10004cc4
    242c:	10004d28 	.word	0x10004d28
    2430:	10000008 	.word	0x10000008
    2434:	10004d14 	.word	0x10004d14
    2438:	10004c34 	.word	0x10004c34
    243c:	10004d20 	.word	0x10004d20

00002440 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2446:	4b40      	ldr	r3, [pc, #256]	; (2548 <vTaskSwitchContext+0x108>)
    2448:	681b      	ldr	r3, [r3, #0]
    244a:	2b00      	cmp	r3, #0
    244c:	d004      	beq.n	2458 <vTaskSwitchContext+0x18>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    244e:	4b3f      	ldr	r3, [pc, #252]	; (254c <vTaskSwitchContext+0x10c>)
    2450:	f04f 0201 	mov.w	r2, #1
    2454:	601a      	str	r2, [r3, #0]
    2456:	e073      	b.n	2540 <vTaskSwitchContext+0x100>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
    2458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    245c:	689b      	ldr	r3, [r3, #8]
    245e:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
    2460:	4b3b      	ldr	r3, [pc, #236]	; (2550 <vTaskSwitchContext+0x110>)
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    2466:	4a3b      	ldr	r2, [pc, #236]	; (2554 <vTaskSwitchContext+0x114>)
    2468:	6812      	ldr	r2, [r2, #0]
    246a:	6878      	ldr	r0, [r7, #4]
    246c:	1a82      	subs	r2, r0, r2
    246e:	188a      	adds	r2, r1, r2
    2470:	64da      	str	r2, [r3, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
    2472:	4b38      	ldr	r3, [pc, #224]	; (2554 <vTaskSwitchContext+0x114>)
    2474:	687a      	ldr	r2, [r7, #4]
    2476:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    2478:	4b35      	ldr	r3, [pc, #212]	; (2550 <vTaskSwitchContext+0x110>)
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	681a      	ldr	r2, [r3, #0]
    247e:	4b34      	ldr	r3, [pc, #208]	; (2550 <vTaskSwitchContext+0x110>)
    2480:	681b      	ldr	r3, [r3, #0]
    2482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2484:	429a      	cmp	r2, r3
    2486:	d80a      	bhi.n	249e <vTaskSwitchContext+0x5e>
    2488:	4b31      	ldr	r3, [pc, #196]	; (2550 <vTaskSwitchContext+0x110>)
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	461a      	mov	r2, r3
    248e:	4b30      	ldr	r3, [pc, #192]	; (2550 <vTaskSwitchContext+0x110>)
    2490:	681b      	ldr	r3, [r3, #0]
    2492:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2496:	4610      	mov	r0, r2
    2498:	4619      	mov	r1, r3
    249a:	f7fd ff81 	bl	3a0 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    249e:	4b2c      	ldr	r3, [pc, #176]	; (2550 <vTaskSwitchContext+0x110>)
    24a0:	681b      	ldr	r3, [r3, #0]
    24a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24a4:	4618      	mov	r0, r3
    24a6:	492c      	ldr	r1, [pc, #176]	; (2558 <vTaskSwitchContext+0x118>)
    24a8:	f04f 0214 	mov.w	r2, #20
    24ac:	f007 fd04 	bl	9eb8 <memcmp>
    24b0:	4603      	mov	r3, r0
    24b2:	2b00      	cmp	r3, #0
    24b4:	d012      	beq.n	24dc <vTaskSwitchContext+0x9c>
    24b6:	4b26      	ldr	r3, [pc, #152]	; (2550 <vTaskSwitchContext+0x110>)
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	461a      	mov	r2, r3
    24bc:	4b24      	ldr	r3, [pc, #144]	; (2550 <vTaskSwitchContext+0x110>)
    24be:	681b      	ldr	r3, [r3, #0]
    24c0:	f103 0334 	add.w	r3, r3, #52	; 0x34
    24c4:	4610      	mov	r0, r2
    24c6:	4619      	mov	r1, r3
    24c8:	f7fd ff6a 	bl	3a0 <vApplicationStackOverflowHook>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    24cc:	e007      	b.n	24de <vTaskSwitchContext+0x9e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    24ce:	4b23      	ldr	r3, [pc, #140]	; (255c <vTaskSwitchContext+0x11c>)
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	f103 32ff 	add.w	r2, r3, #4294967295
    24d6:	4b21      	ldr	r3, [pc, #132]	; (255c <vTaskSwitchContext+0x11c>)
    24d8:	601a      	str	r2, [r3, #0]
    24da:	e000      	b.n	24de <vTaskSwitchContext+0x9e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    24dc:	bf00      	nop
    24de:	4b1f      	ldr	r3, [pc, #124]	; (255c <vTaskSwitchContext+0x11c>)
    24e0:	681a      	ldr	r2, [r3, #0]
    24e2:	4613      	mov	r3, r2
    24e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    24e8:	189b      	adds	r3, r3, r2
    24ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    24ee:	461a      	mov	r2, r3
    24f0:	4b1b      	ldr	r3, [pc, #108]	; (2560 <vTaskSwitchContext+0x120>)
    24f2:	18d3      	adds	r3, r2, r3
    24f4:	681b      	ldr	r3, [r3, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d0e9      	beq.n	24ce <vTaskSwitchContext+0x8e>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    24fa:	4b18      	ldr	r3, [pc, #96]	; (255c <vTaskSwitchContext+0x11c>)
    24fc:	681a      	ldr	r2, [r3, #0]
    24fe:	4613      	mov	r3, r2
    2500:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2504:	189b      	adds	r3, r3, r2
    2506:	ea4f 0383 	mov.w	r3, r3, lsl #2
    250a:	461a      	mov	r2, r3
    250c:	4b14      	ldr	r3, [pc, #80]	; (2560 <vTaskSwitchContext+0x120>)
    250e:	18d3      	adds	r3, r2, r3
    2510:	603b      	str	r3, [r7, #0]
    2512:	683b      	ldr	r3, [r7, #0]
    2514:	685b      	ldr	r3, [r3, #4]
    2516:	685a      	ldr	r2, [r3, #4]
    2518:	683b      	ldr	r3, [r7, #0]
    251a:	605a      	str	r2, [r3, #4]
    251c:	683b      	ldr	r3, [r7, #0]
    251e:	685a      	ldr	r2, [r3, #4]
    2520:	683b      	ldr	r3, [r7, #0]
    2522:	f103 0308 	add.w	r3, r3, #8
    2526:	429a      	cmp	r2, r3
    2528:	d104      	bne.n	2534 <vTaskSwitchContext+0xf4>
    252a:	683b      	ldr	r3, [r7, #0]
    252c:	685b      	ldr	r3, [r3, #4]
    252e:	685a      	ldr	r2, [r3, #4]
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	605a      	str	r2, [r3, #4]
    2534:	683b      	ldr	r3, [r7, #0]
    2536:	685b      	ldr	r3, [r3, #4]
    2538:	68db      	ldr	r3, [r3, #12]
    253a:	461a      	mov	r2, r3
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <vTaskSwitchContext+0x110>)
    253e:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    2540:	f107 0708 	add.w	r7, r7, #8
    2544:	46bd      	mov	sp, r7
    2546:	bd80      	pop	{r7, pc}
    2548:	10004d1c 	.word	0x10004d1c
    254c:	10004d24 	.word	0x10004d24
    2550:	10004c30 	.word	0x10004c30
    2554:	10004d64 	.word	0x10004d64
    2558:	0000a360 	.word	0x0000a360
    255c:	10004d14 	.word	0x10004d14
    2560:	10004c34 	.word	0x10004c34

00002564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2564:	b580      	push	{r7, lr}
    2566:	b084      	sub	sp, #16
    2568:	af00      	add	r7, sp, #0
    256a:	6078      	str	r0, [r7, #4]
    256c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    256e:	4b14      	ldr	r3, [pc, #80]	; (25c0 <vTaskPlaceOnEventList+0x5c>)
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	f103 0318 	add.w	r3, r3, #24
    2576:	6878      	ldr	r0, [r7, #4]
    2578:	4619      	mov	r1, r3
    257a:	f7fe fc0d 	bl	d98 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    257e:	4b10      	ldr	r3, [pc, #64]	; (25c0 <vTaskPlaceOnEventList+0x5c>)
    2580:	681b      	ldr	r3, [r3, #0]
    2582:	f103 0304 	add.w	r3, r3, #4
    2586:	4618      	mov	r0, r3
    2588:	f7fe fc40 	bl	e0c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    258c:	683b      	ldr	r3, [r7, #0]
    258e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2592:	d108      	bne.n	25a6 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2594:	4b0a      	ldr	r3, [pc, #40]	; (25c0 <vTaskPlaceOnEventList+0x5c>)
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	f103 0304 	add.w	r3, r3, #4
    259c:	4809      	ldr	r0, [pc, #36]	; (25c4 <vTaskPlaceOnEventList+0x60>)
    259e:	4619      	mov	r1, r3
    25a0:	f7fe fbd2 	bl	d48 <vListInsertEnd>
    25a4:	e007      	b.n	25b6 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    25a6:	4b08      	ldr	r3, [pc, #32]	; (25c8 <vTaskPlaceOnEventList+0x64>)
    25a8:	681a      	ldr	r2, [r3, #0]
    25aa:	683b      	ldr	r3, [r7, #0]
    25ac:	18d3      	adds	r3, r2, r3
    25ae:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    25b0:	68f8      	ldr	r0, [r7, #12]
    25b2:	f000 f9c5 	bl	2940 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    25b6:	f107 0710 	add.w	r7, r7, #16
    25ba:	46bd      	mov	sp, r7
    25bc:	bd80      	pop	{r7, pc}
    25be:	bf00      	nop
    25c0:	10004c30 	.word	0x10004c30
    25c4:	10004cf4 	.word	0x10004cf4
    25c8:	10004d0c 	.word	0x10004d0c

000025cc <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    25cc:	b580      	push	{r7, lr}
    25ce:	b084      	sub	sp, #16
    25d0:	af00      	add	r7, sp, #0
    25d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	68db      	ldr	r3, [r3, #12]
    25d8:	68db      	ldr	r3, [r3, #12]
    25da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    25dc:	68bb      	ldr	r3, [r7, #8]
    25de:	f103 0318 	add.w	r3, r3, #24
    25e2:	4618      	mov	r0, r3
    25e4:	f7fe fc12 	bl	e0c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    25e8:	4b20      	ldr	r3, [pc, #128]	; (266c <xTaskRemoveFromEventList+0xa0>)
    25ea:	681b      	ldr	r3, [r3, #0]
    25ec:	2b00      	cmp	r3, #0
    25ee:	d122      	bne.n	2636 <xTaskRemoveFromEventList+0x6a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    25f0:	68bb      	ldr	r3, [r7, #8]
    25f2:	f103 0304 	add.w	r3, r3, #4
    25f6:	4618      	mov	r0, r3
    25f8:	f7fe fc08 	bl	e0c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    25fc:	68bb      	ldr	r3, [r7, #8]
    25fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2600:	4b1b      	ldr	r3, [pc, #108]	; (2670 <xTaskRemoveFromEventList+0xa4>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	429a      	cmp	r2, r3
    2606:	d903      	bls.n	2610 <xTaskRemoveFromEventList+0x44>
    2608:	68bb      	ldr	r3, [r7, #8]
    260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    260c:	4b18      	ldr	r3, [pc, #96]	; (2670 <xTaskRemoveFromEventList+0xa4>)
    260e:	601a      	str	r2, [r3, #0]
    2610:	68bb      	ldr	r3, [r7, #8]
    2612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2614:	4613      	mov	r3, r2
    2616:	ea4f 0383 	mov.w	r3, r3, lsl #2
    261a:	189b      	adds	r3, r3, r2
    261c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2620:	461a      	mov	r2, r3
    2622:	4b14      	ldr	r3, [pc, #80]	; (2674 <xTaskRemoveFromEventList+0xa8>)
    2624:	18d2      	adds	r2, r2, r3
    2626:	68bb      	ldr	r3, [r7, #8]
    2628:	f103 0304 	add.w	r3, r3, #4
    262c:	4610      	mov	r0, r2
    262e:	4619      	mov	r1, r3
    2630:	f7fe fb8a 	bl	d48 <vListInsertEnd>
    2634:	e006      	b.n	2644 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2636:	68bb      	ldr	r3, [r7, #8]
    2638:	f103 0318 	add.w	r3, r3, #24
    263c:	480e      	ldr	r0, [pc, #56]	; (2678 <xTaskRemoveFromEventList+0xac>)
    263e:	4619      	mov	r1, r3
    2640:	f7fe fb82 	bl	d48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2644:	68bb      	ldr	r3, [r7, #8]
    2646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2648:	4b0c      	ldr	r3, [pc, #48]	; (267c <xTaskRemoveFromEventList+0xb0>)
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    264e:	429a      	cmp	r2, r3
    2650:	d303      	bcc.n	265a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2652:	f04f 0301 	mov.w	r3, #1
    2656:	60fb      	str	r3, [r7, #12]
    2658:	e002      	b.n	2660 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    265a:	f04f 0300 	mov.w	r3, #0
    265e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    2660:	68fb      	ldr	r3, [r7, #12]
}
    2662:	4618      	mov	r0, r3
    2664:	f107 0710 	add.w	r7, r7, #16
    2668:	46bd      	mov	sp, r7
    266a:	bd80      	pop	{r7, pc}
    266c:	10004d1c 	.word	0x10004d1c
    2670:	10004d14 	.word	0x10004d14
    2674:	10004c34 	.word	0x10004c34
    2678:	10004cc8 	.word	0x10004cc8
    267c:	10004c30 	.word	0x10004c30

00002680 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2680:	b480      	push	{r7}
    2682:	b083      	sub	sp, #12
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2688:	4b06      	ldr	r3, [pc, #24]	; (26a4 <vTaskSetTimeOutState+0x24>)
    268a:	681a      	ldr	r2, [r3, #0]
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2690:	4b05      	ldr	r3, [pc, #20]	; (26a8 <vTaskSetTimeOutState+0x28>)
    2692:	681a      	ldr	r2, [r3, #0]
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	605a      	str	r2, [r3, #4]
}
    2698:	f107 070c 	add.w	r7, r7, #12
    269c:	46bd      	mov	sp, r7
    269e:	bc80      	pop	{r7}
    26a0:	4770      	bx	lr
    26a2:	bf00      	nop
    26a4:	10004d28 	.word	0x10004d28
    26a8:	10004d0c 	.word	0x10004d0c

000026ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    26ac:	b580      	push	{r7, lr}
    26ae:	b084      	sub	sp, #16
    26b0:	af00      	add	r7, sp, #0
    26b2:	6078      	str	r0, [r7, #4]
    26b4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    26b6:	f7fe faa1 	bl	bfc <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	681b      	ldr	r3, [r3, #0]
    26be:	f1b3 3fff 	cmp.w	r3, #4294967295
    26c2:	d103      	bne.n	26cc <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    26c4:	f04f 0300 	mov.w	r3, #0
    26c8:	60fb      	str	r3, [r7, #12]
    26ca:	e02c      	b.n	2726 <xTaskCheckForTimeOut+0x7a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	681a      	ldr	r2, [r3, #0]
    26d0:	4b19      	ldr	r3, [pc, #100]	; (2738 <xTaskCheckForTimeOut+0x8c>)
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	429a      	cmp	r2, r3
    26d6:	d009      	beq.n	26ec <xTaskCheckForTimeOut+0x40>
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	685a      	ldr	r2, [r3, #4]
    26dc:	4b17      	ldr	r3, [pc, #92]	; (273c <xTaskCheckForTimeOut+0x90>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	429a      	cmp	r2, r3
    26e2:	d803      	bhi.n	26ec <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    26e4:	f04f 0301 	mov.w	r3, #1
    26e8:	60fb      	str	r3, [r7, #12]
    26ea:	e01c      	b.n	2726 <xTaskCheckForTimeOut+0x7a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    26ec:	4b13      	ldr	r3, [pc, #76]	; (273c <xTaskCheckForTimeOut+0x90>)
    26ee:	681a      	ldr	r2, [r3, #0]
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	685b      	ldr	r3, [r3, #4]
    26f4:	1ad2      	subs	r2, r2, r3
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	429a      	cmp	r2, r3
    26fc:	d210      	bcs.n	2720 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	681a      	ldr	r2, [r3, #0]
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	6859      	ldr	r1, [r3, #4]
    2706:	4b0d      	ldr	r3, [pc, #52]	; (273c <xTaskCheckForTimeOut+0x90>)
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	1acb      	subs	r3, r1, r3
    270c:	18d2      	adds	r2, r2, r3
    270e:	683b      	ldr	r3, [r7, #0]
    2710:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2712:	6878      	ldr	r0, [r7, #4]
    2714:	f7ff ffb4 	bl	2680 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2718:	f04f 0300 	mov.w	r3, #0
    271c:	60fb      	str	r3, [r7, #12]
    271e:	e002      	b.n	2726 <xTaskCheckForTimeOut+0x7a>
		}
		else
		{
			xReturn = pdTRUE;
    2720:	f04f 0301 	mov.w	r3, #1
    2724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2726:	f7fe fa7b 	bl	c20 <vPortExitCritical>

	return xReturn;
    272a:	68fb      	ldr	r3, [r7, #12]
}
    272c:	4618      	mov	r0, r3
    272e:	f107 0710 	add.w	r7, r7, #16
    2732:	46bd      	mov	sp, r7
    2734:	bd80      	pop	{r7, pc}
    2736:	bf00      	nop
    2738:	10004d28 	.word	0x10004d28
    273c:	10004d0c 	.word	0x10004d0c

00002740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2740:	b480      	push	{r7}
    2742:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    2744:	4b03      	ldr	r3, [pc, #12]	; (2754 <vTaskMissedYield+0x14>)
    2746:	f04f 0201 	mov.w	r2, #1
    274a:	601a      	str	r2, [r3, #0]
}
    274c:	46bd      	mov	sp, r7
    274e:	bc80      	pop	{r7}
    2750:	4770      	bx	lr
    2752:	bf00      	nop
    2754:	10004d24 	.word	0x10004d24

00002758 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
    2758:	b480      	push	{r7}
    275a:	b085      	sub	sp, #20
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2b00      	cmp	r3, #0
    2764:	d005      	beq.n	2772 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    276a:	68bb      	ldr	r3, [r7, #8]
    276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    276e:	60fb      	str	r3, [r7, #12]
    2770:	e002      	b.n	2778 <uxTaskGetTaskNumber+0x20>
		}
		else
		{
			uxReturn = 0U;
    2772:	f04f 0300 	mov.w	r3, #0
    2776:	60fb      	str	r3, [r7, #12]
		}
		
		return uxReturn;
    2778:	68fb      	ldr	r3, [r7, #12]
	}
    277a:	4618      	mov	r0, r3
    277c:	f107 0714 	add.w	r7, r7, #20
    2780:	46bd      	mov	sp, r7
    2782:	bc80      	pop	{r7}
    2784:	4770      	bx	lr
    2786:	bf00      	nop

00002788 <vTaskSetTaskNumber>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
	{
    2788:	b480      	push	{r7}
    278a:	b085      	sub	sp, #20
    278c:	af00      	add	r7, sp, #0
    278e:	6078      	str	r0, [r7, #4]
    2790:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    2792:	687b      	ldr	r3, [r7, #4]
    2794:	2b00      	cmp	r3, #0
    2796:	d004      	beq.n	27a2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    279c:	68fb      	ldr	r3, [r7, #12]
    279e:	683a      	ldr	r2, [r7, #0]
    27a0:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
    27a2:	f107 0714 	add.w	r7, r7, #20
    27a6:	46bd      	mov	sp, r7
    27a8:	bc80      	pop	{r7}
    27aa:	4770      	bx	lr

000027ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b082      	sub	sp, #8
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    27b4:	f000 f888 	bl	28c8 <prvCheckTasksWaitingTermination>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    27b8:	e7fc      	b.n	27b4 <prvIdleTask+0x8>
    27ba:	bf00      	nop

000027bc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    27bc:	b580      	push	{r7, lr}
    27be:	b084      	sub	sp, #16
    27c0:	af00      	add	r7, sp, #0
    27c2:	60f8      	str	r0, [r7, #12]
    27c4:	60b9      	str	r1, [r7, #8]
    27c6:	607a      	str	r2, [r7, #4]
    27c8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    27ca:	68fb      	ldr	r3, [r7, #12]
    27cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
    27d0:	461a      	mov	r2, r3
    27d2:	68bb      	ldr	r3, [r7, #8]
    27d4:	4610      	mov	r0, r2
    27d6:	4619      	mov	r1, r3
    27d8:	f04f 020c 	mov.w	r2, #12
    27dc:	f007 fd52 	bl	a284 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    27e0:	68fb      	ldr	r3, [r7, #12]
    27e2:	f04f 0200 	mov.w	r2, #0
    27e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	2b04      	cmp	r3, #4
    27ee:	d902      	bls.n	27f6 <prvInitialiseTCBVariables+0x3a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    27f0:	f04f 0304 	mov.w	r3, #4
    27f4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    27f6:	68fb      	ldr	r3, [r7, #12]
    27f8:	687a      	ldr	r2, [r7, #4]
    27fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    27fc:	68fb      	ldr	r3, [r7, #12]
    27fe:	687a      	ldr	r2, [r7, #4]
    2800:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2802:	68fb      	ldr	r3, [r7, #12]
    2804:	f103 0304 	add.w	r3, r3, #4
    2808:	4618      	mov	r0, r3
    280a:	f7fe fa8f 	bl	d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    280e:	68fb      	ldr	r3, [r7, #12]
    2810:	f103 0318 	add.w	r3, r3, #24
    2814:	4618      	mov	r0, r3
    2816:	f7fe fa89 	bl	d2c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    281a:	68fb      	ldr	r3, [r7, #12]
    281c:	68fa      	ldr	r2, [r7, #12]
    281e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	f1c3 0205 	rsb	r2, r3, #5
    2826:	68fb      	ldr	r3, [r7, #12]
    2828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	68fa      	ldr	r2, [r7, #12]
    282e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
    2830:	68fb      	ldr	r3, [r7, #12]
    2832:	f04f 0200 	mov.w	r2, #0
    2836:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2838:	f107 0710 	add.w	r7, r7, #16
    283c:	46bd      	mov	sp, r7
    283e:	bd80      	pop	{r7, pc}

00002840 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2840:	b580      	push	{r7, lr}
    2842:	b082      	sub	sp, #8
    2844:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2846:	f04f 0300 	mov.w	r3, #0
    284a:	607b      	str	r3, [r7, #4]
    284c:	e010      	b.n	2870 <prvInitialiseTaskLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    284e:	687a      	ldr	r2, [r7, #4]
    2850:	4613      	mov	r3, r2
    2852:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2856:	189b      	adds	r3, r3, r2
    2858:	ea4f 0383 	mov.w	r3, r3, lsl #2
    285c:	461a      	mov	r2, r3
    285e:	4b12      	ldr	r3, [pc, #72]	; (28a8 <prvInitialiseTaskLists+0x68>)
    2860:	18d3      	adds	r3, r2, r3
    2862:	4618      	mov	r0, r3
    2864:	f7fe fa3e 	bl	ce4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2868:	687b      	ldr	r3, [r7, #4]
    286a:	f103 0301 	add.w	r3, r3, #1
    286e:	607b      	str	r3, [r7, #4]
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	2b04      	cmp	r3, #4
    2874:	d9eb      	bls.n	284e <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2876:	480d      	ldr	r0, [pc, #52]	; (28ac <prvInitialiseTaskLists+0x6c>)
    2878:	f7fe fa34 	bl	ce4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    287c:	480c      	ldr	r0, [pc, #48]	; (28b0 <prvInitialiseTaskLists+0x70>)
    287e:	f7fe fa31 	bl	ce4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2882:	480c      	ldr	r0, [pc, #48]	; (28b4 <prvInitialiseTaskLists+0x74>)
    2884:	f7fe fa2e 	bl	ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2888:	480b      	ldr	r0, [pc, #44]	; (28b8 <prvInitialiseTaskLists+0x78>)
    288a:	f7fe fa2b 	bl	ce4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    288e:	480b      	ldr	r0, [pc, #44]	; (28bc <prvInitialiseTaskLists+0x7c>)
    2890:	f7fe fa28 	bl	ce4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2894:	4b0a      	ldr	r3, [pc, #40]	; (28c0 <prvInitialiseTaskLists+0x80>)
    2896:	4a05      	ldr	r2, [pc, #20]	; (28ac <prvInitialiseTaskLists+0x6c>)
    2898:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    289a:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <prvInitialiseTaskLists+0x84>)
    289c:	4a04      	ldr	r2, [pc, #16]	; (28b0 <prvInitialiseTaskLists+0x70>)
    289e:	601a      	str	r2, [r3, #0]
}
    28a0:	f107 0708 	add.w	r7, r7, #8
    28a4:	46bd      	mov	sp, r7
    28a6:	bd80      	pop	{r7, pc}
    28a8:	10004c34 	.word	0x10004c34
    28ac:	10004c98 	.word	0x10004c98
    28b0:	10004cac 	.word	0x10004cac
    28b4:	10004cc8 	.word	0x10004cc8
    28b8:	10004cdc 	.word	0x10004cdc
    28bc:	10004cf4 	.word	0x10004cf4
    28c0:	10004cc0 	.word	0x10004cc0
    28c4:	10004cc4 	.word	0x10004cc4

000028c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    28c8:	b580      	push	{r7, lr}
    28ca:	b082      	sub	sp, #8
    28cc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    28ce:	4b19      	ldr	r3, [pc, #100]	; (2934 <prvCheckTasksWaitingTermination+0x6c>)
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d02a      	beq.n	292c <prvCheckTasksWaitingTermination+0x64>
		{
			vTaskSuspendAll();
    28d6:	f7ff fb39 	bl	1f4c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    28da:	4b17      	ldr	r3, [pc, #92]	; (2938 <prvCheckTasksWaitingTermination+0x70>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	bf14      	ite	ne
    28e2:	2300      	movne	r3, #0
    28e4:	2301      	moveq	r3, #1
    28e6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    28e8:	f7ff fb3e 	bl	1f68 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d11c      	bne.n	292c <prvCheckTasksWaitingTermination+0x64>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    28f2:	f7fe f983 	bl	bfc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    28f6:	4b10      	ldr	r3, [pc, #64]	; (2938 <prvCheckTasksWaitingTermination+0x70>)
    28f8:	68db      	ldr	r3, [r3, #12]
    28fa:	68db      	ldr	r3, [r3, #12]
    28fc:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    28fe:	683b      	ldr	r3, [r7, #0]
    2900:	f103 0304 	add.w	r3, r3, #4
    2904:	4618      	mov	r0, r3
    2906:	f7fe fa81 	bl	e0c <vListRemove>
					--uxCurrentNumberOfTasks;
    290a:	4b0c      	ldr	r3, [pc, #48]	; (293c <prvCheckTasksWaitingTermination+0x74>)
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	f103 32ff 	add.w	r2, r3, #4294967295
    2912:	4b0a      	ldr	r3, [pc, #40]	; (293c <prvCheckTasksWaitingTermination+0x74>)
    2914:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    2916:	4b07      	ldr	r3, [pc, #28]	; (2934 <prvCheckTasksWaitingTermination+0x6c>)
    2918:	681b      	ldr	r3, [r3, #0]
    291a:	f103 32ff 	add.w	r2, r3, #4294967295
    291e:	4b05      	ldr	r3, [pc, #20]	; (2934 <prvCheckTasksWaitingTermination+0x6c>)
    2920:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    2922:	f7fe f97d 	bl	c20 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    2926:	6838      	ldr	r0, [r7, #0]
    2928:	f000 f98a 	bl	2c40 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    292c:	f107 0708 	add.w	r7, r7, #8
    2930:	46bd      	mov	sp, r7
    2932:	bd80      	pop	{r7, pc}
    2934:	10004cf0 	.word	0x10004cf0
    2938:	10004cdc 	.word	0x10004cdc
    293c:	10004d08 	.word	0x10004d08

00002940 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2940:	b580      	push	{r7, lr}
    2942:	b082      	sub	sp, #8
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2948:	4b14      	ldr	r3, [pc, #80]	; (299c <prvAddCurrentTaskToDelayedList+0x5c>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	687a      	ldr	r2, [r7, #4]
    294e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    2950:	4b13      	ldr	r3, [pc, #76]	; (29a0 <prvAddCurrentTaskToDelayedList+0x60>)
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	687a      	ldr	r2, [r7, #4]
    2956:	429a      	cmp	r2, r3
    2958:	d20a      	bcs.n	2970 <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    295a:	4b12      	ldr	r3, [pc, #72]	; (29a4 <prvAddCurrentTaskToDelayedList+0x64>)
    295c:	681a      	ldr	r2, [r3, #0]
    295e:	4b0f      	ldr	r3, [pc, #60]	; (299c <prvAddCurrentTaskToDelayedList+0x5c>)
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	f103 0304 	add.w	r3, r3, #4
    2966:	4610      	mov	r0, r2
    2968:	4619      	mov	r1, r3
    296a:	f7fe fa15 	bl	d98 <vListInsert>
    296e:	e011      	b.n	2994 <prvAddCurrentTaskToDelayedList+0x54>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2970:	4b0d      	ldr	r3, [pc, #52]	; (29a8 <prvAddCurrentTaskToDelayedList+0x68>)
    2972:	681a      	ldr	r2, [r3, #0]
    2974:	4b09      	ldr	r3, [pc, #36]	; (299c <prvAddCurrentTaskToDelayedList+0x5c>)
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	f103 0304 	add.w	r3, r3, #4
    297c:	4610      	mov	r0, r2
    297e:	4619      	mov	r1, r3
    2980:	f7fe fa0a 	bl	d98 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2984:	4b09      	ldr	r3, [pc, #36]	; (29ac <prvAddCurrentTaskToDelayedList+0x6c>)
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	687a      	ldr	r2, [r7, #4]
    298a:	429a      	cmp	r2, r3
    298c:	d202      	bcs.n	2994 <prvAddCurrentTaskToDelayedList+0x54>
		{
			xNextTaskUnblockTime = xTimeToWake;
    298e:	4b07      	ldr	r3, [pc, #28]	; (29ac <prvAddCurrentTaskToDelayedList+0x6c>)
    2990:	687a      	ldr	r2, [r7, #4]
    2992:	601a      	str	r2, [r3, #0]
		}
	}
}
    2994:	f107 0708 	add.w	r7, r7, #8
    2998:	46bd      	mov	sp, r7
    299a:	bd80      	pop	{r7, pc}
    299c:	10004c30 	.word	0x10004c30
    29a0:	10004d0c 	.word	0x10004d0c
    29a4:	10004cc4 	.word	0x10004cc4
    29a8:	10004cc0 	.word	0x10004cc0
    29ac:	10000008 	.word	0x10000008

000029b0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b084      	sub	sp, #16
    29b4:	af00      	add	r7, sp, #0
    29b6:	4603      	mov	r3, r0
    29b8:	6039      	str	r1, [r7, #0]
    29ba:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    29bc:	f04f 0050 	mov.w	r0, #80	; 0x50
    29c0:	f7fd ffa8 	bl	914 <pvPortMalloc>
    29c4:	4603      	mov	r3, r0
    29c6:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    29c8:	68fb      	ldr	r3, [r7, #12]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d023      	beq.n	2a16 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	2b00      	cmp	r3, #0
    29d2:	d107      	bne.n	29e4 <prvAllocateTCBAndStack+0x34>
    29d4:	88fb      	ldrh	r3, [r7, #6]
    29d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29da:	4618      	mov	r0, r3
    29dc:	f7fd ff9a 	bl	914 <pvPortMalloc>
    29e0:	4603      	mov	r3, r0
    29e2:	e000      	b.n	29e6 <prvAllocateTCBAndStack+0x36>
    29e4:	683b      	ldr	r3, [r7, #0]
    29e6:	68fa      	ldr	r2, [r7, #12]
    29e8:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    29ea:	68fb      	ldr	r3, [r7, #12]
    29ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    29ee:	2b00      	cmp	r3, #0
    29f0:	d106      	bne.n	2a00 <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    29f2:	68f8      	ldr	r0, [r7, #12]
    29f4:	f7fe f83c 	bl	a70 <vPortFree>
			pxNewTCB = NULL;
    29f8:	f04f 0300 	mov.w	r3, #0
    29fc:	60fb      	str	r3, [r7, #12]
    29fe:	e00a      	b.n	2a16 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2a00:	68fb      	ldr	r3, [r7, #12]
    2a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a04:	88fb      	ldrh	r3, [r7, #6]
    2a06:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a0a:	4610      	mov	r0, r2
    2a0c:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    2a10:	461a      	mov	r2, r3
    2a12:	f007 fb2b 	bl	a06c <memset>
		}
	}

	return pxNewTCB;
    2a16:	68fb      	ldr	r3, [r7, #12]
}
    2a18:	4618      	mov	r0, r3
    2a1a:	f107 0710 	add.w	r7, r7, #16
    2a1e:	46bd      	mov	sp, r7
    2a20:	bd80      	pop	{r7, pc}
    2a22:	bf00      	nop

00002a24 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    2a24:	b590      	push	{r4, r7, lr}
    2a26:	b08f      	sub	sp, #60	; 0x3c
    2a28:	af04      	add	r7, sp, #16
    2a2a:	60f8      	str	r0, [r7, #12]
    2a2c:	60b9      	str	r1, [r7, #8]
    2a2e:	4613      	mov	r3, r2
    2a30:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ 50 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    2a32:	68bb      	ldr	r3, [r7, #8]
    2a34:	627b      	str	r3, [r7, #36]	; 0x24
    2a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a38:	685b      	ldr	r3, [r3, #4]
    2a3a:	685a      	ldr	r2, [r3, #4]
    2a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a3e:	605a      	str	r2, [r3, #4]
    2a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a42:	685a      	ldr	r2, [r3, #4]
    2a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a46:	f103 0308 	add.w	r3, r3, #8
    2a4a:	429a      	cmp	r2, r3
    2a4c:	d104      	bne.n	2a58 <prvListTaskWithinSingleList+0x34>
    2a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a50:	685b      	ldr	r3, [r3, #4]
    2a52:	685a      	ldr	r2, [r3, #4]
    2a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a56:	605a      	str	r2, [r3, #4]
    2a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a5a:	685b      	ldr	r3, [r3, #4]
    2a5c:	68db      	ldr	r3, [r3, #12]
    2a5e:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    2a60:	68bb      	ldr	r3, [r7, #8]
    2a62:	61fb      	str	r3, [r7, #28]
    2a64:	69fb      	ldr	r3, [r7, #28]
    2a66:	685b      	ldr	r3, [r3, #4]
    2a68:	685a      	ldr	r2, [r3, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	605a      	str	r2, [r3, #4]
    2a6e:	69fb      	ldr	r3, [r7, #28]
    2a70:	685a      	ldr	r2, [r3, #4]
    2a72:	69fb      	ldr	r3, [r7, #28]
    2a74:	f103 0308 	add.w	r3, r3, #8
    2a78:	429a      	cmp	r2, r3
    2a7a:	d104      	bne.n	2a86 <prvListTaskWithinSingleList+0x62>
    2a7c:	69fb      	ldr	r3, [r7, #28]
    2a7e:	685b      	ldr	r3, [r3, #4]
    2a80:	685a      	ldr	r2, [r3, #4]
    2a82:	69fb      	ldr	r3, [r7, #28]
    2a84:	605a      	str	r2, [r3, #4]
    2a86:	69fb      	ldr	r3, [r7, #28]
    2a88:	685b      	ldr	r3, [r3, #4]
    2a8a:	68db      	ldr	r3, [r3, #12]
    2a8c:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    2a8e:	69bb      	ldr	r3, [r7, #24]
    2a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a92:	4618      	mov	r0, r3
    2a94:	f000 f89c 	bl	2bd0 <usTaskCheckFreeStackSpace>
    2a98:	4603      	mov	r3, r0
    2a9a:	82fb      	strh	r3, [r7, #22]
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    2a9c:	69bb      	ldr	r3, [r7, #24]
    2a9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2aa6:	69b9      	ldr	r1, [r7, #24]
    2aa8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    2aaa:	8af8      	ldrh	r0, [r7, #22]
    2aac:	69b9      	ldr	r1, [r7, #24]
    2aae:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2ab0:	9400      	str	r4, [sp, #0]
    2ab2:	9001      	str	r0, [sp, #4]
    2ab4:	9102      	str	r1, [sp, #8]
    2ab6:	4808      	ldr	r0, [pc, #32]	; (2ad8 <prvListTaskWithinSingleList+0xb4>)
    2ab8:	4908      	ldr	r1, [pc, #32]	; (2adc <prvListTaskWithinSingleList+0xb8>)
    2aba:	f7fd feeb 	bl	894 <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    2abe:	68fb      	ldr	r3, [r7, #12]
    2ac0:	4618      	mov	r0, r3
    2ac2:	4905      	ldr	r1, [pc, #20]	; (2ad8 <prvListTaskWithinSingleList+0xb4>)
    2ac4:	f007 fb2c 	bl	a120 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    2ac8:	69ba      	ldr	r2, [r7, #24]
    2aca:	6a3b      	ldr	r3, [r7, #32]
    2acc:	429a      	cmp	r2, r3
    2ace:	d1c7      	bne.n	2a60 <prvListTaskWithinSingleList+0x3c>
	}
    2ad0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bd90      	pop	{r4, r7, pc}
    2ad8:	10004d68 	.word	0x10004d68
    2adc:	0000a31c 	.word	0x0000a31c

00002ae0 <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b08c      	sub	sp, #48	; 0x30
    2ae4:	af02      	add	r7, sp, #8
    2ae6:	60f8      	str	r0, [r7, #12]
    2ae8:	60b9      	str	r1, [r7, #8]
    2aea:	607a      	str	r2, [r7, #4]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    2aec:	68bb      	ldr	r3, [r7, #8]
    2aee:	627b      	str	r3, [r7, #36]	; 0x24
    2af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2af2:	685b      	ldr	r3, [r3, #4]
    2af4:	685a      	ldr	r2, [r3, #4]
    2af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2af8:	605a      	str	r2, [r3, #4]
    2afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2afc:	685a      	ldr	r2, [r3, #4]
    2afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b00:	f103 0308 	add.w	r3, r3, #8
    2b04:	429a      	cmp	r2, r3
    2b06:	d104      	bne.n	2b12 <prvGenerateRunTimeStatsForTasksInList+0x32>
    2b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b0a:	685b      	ldr	r3, [r3, #4]
    2b0c:	685a      	ldr	r2, [r3, #4]
    2b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b10:	605a      	str	r2, [r3, #4]
    2b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b14:	685b      	ldr	r3, [r3, #4]
    2b16:	68db      	ldr	r3, [r3, #12]
    2b18:	623b      	str	r3, [r7, #32]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    2b1a:	68bb      	ldr	r3, [r7, #8]
    2b1c:	61fb      	str	r3, [r7, #28]
    2b1e:	69fb      	ldr	r3, [r7, #28]
    2b20:	685b      	ldr	r3, [r3, #4]
    2b22:	685a      	ldr	r2, [r3, #4]
    2b24:	69fb      	ldr	r3, [r7, #28]
    2b26:	605a      	str	r2, [r3, #4]
    2b28:	69fb      	ldr	r3, [r7, #28]
    2b2a:	685a      	ldr	r2, [r3, #4]
    2b2c:	69fb      	ldr	r3, [r7, #28]
    2b2e:	f103 0308 	add.w	r3, r3, #8
    2b32:	429a      	cmp	r2, r3
    2b34:	d104      	bne.n	2b40 <prvGenerateRunTimeStatsForTasksInList+0x60>
    2b36:	69fb      	ldr	r3, [r7, #28]
    2b38:	685b      	ldr	r3, [r3, #4]
    2b3a:	685a      	ldr	r2, [r3, #4]
    2b3c:	69fb      	ldr	r3, [r7, #28]
    2b3e:	605a      	str	r2, [r3, #4]
    2b40:	69fb      	ldr	r3, [r7, #28]
    2b42:	685b      	ldr	r3, [r3, #4]
    2b44:	68db      	ldr	r3, [r3, #12]
    2b46:	61bb      	str	r3, [r7, #24]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d02f      	beq.n	2bae <prvGenerateRunTimeStatsForTasksInList+0xce>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
    2b4e:	69bb      	ldr	r3, [r7, #24]
    2b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b52:	2b00      	cmp	r3, #0
    2b54:	d108      	bne.n	2b68 <prvGenerateRunTimeStatsForTasksInList+0x88>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
    2b56:	69bb      	ldr	r3, [r7, #24]
    2b58:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2b5c:	4818      	ldr	r0, [pc, #96]	; (2bc0 <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2b5e:	4919      	ldr	r1, [pc, #100]	; (2bc4 <prvGenerateRunTimeStatsForTasksInList+0xe4>)
    2b60:	461a      	mov	r2, r3
    2b62:	f7fd fe97 	bl	894 <sprintf>
    2b66:	e01d      	b.n	2ba4 <prvGenerateRunTimeStatsForTasksInList+0xc4>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
    2b68:	69bb      	ldr	r3, [r7, #24]
    2b6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	fbb2 f3f3 	udiv	r3, r2, r3
    2b72:	617b      	str	r3, [r7, #20]

					if( ulStatsAsPercentage > 0UL )
    2b74:	697b      	ldr	r3, [r7, #20]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d00b      	beq.n	2b92 <prvGenerateRunTimeStatsForTasksInList+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
    2b7a:	69bb      	ldr	r3, [r7, #24]
    2b7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2b80:	69bb      	ldr	r3, [r7, #24]
    2b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b84:	6979      	ldr	r1, [r7, #20]
    2b86:	9100      	str	r1, [sp, #0]
    2b88:	480d      	ldr	r0, [pc, #52]	; (2bc0 <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2b8a:	490f      	ldr	r1, [pc, #60]	; (2bc8 <prvGenerateRunTimeStatsForTasksInList+0xe8>)
    2b8c:	f7fd fe82 	bl	894 <sprintf>
    2b90:	e008      	b.n	2ba4 <prvGenerateRunTimeStatsForTasksInList+0xc4>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter );
    2b92:	69bb      	ldr	r3, [r7, #24]
    2b94:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2b98:	69bb      	ldr	r3, [r7, #24]
    2b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b9c:	4808      	ldr	r0, [pc, #32]	; (2bc0 <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2b9e:	490b      	ldr	r1, [pc, #44]	; (2bcc <prvGenerateRunTimeStatsForTasksInList+0xec>)
    2ba0:	f7fd fe78 	bl	894 <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
    2ba4:	68fb      	ldr	r3, [r7, #12]
    2ba6:	4618      	mov	r0, r3
    2ba8:	4905      	ldr	r1, [pc, #20]	; (2bc0 <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2baa:	f007 fab9 	bl	a120 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
    2bae:	69ba      	ldr	r2, [r7, #24]
    2bb0:	6a3b      	ldr	r3, [r7, #32]
    2bb2:	429a      	cmp	r2, r3
    2bb4:	d1b1      	bne.n	2b1a <prvGenerateRunTimeStatsForTasksInList+0x3a>
	}
    2bb6:	f107 0728 	add.w	r7, r7, #40	; 0x28
    2bba:	46bd      	mov	sp, r7
    2bbc:	bd80      	pop	{r7, pc}
    2bbe:	bf00      	nop
    2bc0:	10004d30 	.word	0x10004d30
    2bc4:	0000a330 	.word	0x0000a330
    2bc8:	0000a340 	.word	0x0000a340
    2bcc:	0000a350 	.word	0x0000a350

00002bd0 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    2bd0:	b490      	push	{r4, r7}
    2bd2:	b082      	sub	sp, #8
    2bd4:	af00      	add	r7, sp, #0
    2bd6:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
    2bd8:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2bdc:	e006      	b.n	2bec <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	f103 0301 	add.w	r3, r3, #1
    2be4:	607b      	str	r3, [r7, #4]
			usCount++;
    2be6:	f104 0301 	add.w	r3, r4, #1
    2bea:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	2ba5      	cmp	r3, #165	; 0xa5
    2bf2:	d0f4      	beq.n	2bde <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
    2bf4:	ea4f 0394 	mov.w	r3, r4, lsr #2
    2bf8:	b29c      	uxth	r4, r3

		return usCount;
    2bfa:	4623      	mov	r3, r4
	}
    2bfc:	4618      	mov	r0, r3
    2bfe:	f107 0708 	add.w	r7, r7, #8
    2c02:	46bd      	mov	sp, r7
    2c04:	bc90      	pop	{r4, r7}
    2c06:	4770      	bx	lr

00002c08 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b086      	sub	sp, #24
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d102      	bne.n	2c1c <uxTaskGetStackHighWaterMark+0x14>
    2c16:	4b09      	ldr	r3, [pc, #36]	; (2c3c <uxTaskGetStackHighWaterMark+0x34>)
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	e000      	b.n	2c1e <uxTaskGetStackHighWaterMark+0x16>
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    2c20:	697b      	ldr	r3, [r7, #20]
    2c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c24:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    2c26:	6938      	ldr	r0, [r7, #16]
    2c28:	f7ff ffd2 	bl	2bd0 <usTaskCheckFreeStackSpace>
    2c2c:	4603      	mov	r3, r0
    2c2e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    2c30:	68fb      	ldr	r3, [r7, #12]
	}
    2c32:	4618      	mov	r0, r3
    2c34:	f107 0718 	add.w	r7, r7, #24
    2c38:	46bd      	mov	sp, r7
    2c3a:	bd80      	pop	{r7, pc}
    2c3c:	10004c30 	.word	0x10004c30

00002c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2c40:	b580      	push	{r7, lr}
    2c42:	b082      	sub	sp, #8
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c4c:	4618      	mov	r0, r3
    2c4e:	f7fd ff0f 	bl	a70 <vPortFree>
		vPortFree( pxTCB );
    2c52:	6878      	ldr	r0, [r7, #4]
    2c54:	f7fd ff0c 	bl	a70 <vPortFree>
	}
    2c58:	f107 0708 	add.w	r7, r7, #8
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    2c60:	b480      	push	{r7}
    2c62:	b083      	sub	sp, #12
    2c64:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2c66:	4b05      	ldr	r3, [pc, #20]	; (2c7c <xTaskGetCurrentTaskHandle+0x1c>)
    2c68:	681b      	ldr	r3, [r3, #0]
    2c6a:	607b      	str	r3, [r7, #4]

		return xReturn;
    2c6c:	687b      	ldr	r3, [r7, #4]
	}
    2c6e:	4618      	mov	r0, r3
    2c70:	f107 070c 	add.w	r7, r7, #12
    2c74:	46bd      	mov	sp, r7
    2c76:	bc80      	pop	{r7}
    2c78:	4770      	bx	lr
    2c7a:	bf00      	nop
    2c7c:	10004c30 	.word	0x10004c30

00002c80 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    2c80:	b580      	push	{r7, lr}
    2c82:	b084      	sub	sp, #16
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2c8c:	68fb      	ldr	r3, [r7, #12]
    2c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c90:	4b25      	ldr	r3, [pc, #148]	; (2d28 <vTaskPriorityInherit+0xa8>)
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c96:	429a      	cmp	r2, r3
    2c98:	d242      	bcs.n	2d20 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    2c9a:	4b23      	ldr	r3, [pc, #140]	; (2d28 <vTaskPriorityInherit+0xa8>)
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ca0:	f1c3 0205 	rsb	r2, r3, #5
    2ca4:	68fb      	ldr	r3, [r7, #12]
    2ca6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2ca8:	68fb      	ldr	r3, [r7, #12]
    2caa:	6959      	ldr	r1, [r3, #20]
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cb0:	4613      	mov	r3, r2
    2cb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cb6:	189b      	adds	r3, r3, r2
    2cb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cbc:	461a      	mov	r2, r3
    2cbe:	4b1b      	ldr	r3, [pc, #108]	; (2d2c <vTaskPriorityInherit+0xac>)
    2cc0:	18d3      	adds	r3, r2, r3
    2cc2:	4299      	cmp	r1, r3
    2cc4:	d127      	bne.n	2d16 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	f103 0304 	add.w	r3, r3, #4
    2ccc:	4618      	mov	r0, r3
    2cce:	f7fe f89d 	bl	e0c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2cd2:	4b15      	ldr	r3, [pc, #84]	; (2d28 <vTaskPriorityInherit+0xa8>)
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cd8:	68fb      	ldr	r3, [r7, #12]
    2cda:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    2cdc:	68fb      	ldr	r3, [r7, #12]
    2cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ce0:	4b13      	ldr	r3, [pc, #76]	; (2d30 <vTaskPriorityInherit+0xb0>)
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d903      	bls.n	2cf0 <vTaskPriorityInherit+0x70>
    2ce8:	68fb      	ldr	r3, [r7, #12]
    2cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cec:	4b10      	ldr	r3, [pc, #64]	; (2d30 <vTaskPriorityInherit+0xb0>)
    2cee:	601a      	str	r2, [r3, #0]
    2cf0:	68fb      	ldr	r3, [r7, #12]
    2cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cf4:	4613      	mov	r3, r2
    2cf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cfa:	189b      	adds	r3, r3, r2
    2cfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d00:	461a      	mov	r2, r3
    2d02:	4b0a      	ldr	r3, [pc, #40]	; (2d2c <vTaskPriorityInherit+0xac>)
    2d04:	18d2      	adds	r2, r2, r3
    2d06:	68fb      	ldr	r3, [r7, #12]
    2d08:	f103 0304 	add.w	r3, r3, #4
    2d0c:	4610      	mov	r0, r2
    2d0e:	4619      	mov	r1, r3
    2d10:	f7fe f81a 	bl	d48 <vListInsertEnd>
    2d14:	e004      	b.n	2d20 <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2d16:	4b04      	ldr	r3, [pc, #16]	; (2d28 <vTaskPriorityInherit+0xa8>)
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d1c:	68fb      	ldr	r3, [r7, #12]
    2d1e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    2d20:	f107 0710 	add.w	r7, r7, #16
    2d24:	46bd      	mov	sp, r7
    2d26:	bd80      	pop	{r7, pc}
    2d28:	10004c30 	.word	0x10004c30
    2d2c:	10004c34 	.word	0x10004c34
    2d30:	10004d14 	.word	0x10004d14

00002d34 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    2d34:	b580      	push	{r7, lr}
    2d36:	b084      	sub	sp, #16
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    2d3c:	687b      	ldr	r3, [r7, #4]
    2d3e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d031      	beq.n	2daa <vTaskPriorityDisinherit+0x76>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d4e:	429a      	cmp	r2, r3
    2d50:	d02b      	beq.n	2daa <vTaskPriorityDisinherit+0x76>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    2d52:	68fb      	ldr	r3, [r7, #12]
    2d54:	f103 0304 	add.w	r3, r3, #4
    2d58:	4618      	mov	r0, r3
    2d5a:	f7fe f857 	bl	e0c <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2d5e:	68fb      	ldr	r3, [r7, #12]
    2d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2d62:	68fb      	ldr	r3, [r7, #12]
    2d64:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2d66:	68fb      	ldr	r3, [r7, #12]
    2d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d6a:	f1c3 0205 	rsb	r2, r3, #5
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    2d72:	68fb      	ldr	r3, [r7, #12]
    2d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d76:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <vTaskPriorityDisinherit+0x80>)
    2d78:	681b      	ldr	r3, [r3, #0]
    2d7a:	429a      	cmp	r2, r3
    2d7c:	d903      	bls.n	2d86 <vTaskPriorityDisinherit+0x52>
    2d7e:	68fb      	ldr	r3, [r7, #12]
    2d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d82:	4b0c      	ldr	r3, [pc, #48]	; (2db4 <vTaskPriorityDisinherit+0x80>)
    2d84:	601a      	str	r2, [r3, #0]
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d8a:	4613      	mov	r3, r2
    2d8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d90:	189b      	adds	r3, r3, r2
    2d92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d96:	461a      	mov	r2, r3
    2d98:	4b07      	ldr	r3, [pc, #28]	; (2db8 <vTaskPriorityDisinherit+0x84>)
    2d9a:	18d2      	adds	r2, r2, r3
    2d9c:	68fb      	ldr	r3, [r7, #12]
    2d9e:	f103 0304 	add.w	r3, r3, #4
    2da2:	4610      	mov	r0, r2
    2da4:	4619      	mov	r1, r3
    2da6:	f7fd ffcf 	bl	d48 <vListInsertEnd>
			}
		}
	}
    2daa:	f107 0710 	add.w	r7, r7, #16
    2dae:	46bd      	mov	sp, r7
    2db0:	bd80      	pop	{r7, pc}
    2db2:	bf00      	nop
    2db4:	10004d14 	.word	0x10004d14
    2db8:	10004c34 	.word	0x10004c34

00002dbc <UARTPutChar>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	ch		Character to put
 * @return		None
 **********************************************************************/
void UARTPutChar (LPC_UART_TypeDef *UARTx, uint8_t ch)
{
    2dbc:	b580      	push	{r7, lr}
    2dbe:	b082      	sub	sp, #8
    2dc0:	af00      	add	r7, sp, #0
    2dc2:	6078      	str	r0, [r7, #4]
    2dc4:	460b      	mov	r3, r1
    2dc6:	70fb      	strb	r3, [r7, #3]
	UART_Send(UARTx, &ch, 1, BLOCKING);
    2dc8:	f107 0303 	add.w	r3, r7, #3
    2dcc:	6878      	ldr	r0, [r7, #4]
    2dce:	4619      	mov	r1, r3
    2dd0:	f04f 0201 	mov.w	r2, #1
    2dd4:	f04f 0301 	mov.w	r3, #1
    2dd8:	f005 fa62 	bl	82a0 <UART_Send>
}
    2ddc:	f107 0708 	add.w	r7, r7, #8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <UARTGetChar>:
 * @brief		Get a character to UART port
 * @param[in]	UARTx	Pointer to UART peripheral
 * @return		character value that returned
 **********************************************************************/
uint8_t UARTGetChar (LPC_UART_TypeDef *UARTx)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
    2dec:	f04f 0300 	mov.w	r3, #0
    2df0:	73fb      	strb	r3, [r7, #15]
	UART_Receive(UARTx, &tmp, 1, BLOCKING);
    2df2:	f107 030f 	add.w	r3, r7, #15
    2df6:	6878      	ldr	r0, [r7, #4]
    2df8:	4619      	mov	r1, r3
    2dfa:	f04f 0201 	mov.w	r2, #1
    2dfe:	f04f 0301 	mov.w	r3, #1
    2e02:	f005 fad3 	bl	83ac <UART_Receive>
	return(tmp);
    2e06:	7bfb      	ldrb	r3, [r7, #15]
}
    2e08:	4618      	mov	r0, r3
    2e0a:	f107 0710 	add.w	r7, r7, #16
    2e0e:	46bd      	mov	sp, r7
    2e10:	bd80      	pop	{r7, pc}
    2e12:	bf00      	nop

00002e14 <UARTPuts>:
 * @param[in]	UARTx 	Pointer to UART peripheral
 * @param[in]	str 	string to put
 * @return		None
 **********************************************************************/
void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b084      	sub	sp, #16
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
	uint8_t *s = (uint8_t *) str;
    2e1e:	683b      	ldr	r3, [r7, #0]
    2e20:	60fb      	str	r3, [r7, #12]

	while (*s)
    2e22:	e009      	b.n	2e38 <UARTPuts+0x24>
	{
		UARTPutChar(UARTx, *s++);
    2e24:	68fb      	ldr	r3, [r7, #12]
    2e26:	781b      	ldrb	r3, [r3, #0]
    2e28:	68fa      	ldr	r2, [r7, #12]
    2e2a:	f102 0201 	add.w	r2, r2, #1
    2e2e:	60fa      	str	r2, [r7, #12]
    2e30:	6878      	ldr	r0, [r7, #4]
    2e32:	4619      	mov	r1, r3
    2e34:	f7ff ffc2 	bl	2dbc <UARTPutChar>
 **********************************************************************/
void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
{
	uint8_t *s = (uint8_t *) str;

	while (*s)
    2e38:	68fb      	ldr	r3, [r7, #12]
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d1f1      	bne.n	2e24 <UARTPuts+0x10>
	{
		UARTPutChar(UARTx, *s++);
	}
}
    2e40:	f107 0710 	add.w	r7, r7, #16
    2e44:	46bd      	mov	sp, r7
    2e46:	bd80      	pop	{r7, pc}

00002e48 <UARTPuts_>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	str		String to put
 * @return		None
 **********************************************************************/
void UARTPuts_(LPC_UART_TypeDef *UARTx, const void *str)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b082      	sub	sp, #8
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	6078      	str	r0, [r7, #4]
    2e50:	6039      	str	r1, [r7, #0]
	UARTPuts (UARTx, str);
    2e52:	6878      	ldr	r0, [r7, #4]
    2e54:	6839      	ldr	r1, [r7, #0]
    2e56:	f7ff ffdd 	bl	2e14 <UARTPuts>
	UARTPuts (UARTx, "\n\r");
    2e5a:	6878      	ldr	r0, [r7, #4]
    2e5c:	4903      	ldr	r1, [pc, #12]	; (2e6c <UARTPuts_+0x24>)
    2e5e:	f7ff ffd9 	bl	2e14 <UARTPuts>
}
    2e62:	f107 0708 	add.w	r7, r7, #8
    2e66:	46bd      	mov	sp, r7
    2e68:	bd80      	pop	{r7, pc}
    2e6a:	bf00      	nop
    2e6c:	0000a374 	.word	0x0000a374

00002e70 <UARTPutDec>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec(LPC_UART_TypeDef *UARTx, uint8_t decnum)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	b084      	sub	sp, #16
    2e74:	af00      	add	r7, sp, #0
    2e76:	6078      	str	r0, [r7, #4]
    2e78:	460b      	mov	r3, r1
    2e7a:	70fb      	strb	r3, [r7, #3]
	uint8_t c1=decnum%10;
    2e7c:	78fa      	ldrb	r2, [r7, #3]
    2e7e:	4b28      	ldr	r3, [pc, #160]	; (2f20 <UARTPutDec+0xb0>)
    2e80:	fba3 1302 	umull	r1, r3, r3, r2
    2e84:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2e88:	460b      	mov	r3, r1
    2e8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e8e:	185b      	adds	r3, r3, r1
    2e90:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2e94:	1ad3      	subs	r3, r2, r3
    2e96:	73fb      	strb	r3, [r7, #15]
	uint8_t c2=(decnum/10)%10;
    2e98:	78fa      	ldrb	r2, [r7, #3]
    2e9a:	4b21      	ldr	r3, [pc, #132]	; (2f20 <UARTPutDec+0xb0>)
    2e9c:	fba3 1302 	umull	r1, r3, r3, r2
    2ea0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    2ea4:	b2da      	uxtb	r2, r3
    2ea6:	4b1e      	ldr	r3, [pc, #120]	; (2f20 <UARTPutDec+0xb0>)
    2ea8:	fba3 1302 	umull	r1, r3, r3, r2
    2eac:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2eb0:	460b      	mov	r3, r1
    2eb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2eb6:	185b      	adds	r3, r3, r1
    2eb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2ebc:	1ad3      	subs	r3, r2, r3
    2ebe:	73bb      	strb	r3, [r7, #14]
	uint8_t c3=(decnum/100)%10;
    2ec0:	78fa      	ldrb	r2, [r7, #3]
    2ec2:	4b18      	ldr	r3, [pc, #96]	; (2f24 <UARTPutDec+0xb4>)
    2ec4:	fba3 1302 	umull	r1, r3, r3, r2
    2ec8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2ecc:	b2da      	uxtb	r2, r3
    2ece:	4b14      	ldr	r3, [pc, #80]	; (2f20 <UARTPutDec+0xb0>)
    2ed0:	fba3 1302 	umull	r1, r3, r3, r2
    2ed4:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2ed8:	460b      	mov	r3, r1
    2eda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ede:	185b      	adds	r3, r3, r1
    2ee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2ee4:	1ad3      	subs	r3, r2, r3
    2ee6:	737b      	strb	r3, [r7, #13]
	UARTPutChar(UARTx, '0'+c3);
    2ee8:	7b7b      	ldrb	r3, [r7, #13]
    2eea:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2eee:	b2db      	uxtb	r3, r3
    2ef0:	6878      	ldr	r0, [r7, #4]
    2ef2:	4619      	mov	r1, r3
    2ef4:	f7ff ff62 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    2ef8:	7bbb      	ldrb	r3, [r7, #14]
    2efa:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2efe:	b2db      	uxtb	r3, r3
    2f00:	6878      	ldr	r0, [r7, #4]
    2f02:	4619      	mov	r1, r3
    2f04:	f7ff ff5a 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    2f08:	7bfb      	ldrb	r3, [r7, #15]
    2f0a:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	6878      	ldr	r0, [r7, #4]
    2f12:	4619      	mov	r1, r3
    2f14:	f7ff ff52 	bl	2dbc <UARTPutChar>
}
    2f18:	f107 0710 	add.w	r7, r7, #16
    2f1c:	46bd      	mov	sp, r7
    2f1e:	bd80      	pop	{r7, pc}
    2f20:	cccccccd 	.word	0xcccccccd
    2f24:	51eb851f 	.word	0x51eb851f

00002f28 <UARTPutDec16>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec16(LPC_UART_TypeDef *UARTx, uint16_t decnum)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	b084      	sub	sp, #16
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	6078      	str	r0, [r7, #4]
    2f30:	460b      	mov	r3, r1
    2f32:	807b      	strh	r3, [r7, #2]
	uint8_t c1=decnum%10;
    2f34:	887a      	ldrh	r2, [r7, #2]
    2f36:	4b47      	ldr	r3, [pc, #284]	; (3054 <UARTPutDec16+0x12c>)
    2f38:	fba3 1302 	umull	r1, r3, r3, r2
    2f3c:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2f40:	460b      	mov	r3, r1
    2f42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f46:	185b      	adds	r3, r3, r1
    2f48:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2f4c:	1ad3      	subs	r3, r2, r3
    2f4e:	b29b      	uxth	r3, r3
    2f50:	73fb      	strb	r3, [r7, #15]
	uint8_t c2=(decnum/10)%10;
    2f52:	887a      	ldrh	r2, [r7, #2]
    2f54:	4b3f      	ldr	r3, [pc, #252]	; (3054 <UARTPutDec16+0x12c>)
    2f56:	fba3 1302 	umull	r1, r3, r3, r2
    2f5a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    2f5e:	b29a      	uxth	r2, r3
    2f60:	4b3c      	ldr	r3, [pc, #240]	; (3054 <UARTPutDec16+0x12c>)
    2f62:	fba3 1302 	umull	r1, r3, r3, r2
    2f66:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2f6a:	460b      	mov	r3, r1
    2f6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f70:	185b      	adds	r3, r3, r1
    2f72:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2f76:	1ad3      	subs	r3, r2, r3
    2f78:	b29b      	uxth	r3, r3
    2f7a:	73bb      	strb	r3, [r7, #14]
	uint8_t c3=(decnum/100)%10;
    2f7c:	887a      	ldrh	r2, [r7, #2]
    2f7e:	4b36      	ldr	r3, [pc, #216]	; (3058 <UARTPutDec16+0x130>)
    2f80:	fba3 1302 	umull	r1, r3, r3, r2
    2f84:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2f88:	b29a      	uxth	r2, r3
    2f8a:	4b32      	ldr	r3, [pc, #200]	; (3054 <UARTPutDec16+0x12c>)
    2f8c:	fba3 1302 	umull	r1, r3, r3, r2
    2f90:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2f94:	460b      	mov	r3, r1
    2f96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2f9a:	185b      	adds	r3, r3, r1
    2f9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2fa0:	1ad3      	subs	r3, r2, r3
    2fa2:	b29b      	uxth	r3, r3
    2fa4:	737b      	strb	r3, [r7, #13]
	uint8_t c4=(decnum/1000)%10;
    2fa6:	887a      	ldrh	r2, [r7, #2]
    2fa8:	4b2c      	ldr	r3, [pc, #176]	; (305c <UARTPutDec16+0x134>)
    2faa:	fba3 1302 	umull	r1, r3, r3, r2
    2fae:	ea4f 1393 	mov.w	r3, r3, lsr #6
    2fb2:	b29a      	uxth	r2, r3
    2fb4:	4b27      	ldr	r3, [pc, #156]	; (3054 <UARTPutDec16+0x12c>)
    2fb6:	fba3 1302 	umull	r1, r3, r3, r2
    2fba:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2fbe:	460b      	mov	r3, r1
    2fc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2fc4:	185b      	adds	r3, r3, r1
    2fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2fca:	1ad3      	subs	r3, r2, r3
    2fcc:	b29b      	uxth	r3, r3
    2fce:	733b      	strb	r3, [r7, #12]
	uint8_t c5=(decnum/10000)%10;
    2fd0:	887a      	ldrh	r2, [r7, #2]
    2fd2:	4b23      	ldr	r3, [pc, #140]	; (3060 <UARTPutDec16+0x138>)
    2fd4:	fba3 1302 	umull	r1, r3, r3, r2
    2fd8:	ea4f 3353 	mov.w	r3, r3, lsr #13
    2fdc:	b29a      	uxth	r2, r3
    2fde:	4b1d      	ldr	r3, [pc, #116]	; (3054 <UARTPutDec16+0x12c>)
    2fe0:	fba3 1302 	umull	r1, r3, r3, r2
    2fe4:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    2fe8:	460b      	mov	r3, r1
    2fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2fee:	185b      	adds	r3, r3, r1
    2ff0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2ff4:	1ad3      	subs	r3, r2, r3
    2ff6:	b29b      	uxth	r3, r3
    2ff8:	72fb      	strb	r3, [r7, #11]
	UARTPutChar(UARTx, '0'+c5);
    2ffa:	7afb      	ldrb	r3, [r7, #11]
    2ffc:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3000:	b2db      	uxtb	r3, r3
    3002:	6878      	ldr	r0, [r7, #4]
    3004:	4619      	mov	r1, r3
    3006:	f7ff fed9 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c4);
    300a:	7b3b      	ldrb	r3, [r7, #12]
    300c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3010:	b2db      	uxtb	r3, r3
    3012:	6878      	ldr	r0, [r7, #4]
    3014:	4619      	mov	r1, r3
    3016:	f7ff fed1 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c3);
    301a:	7b7b      	ldrb	r3, [r7, #13]
    301c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3020:	b2db      	uxtb	r3, r3
    3022:	6878      	ldr	r0, [r7, #4]
    3024:	4619      	mov	r1, r3
    3026:	f7ff fec9 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    302a:	7bbb      	ldrb	r3, [r7, #14]
    302c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3030:	b2db      	uxtb	r3, r3
    3032:	6878      	ldr	r0, [r7, #4]
    3034:	4619      	mov	r1, r3
    3036:	f7ff fec1 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    303a:	7bfb      	ldrb	r3, [r7, #15]
    303c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3040:	b2db      	uxtb	r3, r3
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	4619      	mov	r1, r3
    3046:	f7ff feb9 	bl	2dbc <UARTPutChar>
}
    304a:	f107 0710 	add.w	r7, r7, #16
    304e:	46bd      	mov	sp, r7
    3050:	bd80      	pop	{r7, pc}
    3052:	bf00      	nop
    3054:	cccccccd 	.word	0xcccccccd
    3058:	51eb851f 	.word	0x51eb851f
    305c:	10624dd3 	.word	0x10624dd3
    3060:	d1b71759 	.word	0xd1b71759

00003064 <UARTPutDec32>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec32(LPC_UART_TypeDef *UARTx, uint32_t decnum)
{
    3064:	b580      	push	{r7, lr}
    3066:	b086      	sub	sp, #24
    3068:	af00      	add	r7, sp, #0
    306a:	6078      	str	r0, [r7, #4]
    306c:	6039      	str	r1, [r7, #0]
	uint8_t c1=decnum%10;
    306e:	6839      	ldr	r1, [r7, #0]
    3070:	4b8c      	ldr	r3, [pc, #560]	; (32a4 <UARTPutDec32+0x240>)
    3072:	fba3 2301 	umull	r2, r3, r3, r1
    3076:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    307a:	4613      	mov	r3, r2
    307c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3080:	189b      	adds	r3, r3, r2
    3082:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3086:	1aca      	subs	r2, r1, r3
    3088:	4613      	mov	r3, r2
    308a:	75fb      	strb	r3, [r7, #23]
	uint8_t c2=(decnum/10)%10;
    308c:	683a      	ldr	r2, [r7, #0]
    308e:	4b85      	ldr	r3, [pc, #532]	; (32a4 <UARTPutDec32+0x240>)
    3090:	fba3 1302 	umull	r1, r3, r3, r2
    3094:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3098:	4b82      	ldr	r3, [pc, #520]	; (32a4 <UARTPutDec32+0x240>)
    309a:	fba3 2301 	umull	r2, r3, r3, r1
    309e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    30a2:	4613      	mov	r3, r2
    30a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30a8:	189b      	adds	r3, r3, r2
    30aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    30ae:	1aca      	subs	r2, r1, r3
    30b0:	4613      	mov	r3, r2
    30b2:	75bb      	strb	r3, [r7, #22]
	uint8_t c3=(decnum/100)%10;
    30b4:	683a      	ldr	r2, [r7, #0]
    30b6:	4b7c      	ldr	r3, [pc, #496]	; (32a8 <UARTPutDec32+0x244>)
    30b8:	fba3 1302 	umull	r1, r3, r3, r2
    30bc:	ea4f 1153 	mov.w	r1, r3, lsr #5
    30c0:	4b78      	ldr	r3, [pc, #480]	; (32a4 <UARTPutDec32+0x240>)
    30c2:	fba3 2301 	umull	r2, r3, r3, r1
    30c6:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    30ca:	4613      	mov	r3, r2
    30cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30d0:	189b      	adds	r3, r3, r2
    30d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    30d6:	1aca      	subs	r2, r1, r3
    30d8:	4613      	mov	r3, r2
    30da:	757b      	strb	r3, [r7, #21]
	uint8_t c4=(decnum/1000)%10;
    30dc:	683a      	ldr	r2, [r7, #0]
    30de:	4b73      	ldr	r3, [pc, #460]	; (32ac <UARTPutDec32+0x248>)
    30e0:	fba3 1302 	umull	r1, r3, r3, r2
    30e4:	ea4f 1193 	mov.w	r1, r3, lsr #6
    30e8:	4b6e      	ldr	r3, [pc, #440]	; (32a4 <UARTPutDec32+0x240>)
    30ea:	fba3 2301 	umull	r2, r3, r3, r1
    30ee:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    30f2:	4613      	mov	r3, r2
    30f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    30f8:	189b      	adds	r3, r3, r2
    30fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    30fe:	1aca      	subs	r2, r1, r3
    3100:	4613      	mov	r3, r2
    3102:	753b      	strb	r3, [r7, #20]
	uint8_t c5=(decnum/10000)%10;
    3104:	683a      	ldr	r2, [r7, #0]
    3106:	4b6a      	ldr	r3, [pc, #424]	; (32b0 <UARTPutDec32+0x24c>)
    3108:	fba3 1302 	umull	r1, r3, r3, r2
    310c:	ea4f 3153 	mov.w	r1, r3, lsr #13
    3110:	4b64      	ldr	r3, [pc, #400]	; (32a4 <UARTPutDec32+0x240>)
    3112:	fba3 2301 	umull	r2, r3, r3, r1
    3116:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    311a:	4613      	mov	r3, r2
    311c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3120:	189b      	adds	r3, r3, r2
    3122:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3126:	1aca      	subs	r2, r1, r3
    3128:	4613      	mov	r3, r2
    312a:	74fb      	strb	r3, [r7, #19]
	uint8_t c6=(decnum/100000)%10;
    312c:	683b      	ldr	r3, [r7, #0]
    312e:	ea4f 1253 	mov.w	r2, r3, lsr #5
    3132:	4b60      	ldr	r3, [pc, #384]	; (32b4 <UARTPutDec32+0x250>)
    3134:	fba3 1302 	umull	r1, r3, r3, r2
    3138:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    313c:	4b59      	ldr	r3, [pc, #356]	; (32a4 <UARTPutDec32+0x240>)
    313e:	fba3 2301 	umull	r2, r3, r3, r1
    3142:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3146:	4613      	mov	r3, r2
    3148:	ea4f 0383 	mov.w	r3, r3, lsl #2
    314c:	189b      	adds	r3, r3, r2
    314e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3152:	1aca      	subs	r2, r1, r3
    3154:	4613      	mov	r3, r2
    3156:	74bb      	strb	r3, [r7, #18]
	uint8_t c7=(decnum/1000000)%10;
    3158:	683a      	ldr	r2, [r7, #0]
    315a:	4b57      	ldr	r3, [pc, #348]	; (32b8 <UARTPutDec32+0x254>)
    315c:	fba3 1302 	umull	r1, r3, r3, r2
    3160:	ea4f 4193 	mov.w	r1, r3, lsr #18
    3164:	4b4f      	ldr	r3, [pc, #316]	; (32a4 <UARTPutDec32+0x240>)
    3166:	fba3 2301 	umull	r2, r3, r3, r1
    316a:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    316e:	4613      	mov	r3, r2
    3170:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3174:	189b      	adds	r3, r3, r2
    3176:	ea4f 0343 	mov.w	r3, r3, lsl #1
    317a:	1aca      	subs	r2, r1, r3
    317c:	4613      	mov	r3, r2
    317e:	747b      	strb	r3, [r7, #17]
	uint8_t c8=(decnum/10000000)%10;
    3180:	683a      	ldr	r2, [r7, #0]
    3182:	4b4e      	ldr	r3, [pc, #312]	; (32bc <UARTPutDec32+0x258>)
    3184:	fba3 1302 	umull	r1, r3, r3, r2
    3188:	ea4f 5193 	mov.w	r1, r3, lsr #22
    318c:	4b45      	ldr	r3, [pc, #276]	; (32a4 <UARTPutDec32+0x240>)
    318e:	fba3 2301 	umull	r2, r3, r3, r1
    3192:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3196:	4613      	mov	r3, r2
    3198:	ea4f 0383 	mov.w	r3, r3, lsl #2
    319c:	189b      	adds	r3, r3, r2
    319e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    31a2:	1aca      	subs	r2, r1, r3
    31a4:	4613      	mov	r3, r2
    31a6:	743b      	strb	r3, [r7, #16]
	uint8_t c9=(decnum/100000000)%10;
    31a8:	683a      	ldr	r2, [r7, #0]
    31aa:	4b45      	ldr	r3, [pc, #276]	; (32c0 <UARTPutDec32+0x25c>)
    31ac:	fba3 1302 	umull	r1, r3, r3, r2
    31b0:	ea4f 6153 	mov.w	r1, r3, lsr #25
    31b4:	4b3b      	ldr	r3, [pc, #236]	; (32a4 <UARTPutDec32+0x240>)
    31b6:	fba3 2301 	umull	r2, r3, r3, r1
    31ba:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    31be:	4613      	mov	r3, r2
    31c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31c4:	189b      	adds	r3, r3, r2
    31c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    31ca:	1aca      	subs	r2, r1, r3
    31cc:	4613      	mov	r3, r2
    31ce:	73fb      	strb	r3, [r7, #15]
	uint8_t c10=(decnum/1000000000)%10;
    31d0:	683b      	ldr	r3, [r7, #0]
    31d2:	ea4f 2253 	mov.w	r2, r3, lsr #9
    31d6:	4b3b      	ldr	r3, [pc, #236]	; (32c4 <UARTPutDec32+0x260>)
    31d8:	fba3 1302 	umull	r1, r3, r3, r2
    31dc:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    31e0:	4b30      	ldr	r3, [pc, #192]	; (32a4 <UARTPutDec32+0x240>)
    31e2:	fba3 2301 	umull	r2, r3, r3, r1
    31e6:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    31ea:	4613      	mov	r3, r2
    31ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31f0:	189b      	adds	r3, r3, r2
    31f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    31f6:	1aca      	subs	r2, r1, r3
    31f8:	4613      	mov	r3, r2
    31fa:	73bb      	strb	r3, [r7, #14]
	UARTPutChar(UARTx, '0'+c10);
    31fc:	7bbb      	ldrb	r3, [r7, #14]
    31fe:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3202:	b2db      	uxtb	r3, r3
    3204:	6878      	ldr	r0, [r7, #4]
    3206:	4619      	mov	r1, r3
    3208:	f7ff fdd8 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c9);
    320c:	7bfb      	ldrb	r3, [r7, #15]
    320e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3212:	b2db      	uxtb	r3, r3
    3214:	6878      	ldr	r0, [r7, #4]
    3216:	4619      	mov	r1, r3
    3218:	f7ff fdd0 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c8);
    321c:	7c3b      	ldrb	r3, [r7, #16]
    321e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3222:	b2db      	uxtb	r3, r3
    3224:	6878      	ldr	r0, [r7, #4]
    3226:	4619      	mov	r1, r3
    3228:	f7ff fdc8 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c7);
    322c:	7c7b      	ldrb	r3, [r7, #17]
    322e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3232:	b2db      	uxtb	r3, r3
    3234:	6878      	ldr	r0, [r7, #4]
    3236:	4619      	mov	r1, r3
    3238:	f7ff fdc0 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c6);
    323c:	7cbb      	ldrb	r3, [r7, #18]
    323e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3242:	b2db      	uxtb	r3, r3
    3244:	6878      	ldr	r0, [r7, #4]
    3246:	4619      	mov	r1, r3
    3248:	f7ff fdb8 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c5);
    324c:	7cfb      	ldrb	r3, [r7, #19]
    324e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3252:	b2db      	uxtb	r3, r3
    3254:	6878      	ldr	r0, [r7, #4]
    3256:	4619      	mov	r1, r3
    3258:	f7ff fdb0 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c4);
    325c:	7d3b      	ldrb	r3, [r7, #20]
    325e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3262:	b2db      	uxtb	r3, r3
    3264:	6878      	ldr	r0, [r7, #4]
    3266:	4619      	mov	r1, r3
    3268:	f7ff fda8 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c3);
    326c:	7d7b      	ldrb	r3, [r7, #21]
    326e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3272:	b2db      	uxtb	r3, r3
    3274:	6878      	ldr	r0, [r7, #4]
    3276:	4619      	mov	r1, r3
    3278:	f7ff fda0 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    327c:	7dbb      	ldrb	r3, [r7, #22]
    327e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3282:	b2db      	uxtb	r3, r3
    3284:	6878      	ldr	r0, [r7, #4]
    3286:	4619      	mov	r1, r3
    3288:	f7ff fd98 	bl	2dbc <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    328c:	7dfb      	ldrb	r3, [r7, #23]
    328e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3292:	b2db      	uxtb	r3, r3
    3294:	6878      	ldr	r0, [r7, #4]
    3296:	4619      	mov	r1, r3
    3298:	f7ff fd90 	bl	2dbc <UARTPutChar>
}
    329c:	f107 0718 	add.w	r7, r7, #24
    32a0:	46bd      	mov	sp, r7
    32a2:	bd80      	pop	{r7, pc}
    32a4:	cccccccd 	.word	0xcccccccd
    32a8:	51eb851f 	.word	0x51eb851f
    32ac:	10624dd3 	.word	0x10624dd3
    32b0:	d1b71759 	.word	0xd1b71759
    32b4:	0a7c5ac5 	.word	0x0a7c5ac5
    32b8:	431bde83 	.word	0x431bde83
    32bc:	6b5fca6b 	.word	0x6b5fca6b
    32c0:	55e63b89 	.word	0x55e63b89
    32c4:	00044b83 	.word	0x00044b83

000032c8 <UARTPutHex>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex (LPC_UART_TypeDef *UARTx, uint8_t hexnum)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
    32d0:	460b      	mov	r3, r1
    32d2:	70fb      	strb	r3, [r7, #3]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    32d4:	6878      	ldr	r0, [r7, #4]
    32d6:	4918      	ldr	r1, [pc, #96]	; (3338 <UARTPutHex+0x70>)
    32d8:	f7ff fd9c 	bl	2e14 <UARTPuts>
	i = 1;
    32dc:	f04f 0301 	mov.w	r3, #1
    32e0:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    32e2:	78fa      	ldrb	r2, [r7, #3]
    32e4:	7bfb      	ldrb	r3, [r7, #15]
    32e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32ea:	fa42 f303 	asr.w	r3, r2, r3
    32ee:	b2db      	uxtb	r3, r3
    32f0:	f003 030f 	and.w	r3, r3, #15
    32f4:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    32f6:	7bbb      	ldrb	r3, [r7, #14]
    32f8:	2b09      	cmp	r3, #9
    32fa:	d904      	bls.n	3306 <UARTPutHex+0x3e>
    32fc:	7bbb      	ldrb	r3, [r7, #14]
    32fe:	f103 0337 	add.w	r3, r3, #55	; 0x37
    3302:	b2db      	uxtb	r3, r3
    3304:	e003      	b.n	330e <UARTPutHex+0x46>
    3306:	7bbb      	ldrb	r3, [r7, #14]
    3308:	f103 0330 	add.w	r3, r3, #48	; 0x30
    330c:	b2db      	uxtb	r3, r3
    330e:	6878      	ldr	r0, [r7, #4]
    3310:	4619      	mov	r1, r3
    3312:	f7ff fd53 	bl	2dbc <UARTPutChar>
	} while (i--);
    3316:	7bfb      	ldrb	r3, [r7, #15]
    3318:	2b00      	cmp	r3, #0
    331a:	bf0c      	ite	eq
    331c:	2300      	moveq	r3, #0
    331e:	2301      	movne	r3, #1
    3320:	b2db      	uxtb	r3, r3
    3322:	7bfa      	ldrb	r2, [r7, #15]
    3324:	f102 32ff 	add.w	r2, r2, #4294967295
    3328:	73fa      	strb	r2, [r7, #15]
    332a:	2b00      	cmp	r3, #0
    332c:	d1d9      	bne.n	32e2 <UARTPutHex+0x1a>
}
    332e:	f107 0710 	add.w	r7, r7, #16
    3332:	46bd      	mov	sp, r7
    3334:	bd80      	pop	{r7, pc}
    3336:	bf00      	nop
    3338:	0000a378 	.word	0x0000a378

0000333c <UARTPutHex16>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (16-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex16 (LPC_UART_TypeDef *UARTx, uint16_t hexnum)
{
    333c:	b580      	push	{r7, lr}
    333e:	b084      	sub	sp, #16
    3340:	af00      	add	r7, sp, #0
    3342:	6078      	str	r0, [r7, #4]
    3344:	460b      	mov	r3, r1
    3346:	807b      	strh	r3, [r7, #2]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    3348:	6878      	ldr	r0, [r7, #4]
    334a:	4918      	ldr	r1, [pc, #96]	; (33ac <UARTPutHex16+0x70>)
    334c:	f7ff fd62 	bl	2e14 <UARTPuts>
	i = 3;
    3350:	f04f 0303 	mov.w	r3, #3
    3354:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    3356:	887a      	ldrh	r2, [r7, #2]
    3358:	7bfb      	ldrb	r3, [r7, #15]
    335a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    335e:	fa42 f303 	asr.w	r3, r2, r3
    3362:	b2db      	uxtb	r3, r3
    3364:	f003 030f 	and.w	r3, r3, #15
    3368:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    336a:	7bbb      	ldrb	r3, [r7, #14]
    336c:	2b09      	cmp	r3, #9
    336e:	d904      	bls.n	337a <UARTPutHex16+0x3e>
    3370:	7bbb      	ldrb	r3, [r7, #14]
    3372:	f103 0337 	add.w	r3, r3, #55	; 0x37
    3376:	b2db      	uxtb	r3, r3
    3378:	e003      	b.n	3382 <UARTPutHex16+0x46>
    337a:	7bbb      	ldrb	r3, [r7, #14]
    337c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3380:	b2db      	uxtb	r3, r3
    3382:	6878      	ldr	r0, [r7, #4]
    3384:	4619      	mov	r1, r3
    3386:	f7ff fd19 	bl	2dbc <UARTPutChar>
	} while (i--);
    338a:	7bfb      	ldrb	r3, [r7, #15]
    338c:	2b00      	cmp	r3, #0
    338e:	bf0c      	ite	eq
    3390:	2300      	moveq	r3, #0
    3392:	2301      	movne	r3, #1
    3394:	b2db      	uxtb	r3, r3
    3396:	7bfa      	ldrb	r2, [r7, #15]
    3398:	f102 32ff 	add.w	r2, r2, #4294967295
    339c:	73fa      	strb	r2, [r7, #15]
    339e:	2b00      	cmp	r3, #0
    33a0:	d1d9      	bne.n	3356 <UARTPutHex16+0x1a>
}
    33a2:	f107 0710 	add.w	r7, r7, #16
    33a6:	46bd      	mov	sp, r7
    33a8:	bd80      	pop	{r7, pc}
    33aa:	bf00      	nop
    33ac:	0000a378 	.word	0x0000a378

000033b0 <UARTPutHex32>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (32-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex32 (LPC_UART_TypeDef *UARTx, uint32_t hexnum)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b084      	sub	sp, #16
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
    33b8:	6039      	str	r1, [r7, #0]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    33ba:	6878      	ldr	r0, [r7, #4]
    33bc:	4917      	ldr	r1, [pc, #92]	; (341c <UARTPutHex32+0x6c>)
    33be:	f7ff fd29 	bl	2e14 <UARTPuts>
	i = 7;
    33c2:	f04f 0307 	mov.w	r3, #7
    33c6:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    33c8:	7bfb      	ldrb	r3, [r7, #15]
    33ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    33ce:	683a      	ldr	r2, [r7, #0]
    33d0:	fa22 f303 	lsr.w	r3, r2, r3
    33d4:	b2db      	uxtb	r3, r3
    33d6:	f003 030f 	and.w	r3, r3, #15
    33da:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    33dc:	7bbb      	ldrb	r3, [r7, #14]
    33de:	2b09      	cmp	r3, #9
    33e0:	d904      	bls.n	33ec <UARTPutHex32+0x3c>
    33e2:	7bbb      	ldrb	r3, [r7, #14]
    33e4:	f103 0337 	add.w	r3, r3, #55	; 0x37
    33e8:	b2db      	uxtb	r3, r3
    33ea:	e003      	b.n	33f4 <UARTPutHex32+0x44>
    33ec:	7bbb      	ldrb	r3, [r7, #14]
    33ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
    33f2:	b2db      	uxtb	r3, r3
    33f4:	6878      	ldr	r0, [r7, #4]
    33f6:	4619      	mov	r1, r3
    33f8:	f7ff fce0 	bl	2dbc <UARTPutChar>
	} while (i--);
    33fc:	7bfb      	ldrb	r3, [r7, #15]
    33fe:	2b00      	cmp	r3, #0
    3400:	bf0c      	ite	eq
    3402:	2300      	moveq	r3, #0
    3404:	2301      	movne	r3, #1
    3406:	b2db      	uxtb	r3, r3
    3408:	7bfa      	ldrb	r2, [r7, #15]
    340a:	f102 32ff 	add.w	r2, r2, #4294967295
    340e:	73fa      	strb	r2, [r7, #15]
    3410:	2b00      	cmp	r3, #0
    3412:	d1d9      	bne.n	33c8 <UARTPutHex32+0x18>
}
    3414:	f107 0710 	add.w	r7, r7, #16
    3418:	46bd      	mov	sp, r7
    341a:	bd80      	pop	{r7, pc}
    341c:	0000a378 	.word	0x0000a378

00003420 <debug_frmwrk_init>:
 * @brief		Initialize Debug frame work through initializing UART port
 * @param[in]	None
 * @return		None
 **********************************************************************/
void debug_frmwrk_init(void)
{
    3420:	b580      	push	{r7, lr}
    3422:	b084      	sub	sp, #16
    3424:	af00      	add	r7, sp, #0

#if (USED_UART_DEBUG_PORT==0)
	/*
	 * Initialize UART0 pin connect
	 */
	PinCfg.Funcnum = 1;
    3426:	f04f 0301 	mov.w	r3, #1
    342a:	70bb      	strb	r3, [r7, #2]
	PinCfg.OpenDrain = 0;
    342c:	f04f 0300 	mov.w	r3, #0
    3430:	713b      	strb	r3, [r7, #4]
	PinCfg.Pinmode = 0;
    3432:	f04f 0300 	mov.w	r3, #0
    3436:	70fb      	strb	r3, [r7, #3]
	PinCfg.Pinnum = 2;
    3438:	f04f 0302 	mov.w	r3, #2
    343c:	707b      	strb	r3, [r7, #1]
	PinCfg.Portnum = 0;
    343e:	f04f 0300 	mov.w	r3, #0
    3442:	703b      	strb	r3, [r7, #0]
	PINSEL_ConfigPin(&PinCfg);
    3444:	463b      	mov	r3, r7
    3446:	4618      	mov	r0, r3
    3448:	f002 fd28 	bl	5e9c <PINSEL_ConfigPin>
	PinCfg.Pinnum = 3;
    344c:	f04f 0303 	mov.w	r3, #3
    3450:	707b      	strb	r3, [r7, #1]
	PINSEL_ConfigPin(&PinCfg);
    3452:	463b      	mov	r3, r7
    3454:	4618      	mov	r0, r3
    3456:	f002 fd21 	bl	5e9c <PINSEL_ConfigPin>
	 * Baudrate = 9600bps
	 * 8 data bit
	 * 1 Stop bit
	 * None parity
	 */
	UART_ConfigStructInit(&UARTConfigStruct);
    345a:	f107 0308 	add.w	r3, r7, #8
    345e:	4618      	mov	r0, r3
    3460:	f004 fe9c 	bl	819c <UART_ConfigStructInit>

	// Re-configure baudrate to 115200bps
	UARTConfigStruct.Baud_rate = 115200;
    3464:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    3468:	60bb      	str	r3, [r7, #8]

	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
	UART_Init(DEBUG_UART_PORT, &UARTConfigStruct);
    346a:	f107 0308 	add.w	r3, r7, #8
    346e:	4815      	ldr	r0, [pc, #84]	; (34c4 <debug_frmwrk_init+0xa4>)
    3470:	4619      	mov	r1, r3
    3472:	f004 fcad 	bl	7dd0 <UART_Init>

	// Enable UART Transmit
	UART_TxCmd(DEBUG_UART_PORT, ENABLE);
    3476:	4813      	ldr	r0, [pc, #76]	; (34c4 <debug_frmwrk_init+0xa4>)
    3478:	f04f 0101 	mov.w	r1, #1
    347c:	f005 fb28 	bl	8ad0 <UART_TxCmd>

	_db_msg	= UARTPuts;
    3480:	4b11      	ldr	r3, [pc, #68]	; (34c8 <debug_frmwrk_init+0xa8>)
    3482:	4a12      	ldr	r2, [pc, #72]	; (34cc <debug_frmwrk_init+0xac>)
    3484:	601a      	str	r2, [r3, #0]
	_db_msg_ = UARTPuts_;
    3486:	4b12      	ldr	r3, [pc, #72]	; (34d0 <debug_frmwrk_init+0xb0>)
    3488:	4a12      	ldr	r2, [pc, #72]	; (34d4 <debug_frmwrk_init+0xb4>)
    348a:	601a      	str	r2, [r3, #0]
	_db_char = UARTPutChar;
    348c:	4b12      	ldr	r3, [pc, #72]	; (34d8 <debug_frmwrk_init+0xb8>)
    348e:	4a13      	ldr	r2, [pc, #76]	; (34dc <debug_frmwrk_init+0xbc>)
    3490:	601a      	str	r2, [r3, #0]
	_db_hex = UARTPutHex;
    3492:	4b13      	ldr	r3, [pc, #76]	; (34e0 <debug_frmwrk_init+0xc0>)
    3494:	4a13      	ldr	r2, [pc, #76]	; (34e4 <debug_frmwrk_init+0xc4>)
    3496:	601a      	str	r2, [r3, #0]
	_db_hex_16 = UARTPutHex16;
    3498:	4b13      	ldr	r3, [pc, #76]	; (34e8 <debug_frmwrk_init+0xc8>)
    349a:	4a14      	ldr	r2, [pc, #80]	; (34ec <debug_frmwrk_init+0xcc>)
    349c:	601a      	str	r2, [r3, #0]
	_db_hex_32 = UARTPutHex32;
    349e:	4b14      	ldr	r3, [pc, #80]	; (34f0 <debug_frmwrk_init+0xd0>)
    34a0:	4a14      	ldr	r2, [pc, #80]	; (34f4 <debug_frmwrk_init+0xd4>)
    34a2:	601a      	str	r2, [r3, #0]
	_db_dec = UARTPutDec;
    34a4:	4b14      	ldr	r3, [pc, #80]	; (34f8 <debug_frmwrk_init+0xd8>)
    34a6:	4a15      	ldr	r2, [pc, #84]	; (34fc <debug_frmwrk_init+0xdc>)
    34a8:	601a      	str	r2, [r3, #0]
	_db_dec_16 = UARTPutDec16;
    34aa:	4b15      	ldr	r3, [pc, #84]	; (3500 <debug_frmwrk_init+0xe0>)
    34ac:	4a15      	ldr	r2, [pc, #84]	; (3504 <debug_frmwrk_init+0xe4>)
    34ae:	601a      	str	r2, [r3, #0]
	_db_dec_32 = UARTPutDec32;
    34b0:	4b15      	ldr	r3, [pc, #84]	; (3508 <debug_frmwrk_init+0xe8>)
    34b2:	4a16      	ldr	r2, [pc, #88]	; (350c <debug_frmwrk_init+0xec>)
    34b4:	601a      	str	r2, [r3, #0]
	_db_get_char = UARTGetChar;
    34b6:	4b16      	ldr	r3, [pc, #88]	; (3510 <debug_frmwrk_init+0xf0>)
    34b8:	4a16      	ldr	r2, [pc, #88]	; (3514 <debug_frmwrk_init+0xf4>)
    34ba:	601a      	str	r2, [r3, #0]
}
    34bc:	f107 0710 	add.w	r7, r7, #16
    34c0:	46bd      	mov	sp, r7
    34c2:	bd80      	pop	{r7, pc}
    34c4:	4000c000 	.word	0x4000c000
    34c8:	10004e44 	.word	0x10004e44
    34cc:	00002e15 	.word	0x00002e15
    34d0:	10004e4c 	.word	0x10004e4c
    34d4:	00002e49 	.word	0x00002e49
    34d8:	10004e50 	.word	0x10004e50
    34dc:	00002dbd 	.word	0x00002dbd
    34e0:	10004e54 	.word	0x10004e54
    34e4:	000032c9 	.word	0x000032c9
    34e8:	10004e58 	.word	0x10004e58
    34ec:	0000333d 	.word	0x0000333d
    34f0:	10004e3c 	.word	0x10004e3c
    34f4:	000033b1 	.word	0x000033b1
    34f8:	10004e34 	.word	0x10004e34
    34fc:	00002e71 	.word	0x00002e71
    3500:	10004e40 	.word	0x10004e40
    3504:	00002f29 	.word	0x00002f29
    3508:	10004e38 	.word	0x10004e38
    350c:	00003065 	.word	0x00003065
    3510:	10004e48 	.word	0x10004e48
    3514:	00002de5 	.word	0x00002de5

00003518 <CLKPWR_SetPCLKDiv>:
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
    3518:	b480      	push	{r7}
    351a:	b085      	sub	sp, #20
    351c:	af00      	add	r7, sp, #0
    351e:	6078      	str	r0, [r7, #4]
    3520:	6039      	str	r1, [r7, #0]
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	2b1f      	cmp	r3, #31
    3526:	d903      	bls.n	3530 <CLKPWR_SetPCLKDiv+0x18>
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	f1a3 0320 	sub.w	r3, r3, #32
    352e:	e000      	b.n	3532 <CLKPWR_SetPCLKDiv+0x1a>
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	60fb      	str	r3, [r7, #12]

	/* PCLKSEL0 selected */
	if (ClkType < 32)
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	2b1f      	cmp	r3, #31
    3538:	d81b      	bhi.n	3572 <CLKPWR_SetPCLKDiv+0x5a>
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
    353a:	4b1e      	ldr	r3, [pc, #120]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    353c:	4a1d      	ldr	r2, [pc, #116]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    353e:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
    3542:	68fa      	ldr	r2, [r7, #12]
    3544:	f04f 0003 	mov.w	r0, #3
    3548:	fa00 f202 	lsl.w	r2, r0, r2
    354c:	ea6f 0202 	mvn.w	r2, r2
    3550:	ea01 0202 	and.w	r2, r1, r2
    3554:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    3558:	4b16      	ldr	r3, [pc, #88]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    355a:	4a16      	ldr	r2, [pc, #88]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    355c:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
    3560:	68fa      	ldr	r2, [r7, #12]
    3562:	6838      	ldr	r0, [r7, #0]
    3564:	fa00 f202 	lsl.w	r2, r0, r2
    3568:	ea41 0202 	orr.w	r2, r1, r2
    356c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    3570:	e01a      	b.n	35a8 <CLKPWR_SetPCLKDiv+0x90>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3572:	4b10      	ldr	r3, [pc, #64]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    3574:	4a0f      	ldr	r2, [pc, #60]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    3576:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
    357a:	68fa      	ldr	r2, [r7, #12]
    357c:	f04f 0003 	mov.w	r0, #3
    3580:	fa00 f202 	lsl.w	r2, r0, r2
    3584:	ea6f 0202 	mvn.w	r2, r2
    3588:	ea01 0202 	and.w	r2, r1, r2
    358c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    3590:	4b08      	ldr	r3, [pc, #32]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    3592:	4a08      	ldr	r2, [pc, #32]	; (35b4 <CLKPWR_SetPCLKDiv+0x9c>)
    3594:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
    3598:	68fa      	ldr	r2, [r7, #12]
    359a:	6838      	ldr	r0, [r7, #0]
    359c:	fa00 f202 	lsl.w	r2, r0, r2
    35a0:	ea41 0202 	orr.w	r2, r1, r2
    35a4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}
}
    35a8:	f107 0714 	add.w	r7, r7, #20
    35ac:	46bd      	mov	sp, r7
    35ae:	bc80      	pop	{r7}
    35b0:	4770      	bx	lr
    35b2:	bf00      	nop
    35b4:	400fc000 	.word	0x400fc000

000035b8 <CLKPWR_GetPCLKSEL>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock Selection
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
    35b8:	b480      	push	{r7}
    35ba:	b085      	sub	sp, #20
    35bc:	af00      	add	r7, sp, #0
    35be:	6078      	str	r0, [r7, #4]
	uint32_t bitpos, retval;

	if (ClkType < 32)
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	2b1f      	cmp	r3, #31
    35c4:	d806      	bhi.n	35d4 <CLKPWR_GetPCLKSEL+0x1c>
	{
		bitpos = ClkType;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL0;
    35ca:	4b0d      	ldr	r3, [pc, #52]	; (3600 <CLKPWR_GetPCLKSEL+0x48>)
    35cc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    35d0:	60bb      	str	r3, [r7, #8]
    35d2:	e007      	b.n	35e4 <CLKPWR_GetPCLKSEL+0x2c>
	}
	else
	{
		bitpos = ClkType - 32;
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	f1a3 0320 	sub.w	r3, r3, #32
    35da:	60fb      	str	r3, [r7, #12]
		retval = LPC_SC->PCLKSEL1;
    35dc:	4b08      	ldr	r3, [pc, #32]	; (3600 <CLKPWR_GetPCLKSEL+0x48>)
    35de:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    35e2:	60bb      	str	r3, [r7, #8]
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
    35e4:	68fb      	ldr	r3, [r7, #12]
    35e6:	68ba      	ldr	r2, [r7, #8]
    35e8:	fa22 f303 	lsr.w	r3, r2, r3
    35ec:	f003 0303 	and.w	r3, r3, #3
    35f0:	60bb      	str	r3, [r7, #8]
	return retval;
    35f2:	68bb      	ldr	r3, [r7, #8]
}
    35f4:	4618      	mov	r0, r3
    35f6:	f107 0714 	add.w	r7, r7, #20
    35fa:	46bd      	mov	sp, r7
    35fc:	bc80      	pop	{r7}
    35fe:	4770      	bx	lr
    3600:	400fc000 	.word	0x400fc000

00003604 <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
    3604:	b580      	push	{r7, lr}
    3606:	b084      	sub	sp, #16
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
	uint32_t retval, div;

	retval = SystemCoreClock;
    360c:	4b18      	ldr	r3, [pc, #96]	; (3670 <CLKPWR_GetPCLK+0x6c>)
    360e:	681b      	ldr	r3, [r3, #0]
    3610:	60bb      	str	r3, [r7, #8]
	div = CLKPWR_GetPCLKSEL(ClkType);
    3612:	6878      	ldr	r0, [r7, #4]
    3614:	f7ff ffd0 	bl	35b8 <CLKPWR_GetPCLKSEL>
    3618:	60f8      	str	r0, [r7, #12]

	switch (div)
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	2b03      	cmp	r3, #3
    361e:	d81b      	bhi.n	3658 <CLKPWR_GetPCLK+0x54>
    3620:	a201      	add	r2, pc, #4	; (adr r2, 3628 <CLKPWR_GetPCLK+0x24>)
    3622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3626:	bf00      	nop
    3628:	00003639 	.word	0x00003639
    362c:	00003641 	.word	0x00003641
    3630:	00003649 	.word	0x00003649
    3634:	00003651 	.word	0x00003651
	{
	case 0:
		div = 4;
    3638:	f04f 0304 	mov.w	r3, #4
    363c:	60fb      	str	r3, [r7, #12]
		break;
    363e:	e00b      	b.n	3658 <CLKPWR_GetPCLK+0x54>

	case 1:
		div = 1;
    3640:	f04f 0301 	mov.w	r3, #1
    3644:	60fb      	str	r3, [r7, #12]
		break;
    3646:	e007      	b.n	3658 <CLKPWR_GetPCLK+0x54>

	case 2:
		div = 2;
    3648:	f04f 0302 	mov.w	r3, #2
    364c:	60fb      	str	r3, [r7, #12]
		break;
    364e:	e003      	b.n	3658 <CLKPWR_GetPCLK+0x54>

	case 3:
		div = 8;
    3650:	f04f 0308 	mov.w	r3, #8
    3654:	60fb      	str	r3, [r7, #12]
		break;
    3656:	bf00      	nop
	}
	retval /= div;
    3658:	68ba      	ldr	r2, [r7, #8]
    365a:	68fb      	ldr	r3, [r7, #12]
    365c:	fbb2 f3f3 	udiv	r3, r2, r3
    3660:	60bb      	str	r3, [r7, #8]

	return retval;
    3662:	68bb      	ldr	r3, [r7, #8]
}
    3664:	4618      	mov	r0, r3
    3666:	f107 0710 	add.w	r7, r7, #16
    366a:	46bd      	mov	sp, r7
    366c:	bd80      	pop	{r7, pc}
    366e:	bf00      	nop
    3670:	1000000c 	.word	0x1000000c

00003674 <CLKPWR_ConfigPPWR>:
 * 				- DISABLE	: Disable power for this peripheral
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
    3674:	b480      	push	{r7}
    3676:	b083      	sub	sp, #12
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
    367c:	460b      	mov	r3, r1
    367e:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE)
    3680:	78fb      	ldrb	r3, [r7, #3]
    3682:	2b01      	cmp	r3, #1
    3684:	d10c      	bne.n	36a0 <CLKPWR_ConfigPPWR+0x2c>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
    3686:	4a11      	ldr	r2, [pc, #68]	; (36cc <CLKPWR_ConfigPPWR+0x58>)
    3688:	4b10      	ldr	r3, [pc, #64]	; (36cc <CLKPWR_ConfigPPWR+0x58>)
    368a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    368e:	6878      	ldr	r0, [r7, #4]
    3690:	4b0f      	ldr	r3, [pc, #60]	; (36d0 <CLKPWR_ConfigPPWR+0x5c>)
    3692:	ea00 0303 	and.w	r3, r0, r3
    3696:	ea41 0303 	orr.w	r3, r1, r3
    369a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    369e:	e00f      	b.n	36c0 <CLKPWR_ConfigPPWR+0x4c>
	}
	else if (NewState == DISABLE)
    36a0:	78fb      	ldrb	r3, [r7, #3]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d10c      	bne.n	36c0 <CLKPWR_ConfigPPWR+0x4c>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
    36a6:	4a09      	ldr	r2, [pc, #36]	; (36cc <CLKPWR_ConfigPPWR+0x58>)
    36a8:	4b08      	ldr	r3, [pc, #32]	; (36cc <CLKPWR_ConfigPPWR+0x58>)
    36aa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    36ae:	687b      	ldr	r3, [r7, #4]
    36b0:	ea6f 0303 	mvn.w	r3, r3
    36b4:	4019      	ands	r1, r3
    36b6:	4b06      	ldr	r3, [pc, #24]	; (36d0 <CLKPWR_ConfigPPWR+0x5c>)
    36b8:	ea01 0303 	and.w	r3, r1, r3
    36bc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	}
}
    36c0:	f107 070c 	add.w	r7, r7, #12
    36c4:	46bd      	mov	sp, r7
    36c6:	bc80      	pop	{r7}
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop
    36cc:	400fc000 	.word	0x400fc000
    36d0:	efeff7de 	.word	0xefeff7de

000036d4 <CLKPWR_Sleep>:
 * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
    36d4:	b480      	push	{r7}
    36d6:	af00      	add	r7, sp, #0
	LPC_SC->PCON = 0x00;
    36d8:	4b04      	ldr	r3, [pc, #16]	; (36ec <CLKPWR_Sleep+0x18>)
    36da:	f04f 0200 	mov.w	r2, #0
    36de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    36e2:	bf30      	wfi
	/* Sleep Mode*/
	__WFI();
}
    36e4:	46bd      	mov	sp, r7
    36e6:	bc80      	pop	{r7}
    36e8:	4770      	bx	lr
    36ea:	bf00      	nop
    36ec:	400fc000 	.word	0x400fc000

000036f0 <CLKPWR_DeepSleep>:
 * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    36f0:	b480      	push	{r7}
    36f2:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    36f4:	4b06      	ldr	r3, [pc, #24]	; (3710 <CLKPWR_DeepSleep+0x20>)
    36f6:	f04f 0204 	mov.w	r2, #4
    36fa:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
    36fc:	4b05      	ldr	r3, [pc, #20]	; (3714 <CLKPWR_DeepSleep+0x24>)
    36fe:	f04f 0208 	mov.w	r2, #8
    3702:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    3706:	bf30      	wfi
	/* Deep Sleep Mode*/
	__WFI();
}
    3708:	46bd      	mov	sp, r7
    370a:	bc80      	pop	{r7}
    370c:	4770      	bx	lr
    370e:	bf00      	nop
    3710:	e000ed00 	.word	0xe000ed00
    3714:	400fc000 	.word	0x400fc000

00003718 <CLKPWR_PowerDown>:
 * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    3718:	b480      	push	{r7}
    371a:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    371c:	4b06      	ldr	r3, [pc, #24]	; (3738 <CLKPWR_PowerDown+0x20>)
    371e:	f04f 0204 	mov.w	r2, #4
    3722:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
    3724:	4b05      	ldr	r3, [pc, #20]	; (373c <CLKPWR_PowerDown+0x24>)
    3726:	f04f 0209 	mov.w	r2, #9
    372a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    372e:	bf30      	wfi
	/* Power Down Mode*/
	__WFI();
}
    3730:	46bd      	mov	sp, r7
    3732:	bc80      	pop	{r7}
    3734:	4770      	bx	lr
    3736:	bf00      	nop
    3738:	e000ed00 	.word	0xe000ed00
    373c:	400fc000 	.word	0x400fc000

00003740 <CLKPWR_DeepPowerDown>:
 * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    3740:	b480      	push	{r7}
    3742:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    3744:	4b06      	ldr	r3, [pc, #24]	; (3760 <CLKPWR_DeepPowerDown+0x20>)
    3746:	f04f 0204 	mov.w	r2, #4
    374a:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
    374c:	4b05      	ldr	r3, [pc, #20]	; (3764 <CLKPWR_DeepPowerDown+0x24>)
    374e:	f04f 0203 	mov.w	r2, #3
    3752:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    3756:	bf30      	wfi
	/* Deep Power Down Mode*/
	__WFI();
}
    3758:	46bd      	mov	sp, r7
    375a:	bc80      	pop	{r7}
    375c:	4770      	bx	lr
    375e:	bf00      	nop
    3760:	e000ed00 	.word	0xe000ed00
    3764:	400fc000 	.word	0x400fc000

00003768 <EXTI_Init>:
 * 				- Set EXTINT, EXTMODE, EXTPOLAR registers to default value
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void EXTI_Init(void)
{
    3768:	b480      	push	{r7}
    376a:	af00      	add	r7, sp, #0
	LPC_SC->EXTINT = 0xF;
    376c:	4b08      	ldr	r3, [pc, #32]	; (3790 <EXTI_Init+0x28>)
    376e:	f04f 020f 	mov.w	r2, #15
    3772:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	LPC_SC->EXTMODE = 0x0;
    3776:	4b06      	ldr	r3, [pc, #24]	; (3790 <EXTI_Init+0x28>)
    3778:	f04f 0200 	mov.w	r2, #0
    377c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	LPC_SC->EXTPOLAR = 0x0;
    3780:	4b03      	ldr	r3, [pc, #12]	; (3790 <EXTI_Init+0x28>)
    3782:	f04f 0200 	mov.w	r2, #0
    3786:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
    378a:	46bd      	mov	sp, r7
    378c:	bc80      	pop	{r7}
    378e:	4770      	bx	lr
    3790:	400fc000 	.word	0x400fc000

00003794 <EXTI_DeInit>:
* @brief 		Close EXT
* @param[in]	None
* @return 		None
**********************************************************************/
void	EXTI_DeInit(void)
{
    3794:	b480      	push	{r7}
    3796:	af00      	add	r7, sp, #0
	;
}
    3798:	46bd      	mov	sp, r7
    379a:	bc80      	pop	{r7}
    379c:	4770      	bx	lr
    379e:	bf00      	nop

000037a0 <EXTI_Config>:
 *              that contains the configuration information for the
 *              specified external interrupt
 * @return 		None
 **********************************************************************/
void EXTI_Config(EXTI_InitTypeDef *EXTICfg)
{
    37a0:	b580      	push	{r7, lr}
    37a2:	b082      	sub	sp, #8
    37a4:	af00      	add	r7, sp, #0
    37a6:	6078      	str	r0, [r7, #4]
	LPC_SC->EXTINT = 0x0;
    37a8:	4b0c      	ldr	r3, [pc, #48]	; (37dc <EXTI_Config+0x3c>)
    37aa:	f04f 0200 	mov.w	r2, #0
    37ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	EXTI_SetMode(EXTICfg->EXTI_Line, EXTICfg->EXTI_Mode);
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	781a      	ldrb	r2, [r3, #0]
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	785b      	ldrb	r3, [r3, #1]
    37ba:	4610      	mov	r0, r2
    37bc:	4619      	mov	r1, r3
    37be:	f000 f80f 	bl	37e0 <EXTI_SetMode>
	EXTI_SetPolarity(EXTICfg->EXTI_Line, EXTICfg->EXTI_polarity);
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	781a      	ldrb	r2, [r3, #0]
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	789b      	ldrb	r3, [r3, #2]
    37ca:	4610      	mov	r0, r2
    37cc:	4619      	mov	r1, r3
    37ce:	f000 f839 	bl	3844 <EXTI_SetPolarity>
}
    37d2:	f107 0708 	add.w	r7, r7, #8
    37d6:	46bd      	mov	sp, r7
    37d8:	bd80      	pop	{r7, pc}
    37da:	bf00      	nop
    37dc:	400fc000 	.word	0x400fc000

000037e0 <EXTI_SetMode>:
* 				- EXTI_MODE_LEVEL_SENSITIVE
* 				- EXTI_MODE_EDGE_SENSITIVE
* @return 		None
*********************************************************************/
void EXTI_SetMode(EXTI_LINE_ENUM EXTILine, EXTI_MODE_ENUM mode)
{
    37e0:	b480      	push	{r7}
    37e2:	b083      	sub	sp, #12
    37e4:	af00      	add	r7, sp, #0
    37e6:	4602      	mov	r2, r0
    37e8:	460b      	mov	r3, r1
    37ea:	71fa      	strb	r2, [r7, #7]
    37ec:	71bb      	strb	r3, [r7, #6]
	if(mode == EXTI_MODE_EDGE_SENSITIVE)
    37ee:	79bb      	ldrb	r3, [r7, #6]
    37f0:	2b01      	cmp	r3, #1
    37f2:	d10d      	bne.n	3810 <EXTI_SetMode+0x30>
	{
		LPC_SC->EXTMODE |= (1 << EXTILine);
    37f4:	4b12      	ldr	r3, [pc, #72]	; (3840 <EXTI_SetMode+0x60>)
    37f6:	4a12      	ldr	r2, [pc, #72]	; (3840 <EXTI_SetMode+0x60>)
    37f8:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
    37fc:	79fa      	ldrb	r2, [r7, #7]
    37fe:	f04f 0001 	mov.w	r0, #1
    3802:	fa00 f202 	lsl.w	r2, r0, r2
    3806:	ea41 0202 	orr.w	r2, r1, r2
    380a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    380e:	e011      	b.n	3834 <EXTI_SetMode+0x54>
	}
	else if(mode == EXTI_MODE_LEVEL_SENSITIVE)
    3810:	79bb      	ldrb	r3, [r7, #6]
    3812:	2b00      	cmp	r3, #0
    3814:	d10e      	bne.n	3834 <EXTI_SetMode+0x54>
	{
		LPC_SC->EXTMODE &= ~(1 << EXTILine);
    3816:	4b0a      	ldr	r3, [pc, #40]	; (3840 <EXTI_SetMode+0x60>)
    3818:	4a09      	ldr	r2, [pc, #36]	; (3840 <EXTI_SetMode+0x60>)
    381a:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
    381e:	79fa      	ldrb	r2, [r7, #7]
    3820:	f04f 0001 	mov.w	r0, #1
    3824:	fa00 f202 	lsl.w	r2, r0, r2
    3828:	ea6f 0202 	mvn.w	r2, r2
    382c:	ea01 0202 	and.w	r2, r1, r2
    3830:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
}
    3834:	f107 070c 	add.w	r7, r7, #12
    3838:	46bd      	mov	sp, r7
    383a:	bc80      	pop	{r7}
    383c:	4770      	bx	lr
    383e:	bf00      	nop
    3840:	400fc000 	.word	0x400fc000

00003844 <EXTI_SetPolarity>:
* 				- EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE
* 				- EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE
* @return 		None
*********************************************************************/
void EXTI_SetPolarity(EXTI_LINE_ENUM EXTILine, EXTI_POLARITY_ENUM polarity)
{
    3844:	b480      	push	{r7}
    3846:	b083      	sub	sp, #12
    3848:	af00      	add	r7, sp, #0
    384a:	4602      	mov	r2, r0
    384c:	460b      	mov	r3, r1
    384e:	71fa      	strb	r2, [r7, #7]
    3850:	71bb      	strb	r3, [r7, #6]
	if(polarity == EXTI_POLARITY_HIGH_ACTIVE_OR_RISING_EDGE)
    3852:	79bb      	ldrb	r3, [r7, #6]
    3854:	2b01      	cmp	r3, #1
    3856:	d10d      	bne.n	3874 <EXTI_SetPolarity+0x30>
	{
		LPC_SC->EXTPOLAR |= (1 << EXTILine);
    3858:	4b12      	ldr	r3, [pc, #72]	; (38a4 <EXTI_SetPolarity+0x60>)
    385a:	4a12      	ldr	r2, [pc, #72]	; (38a4 <EXTI_SetPolarity+0x60>)
    385c:	f8d2 114c 	ldr.w	r1, [r2, #332]	; 0x14c
    3860:	79fa      	ldrb	r2, [r7, #7]
    3862:	f04f 0001 	mov.w	r0, #1
    3866:	fa00 f202 	lsl.w	r2, r0, r2
    386a:	ea41 0202 	orr.w	r2, r1, r2
    386e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    3872:	e011      	b.n	3898 <EXTI_SetPolarity+0x54>
	}
	else if(polarity == EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE)
    3874:	79bb      	ldrb	r3, [r7, #6]
    3876:	2b00      	cmp	r3, #0
    3878:	d10e      	bne.n	3898 <EXTI_SetPolarity+0x54>
	{
		LPC_SC->EXTPOLAR &= ~(1 << EXTILine);
    387a:	4b0a      	ldr	r3, [pc, #40]	; (38a4 <EXTI_SetPolarity+0x60>)
    387c:	4a09      	ldr	r2, [pc, #36]	; (38a4 <EXTI_SetPolarity+0x60>)
    387e:	f8d2 114c 	ldr.w	r1, [r2, #332]	; 0x14c
    3882:	79fa      	ldrb	r2, [r7, #7]
    3884:	f04f 0001 	mov.w	r0, #1
    3888:	fa00 f202 	lsl.w	r2, r0, r2
    388c:	ea6f 0202 	mvn.w	r2, r2
    3890:	ea01 0202 	and.w	r2, r1, r2
    3894:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
}
    3898:	f107 070c 	add.w	r7, r7, #12
    389c:	46bd      	mov	sp, r7
    389e:	bc80      	pop	{r7}
    38a0:	4770      	bx	lr
    38a2:	bf00      	nop
    38a4:	400fc000 	.word	0x400fc000

000038a8 <EXTI_ClearEXTIFlag>:
* 				- EXTI_EINT2: external interrupt line 2
* 				- EXTI_EINT3: external interrupt line 3
* @return 		None
*********************************************************************/
void EXTI_ClearEXTIFlag(EXTI_LINE_ENUM EXTILine)
{
    38a8:	b480      	push	{r7}
    38aa:	b083      	sub	sp, #12
    38ac:	af00      	add	r7, sp, #0
    38ae:	4603      	mov	r3, r0
    38b0:	71fb      	strb	r3, [r7, #7]
		LPC_SC->EXTINT |= (1 << EXTILine);
    38b2:	4b09      	ldr	r3, [pc, #36]	; (38d8 <EXTI_ClearEXTIFlag+0x30>)
    38b4:	4a08      	ldr	r2, [pc, #32]	; (38d8 <EXTI_ClearEXTIFlag+0x30>)
    38b6:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    38ba:	79fa      	ldrb	r2, [r7, #7]
    38bc:	f04f 0001 	mov.w	r0, #1
    38c0:	fa00 f202 	lsl.w	r2, r0, r2
    38c4:	ea41 0202 	orr.w	r2, r1, r2
    38c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
    38cc:	f107 070c 	add.w	r7, r7, #12
    38d0:	46bd      	mov	sp, r7
    38d2:	bc80      	pop	{r7}
    38d4:	4770      	bx	lr
    38d6:	bf00      	nop
    38d8:	400fc000 	.word	0x400fc000

000038dc <GPIO_GetPointer>:
 * @brief		Get pointer to GPIO peripheral due to GPIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to GPIO peripheral
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
    38dc:	b480      	push	{r7}
    38de:	b085      	sub	sp, #20
    38e0:	af00      	add	r7, sp, #0
    38e2:	4603      	mov	r3, r0
    38e4:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = NULL;
    38e6:	f04f 0300 	mov.w	r3, #0
    38ea:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    38ec:	79fb      	ldrb	r3, [r7, #7]
    38ee:	2b04      	cmp	r3, #4
    38f0:	d81b      	bhi.n	392a <GPIO_GetPointer+0x4e>
    38f2:	a201      	add	r2, pc, #4	; (adr r2, 38f8 <GPIO_GetPointer+0x1c>)
    38f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    38f8:	0000390d 	.word	0x0000390d
    38fc:	00003913 	.word	0x00003913
    3900:	00003919 	.word	0x00003919
    3904:	0000391f 	.word	0x0000391f
    3908:	00003925 	.word	0x00003925
	case 0:
		pGPIO = LPC_GPIO0;
    390c:	4b0b      	ldr	r3, [pc, #44]	; (393c <GPIO_GetPointer+0x60>)
    390e:	60fb      	str	r3, [r7, #12]
		break;
    3910:	e00c      	b.n	392c <GPIO_GetPointer+0x50>
	case 1:
		pGPIO = LPC_GPIO1;
    3912:	4b0b      	ldr	r3, [pc, #44]	; (3940 <GPIO_GetPointer+0x64>)
    3914:	60fb      	str	r3, [r7, #12]
		break;
    3916:	e009      	b.n	392c <GPIO_GetPointer+0x50>
	case 2:
		pGPIO = LPC_GPIO2;
    3918:	4b0a      	ldr	r3, [pc, #40]	; (3944 <GPIO_GetPointer+0x68>)
    391a:	60fb      	str	r3, [r7, #12]
		break;
    391c:	e006      	b.n	392c <GPIO_GetPointer+0x50>
	case 3:
		pGPIO = LPC_GPIO3;
    391e:	4b0a      	ldr	r3, [pc, #40]	; (3948 <GPIO_GetPointer+0x6c>)
    3920:	60fb      	str	r3, [r7, #12]
		break;
    3922:	e003      	b.n	392c <GPIO_GetPointer+0x50>
	case 4:
		pGPIO = LPC_GPIO4;
    3924:	4b09      	ldr	r3, [pc, #36]	; (394c <GPIO_GetPointer+0x70>)
    3926:	60fb      	str	r3, [r7, #12]
		break;
    3928:	e000      	b.n	392c <GPIO_GetPointer+0x50>
	default:
		break;
    392a:	bf00      	nop
	}

	return pGPIO;
    392c:	68fb      	ldr	r3, [r7, #12]
}
    392e:	4618      	mov	r0, r3
    3930:	f107 0714 	add.w	r7, r7, #20
    3934:	46bd      	mov	sp, r7
    3936:	bc80      	pop	{r7}
    3938:	4770      	bx	lr
    393a:	bf00      	nop
    393c:	2009c000 	.word	0x2009c000
    3940:	2009c020 	.word	0x2009c020
    3944:	2009c040 	.word	0x2009c040
    3948:	2009c060 	.word	0x2009c060
    394c:	2009c080 	.word	0x2009c080

00003950 <FIO_HalfWordGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_HalfWord_TypeDef *FIO_HalfWordGetPointer(uint8_t portNum)
{
    3950:	b480      	push	{r7}
    3952:	b085      	sub	sp, #20
    3954:	af00      	add	r7, sp, #0
    3956:	4603      	mov	r3, r0
    3958:	71fb      	strb	r3, [r7, #7]
	GPIO_HalfWord_TypeDef *pFIO = NULL;
    395a:	f04f 0300 	mov.w	r3, #0
    395e:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    3960:	79fb      	ldrb	r3, [r7, #7]
    3962:	2b04      	cmp	r3, #4
    3964:	d81b      	bhi.n	399e <FIO_HalfWordGetPointer+0x4e>
    3966:	a201      	add	r2, pc, #4	; (adr r2, 396c <FIO_HalfWordGetPointer+0x1c>)
    3968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    396c:	00003981 	.word	0x00003981
    3970:	00003987 	.word	0x00003987
    3974:	0000398d 	.word	0x0000398d
    3978:	00003993 	.word	0x00003993
    397c:	00003999 	.word	0x00003999
	case 0:
		pFIO = GPIO0_HalfWord;
    3980:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <FIO_HalfWordGetPointer+0x60>)
    3982:	60fb      	str	r3, [r7, #12]
		break;
    3984:	e00c      	b.n	39a0 <FIO_HalfWordGetPointer+0x50>
	case 1:
		pFIO = GPIO1_HalfWord;
    3986:	4b0b      	ldr	r3, [pc, #44]	; (39b4 <FIO_HalfWordGetPointer+0x64>)
    3988:	60fb      	str	r3, [r7, #12]
		break;
    398a:	e009      	b.n	39a0 <FIO_HalfWordGetPointer+0x50>
	case 2:
		pFIO = GPIO2_HalfWord;
    398c:	4b0a      	ldr	r3, [pc, #40]	; (39b8 <FIO_HalfWordGetPointer+0x68>)
    398e:	60fb      	str	r3, [r7, #12]
		break;
    3990:	e006      	b.n	39a0 <FIO_HalfWordGetPointer+0x50>
	case 3:
		pFIO = GPIO3_HalfWord;
    3992:	4b0a      	ldr	r3, [pc, #40]	; (39bc <FIO_HalfWordGetPointer+0x6c>)
    3994:	60fb      	str	r3, [r7, #12]
		break;
    3996:	e003      	b.n	39a0 <FIO_HalfWordGetPointer+0x50>
	case 4:
		pFIO = GPIO4_HalfWord;
    3998:	4b09      	ldr	r3, [pc, #36]	; (39c0 <FIO_HalfWordGetPointer+0x70>)
    399a:	60fb      	str	r3, [r7, #12]
		break;
    399c:	e000      	b.n	39a0 <FIO_HalfWordGetPointer+0x50>
	default:
		break;
    399e:	bf00      	nop
	}

	return pFIO;
    39a0:	68fb      	ldr	r3, [r7, #12]
}
    39a2:	4618      	mov	r0, r3
    39a4:	f107 0714 	add.w	r7, r7, #20
    39a8:	46bd      	mov	sp, r7
    39aa:	bc80      	pop	{r7}
    39ac:	4770      	bx	lr
    39ae:	bf00      	nop
    39b0:	2009c000 	.word	0x2009c000
    39b4:	2009c020 	.word	0x2009c020
    39b8:	2009c040 	.word	0x2009c040
    39bc:	2009c060 	.word	0x2009c060
    39c0:	2009c080 	.word	0x2009c080

000039c4 <FIO_ByteGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_Byte_TypeDef *FIO_ByteGetPointer(uint8_t portNum)
{
    39c4:	b480      	push	{r7}
    39c6:	b085      	sub	sp, #20
    39c8:	af00      	add	r7, sp, #0
    39ca:	4603      	mov	r3, r0
    39cc:	71fb      	strb	r3, [r7, #7]
	GPIO_Byte_TypeDef *pFIO = NULL;
    39ce:	f04f 0300 	mov.w	r3, #0
    39d2:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    39d4:	79fb      	ldrb	r3, [r7, #7]
    39d6:	2b04      	cmp	r3, #4
    39d8:	d81b      	bhi.n	3a12 <FIO_ByteGetPointer+0x4e>
    39da:	a201      	add	r2, pc, #4	; (adr r2, 39e0 <FIO_ByteGetPointer+0x1c>)
    39dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    39e0:	000039f5 	.word	0x000039f5
    39e4:	000039fb 	.word	0x000039fb
    39e8:	00003a01 	.word	0x00003a01
    39ec:	00003a07 	.word	0x00003a07
    39f0:	00003a0d 	.word	0x00003a0d
	case 0:
		pFIO = GPIO0_Byte;
    39f4:	4b0b      	ldr	r3, [pc, #44]	; (3a24 <FIO_ByteGetPointer+0x60>)
    39f6:	60fb      	str	r3, [r7, #12]
		break;
    39f8:	e00c      	b.n	3a14 <FIO_ByteGetPointer+0x50>
	case 1:
		pFIO = GPIO1_Byte;
    39fa:	4b0b      	ldr	r3, [pc, #44]	; (3a28 <FIO_ByteGetPointer+0x64>)
    39fc:	60fb      	str	r3, [r7, #12]
		break;
    39fe:	e009      	b.n	3a14 <FIO_ByteGetPointer+0x50>
	case 2:
		pFIO = GPIO2_Byte;
    3a00:	4b0a      	ldr	r3, [pc, #40]	; (3a2c <FIO_ByteGetPointer+0x68>)
    3a02:	60fb      	str	r3, [r7, #12]
		break;
    3a04:	e006      	b.n	3a14 <FIO_ByteGetPointer+0x50>
	case 3:
		pFIO = GPIO3_Byte;
    3a06:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <FIO_ByteGetPointer+0x6c>)
    3a08:	60fb      	str	r3, [r7, #12]
		break;
    3a0a:	e003      	b.n	3a14 <FIO_ByteGetPointer+0x50>
	case 4:
		pFIO = GPIO4_Byte;
    3a0c:	4b09      	ldr	r3, [pc, #36]	; (3a34 <FIO_ByteGetPointer+0x70>)
    3a0e:	60fb      	str	r3, [r7, #12]
		break;
    3a10:	e000      	b.n	3a14 <FIO_ByteGetPointer+0x50>
	default:
		break;
    3a12:	bf00      	nop
	}

	return pFIO;
    3a14:	68fb      	ldr	r3, [r7, #12]
}
    3a16:	4618      	mov	r0, r3
    3a18:	f107 0714 	add.w	r7, r7, #20
    3a1c:	46bd      	mov	sp, r7
    3a1e:	bc80      	pop	{r7}
    3a20:	4770      	bx	lr
    3a22:	bf00      	nop
    3a24:	2009c000 	.word	0x2009c000
    3a28:	2009c020 	.word	0x2009c020
    3a2c:	2009c040 	.word	0x2009c040
    3a30:	2009c060 	.word	0x2009c060
    3a34:	2009c080 	.word	0x2009c080

00003a38 <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	b086      	sub	sp, #24
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60b9      	str	r1, [r7, #8]
    3a40:	4613      	mov	r3, r2
    3a42:	4602      	mov	r2, r0
    3a44:	73fa      	strb	r2, [r7, #15]
    3a46:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3a48:	7bfb      	ldrb	r3, [r7, #15]
    3a4a:	4618      	mov	r0, r3
    3a4c:	f7ff ff46 	bl	38dc <GPIO_GetPointer>
    3a50:	6178      	str	r0, [r7, #20]

	if (pGPIO != NULL) {
    3a52:	697b      	ldr	r3, [r7, #20]
    3a54:	2b00      	cmp	r3, #0
    3a56:	d011      	beq.n	3a7c <GPIO_SetDir+0x44>
		// Enable Output
		if (dir) {
    3a58:	79fb      	ldrb	r3, [r7, #7]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d006      	beq.n	3a6c <GPIO_SetDir+0x34>
			pGPIO->FIODIR |= bitValue;
    3a5e:	697b      	ldr	r3, [r7, #20]
    3a60:	681a      	ldr	r2, [r3, #0]
    3a62:	68bb      	ldr	r3, [r7, #8]
    3a64:	431a      	orrs	r2, r3
    3a66:	697b      	ldr	r3, [r7, #20]
    3a68:	601a      	str	r2, [r3, #0]
    3a6a:	e007      	b.n	3a7c <GPIO_SetDir+0x44>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
    3a6c:	697b      	ldr	r3, [r7, #20]
    3a6e:	681a      	ldr	r2, [r3, #0]
    3a70:	68bb      	ldr	r3, [r7, #8]
    3a72:	ea6f 0303 	mvn.w	r3, r3
    3a76:	401a      	ands	r2, r3
    3a78:	697b      	ldr	r3, [r7, #20]
    3a7a:	601a      	str	r2, [r3, #0]
		}
	}
}
    3a7c:	f107 0718 	add.w	r7, r7, #24
    3a80:	46bd      	mov	sp, r7
    3a82:	bd80      	pop	{r7, pc}

00003a84 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    3a84:	b580      	push	{r7, lr}
    3a86:	b084      	sub	sp, #16
    3a88:	af00      	add	r7, sp, #0
    3a8a:	4603      	mov	r3, r0
    3a8c:	6039      	str	r1, [r7, #0]
    3a8e:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3a90:	79fb      	ldrb	r3, [r7, #7]
    3a92:	4618      	mov	r0, r3
    3a94:	f7ff ff22 	bl	38dc <GPIO_GetPointer>
    3a98:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
    3a9a:	68fb      	ldr	r3, [r7, #12]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d002      	beq.n	3aa6 <GPIO_SetValue+0x22>
		pGPIO->FIOSET = bitValue;
    3aa0:	68fb      	ldr	r3, [r7, #12]
    3aa2:	683a      	ldr	r2, [r7, #0]
    3aa4:	619a      	str	r2, [r3, #24]
	}
}
    3aa6:	f107 0710 	add.w	r7, r7, #16
    3aaa:	46bd      	mov	sp, r7
    3aac:	bd80      	pop	{r7, pc}
    3aae:	bf00      	nop

00003ab0 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    3ab0:	b580      	push	{r7, lr}
    3ab2:	b084      	sub	sp, #16
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	4603      	mov	r3, r0
    3ab8:	6039      	str	r1, [r7, #0]
    3aba:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3abc:	79fb      	ldrb	r3, [r7, #7]
    3abe:	4618      	mov	r0, r3
    3ac0:	f7ff ff0c 	bl	38dc <GPIO_GetPointer>
    3ac4:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
    3ac6:	68fb      	ldr	r3, [r7, #12]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d002      	beq.n	3ad2 <GPIO_ClearValue+0x22>
		pGPIO->FIOCLR = bitValue;
    3acc:	68fb      	ldr	r3, [r7, #12]
    3ace:	683a      	ldr	r2, [r7, #0]
    3ad0:	61da      	str	r2, [r3, #28]
	}
}
    3ad2:	f107 0710 	add.w	r7, r7, #16
    3ad6:	46bd      	mov	sp, r7
    3ad8:	bd80      	pop	{r7, pc}
    3ada:	bf00      	nop

00003adc <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b084      	sub	sp, #16
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	4603      	mov	r3, r0
    3ae4:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3ae6:	79fb      	ldrb	r3, [r7, #7]
    3ae8:	4618      	mov	r0, r3
    3aea:	f7ff fef7 	bl	38dc <GPIO_GetPointer>
    3aee:	60f8      	str	r0, [r7, #12]

	if (pGPIO != NULL) {
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d002      	beq.n	3afc <GPIO_ReadValue+0x20>
		return pGPIO->FIOPIN;
    3af6:	68fb      	ldr	r3, [r7, #12]
    3af8:	695b      	ldr	r3, [r3, #20]
    3afa:	e001      	b.n	3b00 <GPIO_ReadValue+0x24>
	}

	return (0);
    3afc:	f04f 0300 	mov.w	r3, #0
}
    3b00:	4618      	mov	r0, r3
    3b02:	f107 0710 	add.w	r7, r7, #16
    3b06:	46bd      	mov	sp, r7
    3b08:	bd80      	pop	{r7, pc}
    3b0a:	bf00      	nop

00003b0c <GPIO_IntCmd>:
 * 							- 0: Rising edge
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	60b9      	str	r1, [r7, #8]
    3b14:	4613      	mov	r3, r2
    3b16:	4602      	mov	r2, r0
    3b18:	73fa      	strb	r2, [r7, #15]
    3b1a:	71fb      	strb	r3, [r7, #7]
	if((portNum == 0)&&(edgeState == 0))
    3b1c:	7bfb      	ldrb	r3, [r7, #15]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d106      	bne.n	3b30 <GPIO_IntCmd+0x24>
    3b22:	79fb      	ldrb	r3, [r7, #7]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d103      	bne.n	3b30 <GPIO_IntCmd+0x24>
		LPC_GPIOINT->IO0IntEnR = bitValue;
    3b28:	4b13      	ldr	r3, [pc, #76]	; (3b78 <GPIO_IntCmd+0x6c>)
    3b2a:	68ba      	ldr	r2, [r7, #8]
    3b2c:	611a      	str	r2, [r3, #16]
    3b2e:	e01e      	b.n	3b6e <GPIO_IntCmd+0x62>
	else if ((portNum == 2)&&(edgeState == 0))
    3b30:	7bfb      	ldrb	r3, [r7, #15]
    3b32:	2b02      	cmp	r3, #2
    3b34:	d106      	bne.n	3b44 <GPIO_IntCmd+0x38>
    3b36:	79fb      	ldrb	r3, [r7, #7]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d103      	bne.n	3b44 <GPIO_IntCmd+0x38>
		LPC_GPIOINT->IO2IntEnR = bitValue;
    3b3c:	4b0e      	ldr	r3, [pc, #56]	; (3b78 <GPIO_IntCmd+0x6c>)
    3b3e:	68ba      	ldr	r2, [r7, #8]
    3b40:	631a      	str	r2, [r3, #48]	; 0x30
    3b42:	e014      	b.n	3b6e <GPIO_IntCmd+0x62>
	else if ((portNum == 0)&&(edgeState == 1))
    3b44:	7bfb      	ldrb	r3, [r7, #15]
    3b46:	2b00      	cmp	r3, #0
    3b48:	d106      	bne.n	3b58 <GPIO_IntCmd+0x4c>
    3b4a:	79fb      	ldrb	r3, [r7, #7]
    3b4c:	2b01      	cmp	r3, #1
    3b4e:	d103      	bne.n	3b58 <GPIO_IntCmd+0x4c>
		LPC_GPIOINT->IO0IntEnF = bitValue;
    3b50:	4b09      	ldr	r3, [pc, #36]	; (3b78 <GPIO_IntCmd+0x6c>)
    3b52:	68ba      	ldr	r2, [r7, #8]
    3b54:	615a      	str	r2, [r3, #20]
    3b56:	e00a      	b.n	3b6e <GPIO_IntCmd+0x62>
	else if ((portNum == 2)&&(edgeState == 1))
    3b58:	7bfb      	ldrb	r3, [r7, #15]
    3b5a:	2b02      	cmp	r3, #2
    3b5c:	d106      	bne.n	3b6c <GPIO_IntCmd+0x60>
    3b5e:	79fb      	ldrb	r3, [r7, #7]
    3b60:	2b01      	cmp	r3, #1
    3b62:	d103      	bne.n	3b6c <GPIO_IntCmd+0x60>
		LPC_GPIOINT->IO2IntEnF = bitValue;
    3b64:	4b04      	ldr	r3, [pc, #16]	; (3b78 <GPIO_IntCmd+0x6c>)
    3b66:	68ba      	ldr	r2, [r7, #8]
    3b68:	635a      	str	r2, [r3, #52]	; 0x34
    3b6a:	e000      	b.n	3b6e <GPIO_IntCmd+0x62>
	else
		//Error
		while(1);
    3b6c:	e7fe      	b.n	3b6c <GPIO_IntCmd+0x60>
}
    3b6e:	f107 0714 	add.w	r7, r7, #20
    3b72:	46bd      	mov	sp, r7
    3b74:	bc80      	pop	{r7}
    3b76:	4770      	bx	lr
    3b78:	40028080 	.word	0x40028080

00003b7c <GPIO_GetIntStatus>:
 * 						- ENABLE: Interrupt has been generated due to a rising
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
    3b7c:	b480      	push	{r7}
    3b7e:	b085      	sub	sp, #20
    3b80:	af00      	add	r7, sp, #0
    3b82:	60b9      	str	r1, [r7, #8]
    3b84:	4613      	mov	r3, r2
    3b86:	4602      	mov	r2, r0
    3b88:	73fa      	strb	r2, [r7, #15]
    3b8a:	71fb      	strb	r3, [r7, #7]
	if((portNum == 0) && (edgeState == 0))//Rising Edge
    3b8c:	7bfb      	ldrb	r3, [r7, #15]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d10c      	bne.n	3bac <GPIO_GetIntStatus+0x30>
    3b92:	79fb      	ldrb	r3, [r7, #7]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d109      	bne.n	3bac <GPIO_GetIntStatus+0x30>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
    3b98:	4b20      	ldr	r3, [pc, #128]	; (3c1c <GPIO_GetIntStatus+0xa0>)
    3b9a:	685a      	ldr	r2, [r3, #4]
    3b9c:	68bb      	ldr	r3, [r7, #8]
    3b9e:	fa22 f303 	lsr.w	r3, r2, r3
    3ba2:	b2db      	uxtb	r3, r3
    3ba4:	f003 0301 	and.w	r3, r3, #1
    3ba8:	b2db      	uxtb	r3, r3
    3baa:	e030      	b.n	3c0e <GPIO_GetIntStatus+0x92>
	else if ((portNum == 2) && (edgeState == 0))
    3bac:	7bfb      	ldrb	r3, [r7, #15]
    3bae:	2b02      	cmp	r3, #2
    3bb0:	d10c      	bne.n	3bcc <GPIO_GetIntStatus+0x50>
    3bb2:	79fb      	ldrb	r3, [r7, #7]
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d109      	bne.n	3bcc <GPIO_GetIntStatus+0x50>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
    3bb8:	4b18      	ldr	r3, [pc, #96]	; (3c1c <GPIO_GetIntStatus+0xa0>)
    3bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3bbc:	68bb      	ldr	r3, [r7, #8]
    3bbe:	fa22 f303 	lsr.w	r3, r2, r3
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	f003 0301 	and.w	r3, r3, #1
    3bc8:	b2db      	uxtb	r3, r3
    3bca:	e020      	b.n	3c0e <GPIO_GetIntStatus+0x92>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
    3bcc:	7bfb      	ldrb	r3, [r7, #15]
    3bce:	2b00      	cmp	r3, #0
    3bd0:	d10c      	bne.n	3bec <GPIO_GetIntStatus+0x70>
    3bd2:	79fb      	ldrb	r3, [r7, #7]
    3bd4:	2b01      	cmp	r3, #1
    3bd6:	d109      	bne.n	3bec <GPIO_GetIntStatus+0x70>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
    3bd8:	4b10      	ldr	r3, [pc, #64]	; (3c1c <GPIO_GetIntStatus+0xa0>)
    3bda:	689a      	ldr	r2, [r3, #8]
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	fa22 f303 	lsr.w	r3, r2, r3
    3be2:	b2db      	uxtb	r3, r3
    3be4:	f003 0301 	and.w	r3, r3, #1
    3be8:	b2db      	uxtb	r3, r3
    3bea:	e010      	b.n	3c0e <GPIO_GetIntStatus+0x92>
	else if ((portNum == 2) && (edgeState == 1))
    3bec:	7bfb      	ldrb	r3, [r7, #15]
    3bee:	2b02      	cmp	r3, #2
    3bf0:	d10c      	bne.n	3c0c <GPIO_GetIntStatus+0x90>
    3bf2:	79fb      	ldrb	r3, [r7, #7]
    3bf4:	2b01      	cmp	r3, #1
    3bf6:	d109      	bne.n	3c0c <GPIO_GetIntStatus+0x90>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
    3bf8:	4b08      	ldr	r3, [pc, #32]	; (3c1c <GPIO_GetIntStatus+0xa0>)
    3bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bfc:	68bb      	ldr	r3, [r7, #8]
    3bfe:	fa22 f303 	lsr.w	r3, r2, r3
    3c02:	b2db      	uxtb	r3, r3
    3c04:	f003 0301 	and.w	r3, r3, #1
    3c08:	b2db      	uxtb	r3, r3
    3c0a:	e000      	b.n	3c0e <GPIO_GetIntStatus+0x92>
	else
		//Error
		while(1);
    3c0c:	e7fe      	b.n	3c0c <GPIO_GetIntStatus+0x90>
}
    3c0e:	4618      	mov	r0, r3
    3c10:	f107 0714 	add.w	r7, r7, #20
    3c14:	46bd      	mov	sp, r7
    3c16:	bc80      	pop	{r7}
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	40028080 	.word	0x40028080

00003c20 <GPIO_ClearInt>:
 * @param[in]	bitValue	Value that contains all bits on GPIO to enable,
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
    3c20:	b480      	push	{r7}
    3c22:	b083      	sub	sp, #12
    3c24:	af00      	add	r7, sp, #0
    3c26:	4603      	mov	r3, r0
    3c28:	6039      	str	r1, [r7, #0]
    3c2a:	71fb      	strb	r3, [r7, #7]
	if(portNum == 0)
    3c2c:	79fb      	ldrb	r3, [r7, #7]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d103      	bne.n	3c3a <GPIO_ClearInt+0x1a>
		LPC_GPIOINT->IO0IntClr = bitValue;
    3c32:	4b08      	ldr	r3, [pc, #32]	; (3c54 <GPIO_ClearInt+0x34>)
    3c34:	683a      	ldr	r2, [r7, #0]
    3c36:	60da      	str	r2, [r3, #12]
    3c38:	e007      	b.n	3c4a <GPIO_ClearInt+0x2a>
	else if (portNum == 2)
    3c3a:	79fb      	ldrb	r3, [r7, #7]
    3c3c:	2b02      	cmp	r3, #2
    3c3e:	d103      	bne.n	3c48 <GPIO_ClearInt+0x28>
		LPC_GPIOINT->IO2IntClr = bitValue;
    3c40:	4b04      	ldr	r3, [pc, #16]	; (3c54 <GPIO_ClearInt+0x34>)
    3c42:	683a      	ldr	r2, [r7, #0]
    3c44:	62da      	str	r2, [r3, #44]	; 0x2c
    3c46:	e000      	b.n	3c4a <GPIO_ClearInt+0x2a>
	else
		//Invalid portNum
		while(1);
    3c48:	e7fe      	b.n	3c48 <GPIO_ClearInt+0x28>
}
    3c4a:	f107 070c 	add.w	r7, r7, #12
    3c4e:	46bd      	mov	sp, r7
    3c50:	bc80      	pop	{r7}
    3c52:	4770      	bx	lr
    3c54:	40028080 	.word	0x40028080

00003c58 <FIO_SetDir>:

/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	b084      	sub	sp, #16
    3c5c:	af00      	add	r7, sp, #0
    3c5e:	60b9      	str	r1, [r7, #8]
    3c60:	4613      	mov	r3, r2
    3c62:	4602      	mov	r2, r0
    3c64:	73fa      	strb	r2, [r7, #15]
    3c66:	71fb      	strb	r3, [r7, #7]
	GPIO_SetDir(portNum, bitValue, dir);
    3c68:	7bfa      	ldrb	r2, [r7, #15]
    3c6a:	79fb      	ldrb	r3, [r7, #7]
    3c6c:	4610      	mov	r0, r2
    3c6e:	68b9      	ldr	r1, [r7, #8]
    3c70:	461a      	mov	r2, r3
    3c72:	f7ff fee1 	bl	3a38 <GPIO_SetDir>
}
    3c76:	f107 0710 	add.w	r7, r7, #16
    3c7a:	46bd      	mov	sp, r7
    3c7c:	bd80      	pop	{r7, pc}
    3c7e:	bf00      	nop

00003c80 <FIO_SetValue>:

/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b082      	sub	sp, #8
    3c84:	af00      	add	r7, sp, #0
    3c86:	4603      	mov	r3, r0
    3c88:	6039      	str	r1, [r7, #0]
    3c8a:	71fb      	strb	r3, [r7, #7]
	GPIO_SetValue(portNum, bitValue);
    3c8c:	79fb      	ldrb	r3, [r7, #7]
    3c8e:	4618      	mov	r0, r3
    3c90:	6839      	ldr	r1, [r7, #0]
    3c92:	f7ff fef7 	bl	3a84 <GPIO_SetValue>
}
    3c96:	f107 0708 	add.w	r7, r7, #8
    3c9a:	46bd      	mov	sp, r7
    3c9c:	bd80      	pop	{r7, pc}
    3c9e:	bf00      	nop

00003ca0 <FIO_ClearValue>:

/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b082      	sub	sp, #8
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	4603      	mov	r3, r0
    3ca8:	6039      	str	r1, [r7, #0]
    3caa:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearValue(portNum, bitValue);
    3cac:	79fb      	ldrb	r3, [r7, #7]
    3cae:	4618      	mov	r0, r3
    3cb0:	6839      	ldr	r1, [r7, #0]
    3cb2:	f7ff fefd 	bl	3ab0 <GPIO_ClearValue>
}
    3cb6:	f107 0708 	add.w	r7, r7, #8
    3cba:	46bd      	mov	sp, r7
    3cbc:	bd80      	pop	{r7, pc}
    3cbe:	bf00      	nop

00003cc0 <FIO_ReadValue>:

/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
    3cc0:	b580      	push	{r7, lr}
    3cc2:	b082      	sub	sp, #8
    3cc4:	af00      	add	r7, sp, #0
    3cc6:	4603      	mov	r3, r0
    3cc8:	71fb      	strb	r3, [r7, #7]
	return (GPIO_ReadValue(portNum));
    3cca:	79fb      	ldrb	r3, [r7, #7]
    3ccc:	4618      	mov	r0, r3
    3cce:	f7ff ff05 	bl	3adc <GPIO_ReadValue>
    3cd2:	4603      	mov	r3, r0
}
    3cd4:	4618      	mov	r0, r3
    3cd6:	f107 0708 	add.w	r7, r7, #8
    3cda:	46bd      	mov	sp, r7
    3cdc:	bd80      	pop	{r7, pc}
    3cde:	bf00      	nop

00003ce0 <FIO_IntCmd>:

/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b084      	sub	sp, #16
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	60b9      	str	r1, [r7, #8]
    3ce8:	4613      	mov	r3, r2
    3cea:	4602      	mov	r2, r0
    3cec:	73fa      	strb	r2, [r7, #15]
    3cee:	71fb      	strb	r3, [r7, #7]
	GPIO_IntCmd(portNum, bitValue, edgeState);
    3cf0:	7bfa      	ldrb	r2, [r7, #15]
    3cf2:	79fb      	ldrb	r3, [r7, #7]
    3cf4:	4610      	mov	r0, r2
    3cf6:	68b9      	ldr	r1, [r7, #8]
    3cf8:	461a      	mov	r2, r3
    3cfa:	f7ff ff07 	bl	3b0c <GPIO_IntCmd>
}
    3cfe:	f107 0710 	add.w	r7, r7, #16
    3d02:	46bd      	mov	sp, r7
    3d04:	bd80      	pop	{r7, pc}
    3d06:	bf00      	nop

00003d08 <FIO_GetIntStatus>:

/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b084      	sub	sp, #16
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	60b9      	str	r1, [r7, #8]
    3d10:	4613      	mov	r3, r2
    3d12:	4602      	mov	r2, r0
    3d14:	73fa      	strb	r2, [r7, #15]
    3d16:	71fb      	strb	r3, [r7, #7]
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
    3d18:	7bfa      	ldrb	r2, [r7, #15]
    3d1a:	79fb      	ldrb	r3, [r7, #7]
    3d1c:	4610      	mov	r0, r2
    3d1e:	68b9      	ldr	r1, [r7, #8]
    3d20:	461a      	mov	r2, r3
    3d22:	f7ff ff2b 	bl	3b7c <GPIO_GetIntStatus>
    3d26:	4603      	mov	r3, r0
}
    3d28:	4618      	mov	r0, r3
    3d2a:	f107 0710 	add.w	r7, r7, #16
    3d2e:	46bd      	mov	sp, r7
    3d30:	bd80      	pop	{r7, pc}
    3d32:	bf00      	nop

00003d34 <FIO_ClearInt>:

/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	4603      	mov	r3, r0
    3d3c:	6039      	str	r1, [r7, #0]
    3d3e:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearInt(portNum, bitValue);
    3d40:	79fb      	ldrb	r3, [r7, #7]
    3d42:	4618      	mov	r0, r3
    3d44:	6839      	ldr	r1, [r7, #0]
    3d46:	f7ff ff6b 	bl	3c20 <GPIO_ClearInt>
}
    3d4a:	f107 0708 	add.w	r7, r7, #8
    3d4e:	46bd      	mov	sp, r7
    3d50:	bd80      	pop	{r7, pc}
    3d52:	bf00      	nop

00003d54 <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b086      	sub	sp, #24
    3d58:	af00      	add	r7, sp, #0
    3d5a:	60b9      	str	r1, [r7, #8]
    3d5c:	4613      	mov	r3, r2
    3d5e:	4602      	mov	r2, r0
    3d60:	73fa      	strb	r2, [r7, #15]
    3d62:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
    3d64:	7bfb      	ldrb	r3, [r7, #15]
    3d66:	4618      	mov	r0, r3
    3d68:	f7ff fdb8 	bl	38dc <GPIO_GetPointer>
    3d6c:	6178      	str	r0, [r7, #20]
	if(pFIO != NULL) {
    3d6e:	697b      	ldr	r3, [r7, #20]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d011      	beq.n	3d98 <FIO_SetMask+0x44>
		// Mask
		if (maskValue){
    3d74:	79fb      	ldrb	r3, [r7, #7]
    3d76:	2b00      	cmp	r3, #0
    3d78:	d006      	beq.n	3d88 <FIO_SetMask+0x34>
			pFIO->FIOMASK |= bitValue;
    3d7a:	697b      	ldr	r3, [r7, #20]
    3d7c:	691a      	ldr	r2, [r3, #16]
    3d7e:	68bb      	ldr	r3, [r7, #8]
    3d80:	431a      	orrs	r2, r3
    3d82:	697b      	ldr	r3, [r7, #20]
    3d84:	611a      	str	r2, [r3, #16]
    3d86:	e007      	b.n	3d98 <FIO_SetMask+0x44>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
    3d88:	697b      	ldr	r3, [r7, #20]
    3d8a:	691a      	ldr	r2, [r3, #16]
    3d8c:	68bb      	ldr	r3, [r7, #8]
    3d8e:	ea6f 0303 	mvn.w	r3, r3
    3d92:	401a      	ands	r2, r3
    3d94:	697b      	ldr	r3, [r7, #20]
    3d96:	611a      	str	r2, [r3, #16]
		}
	}
}
    3d98:	f107 0718 	add.w	r7, r7, #24
    3d9c:	46bd      	mov	sp, r7
    3d9e:	bd80      	pop	{r7, pc}

00003da0 <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b084      	sub	sp, #16
    3da4:	af00      	add	r7, sp, #0
    3da6:	71f8      	strb	r0, [r7, #7]
    3da8:	71b9      	strb	r1, [r7, #6]
    3daa:	80ba      	strh	r2, [r7, #4]
    3dac:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    3dae:	79fb      	ldrb	r3, [r7, #7]
    3db0:	4618      	mov	r0, r3
    3db2:	f7ff fdcd 	bl	3950 <FIO_HalfWordGetPointer>
    3db6:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3db8:	68fb      	ldr	r3, [r7, #12]
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d039      	beq.n	3e32 <FIO_HalfWordSetDir+0x92>
		// Output direction
		if (dir) {
    3dbe:	78fb      	ldrb	r3, [r7, #3]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d016      	beq.n	3df2 <FIO_HalfWordSetDir+0x52>
			// Upper
			if(halfwordNum) {
    3dc4:	79bb      	ldrb	r3, [r7, #6]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d009      	beq.n	3dde <FIO_HalfWordSetDir+0x3e>
				pFIO->FIODIRU |= bitValue;
    3dca:	68fb      	ldr	r3, [r7, #12]
    3dcc:	885b      	ldrh	r3, [r3, #2]
    3dce:	b29a      	uxth	r2, r3
    3dd0:	88bb      	ldrh	r3, [r7, #4]
    3dd2:	ea42 0303 	orr.w	r3, r2, r3
    3dd6:	b29a      	uxth	r2, r3
    3dd8:	68fb      	ldr	r3, [r7, #12]
    3dda:	805a      	strh	r2, [r3, #2]
    3ddc:	e029      	b.n	3e32 <FIO_HalfWordSetDir+0x92>
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
    3dde:	68fb      	ldr	r3, [r7, #12]
    3de0:	881b      	ldrh	r3, [r3, #0]
    3de2:	b29a      	uxth	r2, r3
    3de4:	88bb      	ldrh	r3, [r7, #4]
    3de6:	ea42 0303 	orr.w	r3, r2, r3
    3dea:	b29a      	uxth	r2, r3
    3dec:	68fb      	ldr	r3, [r7, #12]
    3dee:	801a      	strh	r2, [r3, #0]
    3df0:	e01f      	b.n	3e32 <FIO_HalfWordSetDir+0x92>
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
    3df2:	79bb      	ldrb	r3, [r7, #6]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d00e      	beq.n	3e16 <FIO_HalfWordSetDir+0x76>
				pFIO->FIODIRU &= ~bitValue;
    3df8:	68fb      	ldr	r3, [r7, #12]
    3dfa:	885b      	ldrh	r3, [r3, #2]
    3dfc:	b29b      	uxth	r3, r3
    3dfe:	b29a      	uxth	r2, r3
    3e00:	88bb      	ldrh	r3, [r7, #4]
    3e02:	ea6f 0303 	mvn.w	r3, r3
    3e06:	b29b      	uxth	r3, r3
    3e08:	ea02 0303 	and.w	r3, r2, r3
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	b29a      	uxth	r2, r3
    3e10:	68fb      	ldr	r3, [r7, #12]
    3e12:	805a      	strh	r2, [r3, #2]
    3e14:	e00d      	b.n	3e32 <FIO_HalfWordSetDir+0x92>
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	881b      	ldrh	r3, [r3, #0]
    3e1a:	b29b      	uxth	r3, r3
    3e1c:	b29a      	uxth	r2, r3
    3e1e:	88bb      	ldrh	r3, [r7, #4]
    3e20:	ea6f 0303 	mvn.w	r3, r3
    3e24:	b29b      	uxth	r3, r3
    3e26:	ea02 0303 	and.w	r3, r2, r3
    3e2a:	b29b      	uxth	r3, r3
    3e2c:	b29a      	uxth	r2, r3
    3e2e:	68fb      	ldr	r3, [r7, #12]
    3e30:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
    3e32:	f107 0710 	add.w	r7, r7, #16
    3e36:	46bd      	mov	sp, r7
    3e38:	bd80      	pop	{r7, pc}
    3e3a:	bf00      	nop

00003e3c <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b084      	sub	sp, #16
    3e40:	af00      	add	r7, sp, #0
    3e42:	71f8      	strb	r0, [r7, #7]
    3e44:	71b9      	strb	r1, [r7, #6]
    3e46:	80ba      	strh	r2, [r7, #4]
    3e48:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    3e4a:	79fb      	ldrb	r3, [r7, #7]
    3e4c:	4618      	mov	r0, r3
    3e4e:	f7ff fd7f 	bl	3950 <FIO_HalfWordGetPointer>
    3e52:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3e54:	68fb      	ldr	r3, [r7, #12]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d039      	beq.n	3ece <FIO_HalfWordSetMask+0x92>
		// Mask
		if (maskValue){
    3e5a:	78fb      	ldrb	r3, [r7, #3]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d016      	beq.n	3e8e <FIO_HalfWordSetMask+0x52>
			// Upper
			if(halfwordNum) {
    3e60:	79bb      	ldrb	r3, [r7, #6]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d009      	beq.n	3e7a <FIO_HalfWordSetMask+0x3e>
				pFIO->FIOMASKU |= bitValue;
    3e66:	68fb      	ldr	r3, [r7, #12]
    3e68:	8a5b      	ldrh	r3, [r3, #18]
    3e6a:	b29a      	uxth	r2, r3
    3e6c:	88bb      	ldrh	r3, [r7, #4]
    3e6e:	ea42 0303 	orr.w	r3, r2, r3
    3e72:	b29a      	uxth	r2, r3
    3e74:	68fb      	ldr	r3, [r7, #12]
    3e76:	825a      	strh	r2, [r3, #18]
    3e78:	e029      	b.n	3ece <FIO_HalfWordSetMask+0x92>
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
    3e7a:	68fb      	ldr	r3, [r7, #12]
    3e7c:	8a1b      	ldrh	r3, [r3, #16]
    3e7e:	b29a      	uxth	r2, r3
    3e80:	88bb      	ldrh	r3, [r7, #4]
    3e82:	ea42 0303 	orr.w	r3, r2, r3
    3e86:	b29a      	uxth	r2, r3
    3e88:	68fb      	ldr	r3, [r7, #12]
    3e8a:	821a      	strh	r2, [r3, #16]
    3e8c:	e01f      	b.n	3ece <FIO_HalfWordSetMask+0x92>
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
    3e8e:	79bb      	ldrb	r3, [r7, #6]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d00e      	beq.n	3eb2 <FIO_HalfWordSetMask+0x76>
				pFIO->FIOMASKU &= ~bitValue;
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	8a5b      	ldrh	r3, [r3, #18]
    3e98:	b29b      	uxth	r3, r3
    3e9a:	b29a      	uxth	r2, r3
    3e9c:	88bb      	ldrh	r3, [r7, #4]
    3e9e:	ea6f 0303 	mvn.w	r3, r3
    3ea2:	b29b      	uxth	r3, r3
    3ea4:	ea02 0303 	and.w	r3, r2, r3
    3ea8:	b29b      	uxth	r3, r3
    3eaa:	b29a      	uxth	r2, r3
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	825a      	strh	r2, [r3, #18]
    3eb0:	e00d      	b.n	3ece <FIO_HalfWordSetMask+0x92>
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
    3eb2:	68fb      	ldr	r3, [r7, #12]
    3eb4:	8a1b      	ldrh	r3, [r3, #16]
    3eb6:	b29b      	uxth	r3, r3
    3eb8:	b29a      	uxth	r2, r3
    3eba:	88bb      	ldrh	r3, [r7, #4]
    3ebc:	ea6f 0303 	mvn.w	r3, r3
    3ec0:	b29b      	uxth	r3, r3
    3ec2:	ea02 0303 	and.w	r3, r2, r3
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	b29a      	uxth	r2, r3
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	821a      	strh	r2, [r3, #16]
			}
		}
	}
}
    3ece:	f107 0710 	add.w	r7, r7, #16
    3ed2:	46bd      	mov	sp, r7
    3ed4:	bd80      	pop	{r7, pc}
    3ed6:	bf00      	nop

00003ed8 <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	4613      	mov	r3, r2
    3ee0:	4602      	mov	r2, r0
    3ee2:	71fa      	strb	r2, [r7, #7]
    3ee4:	460a      	mov	r2, r1
    3ee6:	71ba      	strb	r2, [r7, #6]
    3ee8:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    3eea:	79fb      	ldrb	r3, [r7, #7]
    3eec:	4618      	mov	r0, r3
    3eee:	f7ff fd2f 	bl	3950 <FIO_HalfWordGetPointer>
    3ef2:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3ef4:	68fb      	ldr	r3, [r7, #12]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d009      	beq.n	3f0e <FIO_HalfWordSetValue+0x36>
		// Upper
		if(halfwordNum) {
    3efa:	79bb      	ldrb	r3, [r7, #6]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d003      	beq.n	3f08 <FIO_HalfWordSetValue+0x30>
			pFIO->FIOSETU = bitValue;
    3f00:	68fb      	ldr	r3, [r7, #12]
    3f02:	88ba      	ldrh	r2, [r7, #4]
    3f04:	835a      	strh	r2, [r3, #26]
    3f06:	e002      	b.n	3f0e <FIO_HalfWordSetValue+0x36>
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
    3f08:	68fb      	ldr	r3, [r7, #12]
    3f0a:	88ba      	ldrh	r2, [r7, #4]
    3f0c:	831a      	strh	r2, [r3, #24]
		}
	}
}
    3f0e:	f107 0710 	add.w	r7, r7, #16
    3f12:	46bd      	mov	sp, r7
    3f14:	bd80      	pop	{r7, pc}
    3f16:	bf00      	nop

00003f18 <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b084      	sub	sp, #16
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	4613      	mov	r3, r2
    3f20:	4602      	mov	r2, r0
    3f22:	71fa      	strb	r2, [r7, #7]
    3f24:	460a      	mov	r2, r1
    3f26:	71ba      	strb	r2, [r7, #6]
    3f28:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    3f2a:	79fb      	ldrb	r3, [r7, #7]
    3f2c:	4618      	mov	r0, r3
    3f2e:	f7ff fd0f 	bl	3950 <FIO_HalfWordGetPointer>
    3f32:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3f34:	68fb      	ldr	r3, [r7, #12]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d009      	beq.n	3f4e <FIO_HalfWordClearValue+0x36>
		// Upper
		if(halfwordNum) {
    3f3a:	79bb      	ldrb	r3, [r7, #6]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d003      	beq.n	3f48 <FIO_HalfWordClearValue+0x30>
			pFIO->FIOCLRU = bitValue;
    3f40:	68fb      	ldr	r3, [r7, #12]
    3f42:	88ba      	ldrh	r2, [r7, #4]
    3f44:	83da      	strh	r2, [r3, #30]
    3f46:	e002      	b.n	3f4e <FIO_HalfWordClearValue+0x36>
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	88ba      	ldrh	r2, [r7, #4]
    3f4c:	839a      	strh	r2, [r3, #28]
		}
	}
}
    3f4e:	f107 0710 	add.w	r7, r7, #16
    3f52:	46bd      	mov	sp, r7
    3f54:	bd80      	pop	{r7, pc}
    3f56:	bf00      	nop

00003f58 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
    3f58:	b580      	push	{r7, lr}
    3f5a:	b084      	sub	sp, #16
    3f5c:	af00      	add	r7, sp, #0
    3f5e:	4602      	mov	r2, r0
    3f60:	460b      	mov	r3, r1
    3f62:	71fa      	strb	r2, [r7, #7]
    3f64:	71bb      	strb	r3, [r7, #6]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    3f66:	79fb      	ldrb	r3, [r7, #7]
    3f68:	4618      	mov	r0, r3
    3f6a:	f7ff fcf1 	bl	3950 <FIO_HalfWordGetPointer>
    3f6e:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d00a      	beq.n	3f8c <FIO_HalfWordReadValue+0x34>
		// Upper
		if(halfwordNum) {
    3f76:	79bb      	ldrb	r3, [r7, #6]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d003      	beq.n	3f84 <FIO_HalfWordReadValue+0x2c>
			return (pFIO->FIOPINU);
    3f7c:	68fb      	ldr	r3, [r7, #12]
    3f7e:	8adb      	ldrh	r3, [r3, #22]
    3f80:	b29b      	uxth	r3, r3
    3f82:	e005      	b.n	3f90 <FIO_HalfWordReadValue+0x38>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
    3f84:	68fb      	ldr	r3, [r7, #12]
    3f86:	8a9b      	ldrh	r3, [r3, #20]
    3f88:	b29b      	uxth	r3, r3
    3f8a:	e001      	b.n	3f90 <FIO_HalfWordReadValue+0x38>
		}
	}
	return (0);
    3f8c:	f04f 0300 	mov.w	r3, #0
}
    3f90:	4618      	mov	r0, r3
    3f92:	f107 0710 	add.w	r7, r7, #16
    3f96:	46bd      	mov	sp, r7
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	bf00      	nop

00003f9c <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b084      	sub	sp, #16
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	71f8      	strb	r0, [r7, #7]
    3fa4:	71b9      	strb	r1, [r7, #6]
    3fa6:	717a      	strb	r2, [r7, #5]
    3fa8:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    3faa:	79fb      	ldrb	r3, [r7, #7]
    3fac:	4618      	mov	r0, r3
    3fae:	f7ff fd09 	bl	39c4 <FIO_ByteGetPointer>
    3fb2:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    3fb4:	68fb      	ldr	r3, [r7, #12]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d024      	beq.n	4004 <FIO_ByteSetDir+0x68>
		// Output direction
		if (dir) {
    3fba:	793b      	ldrb	r3, [r7, #4]
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d00e      	beq.n	3fde <FIO_ByteSetDir+0x42>
			if (byteNum <= 3) {
    3fc0:	79bb      	ldrb	r3, [r7, #6]
    3fc2:	2b03      	cmp	r3, #3
    3fc4:	d81e      	bhi.n	4004 <FIO_ByteSetDir+0x68>
				pFIO->FIODIR[byteNum] |= bitValue;
    3fc6:	79bb      	ldrb	r3, [r7, #6]
    3fc8:	79ba      	ldrb	r2, [r7, #6]
    3fca:	68f9      	ldr	r1, [r7, #12]
    3fcc:	5c8a      	ldrb	r2, [r1, r2]
    3fce:	b2d1      	uxtb	r1, r2
    3fd0:	797a      	ldrb	r2, [r7, #5]
    3fd2:	ea41 0202 	orr.w	r2, r1, r2
    3fd6:	b2d1      	uxtb	r1, r2
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	54d1      	strb	r1, [r2, r3]
    3fdc:	e012      	b.n	4004 <FIO_ByteSetDir+0x68>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
    3fde:	79bb      	ldrb	r3, [r7, #6]
    3fe0:	2b03      	cmp	r3, #3
    3fe2:	d80f      	bhi.n	4004 <FIO_ByteSetDir+0x68>
				pFIO->FIODIR[byteNum] &= ~bitValue;
    3fe4:	79bb      	ldrb	r3, [r7, #6]
    3fe6:	79ba      	ldrb	r2, [r7, #6]
    3fe8:	68f9      	ldr	r1, [r7, #12]
    3fea:	5c8a      	ldrb	r2, [r1, r2]
    3fec:	b2d2      	uxtb	r2, r2
    3fee:	b2d1      	uxtb	r1, r2
    3ff0:	797a      	ldrb	r2, [r7, #5]
    3ff2:	ea6f 0202 	mvn.w	r2, r2
    3ff6:	b2d2      	uxtb	r2, r2
    3ff8:	ea01 0202 	and.w	r2, r1, r2
    3ffc:	b2d2      	uxtb	r2, r2
    3ffe:	b2d1      	uxtb	r1, r2
    4000:	68fa      	ldr	r2, [r7, #12]
    4002:	54d1      	strb	r1, [r2, r3]
			}
		}
	}
}
    4004:	f107 0710 	add.w	r7, r7, #16
    4008:	46bd      	mov	sp, r7
    400a:	bd80      	pop	{r7, pc}

0000400c <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
    400c:	b580      	push	{r7, lr}
    400e:	b084      	sub	sp, #16
    4010:	af00      	add	r7, sp, #0
    4012:	71f8      	strb	r0, [r7, #7]
    4014:	71b9      	strb	r1, [r7, #6]
    4016:	717a      	strb	r2, [r7, #5]
    4018:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    401a:	79fb      	ldrb	r3, [r7, #7]
    401c:	4618      	mov	r0, r3
    401e:	f7ff fcd1 	bl	39c4 <FIO_ByteGetPointer>
    4022:	60f8      	str	r0, [r7, #12]
	if(pFIO != NULL) {
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	2b00      	cmp	r3, #0
    4028:	d028      	beq.n	407c <FIO_ByteSetMask+0x70>
		// Mask
		if (maskValue) {
    402a:	793b      	ldrb	r3, [r7, #4]
    402c:	2b00      	cmp	r3, #0
    402e:	d010      	beq.n	4052 <FIO_ByteSetMask+0x46>
			if (byteNum <= 3) {
    4030:	79bb      	ldrb	r3, [r7, #6]
    4032:	2b03      	cmp	r3, #3
    4034:	d822      	bhi.n	407c <FIO_ByteSetMask+0x70>
				pFIO->FIOMASK[byteNum] |= bitValue;
    4036:	79bb      	ldrb	r3, [r7, #6]
    4038:	79ba      	ldrb	r2, [r7, #6]
    403a:	68f9      	ldr	r1, [r7, #12]
    403c:	188a      	adds	r2, r1, r2
    403e:	7c12      	ldrb	r2, [r2, #16]
    4040:	b2d1      	uxtb	r1, r2
    4042:	797a      	ldrb	r2, [r7, #5]
    4044:	ea41 0202 	orr.w	r2, r1, r2
    4048:	b2d2      	uxtb	r2, r2
    404a:	68f9      	ldr	r1, [r7, #12]
    404c:	18cb      	adds	r3, r1, r3
    404e:	741a      	strb	r2, [r3, #16]
    4050:	e014      	b.n	407c <FIO_ByteSetMask+0x70>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
    4052:	79bb      	ldrb	r3, [r7, #6]
    4054:	2b03      	cmp	r3, #3
    4056:	d811      	bhi.n	407c <FIO_ByteSetMask+0x70>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
    4058:	79bb      	ldrb	r3, [r7, #6]
    405a:	79ba      	ldrb	r2, [r7, #6]
    405c:	68f9      	ldr	r1, [r7, #12]
    405e:	188a      	adds	r2, r1, r2
    4060:	7c12      	ldrb	r2, [r2, #16]
    4062:	b2d2      	uxtb	r2, r2
    4064:	b2d1      	uxtb	r1, r2
    4066:	797a      	ldrb	r2, [r7, #5]
    4068:	ea6f 0202 	mvn.w	r2, r2
    406c:	b2d2      	uxtb	r2, r2
    406e:	ea01 0202 	and.w	r2, r1, r2
    4072:	b2d2      	uxtb	r2, r2
    4074:	b2d2      	uxtb	r2, r2
    4076:	68f9      	ldr	r1, [r7, #12]
    4078:	18cb      	adds	r3, r1, r3
    407a:	741a      	strb	r2, [r3, #16]
			}
		}
	}
}
    407c:	f107 0710 	add.w	r7, r7, #16
    4080:	46bd      	mov	sp, r7
    4082:	bd80      	pop	{r7, pc}

00004084 <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    4084:	b580      	push	{r7, lr}
    4086:	b084      	sub	sp, #16
    4088:	af00      	add	r7, sp, #0
    408a:	4613      	mov	r3, r2
    408c:	4602      	mov	r2, r0
    408e:	71fa      	strb	r2, [r7, #7]
    4090:	460a      	mov	r2, r1
    4092:	71ba      	strb	r2, [r7, #6]
    4094:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4096:	79fb      	ldrb	r3, [r7, #7]
    4098:	4618      	mov	r0, r3
    409a:	f7ff fc93 	bl	39c4 <FIO_ByteGetPointer>
    409e:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
    40a0:	68fb      	ldr	r3, [r7, #12]
    40a2:	2b00      	cmp	r3, #0
    40a4:	d007      	beq.n	40b6 <FIO_ByteSetValue+0x32>
		if (byteNum <= 3){
    40a6:	79bb      	ldrb	r3, [r7, #6]
    40a8:	2b03      	cmp	r3, #3
    40aa:	d804      	bhi.n	40b6 <FIO_ByteSetValue+0x32>
			pFIO->FIOSET[byteNum] = bitValue;
    40ac:	79bb      	ldrb	r3, [r7, #6]
    40ae:	68fa      	ldr	r2, [r7, #12]
    40b0:	18d3      	adds	r3, r2, r3
    40b2:	797a      	ldrb	r2, [r7, #5]
    40b4:	761a      	strb	r2, [r3, #24]
		}
	}
}
    40b6:	f107 0710 	add.w	r7, r7, #16
    40ba:	46bd      	mov	sp, r7
    40bc:	bd80      	pop	{r7, pc}
    40be:	bf00      	nop

000040c0 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b084      	sub	sp, #16
    40c4:	af00      	add	r7, sp, #0
    40c6:	4613      	mov	r3, r2
    40c8:	4602      	mov	r2, r0
    40ca:	71fa      	strb	r2, [r7, #7]
    40cc:	460a      	mov	r2, r1
    40ce:	71ba      	strb	r2, [r7, #6]
    40d0:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    40d2:	79fb      	ldrb	r3, [r7, #7]
    40d4:	4618      	mov	r0, r3
    40d6:	f7ff fc75 	bl	39c4 <FIO_ByteGetPointer>
    40da:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
    40dc:	68fb      	ldr	r3, [r7, #12]
    40de:	2b00      	cmp	r3, #0
    40e0:	d007      	beq.n	40f2 <FIO_ByteClearValue+0x32>
		if (byteNum <= 3){
    40e2:	79bb      	ldrb	r3, [r7, #6]
    40e4:	2b03      	cmp	r3, #3
    40e6:	d804      	bhi.n	40f2 <FIO_ByteClearValue+0x32>
			pFIO->FIOCLR[byteNum] = bitValue;
    40e8:	79bb      	ldrb	r3, [r7, #6]
    40ea:	68fa      	ldr	r2, [r7, #12]
    40ec:	18d3      	adds	r3, r2, r3
    40ee:	797a      	ldrb	r2, [r7, #5]
    40f0:	771a      	strb	r2, [r3, #28]
		}
	}
}
    40f2:	f107 0710 	add.w	r7, r7, #16
    40f6:	46bd      	mov	sp, r7
    40f8:	bd80      	pop	{r7, pc}
    40fa:	bf00      	nop

000040fc <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b084      	sub	sp, #16
    4100:	af00      	add	r7, sp, #0
    4102:	4602      	mov	r2, r0
    4104:	460b      	mov	r3, r1
    4106:	71fa      	strb	r2, [r7, #7]
    4108:	71bb      	strb	r3, [r7, #6]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    410a:	79fb      	ldrb	r3, [r7, #7]
    410c:	4618      	mov	r0, r3
    410e:	f7ff fc59 	bl	39c4 <FIO_ByteGetPointer>
    4112:	60f8      	str	r0, [r7, #12]
	if (pFIO != NULL) {
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	2b00      	cmp	r3, #0
    4118:	d008      	beq.n	412c <FIO_ByteReadValue+0x30>
		if (byteNum <= 3){
    411a:	79bb      	ldrb	r3, [r7, #6]
    411c:	2b03      	cmp	r3, #3
    411e:	d805      	bhi.n	412c <FIO_ByteReadValue+0x30>
			return (pFIO->FIOPIN[byteNum]);
    4120:	79bb      	ldrb	r3, [r7, #6]
    4122:	68fa      	ldr	r2, [r7, #12]
    4124:	18d3      	adds	r3, r2, r3
    4126:	7d1b      	ldrb	r3, [r3, #20]
    4128:	b2db      	uxtb	r3, r3
    412a:	e001      	b.n	4130 <FIO_ByteReadValue+0x34>
		}
	}
	return (0);
    412c:	f04f 0300 	mov.w	r3, #0
}
    4130:	4618      	mov	r0, r3
    4132:	f107 0710 	add.w	r7, r7, #16
    4136:	46bd      	mov	sp, r7
    4138:	bd80      	pop	{r7, pc}
    413a:	bf00      	nop

0000413c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    413c:	b480      	push	{r7}
    413e:	b083      	sub	sp, #12
    4140:	af00      	add	r7, sp, #0
    4142:	4603      	mov	r3, r0
    4144:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4146:	4b09      	ldr	r3, [pc, #36]	; (416c <NVIC_EnableIRQ+0x30>)
    4148:	f997 2007 	ldrsb.w	r2, [r7, #7]
    414c:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4150:	79f9      	ldrb	r1, [r7, #7]
    4152:	f001 011f 	and.w	r1, r1, #31
    4156:	f04f 0001 	mov.w	r0, #1
    415a:	fa00 f101 	lsl.w	r1, r0, r1
    415e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4162:	f107 070c 	add.w	r7, r7, #12
    4166:	46bd      	mov	sp, r7
    4168:	bc80      	pop	{r7}
    416a:	4770      	bx	lr
    416c:	e000e100 	.word	0xe000e100

00004170 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4170:	b480      	push	{r7}
    4172:	b083      	sub	sp, #12
    4174:	af00      	add	r7, sp, #0
    4176:	4603      	mov	r3, r0
    4178:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    417a:	4b0a      	ldr	r3, [pc, #40]	; (41a4 <NVIC_DisableIRQ+0x34>)
    417c:	f997 2007 	ldrsb.w	r2, [r7, #7]
    4180:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4184:	79f9      	ldrb	r1, [r7, #7]
    4186:	f001 011f 	and.w	r1, r1, #31
    418a:	f04f 0001 	mov.w	r0, #1
    418e:	fa00 f101 	lsl.w	r1, r0, r1
    4192:	f102 0220 	add.w	r2, r2, #32
    4196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    419a:	f107 070c 	add.w	r7, r7, #12
    419e:	46bd      	mov	sp, r7
    41a0:	bc80      	pop	{r7}
    41a2:	4770      	bx	lr
    41a4:	e000e100 	.word	0xe000e100

000041a8 <I2C_getNum>:
 * 				- LPC_I2C0
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx){
    41a8:	b480      	push	{r7}
    41aa:	b083      	sub	sp, #12
    41ac:	af00      	add	r7, sp, #0
    41ae:	6078      	str	r0, [r7, #4]
	if (I2Cx == LPC_I2C0) {
    41b0:	687a      	ldr	r2, [r7, #4]
    41b2:	4b0e      	ldr	r3, [pc, #56]	; (41ec <I2C_getNum+0x44>)
    41b4:	429a      	cmp	r2, r3
    41b6:	d102      	bne.n	41be <I2C_getNum+0x16>
		return (0);
    41b8:	f04f 0300 	mov.w	r3, #0
    41bc:	e00f      	b.n	41de <I2C_getNum+0x36>
	} else if (I2Cx == LPC_I2C1) {
    41be:	687a      	ldr	r2, [r7, #4]
    41c0:	4b0b      	ldr	r3, [pc, #44]	; (41f0 <I2C_getNum+0x48>)
    41c2:	429a      	cmp	r2, r3
    41c4:	d102      	bne.n	41cc <I2C_getNum+0x24>
		return (1);
    41c6:	f04f 0301 	mov.w	r3, #1
    41ca:	e008      	b.n	41de <I2C_getNum+0x36>
	} else if (I2Cx == LPC_I2C2) {
    41cc:	687a      	ldr	r2, [r7, #4]
    41ce:	4b09      	ldr	r3, [pc, #36]	; (41f4 <I2C_getNum+0x4c>)
    41d0:	429a      	cmp	r2, r3
    41d2:	d102      	bne.n	41da <I2C_getNum+0x32>
		return (2);
    41d4:	f04f 0302 	mov.w	r3, #2
    41d8:	e001      	b.n	41de <I2C_getNum+0x36>
	}
	return (-1);
    41da:	f04f 33ff 	mov.w	r3, #4294967295
}
    41de:	4618      	mov	r0, r3
    41e0:	f107 070c 	add.w	r7, r7, #12
    41e4:	46bd      	mov	sp, r7
    41e6:	bc80      	pop	{r7}
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop
    41ec:	4001c000 	.word	0x4001c000
    41f0:	4005c000 	.word	0x4005c000
    41f4:	400a0000 	.word	0x400a0000

000041f8 <I2C_Start>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	f04f 0220 	mov.w	r2, #32
    4206:	601a      	str	r2, [r3, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	f04f 0208 	mov.w	r2, #8
    420e:	619a      	str	r2, [r3, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    4210:	bf00      	nop
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	f003 0308 	and.w	r3, r3, #8
    421a:	2b00      	cmp	r3, #0
    421c:	d0f9      	beq.n	4212 <I2C_Start+0x1a>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    421e:	687b      	ldr	r3, [r7, #4]
    4220:	f04f 0220 	mov.w	r2, #32
    4224:	619a      	str	r2, [r3, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	685b      	ldr	r3, [r3, #4]
    422a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    422e:	4618      	mov	r0, r3
    4230:	f107 070c 	add.w	r7, r7, #12
    4234:	46bd      	mov	sp, r7
    4236:	bc80      	pop	{r7}
    4238:	4770      	bx	lr
    423a:	bf00      	nop

0000423c <I2C_Stop>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
    423c:	b480      	push	{r7}
    423e:	b083      	sub	sp, #12
    4240:	af00      	add	r7, sp, #0
    4242:	6078      	str	r0, [r7, #4]

	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	681b      	ldr	r3, [r3, #0]
    4248:	f003 0320 	and.w	r3, r3, #32
    424c:	2b00      	cmp	r3, #0
    424e:	d003      	beq.n	4258 <I2C_Stop+0x1c>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	f04f 0220 	mov.w	r2, #32
    4256:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	f04f 0210 	mov.w	r2, #16
    425e:	601a      	str	r2, [r3, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	f04f 0208 	mov.w	r2, #8
    4266:	619a      	str	r2, [r3, #24]
}
    4268:	f107 070c 	add.w	r7, r7, #12
    426c:	46bd      	mov	sp, r7
    426e:	bc80      	pop	{r7}
    4270:	4770      	bx	lr
    4272:	bf00      	nop

00004274 <I2C_SendByte>:
 * 				- LPC_I2C2
 * @param[in]	databyte: number of byte
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
    4274:	b480      	push	{r7}
    4276:	b083      	sub	sp, #12
    4278:	af00      	add	r7, sp, #0
    427a:	6078      	str	r0, [r7, #4]
    427c:	460b      	mov	r3, r1
    427e:	70fb      	strb	r3, [r7, #3]
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	681b      	ldr	r3, [r3, #0]
    4284:	f003 0320 	and.w	r3, r3, #32
    4288:	2b00      	cmp	r3, #0
    428a:	d003      	beq.n	4294 <I2C_SendByte+0x20>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	f04f 0220 	mov.w	r2, #32
    4292:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
    4294:	78fa      	ldrb	r2, [r7, #3]
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	609a      	str	r2, [r3, #8]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	f04f 0208 	mov.w	r2, #8
    42a0:	619a      	str	r2, [r3, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    42a2:	bf00      	nop
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	f003 0308 	and.w	r3, r3, #8
    42ac:	2b00      	cmp	r3, #0
    42ae:	d0f9      	beq.n	42a4 <I2C_SendByte+0x30>
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	685b      	ldr	r3, [r3, #4]
    42b4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    42b8:	4618      	mov	r0, r3
    42ba:	f107 070c 	add.w	r7, r7, #12
    42be:	46bd      	mov	sp, r7
    42c0:	bc80      	pop	{r7}
    42c2:	4770      	bx	lr

000042c4 <I2C_GetByte>:
 * @param[out]	retdat	pointer to return data
 * @param[in]	ack		assert acknowledge or not, should be: TRUE/FALSE
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
{
    42c4:	b480      	push	{r7}
    42c6:	b085      	sub	sp, #20
    42c8:	af00      	add	r7, sp, #0
    42ca:	60f8      	str	r0, [r7, #12]
    42cc:	60b9      	str	r1, [r7, #8]
    42ce:	4613      	mov	r3, r2
    42d0:	71fb      	strb	r3, [r7, #7]
	if (ack == TRUE)
    42d2:	79fb      	ldrb	r3, [r7, #7]
    42d4:	2b01      	cmp	r3, #1
    42d6:	d104      	bne.n	42e2 <I2C_GetByte+0x1e>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    42d8:	68fb      	ldr	r3, [r7, #12]
    42da:	f04f 0204 	mov.w	r2, #4
    42de:	601a      	str	r2, [r3, #0]
    42e0:	e003      	b.n	42ea <I2C_GetByte+0x26>
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	f04f 0204 	mov.w	r2, #4
    42e8:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	f04f 0208 	mov.w	r2, #8
    42f0:	619a      	str	r2, [r3, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    42f2:	bf00      	nop
    42f4:	68fb      	ldr	r3, [r7, #12]
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	f003 0308 	and.w	r3, r3, #8
    42fc:	2b00      	cmp	r3, #0
    42fe:	d0f9      	beq.n	42f4 <I2C_GetByte+0x30>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	689b      	ldr	r3, [r3, #8]
    4304:	b2da      	uxtb	r2, r3
    4306:	68bb      	ldr	r3, [r7, #8]
    4308:	701a      	strb	r2, [r3, #0]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    430a:	68fb      	ldr	r3, [r7, #12]
    430c:	685b      	ldr	r3, [r3, #4]
    430e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    4312:	4618      	mov	r0, r3
    4314:	f107 0714 	add.w	r7, r7, #20
    4318:	46bd      	mov	sp, r7
    431a:	bc80      	pop	{r7}
    431c:	4770      	bx	lr
    431e:	bf00      	nop

00004320 <I2C_SetClock>:
 * 				- LPC_I2C2
 * @param[in]	target_clock : clock of SSP (Hz)
 * @return 		None
 ***********************************************************************/
static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock)
{
    4320:	b580      	push	{r7, lr}
    4322:	b084      	sub	sp, #16
    4324:	af00      	add	r7, sp, #0
    4326:	6078      	str	r0, [r7, #4]
    4328:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    432a:	687a      	ldr	r2, [r7, #4]
    432c:	4b23      	ldr	r3, [pc, #140]	; (43bc <I2C_SetClock+0x9c>)
    432e:	429a      	cmp	r2, r3
    4330:	d00c      	beq.n	434c <I2C_SetClock+0x2c>
    4332:	687a      	ldr	r2, [r7, #4]
    4334:	4b22      	ldr	r3, [pc, #136]	; (43c0 <I2C_SetClock+0xa0>)
    4336:	429a      	cmp	r2, r3
    4338:	d008      	beq.n	434c <I2C_SetClock+0x2c>
    433a:	687a      	ldr	r2, [r7, #4]
    433c:	4b21      	ldr	r3, [pc, #132]	; (43c4 <I2C_SetClock+0xa4>)
    433e:	429a      	cmp	r2, r3
    4340:	d004      	beq.n	434c <I2C_SetClock+0x2c>
    4342:	4821      	ldr	r0, [pc, #132]	; (43c8 <I2C_SetClock+0xa8>)
    4344:	f04f 01df 	mov.w	r1, #223	; 0xdf
    4348:	f001 f89c 	bl	5484 <check_failed>

	// Get PCLK of I2C controller
	if (I2Cx == LPC_I2C0)
    434c:	687a      	ldr	r2, [r7, #4]
    434e:	4b1b      	ldr	r3, [pc, #108]	; (43bc <I2C_SetClock+0x9c>)
    4350:	429a      	cmp	r2, r3
    4352:	d109      	bne.n	4368 <I2C_SetClock+0x48>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
    4354:	f04f 000e 	mov.w	r0, #14
    4358:	f7ff f954 	bl	3604 <CLKPWR_GetPCLK>
    435c:	4602      	mov	r2, r0
    435e:	683b      	ldr	r3, [r7, #0]
    4360:	fbb2 f3f3 	udiv	r3, r2, r3
    4364:	60fb      	str	r3, [r7, #12]
    4366:	e01a      	b.n	439e <I2C_SetClock+0x7e>
	}
	else if (I2Cx == LPC_I2C1)
    4368:	687a      	ldr	r2, [r7, #4]
    436a:	4b15      	ldr	r3, [pc, #84]	; (43c0 <I2C_SetClock+0xa0>)
    436c:	429a      	cmp	r2, r3
    436e:	d109      	bne.n	4384 <I2C_SetClock+0x64>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
    4370:	f04f 0026 	mov.w	r0, #38	; 0x26
    4374:	f7ff f946 	bl	3604 <CLKPWR_GetPCLK>
    4378:	4602      	mov	r2, r0
    437a:	683b      	ldr	r3, [r7, #0]
    437c:	fbb2 f3f3 	udiv	r3, r2, r3
    4380:	60fb      	str	r3, [r7, #12]
    4382:	e00c      	b.n	439e <I2C_SetClock+0x7e>
	}
	else if (I2Cx == LPC_I2C2)
    4384:	687a      	ldr	r2, [r7, #4]
    4386:	4b0f      	ldr	r3, [pc, #60]	; (43c4 <I2C_SetClock+0xa4>)
    4388:	429a      	cmp	r2, r3
    438a:	d108      	bne.n	439e <I2C_SetClock+0x7e>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
    438c:	f04f 0034 	mov.w	r0, #52	; 0x34
    4390:	f7ff f938 	bl	3604 <CLKPWR_GetPCLK>
    4394:	4602      	mov	r2, r0
    4396:	683b      	ldr	r3, [r7, #0]
    4398:	fbb2 f3f3 	udiv	r3, r2, r3
    439c:	60fb      	str	r3, [r7, #12]
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	ea4f 0253 	mov.w	r2, r3, lsr #1
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	611a      	str	r2, [r3, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	691b      	ldr	r3, [r3, #16]
    43ac:	68fa      	ldr	r2, [r7, #12]
    43ae:	1ad2      	subs	r2, r2, r3
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	615a      	str	r2, [r3, #20]
}
    43b4:	f107 0710 	add.w	r7, r7, #16
    43b8:	46bd      	mov	sp, r7
    43ba:	bd80      	pop	{r7, pc}
    43bc:	4001c000 	.word	0x4001c000
    43c0:	4005c000 	.word	0x4005c000
    43c4:	400a0000 	.word	0x400a0000
    43c8:	0000a37c 	.word	0x0000a37c

000043cc <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b082      	sub	sp, #8
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
    43d4:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    43d6:	687a      	ldr	r2, [r7, #4]
    43d8:	4b27      	ldr	r3, [pc, #156]	; (4478 <I2C_Init+0xac>)
    43da:	429a      	cmp	r2, r3
    43dc:	d00c      	beq.n	43f8 <I2C_Init+0x2c>
    43de:	687a      	ldr	r2, [r7, #4]
    43e0:	4b26      	ldr	r3, [pc, #152]	; (447c <I2C_Init+0xb0>)
    43e2:	429a      	cmp	r2, r3
    43e4:	d008      	beq.n	43f8 <I2C_Init+0x2c>
    43e6:	687a      	ldr	r2, [r7, #4]
    43e8:	4b25      	ldr	r3, [pc, #148]	; (4480 <I2C_Init+0xb4>)
    43ea:	429a      	cmp	r2, r3
    43ec:	d004      	beq.n	43f8 <I2C_Init+0x2c>
    43ee:	4825      	ldr	r0, [pc, #148]	; (4484 <I2C_Init+0xb8>)
    43f0:	f240 1107 	movw	r1, #263	; 0x107
    43f4:	f001 f846 	bl	5484 <check_failed>

	if (I2Cx==LPC_I2C0)
    43f8:	687a      	ldr	r2, [r7, #4]
    43fa:	4b1f      	ldr	r3, [pc, #124]	; (4478 <I2C_Init+0xac>)
    43fc:	429a      	cmp	r2, r3
    43fe:	d10c      	bne.n	441a <I2C_Init+0x4e>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
    4400:	f04f 0080 	mov.w	r0, #128	; 0x80
    4404:	f04f 0101 	mov.w	r1, #1
    4408:	f7ff f934 	bl	3674 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
    440c:	f04f 000e 	mov.w	r0, #14
    4410:	f04f 0102 	mov.w	r1, #2
    4414:	f7ff f880 	bl	3518 <CLKPWR_SetPCLKDiv>
    4418:	e020      	b.n	445c <I2C_Init+0x90>
	}
	else if (I2Cx==LPC_I2C1)
    441a:	687a      	ldr	r2, [r7, #4]
    441c:	4b17      	ldr	r3, [pc, #92]	; (447c <I2C_Init+0xb0>)
    441e:	429a      	cmp	r2, r3
    4420:	d10c      	bne.n	443c <I2C_Init+0x70>
	{
		/* Set up clock and power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
    4422:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4426:	f04f 0101 	mov.w	r1, #1
    442a:	f7ff f923 	bl	3674 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
    442e:	f04f 0026 	mov.w	r0, #38	; 0x26
    4432:	f04f 0102 	mov.w	r1, #2
    4436:	f7ff f86f 	bl	3518 <CLKPWR_SetPCLKDiv>
    443a:	e00f      	b.n	445c <I2C_Init+0x90>
	}
	else if (I2Cx==LPC_I2C2)
    443c:	687a      	ldr	r2, [r7, #4]
    443e:	4b10      	ldr	r3, [pc, #64]	; (4480 <I2C_Init+0xb4>)
    4440:	429a      	cmp	r2, r3
    4442:	d114      	bne.n	446e <I2C_Init+0xa2>
	{
		/* Set up clock and power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
    4444:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4448:	f04f 0101 	mov.w	r1, #1
    444c:	f7ff f912 	bl	3674 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C2 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
    4450:	f04f 0034 	mov.w	r0, #52	; 0x34
    4454:	f04f 0102 	mov.w	r1, #2
    4458:	f7ff f85e 	bl	3518 <CLKPWR_SetPCLKDiv>
		// Up-Support this device
		return;
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    445c:	6878      	ldr	r0, [r7, #4]
    445e:	6839      	ldr	r1, [r7, #0]
    4460:	f7ff ff5e 	bl	4320 <I2C_SetClock>
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	f04f 0264 	mov.w	r2, #100	; 0x64
    446a:	619a      	str	r2, [r3, #24]
    446c:	e000      	b.n	4470 <I2C_Init+0xa4>
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else {
		// Up-Support this device
		return;
    446e:	bf00      	nop

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
}
    4470:	f107 0708 	add.w	r7, r7, #8
    4474:	46bd      	mov	sp, r7
    4476:	bd80      	pop	{r7, pc}
    4478:	4001c000 	.word	0x4001c000
    447c:	4005c000 	.word	0x4005c000
    4480:	400a0000 	.word	0x400a0000
    4484:	0000a37c 	.word	0x0000a37c

00004488 <I2C_DeInit>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
    4488:	b580      	push	{r7, lr}
    448a:	b082      	sub	sp, #8
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    4490:	687a      	ldr	r2, [r7, #4]
    4492:	4b1c      	ldr	r3, [pc, #112]	; (4504 <I2C_DeInit+0x7c>)
    4494:	429a      	cmp	r2, r3
    4496:	d00c      	beq.n	44b2 <I2C_DeInit+0x2a>
    4498:	687a      	ldr	r2, [r7, #4]
    449a:	4b1b      	ldr	r3, [pc, #108]	; (4508 <I2C_DeInit+0x80>)
    449c:	429a      	cmp	r2, r3
    449e:	d008      	beq.n	44b2 <I2C_DeInit+0x2a>
    44a0:	687a      	ldr	r2, [r7, #4]
    44a2:	4b1a      	ldr	r3, [pc, #104]	; (450c <I2C_DeInit+0x84>)
    44a4:	429a      	cmp	r2, r3
    44a6:	d004      	beq.n	44b2 <I2C_DeInit+0x2a>
    44a8:	4819      	ldr	r0, [pc, #100]	; (4510 <I2C_DeInit+0x88>)
    44aa:	f240 1137 	movw	r1, #311	; 0x137
    44ae:	f000 ffe9 	bl	5484 <check_failed>

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	f04f 0240 	mov.w	r2, #64	; 0x40
    44b8:	619a      	str	r2, [r3, #24]

	if (I2Cx==LPC_I2C0)
    44ba:	687a      	ldr	r2, [r7, #4]
    44bc:	4b11      	ldr	r3, [pc, #68]	; (4504 <I2C_DeInit+0x7c>)
    44be:	429a      	cmp	r2, r3
    44c0:	d106      	bne.n	44d0 <I2C_DeInit+0x48>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
    44c2:	f04f 0080 	mov.w	r0, #128	; 0x80
    44c6:	f04f 0100 	mov.w	r1, #0
    44ca:	f7ff f8d3 	bl	3674 <CLKPWR_ConfigPPWR>
    44ce:	e014      	b.n	44fa <I2C_DeInit+0x72>
	}
	else if (I2Cx==LPC_I2C1)
    44d0:	687a      	ldr	r2, [r7, #4]
    44d2:	4b0d      	ldr	r3, [pc, #52]	; (4508 <I2C_DeInit+0x80>)
    44d4:	429a      	cmp	r2, r3
    44d6:	d106      	bne.n	44e6 <I2C_DeInit+0x5e>
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
    44d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    44dc:	f04f 0100 	mov.w	r1, #0
    44e0:	f7ff f8c8 	bl	3674 <CLKPWR_ConfigPPWR>
    44e4:	e009      	b.n	44fa <I2C_DeInit+0x72>
	}
	else if (I2Cx==LPC_I2C2)
    44e6:	687a      	ldr	r2, [r7, #4]
    44e8:	4b08      	ldr	r3, [pc, #32]	; (450c <I2C_DeInit+0x84>)
    44ea:	429a      	cmp	r2, r3
    44ec:	d105      	bne.n	44fa <I2C_DeInit+0x72>
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
    44ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    44f2:	f04f 0100 	mov.w	r1, #0
    44f6:	f7ff f8bd 	bl	3674 <CLKPWR_ConfigPPWR>
	}
}
    44fa:	f107 0708 	add.w	r7, r7, #8
    44fe:	46bd      	mov	sp, r7
    4500:	bd80      	pop	{r7, pc}
    4502:	bf00      	nop
    4504:	4001c000 	.word	0x4001c000
    4508:	4005c000 	.word	0x4005c000
    450c:	400a0000 	.word	0x400a0000
    4510:	0000a37c 	.word	0x0000a37c

00004514 <I2C_Cmd>:
 * 				- LPC_I2C2
 * @param[in]	NewState New State of I2Cx peripheral's operation
 * @return 		none
 **********************************************************************/
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
{
    4514:	b580      	push	{r7, lr}
    4516:	b082      	sub	sp, #8
    4518:	af00      	add	r7, sp, #0
    451a:	6078      	str	r0, [r7, #4]
    451c:	460b      	mov	r3, r1
    451e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    4520:	78fb      	ldrb	r3, [r7, #3]
    4522:	2b00      	cmp	r3, #0
    4524:	d007      	beq.n	4536 <I2C_Cmd+0x22>
    4526:	78fb      	ldrb	r3, [r7, #3]
    4528:	2b01      	cmp	r3, #1
    452a:	d004      	beq.n	4536 <I2C_Cmd+0x22>
    452c:	4812      	ldr	r0, [pc, #72]	; (4578 <I2C_Cmd+0x64>)
    452e:	f44f 71ac 	mov.w	r1, #344	; 0x158
    4532:	f000 ffa7 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    4536:	687a      	ldr	r2, [r7, #4]
    4538:	4b10      	ldr	r3, [pc, #64]	; (457c <I2C_Cmd+0x68>)
    453a:	429a      	cmp	r2, r3
    453c:	d00c      	beq.n	4558 <I2C_Cmd+0x44>
    453e:	687a      	ldr	r2, [r7, #4]
    4540:	4b0f      	ldr	r3, [pc, #60]	; (4580 <I2C_Cmd+0x6c>)
    4542:	429a      	cmp	r2, r3
    4544:	d008      	beq.n	4558 <I2C_Cmd+0x44>
    4546:	687a      	ldr	r2, [r7, #4]
    4548:	4b0e      	ldr	r3, [pc, #56]	; (4584 <I2C_Cmd+0x70>)
    454a:	429a      	cmp	r2, r3
    454c:	d004      	beq.n	4558 <I2C_Cmd+0x44>
    454e:	480a      	ldr	r0, [pc, #40]	; (4578 <I2C_Cmd+0x64>)
    4550:	f240 1159 	movw	r1, #345	; 0x159
    4554:	f000 ff96 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    4558:	78fb      	ldrb	r3, [r7, #3]
    455a:	2b01      	cmp	r3, #1
    455c:	d104      	bne.n	4568 <I2C_Cmd+0x54>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
    455e:	687b      	ldr	r3, [r7, #4]
    4560:	f04f 0240 	mov.w	r2, #64	; 0x40
    4564:	601a      	str	r2, [r3, #0]
    4566:	e003      	b.n	4570 <I2C_Cmd+0x5c>
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	f04f 0240 	mov.w	r2, #64	; 0x40
    456e:	619a      	str	r2, [r3, #24]
	}
}
    4570:	f107 0708 	add.w	r7, r7, #8
    4574:	46bd      	mov	sp, r7
    4576:	bd80      	pop	{r7, pc}
    4578:	0000a37c 	.word	0x0000a37c
    457c:	4001c000 	.word	0x4001c000
    4580:	4005c000 	.word	0x4005c000
    4584:	400a0000 	.word	0x400a0000

00004588 <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
    458e:	6078      	str	r0, [r7, #4]
    4590:	460b      	mov	r3, r1
    4592:	70fb      	strb	r3, [r7, #3]
	if (NewState)
    4594:	78fb      	ldrb	r3, [r7, #3]
    4596:	2b00      	cmp	r3, #0
    4598:	d01a      	beq.n	45d0 <I2C_IntCmd+0x48>
	{
		if(I2Cx == LPC_I2C0)
    459a:	687a      	ldr	r2, [r7, #4]
    459c:	4b1b      	ldr	r3, [pc, #108]	; (460c <I2C_IntCmd+0x84>)
    459e:	429a      	cmp	r2, r3
    45a0:	d104      	bne.n	45ac <I2C_IntCmd+0x24>
		{
			NVIC_EnableIRQ(I2C0_IRQn);
    45a2:	f04f 000a 	mov.w	r0, #10
    45a6:	f7ff fdc9 	bl	413c <NVIC_EnableIRQ>
    45aa:	e02b      	b.n	4604 <I2C_IntCmd+0x7c>
		}
		else if (I2Cx == LPC_I2C1)
    45ac:	687a      	ldr	r2, [r7, #4]
    45ae:	4b18      	ldr	r3, [pc, #96]	; (4610 <I2C_IntCmd+0x88>)
    45b0:	429a      	cmp	r2, r3
    45b2:	d104      	bne.n	45be <I2C_IntCmd+0x36>
		{
			NVIC_EnableIRQ(I2C1_IRQn);
    45b4:	f04f 000b 	mov.w	r0, #11
    45b8:	f7ff fdc0 	bl	413c <NVIC_EnableIRQ>
    45bc:	e022      	b.n	4604 <I2C_IntCmd+0x7c>
		}
		else if (I2Cx == LPC_I2C2)
    45be:	687a      	ldr	r2, [r7, #4]
    45c0:	4b14      	ldr	r3, [pc, #80]	; (4614 <I2C_IntCmd+0x8c>)
    45c2:	429a      	cmp	r2, r3
    45c4:	d11e      	bne.n	4604 <I2C_IntCmd+0x7c>
		{
			NVIC_EnableIRQ(I2C2_IRQn);
    45c6:	f04f 000c 	mov.w	r0, #12
    45ca:	f7ff fdb7 	bl	413c <NVIC_EnableIRQ>
    45ce:	e019      	b.n	4604 <I2C_IntCmd+0x7c>
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
    45d0:	687a      	ldr	r2, [r7, #4]
    45d2:	4b0e      	ldr	r3, [pc, #56]	; (460c <I2C_IntCmd+0x84>)
    45d4:	429a      	cmp	r2, r3
    45d6:	d104      	bne.n	45e2 <I2C_IntCmd+0x5a>
		{
			NVIC_DisableIRQ(I2C0_IRQn);
    45d8:	f04f 000a 	mov.w	r0, #10
    45dc:	f7ff fdc8 	bl	4170 <NVIC_DisableIRQ>
    45e0:	e010      	b.n	4604 <I2C_IntCmd+0x7c>
		}
		else if (I2Cx == LPC_I2C1)
    45e2:	687a      	ldr	r2, [r7, #4]
    45e4:	4b0a      	ldr	r3, [pc, #40]	; (4610 <I2C_IntCmd+0x88>)
    45e6:	429a      	cmp	r2, r3
    45e8:	d104      	bne.n	45f4 <I2C_IntCmd+0x6c>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
    45ea:	f04f 000b 	mov.w	r0, #11
    45ee:	f7ff fdbf 	bl	4170 <NVIC_DisableIRQ>
    45f2:	e007      	b.n	4604 <I2C_IntCmd+0x7c>
		}
		else if (I2Cx == LPC_I2C2)
    45f4:	687a      	ldr	r2, [r7, #4]
    45f6:	4b07      	ldr	r3, [pc, #28]	; (4614 <I2C_IntCmd+0x8c>)
    45f8:	429a      	cmp	r2, r3
    45fa:	d103      	bne.n	4604 <I2C_IntCmd+0x7c>
		{
			NVIC_DisableIRQ(I2C2_IRQn);
    45fc:	f04f 000c 	mov.w	r0, #12
    4600:	f7ff fdb6 	bl	4170 <NVIC_DisableIRQ>
		}
	}
    return;
}
    4604:	f107 0708 	add.w	r7, r7, #8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	4001c000 	.word	0x4001c000
    4610:	4005c000 	.word	0x4005c000
    4614:	400a0000 	.word	0x400a0000

00004618 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
{
    4618:	b580      	push	{r7, lr}
    461a:	b086      	sub	sp, #24
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
    4620:	6878      	ldr	r0, [r7, #4]
    4622:	f7ff fdc1 	bl	41a8 <I2C_getNum>
    4626:	6178      	str	r0, [r7, #20]
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
    4628:	4ba5      	ldr	r3, [pc, #660]	; (48c0 <I2C_MasterHandler+0x2a8>)
    462a:	697a      	ldr	r2, [r7, #20]
    462c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4630:	613b      	str	r3, [r7, #16]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	b2db      	uxtb	r3, r3
    4638:	f023 0307 	bic.w	r3, r3, #7
    463c:	73fb      	strb	r3, [r7, #15]
	// Save current status
	txrx_setup->status = returnCode;
    463e:	7bfa      	ldrb	r2, [r7, #15]
    4640:	693b      	ldr	r3, [r7, #16]
    4642:	625a      	str	r2, [r3, #36]	; 0x24
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF){
    4644:	7bfb      	ldrb	r3, [r7, #15]
    4646:	2bf8      	cmp	r3, #248	; 0xf8
    4648:	d104      	bne.n	4654 <I2C_MasterHandler+0x3c>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    464a:	687b      	ldr	r3, [r7, #4]
    464c:	f04f 0208 	mov.w	r2, #8
    4650:	619a      	str	r2, [r3, #24]
		return;
    4652:	e1bd      	b.n	49d0 <I2C_MasterHandler+0x3b8>
	}

	/* ----------------------------- TRANSMIT PHASE --------------------------*/
	if (i2cdat[tmp].dir == 0){
    4654:	4a9a      	ldr	r2, [pc, #616]	; (48c0 <I2C_MasterHandler+0x2a8>)
    4656:	697b      	ldr	r3, [r7, #20]
    4658:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    465c:	18d3      	adds	r3, r2, r3
    465e:	685b      	ldr	r3, [r3, #4]
    4660:	2b00      	cmp	r3, #0
    4662:	f040 80d8 	bne.w	4816 <I2C_MasterHandler+0x1fe>
		switch (returnCode)
    4666:	7bfb      	ldrb	r3, [r7, #15]
    4668:	f1a3 0308 	sub.w	r3, r3, #8
    466c:	2b30      	cmp	r3, #48	; 0x30
    466e:	f200 8186 	bhi.w	497e <I2C_MasterHandler+0x366>
    4672:	a201      	add	r2, pc, #4	; (adr r2, 4678 <I2C_MasterHandler+0x60>)
    4674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4678:	0000473d 	.word	0x0000473d
    467c:	0000497f 	.word	0x0000497f
    4680:	0000497f 	.word	0x0000497f
    4684:	0000497f 	.word	0x0000497f
    4688:	0000497f 	.word	0x0000497f
    468c:	0000497f 	.word	0x0000497f
    4690:	0000497f 	.word	0x0000497f
    4694:	0000497f 	.word	0x0000497f
    4698:	0000473d 	.word	0x0000473d
    469c:	0000497f 	.word	0x0000497f
    46a0:	0000497f 	.word	0x0000497f
    46a4:	0000497f 	.word	0x0000497f
    46a8:	0000497f 	.word	0x0000497f
    46ac:	0000497f 	.word	0x0000497f
    46b0:	0000497f 	.word	0x0000497f
    46b4:	0000497f 	.word	0x0000497f
    46b8:	0000476b 	.word	0x0000476b
    46bc:	0000497f 	.word	0x0000497f
    46c0:	0000497f 	.word	0x0000497f
    46c4:	0000497f 	.word	0x0000497f
    46c8:	0000497f 	.word	0x0000497f
    46cc:	0000497f 	.word	0x0000497f
    46d0:	0000497f 	.word	0x0000497f
    46d4:	0000497f 	.word	0x0000497f
    46d8:	000047fb 	.word	0x000047fb
    46dc:	0000497f 	.word	0x0000497f
    46e0:	0000497f 	.word	0x0000497f
    46e4:	0000497f 	.word	0x0000497f
    46e8:	0000497f 	.word	0x0000497f
    46ec:	0000497f 	.word	0x0000497f
    46f0:	0000497f 	.word	0x0000497f
    46f4:	0000497f 	.word	0x0000497f
    46f8:	0000476b 	.word	0x0000476b
    46fc:	0000497f 	.word	0x0000497f
    4700:	0000497f 	.word	0x0000497f
    4704:	0000497f 	.word	0x0000497f
    4708:	0000497f 	.word	0x0000497f
    470c:	0000497f 	.word	0x0000497f
    4710:	0000497f 	.word	0x0000497f
    4714:	0000497f 	.word	0x0000497f
    4718:	000047fb 	.word	0x000047fb
    471c:	0000497f 	.word	0x0000497f
    4720:	0000497f 	.word	0x0000497f
    4724:	0000497f 	.word	0x0000497f
    4728:	0000497f 	.word	0x0000497f
    472c:	0000497f 	.word	0x0000497f
    4730:	0000497f 	.word	0x0000497f
    4734:	0000497f 	.word	0x0000497f
    4738:	00004809 	.word	0x00004809
		{
		/* A start/repeat start condition has been transmitted -------------------*/
		case I2C_I2STAT_M_TX_START:
		case I2C_I2STAT_M_TX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    473c:	687b      	ldr	r3, [r7, #4]
    473e:	f04f 0220 	mov.w	r2, #32
    4742:	619a      	str	r2, [r3, #24]
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0)){
    4744:	693b      	ldr	r3, [r7, #16]
    4746:	685b      	ldr	r3, [r3, #4]
    4748:	2b00      	cmp	r3, #0
    474a:	d02c      	beq.n	47a6 <I2C_MasterHandler+0x18e>
    474c:	693b      	ldr	r3, [r7, #16]
    474e:	689b      	ldr	r3, [r3, #8]
    4750:	2b00      	cmp	r3, #0
    4752:	d028      	beq.n	47a6 <I2C_MasterHandler+0x18e>
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
    4754:	693b      	ldr	r3, [r7, #16]
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	ea4f 0243 	mov.w	r2, r3, lsl #1
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	609a      	str	r2, [r3, #8]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	f04f 0208 	mov.w	r2, #8
    4766:	619a      	str	r2, [r3, #24]
			} else {
				goto next_stage;
			}
			break;
    4768:	e132      	b.n	49d0 <I2C_MasterHandler+0x3b8>
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    476a:	693b      	ldr	r3, [r7, #16]
    476c:	68da      	ldr	r2, [r3, #12]
    476e:	693b      	ldr	r3, [r7, #16]
    4770:	689b      	ldr	r3, [r3, #8]
    4772:	429a      	cmp	r2, r3
    4774:	d217      	bcs.n	47a6 <I2C_MasterHandler+0x18e>
					&& (txrx_setup->tx_data != NULL)){
    4776:	693b      	ldr	r3, [r7, #16]
    4778:	685b      	ldr	r3, [r3, #4]
    477a:	2b00      	cmp	r3, #0
    477c:	d013      	beq.n	47a6 <I2C_MasterHandler+0x18e>
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
    477e:	693b      	ldr	r3, [r7, #16]
    4780:	685a      	ldr	r2, [r3, #4]
    4782:	693b      	ldr	r3, [r7, #16]
    4784:	68db      	ldr	r3, [r3, #12]
    4786:	18d3      	adds	r3, r2, r3
    4788:	781b      	ldrb	r3, [r3, #0]
    478a:	461a      	mov	r2, r3
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	609a      	str	r2, [r3, #8]
				txrx_setup->tx_count++;
    4790:	693b      	ldr	r3, [r7, #16]
    4792:	68db      	ldr	r3, [r3, #12]
    4794:	f103 0201 	add.w	r2, r3, #1
    4798:	693b      	ldr	r3, [r7, #16]
    479a:	60da      	str	r2, [r3, #12]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	f04f 0208 	mov.w	r2, #8
    47a2:	619a      	str	r2, [r3, #24]
    47a4:	e027      	b.n	47f6 <I2C_MasterHandler+0x1de>
			}
			// no more data, switch to next stage
			else {
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
    47a6:	4a46      	ldr	r2, [pc, #280]	; (48c0 <I2C_MasterHandler+0x2a8>)
    47a8:	697b      	ldr	r3, [r7, #20]
    47aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    47ae:	18d3      	adds	r3, r2, r3
    47b0:	f04f 0201 	mov.w	r2, #1
    47b4:	605a      	str	r2, [r3, #4]
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
    47b6:	693b      	ldr	r3, [r7, #16]
    47b8:	695b      	ldr	r3, [r3, #20]
    47ba:	2b00      	cmp	r3, #0
    47bc:	d014      	beq.n	47e8 <I2C_MasterHandler+0x1d0>
    47be:	693b      	ldr	r3, [r7, #16]
    47c0:	691b      	ldr	r3, [r3, #16]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d010      	beq.n	47e8 <I2C_MasterHandler+0x1d0>
						// check whether if we need to issue an repeat start
						if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL)){
    47c6:	693b      	ldr	r3, [r7, #16]
    47c8:	689b      	ldr	r3, [r3, #8]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d04d      	beq.n	486a <I2C_MasterHandler+0x252>
    47ce:	693b      	ldr	r3, [r7, #16]
    47d0:	685b      	ldr	r3, [r3, #4]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d049      	beq.n	486a <I2C_MasterHandler+0x252>
							// Send out an repeat start command
							I2Cx->I2CONSET = I2C_I2CONSET_STA;
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	f04f 0220 	mov.w	r2, #32
    47dc:	601a      	str	r2, [r3, #0]
							I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	f04f 020c 	mov.w	r2, #12
    47e4:	619a      	str	r2, [r3, #24]
				// change direction
				i2cdat[tmp].dir = 1;
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
						// check whether if we need to issue an repeat start
						if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL)){
    47e6:	e006      	b.n	47f6 <I2C_MasterHandler+0x1de>
						}
				}
				// no more data send, the go to end stage now
				else {
					// success, goto end stage
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    47e8:	693b      	ldr	r3, [r7, #16]
    47ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    47f0:	693b      	ldr	r3, [r7, #16]
    47f2:	625a      	str	r2, [r3, #36]	; 0x24
					goto end_stage;
    47f4:	e0dd      	b.n	49b2 <I2C_MasterHandler+0x39a>
				}
			}
			break;
    47f6:	bf00      	nop
    47f8:	e0ea      	b.n	49d0 <I2C_MasterHandler+0x3b8>
		/* SLA+W has been transmitted, NACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_NACK:
		/* Data has been transmitted, NACK has been received -----------------------*/
		case I2C_I2STAT_M_TX_DAT_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
    47fa:	693b      	ldr	r3, [r7, #16]
    47fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4802:	693b      	ldr	r3, [r7, #16]
    4804:	625a      	str	r2, [r3, #36]	; 0x24
			goto retry;
    4806:	e0bb      	b.n	4980 <I2C_MasterHandler+0x368>
		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
		case I2C_I2STAT_M_TX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
    4808:	693b      	ldr	r3, [r7, #16]
    480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    480c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4810:	693b      	ldr	r3, [r7, #16]
    4812:	625a      	str	r2, [r3, #36]	; 0x24
		default:
			goto retry;
    4814:	e0b4      	b.n	4980 <I2C_MasterHandler+0x368>
		}
	}

	/* ----------------------------- RECEIVE PHASE --------------------------*/
	else if (i2cdat[tmp].dir == 1){
    4816:	4a2a      	ldr	r2, [pc, #168]	; (48c0 <I2C_MasterHandler+0x2a8>)
    4818:	697b      	ldr	r3, [r7, #20]
    481a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    481e:	18d3      	adds	r3, r2, r3
    4820:	685b      	ldr	r3, [r3, #4]
    4822:	2b01      	cmp	r3, #1
    4824:	f040 80d4 	bne.w	49d0 <I2C_MasterHandler+0x3b8>
		switch (returnCode){
    4828:	7bfb      	ldrb	r3, [r7, #15]
    482a:	2b40      	cmp	r3, #64	; 0x40
    482c:	d031      	beq.n	4892 <I2C_MasterHandler+0x27a>
    482e:	2b40      	cmp	r3, #64	; 0x40
    4830:	dc07      	bgt.n	4842 <I2C_MasterHandler+0x22a>
    4832:	2b10      	cmp	r3, #16
    4834:	d00d      	beq.n	4852 <I2C_MasterHandler+0x23a>
    4836:	2b38      	cmp	r3, #56	; 0x38
    4838:	f000 809a 	beq.w	4970 <I2C_MasterHandler+0x358>
    483c:	2b08      	cmp	r3, #8
    483e:	d008      	beq.n	4852 <I2C_MasterHandler+0x23a>
    4840:	e09e      	b.n	4980 <I2C_MasterHandler+0x368>
    4842:	2b50      	cmp	r3, #80	; 0x50
    4844:	d03e      	beq.n	48c4 <I2C_MasterHandler+0x2ac>
    4846:	2b58      	cmp	r3, #88	; 0x58
    4848:	d06b      	beq.n	4922 <I2C_MasterHandler+0x30a>
    484a:	2b48      	cmp	r3, #72	; 0x48
    484c:	f000 8089 	beq.w	4962 <I2C_MasterHandler+0x34a>
    4850:	e096      	b.n	4980 <I2C_MasterHandler+0x368>
			/* A start/repeat start condition has been transmitted ---------------------*/
		case I2C_I2STAT_M_RX_START:
		case I2C_I2STAT_M_RX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4852:	687b      	ldr	r3, [r7, #4]
    4854:	f04f 0220 	mov.w	r2, #32
    4858:	619a      	str	r2, [r3, #24]
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0)){
    485a:	693b      	ldr	r3, [r7, #16]
    485c:	691b      	ldr	r3, [r3, #16]
    485e:	2b00      	cmp	r3, #0
    4860:	d010      	beq.n	4884 <I2C_MasterHandler+0x26c>
    4862:	693b      	ldr	r3, [r7, #16]
    4864:	695b      	ldr	r3, [r3, #20]
    4866:	2b00      	cmp	r3, #0
    4868:	d00c      	beq.n	4884 <I2C_MasterHandler+0x26c>
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
    486a:	693b      	ldr	r3, [r7, #16]
    486c:	681b      	ldr	r3, [r3, #0]
    486e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4872:	f043 0201 	orr.w	r2, r3, #1
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	609a      	str	r2, [r3, #8]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	f04f 0208 	mov.w	r2, #8
    4880:	619a      	str	r2, [r3, #24]
			} else {
				// Success, goto end stage
				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
				goto end_stage;
			}
			break;
    4882:	e0a5      	b.n	49d0 <I2C_MasterHandler+0x3b8>
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
			} else {
				// Success, goto end stage
				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    4884:	693b      	ldr	r3, [r7, #16]
    4886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4888:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    488c:	693b      	ldr	r3, [r7, #16]
    488e:	625a      	str	r2, [r3, #36]	; 0x24
				goto end_stage;
    4890:	e08f      	b.n	49b2 <I2C_MasterHandler+0x39a>
			}
			break;

		/* SLA+R has been transmitted, ACK has been received -----------------*/
		case I2C_I2STAT_M_RX_SLAR_ACK:
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
    4892:	693b      	ldr	r3, [r7, #16]
    4894:	699a      	ldr	r2, [r3, #24]
    4896:	693b      	ldr	r3, [r7, #16]
    4898:	695b      	ldr	r3, [r3, #20]
    489a:	f103 33ff 	add.w	r3, r3, #4294967295
    489e:	429a      	cmp	r2, r3
    48a0:	d204      	bcs.n	48ac <I2C_MasterHandler+0x294>
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	f04f 0204 	mov.w	r2, #4
    48a8:	601a      	str	r2, [r3, #0]
    48aa:	e003      	b.n	48b4 <I2C_MasterHandler+0x29c>
			}
			else {
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	f04f 0204 	mov.w	r2, #4
    48b2:	619a      	str	r2, [r3, #24]
			}
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	f04f 0208 	mov.w	r2, #8
    48ba:	619a      	str	r2, [r3, #24]
			break;
    48bc:	e088      	b.n	49d0 <I2C_MasterHandler+0x3b8>
    48be:	bf00      	nop
    48c0:	10004d9c 	.word	0x10004d9c

		/* Data has been received, ACK has been returned ----------------------*/
		case I2C_I2STAT_M_RX_DAT_ACK:
			// Note save data and increase counter first, then check later
			/* Save data  */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
    48c4:	693b      	ldr	r3, [r7, #16]
    48c6:	691b      	ldr	r3, [r3, #16]
    48c8:	2b00      	cmp	r3, #0
    48ca:	d014      	beq.n	48f6 <I2C_MasterHandler+0x2de>
    48cc:	693b      	ldr	r3, [r7, #16]
    48ce:	699a      	ldr	r2, [r3, #24]
    48d0:	693b      	ldr	r3, [r7, #16]
    48d2:	695b      	ldr	r3, [r3, #20]
    48d4:	429a      	cmp	r2, r3
    48d6:	d20e      	bcs.n	48f6 <I2C_MasterHandler+0x2de>
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    48d8:	693b      	ldr	r3, [r7, #16]
    48da:	691a      	ldr	r2, [r3, #16]
    48dc:	693b      	ldr	r3, [r7, #16]
    48de:	699b      	ldr	r3, [r3, #24]
    48e0:	18d3      	adds	r3, r2, r3
    48e2:	687a      	ldr	r2, [r7, #4]
    48e4:	6892      	ldr	r2, [r2, #8]
    48e6:	b2d2      	uxtb	r2, r2
    48e8:	701a      	strb	r2, [r3, #0]
				txrx_setup->rx_count++;
    48ea:	693b      	ldr	r3, [r7, #16]
    48ec:	699b      	ldr	r3, [r3, #24]
    48ee:	f103 0201 	add.w	r2, r3, #1
    48f2:	693b      	ldr	r3, [r7, #16]
    48f4:	619a      	str	r2, [r3, #24]
			}
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
    48f6:	693b      	ldr	r3, [r7, #16]
    48f8:	699a      	ldr	r2, [r3, #24]
    48fa:	693b      	ldr	r3, [r7, #16]
    48fc:	695b      	ldr	r3, [r3, #20]
    48fe:	f103 33ff 	add.w	r3, r3, #4294967295
    4902:	429a      	cmp	r2, r3
    4904:	d204      	bcs.n	4910 <I2C_MasterHandler+0x2f8>
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4906:	687b      	ldr	r3, [r7, #4]
    4908:	f04f 0204 	mov.w	r2, #4
    490c:	601a      	str	r2, [r3, #0]
    490e:	e003      	b.n	4918 <I2C_MasterHandler+0x300>
			}
			else {
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	f04f 0204 	mov.w	r2, #4
    4916:	619a      	str	r2, [r3, #24]
			}

			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	f04f 0208 	mov.w	r2, #8
    491e:	619a      	str	r2, [r3, #24]
			break;
    4920:	e056      	b.n	49d0 <I2C_MasterHandler+0x3b8>

		/* Data has been received, NACK has been return -------------------------*/
		case I2C_I2STAT_M_RX_DAT_NACK:
			/* Save the last data */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
    4922:	693b      	ldr	r3, [r7, #16]
    4924:	691b      	ldr	r3, [r3, #16]
    4926:	2b00      	cmp	r3, #0
    4928:	d014      	beq.n	4954 <I2C_MasterHandler+0x33c>
    492a:	693b      	ldr	r3, [r7, #16]
    492c:	699a      	ldr	r2, [r3, #24]
    492e:	693b      	ldr	r3, [r7, #16]
    4930:	695b      	ldr	r3, [r3, #20]
    4932:	429a      	cmp	r2, r3
    4934:	d20e      	bcs.n	4954 <I2C_MasterHandler+0x33c>
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    4936:	693b      	ldr	r3, [r7, #16]
    4938:	691a      	ldr	r2, [r3, #16]
    493a:	693b      	ldr	r3, [r7, #16]
    493c:	699b      	ldr	r3, [r3, #24]
    493e:	18d3      	adds	r3, r2, r3
    4940:	687a      	ldr	r2, [r7, #4]
    4942:	6892      	ldr	r2, [r2, #8]
    4944:	b2d2      	uxtb	r2, r2
    4946:	701a      	strb	r2, [r3, #0]
				txrx_setup->rx_count++;
    4948:	693b      	ldr	r3, [r7, #16]
    494a:	699b      	ldr	r3, [r3, #24]
    494c:	f103 0201 	add.w	r2, r3, #1
    4950:	693b      	ldr	r3, [r7, #16]
    4952:	619a      	str	r2, [r3, #24]
			}
			// success, go to end stage
			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    4954:	693b      	ldr	r3, [r7, #16]
    4956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4958:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    495c:	693b      	ldr	r3, [r7, #16]
    495e:	625a      	str	r2, [r3, #36]	; 0x24
			goto end_stage;
    4960:	e027      	b.n	49b2 <I2C_MasterHandler+0x39a>

		/* SLA+R has been transmitted, NACK has been received ------------------*/
		case I2C_I2STAT_M_RX_SLAR_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
    4962:	693b      	ldr	r3, [r7, #16]
    4964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4966:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    496a:	693b      	ldr	r3, [r7, #16]
    496c:	625a      	str	r2, [r3, #36]	; 0x24
			goto retry;
    496e:	e007      	b.n	4980 <I2C_MasterHandler+0x368>

		/* Arbitration lost ----------------------------------------------------*/
		case I2C_I2STAT_M_RX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
    4970:	693b      	ldr	r3, [r7, #16]
    4972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    4978:	693b      	ldr	r3, [r7, #16]
    497a:	625a      	str	r2, [r3, #36]	; 0x24
    497c:	e000      	b.n	4980 <I2C_MasterHandler+0x368>
		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
		case I2C_I2STAT_M_TX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
		default:
			goto retry;
    497e:	bf00      	nop
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
		default:
retry:
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max){
    4980:	693b      	ldr	r3, [r7, #16]
    4982:	6a1a      	ldr	r2, [r3, #32]
    4984:	693b      	ldr	r3, [r7, #16]
    4986:	69db      	ldr	r3, [r3, #28]
    4988:	429a      	cmp	r2, r3
    498a:	d212      	bcs.n	49b2 <I2C_MasterHandler+0x39a>
				// Clear tx count
				txrx_setup->tx_count = 0;
    498c:	693b      	ldr	r3, [r7, #16]
    498e:	f04f 0200 	mov.w	r2, #0
    4992:	60da      	str	r2, [r3, #12]
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	f04f 0220 	mov.w	r2, #32
    499a:	601a      	str	r2, [r3, #0]
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	f04f 020c 	mov.w	r2, #12
    49a2:	619a      	str	r2, [r3, #24]
				txrx_setup->retransmissions_count++;
    49a4:	693b      	ldr	r3, [r7, #16]
    49a6:	6a1b      	ldr	r3, [r3, #32]
    49a8:	f103 0201 	add.w	r2, r3, #1
    49ac:	693b      	ldr	r3, [r7, #16]
    49ae:	621a      	str	r2, [r3, #32]
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
			}
			break;
    49b0:	e00e      	b.n	49d0 <I2C_MasterHandler+0x3b8>
			}
			// End of stage
			else {
end_stage:
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
    49b2:	6878      	ldr	r0, [r7, #4]
    49b4:	f04f 0100 	mov.w	r1, #0
    49b8:	f7ff fde6 	bl	4588 <I2C_IntCmd>
				// Send stop
				I2C_Stop(I2Cx);
    49bc:	6878      	ldr	r0, [r7, #4]
    49be:	f7ff fc3d 	bl	423c <I2C_Stop>

				I2C_MasterComplete[tmp] = TRUE;
    49c2:	4b05      	ldr	r3, [pc, #20]	; (49d8 <I2C_MasterHandler+0x3c0>)
    49c4:	697a      	ldr	r2, [r7, #20]
    49c6:	f04f 0101 	mov.w	r1, #1
    49ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			break;
    49ce:	bf00      	nop
		}
	}
}
    49d0:	f107 0718 	add.w	r7, r7, #24
    49d4:	46bd      	mov	sp, r7
    49d6:	bd80      	pop	{r7, pc}
    49d8:	10004db4 	.word	0x10004db4

000049dc <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
    49dc:	b580      	push	{r7, lr}
    49de:	b086      	sub	sp, #24
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
    49e4:	6878      	ldr	r0, [r7, #4]
    49e6:	f7ff fbdf 	bl	41a8 <I2C_getNum>
    49ea:	6138      	str	r0, [r7, #16]
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
    49ec:	4b6e      	ldr	r3, [pc, #440]	; (4ba8 <I2C_SlaveHandler+0x1cc>)
    49ee:	693a      	ldr	r2, [r7, #16]
    49f0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49f4:	60fb      	str	r3, [r7, #12]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	b2db      	uxtb	r3, r3
    49fc:	f023 0307 	bic.w	r3, r3, #7
    4a00:	72fb      	strb	r3, [r7, #11]
	// Save current status
	txrx_setup->status = returnCode;
    4a02:	7afa      	ldrb	r2, [r7, #11]
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	619a      	str	r2, [r3, #24]
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF){
    4a08:	7afb      	ldrb	r3, [r7, #11]
    4a0a:	2bf8      	cmp	r3, #248	; 0xf8
    4a0c:	d104      	bne.n	4a18 <I2C_SlaveHandler+0x3c>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	f04f 0208 	mov.w	r2, #8
    4a14:	619a      	str	r2, [r3, #24]
		return;
    4a16:	e0c3      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	}


	switch (returnCode)
    4a18:	7afb      	ldrb	r3, [r7, #11]
    4a1a:	2b98      	cmp	r3, #152	; 0x98
    4a1c:	d052      	beq.n	4ac4 <I2C_SlaveHandler+0xe8>
    4a1e:	2b98      	cmp	r3, #152	; 0x98
    4a20:	dc0d      	bgt.n	4a3e <I2C_SlaveHandler+0x62>
    4a22:	2b80      	cmp	r3, #128	; 0x80
    4a24:	d02c      	beq.n	4a80 <I2C_SlaveHandler+0xa4>
    4a26:	2b80      	cmp	r3, #128	; 0x80
    4a28:	dc04      	bgt.n	4a34 <I2C_SlaveHandler+0x58>
    4a2a:	2b60      	cmp	r3, #96	; 0x60
    4a2c:	d01f      	beq.n	4a6e <I2C_SlaveHandler+0x92>
    4a2e:	2b70      	cmp	r3, #112	; 0x70
    4a30:	d01d      	beq.n	4a6e <I2C_SlaveHandler+0x92>
    4a32:	e0a5      	b.n	4b80 <I2C_SlaveHandler+0x1a4>
    4a34:	2b88      	cmp	r3, #136	; 0x88
    4a36:	d045      	beq.n	4ac4 <I2C_SlaveHandler+0xe8>
    4a38:	2b90      	cmp	r3, #144	; 0x90
    4a3a:	d021      	beq.n	4a80 <I2C_SlaveHandler+0xa4>
    4a3c:	e0a0      	b.n	4b80 <I2C_SlaveHandler+0x1a4>
    4a3e:	2bb8      	cmp	r3, #184	; 0xb8
    4a40:	d06d      	beq.n	4b1e <I2C_SlaveHandler+0x142>
    4a42:	2bb8      	cmp	r3, #184	; 0xb8
    4a44:	dc04      	bgt.n	4a50 <I2C_SlaveHandler+0x74>
    4a46:	2ba0      	cmp	r3, #160	; 0xa0
    4a48:	d041      	beq.n	4ace <I2C_SlaveHandler+0xf2>
    4a4a:	2ba8      	cmp	r3, #168	; 0xa8
    4a4c:	d067      	beq.n	4b1e <I2C_SlaveHandler+0x142>
    4a4e:	e097      	b.n	4b80 <I2C_SlaveHandler+0x1a4>
    4a50:	2bc0      	cmp	r3, #192	; 0xc0
    4a52:	f000 8086 	beq.w	4b62 <I2C_SlaveHandler+0x186>
    4a56:	2bf8      	cmp	r3, #248	; 0xf8
    4a58:	f040 8092 	bne.w	4b80 <I2C_SlaveHandler+0x1a4>
	{

	/* No status information */
	case I2C_I2STAT_NO_INF:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	f04f 0204 	mov.w	r2, #4
    4a62:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	f04f 0208 	mov.w	r2, #8
    4a6a:	619a      	str	r2, [r3, #24]
		break;
    4a6c:	e098      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	/* Reading phase -------------------------------------------------------- */
	/* Own SLA+R has been received, ACK has been returned */
	case I2C_I2STAT_S_RX_SLAW_ACK:
	/* General call address has been received, ACK has been returned */
	case I2C_I2STAT_S_RX_GENCALL_ACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	f04f 0204 	mov.w	r2, #4
    4a74:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	f04f 0208 	mov.w	r2, #8
    4a7c:	619a      	str	r2, [r3, #24]
		break;
    4a7e:	e08f      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) \
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	695a      	ldr	r2, [r3, #20]
    4a84:	68fb      	ldr	r3, [r7, #12]
    4a86:	691b      	ldr	r3, [r3, #16]
    4a88:	429a      	cmp	r2, r3
    4a8a:	d212      	bcs.n	4ab2 <I2C_SlaveHandler+0xd6>
				&& (txrx_setup->rx_data != NULL)){
    4a8c:	68fb      	ldr	r3, [r7, #12]
    4a8e:	68db      	ldr	r3, [r3, #12]
    4a90:	2b00      	cmp	r3, #0
    4a92:	d00e      	beq.n	4ab2 <I2C_SlaveHandler+0xd6>
			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
    4a94:	68fb      	ldr	r3, [r7, #12]
    4a96:	68da      	ldr	r2, [r3, #12]
    4a98:	68fb      	ldr	r3, [r7, #12]
    4a9a:	695b      	ldr	r3, [r3, #20]
    4a9c:	18d3      	adds	r3, r2, r3
    4a9e:	687a      	ldr	r2, [r7, #4]
    4aa0:	6892      	ldr	r2, [r2, #8]
    4aa2:	b2d2      	uxtb	r2, r2
    4aa4:	701a      	strb	r2, [r3, #0]
			txrx_setup->rx_count++;
    4aa6:	68fb      	ldr	r3, [r7, #12]
    4aa8:	695b      	ldr	r3, [r3, #20]
    4aaa:	f103 0201 	add.w	r2, r3, #1
    4aae:	68fb      	ldr	r3, [r7, #12]
    4ab0:	615a      	str	r2, [r3, #20]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	f04f 0204 	mov.w	r2, #4
    4ab8:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	f04f 0208 	mov.w	r2, #8
    4ac0:	619a      	str	r2, [r3, #24]
		break;
    4ac2:	e06d      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	 * DATA byte has been received;
	 * NOT ACK has been returned */
	case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
	/* DATA has been received, NOT ACK has been returned */
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	f04f 0208 	mov.w	r2, #8
    4aca:	619a      	str	r2, [r3, #24]
		break;
    4acc:	e068      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	 */

	/* A Stop or a repeat start condition */
	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, 0);
    4ace:	6878      	ldr	r0, [r7, #4]
    4ad0:	f04f 0100 	mov.w	r1, #0
    4ad4:	f7ff fd58 	bl	4588 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	f04f 0208 	mov.w	r2, #8
    4ade:	619a      	str	r2, [r3, #24]
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
    4ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ae4:	617b      	str	r3, [r7, #20]
    4ae6:	e000      	b.n	4aea <I2C_SlaveHandler+0x10e>
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
					goto s_int_end;
				}
			}
		}
    4ae8:	bf00      	nop
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1){
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	f003 0308 	and.w	r3, r3, #8
    4af2:	2b00      	cmp	r3, #0
    4af4:	d005      	beq.n	4b02 <I2C_SlaveHandler+0x126>
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
    4af6:	6878      	ldr	r0, [r7, #4]
    4af8:	f04f 0101 	mov.w	r1, #1
    4afc:	f7ff fd44 	bl	4588 <I2C_IntCmd>
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
					goto s_int_end;
				}
			}
		}
		break;
    4b00:	e04e      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
				break;
			} else {
				timeout--;
    4b02:	697b      	ldr	r3, [r7, #20]
    4b04:	f103 33ff 	add.w	r3, r3, #4294967295
    4b08:	617b      	str	r3, [r7, #20]
				if (timeout == 0){
    4b0a:	697b      	ldr	r3, [r7, #20]
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d1eb      	bne.n	4ae8 <I2C_SlaveHandler+0x10c>
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	699b      	ldr	r3, [r3, #24]
    4b14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	619a      	str	r2, [r3, #24]
					goto s_int_end;
    4b1c:	e030      	b.n	4b80 <I2C_SlaveHandler+0x1a4>
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    4b1e:	68fb      	ldr	r3, [r7, #12]
    4b20:	689a      	ldr	r2, [r3, #8]
    4b22:	68fb      	ldr	r3, [r7, #12]
    4b24:	685b      	ldr	r3, [r3, #4]
    4b26:	429a      	cmp	r2, r3
    4b28:	d212      	bcs.n	4b50 <I2C_SlaveHandler+0x174>
				&& (txrx_setup->tx_data != NULL)){
    4b2a:	68fb      	ldr	r3, [r7, #12]
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d00e      	beq.n	4b50 <I2C_SlaveHandler+0x174>
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	681a      	ldr	r2, [r3, #0]
    4b36:	68fb      	ldr	r3, [r7, #12]
    4b38:	689b      	ldr	r3, [r3, #8]
    4b3a:	18d3      	adds	r3, r2, r3
    4b3c:	781b      	ldrb	r3, [r3, #0]
    4b3e:	461a      	mov	r2, r3
    4b40:	687b      	ldr	r3, [r7, #4]
    4b42:	609a      	str	r2, [r3, #8]
			txrx_setup->tx_count++;
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	689b      	ldr	r3, [r3, #8]
    4b48:	f103 0201 	add.w	r2, r3, #1
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	609a      	str	r2, [r3, #8]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	f04f 0204 	mov.w	r2, #4
    4b56:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	f04f 0208 	mov.w	r2, #8
    4b5e:	619a      	str	r2, [r3, #24]
		break;
    4b60:	e01e      	b.n	4ba0 <I2C_SlaveHandler+0x1c4>
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	f04f 0204 	mov.w	r2, #4
    4b68:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4b6a:	687b      	ldr	r3, [r7, #4]
    4b6c:	f04f 0208 	mov.w	r2, #8
    4b70:	619a      	str	r2, [r3, #24]
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    4b72:	68fb      	ldr	r3, [r7, #12]
    4b74:	699b      	ldr	r3, [r3, #24]
    4b76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    4b7a:	68fb      	ldr	r3, [r7, #12]
    4b7c:	619a      	str	r2, [r3, #24]
		goto s_int_end;
    4b7e:	bf00      	nop

	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
    4b80:	6878      	ldr	r0, [r7, #4]
    4b82:	f04f 0100 	mov.w	r1, #0
    4b86:	f7ff fcff 	bl	4588 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    4b8a:	687b      	ldr	r3, [r7, #4]
    4b8c:	f04f 022c 	mov.w	r2, #44	; 0x2c
    4b90:	619a      	str	r2, [r3, #24]
		I2C_SlaveComplete[tmp] = TRUE;
    4b92:	4b06      	ldr	r3, [pc, #24]	; (4bac <I2C_SlaveHandler+0x1d0>)
    4b94:	693a      	ldr	r2, [r7, #16]
    4b96:	f04f 0101 	mov.w	r1, #1
    4b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
    4b9e:	bf00      	nop
	}
}
    4ba0:	f107 0718 	add.w	r7, r7, #24
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bd80      	pop	{r7, pc}
    4ba8:	10004d9c 	.word	0x10004d9c
    4bac:	10004dc0 	.word	0x10004dc0

00004bb0 <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b088      	sub	sp, #32
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	60f8      	str	r0, [r7, #12]
    4bb8:	60b9      	str	r1, [r7, #8]
    4bba:	4613      	mov	r3, r2
    4bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t *rxdat;
	uint32_t CodeStatus;
	uint8_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
    4bbe:	68bb      	ldr	r3, [r7, #8]
    4bc0:	685b      	ldr	r3, [r3, #4]
    4bc2:	61fb      	str	r3, [r7, #28]
	rxdat = (uint8_t *) TransferCfg->rx_data;
    4bc4:	68bb      	ldr	r3, [r7, #8]
    4bc6:	691b      	ldr	r3, [r3, #16]
    4bc8:	61bb      	str	r3, [r7, #24]
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    4bca:	68bb      	ldr	r3, [r7, #8]
    4bcc:	f04f 0200 	mov.w	r2, #0
    4bd0:	60da      	str	r2, [r3, #12]
	TransferCfg->rx_count = 0;
    4bd2:	68bb      	ldr	r3, [r7, #8]
    4bd4:	f04f 0200 	mov.w	r2, #0
    4bd8:	619a      	str	r2, [r3, #24]
	TransferCfg->status = 0;
    4bda:	68bb      	ldr	r3, [r7, #8]
    4bdc:	f04f 0200 	mov.w	r2, #0
    4be0:	625a      	str	r2, [r3, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING){
    4be2:	79fb      	ldrb	r3, [r7, #7]
    4be4:	2b00      	cmp	r3, #0
    4be6:	f040 814d 	bne.w	4e84 <I2C_MasterTransferData+0x2d4>

		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
    4bea:	68bb      	ldr	r3, [r7, #8]
    4bec:	f04f 0200 	mov.w	r2, #0
    4bf0:	621a      	str	r2, [r3, #32]
    4bf2:	e00c      	b.n	4c0e <I2C_MasterTransferData+0x5e>
			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
				// save status
				TransferCfg->status = CodeStatus;
				goto error;
			} else {
				goto retry;
    4bf4:	bf00      	nop
    4bf6:	e00a      	b.n	4c0e <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// save status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
					goto error;
				} else {
					goto retry;
    4bf8:	bf00      	nop
    4bfa:	e008      	b.n	4c0e <I2C_MasterTransferData+0x5e>
					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
						// save status
						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
						goto error;
					} else {
						goto retry;
    4bfc:	bf00      	nop
    4bfe:	e006      	b.n	4c0e <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// Update status
					TransferCfg->status = CodeStatus;
					goto error;
				} else {
					goto retry;
    4c00:	bf00      	nop
    4c02:	e004      	b.n	4c0e <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
					goto error;
				} else {
					goto retry;
    4c04:	bf00      	nop
    4c06:	e002      	b.n	4c0e <I2C_MasterTransferData+0x5e>
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
							// update status
							TransferCfg->status = CodeStatus;
							goto error;
						} else {
							goto retry;
    4c08:	bf00      	nop
    4c0a:	e000      	b.n	4c0e <I2C_MasterTransferData+0x5e>
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
							// update status
							TransferCfg->status = CodeStatus;
							goto error;
						} else {
							goto retry;
    4c0c:	bf00      	nop

		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
    4c0e:	68bb      	ldr	r3, [r7, #8]
    4c10:	685b      	ldr	r3, [r3, #4]
    4c12:	61fb      	str	r3, [r7, #28]
		rxdat = (uint8_t *) TransferCfg->rx_data;
    4c14:	68bb      	ldr	r3, [r7, #8]
    4c16:	691b      	ldr	r3, [r3, #16]
    4c18:	61bb      	str	r3, [r7, #24]
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
    4c1a:	68bb      	ldr	r3, [r7, #8]
    4c1c:	f04f 0200 	mov.w	r2, #0
    4c20:	60da      	str	r2, [r3, #12]
		TransferCfg->rx_count = 0;
    4c22:	68bb      	ldr	r3, [r7, #8]
    4c24:	f04f 0200 	mov.w	r2, #0
    4c28:	619a      	str	r2, [r3, #24]
		CodeStatus = 0;
    4c2a:	f04f 0300 	mov.w	r3, #0
    4c2e:	617b      	str	r3, [r7, #20]

		// Start command
		CodeStatus = I2C_Start(I2Cx);
    4c30:	68f8      	ldr	r0, [r7, #12]
    4c32:	f7ff fae1 	bl	41f8 <I2C_Start>
    4c36:	6178      	str	r0, [r7, #20]
		if ((CodeStatus != I2C_I2STAT_M_TX_START) \
    4c38:	697b      	ldr	r3, [r7, #20]
    4c3a:	2b08      	cmp	r3, #8
    4c3c:	d012      	beq.n	4c64 <I2C_MasterTransferData+0xb4>
				&& (CodeStatus != I2C_I2STAT_M_TX_RESTART)){
    4c3e:	697b      	ldr	r3, [r7, #20]
    4c40:	2b10      	cmp	r3, #16
    4c42:	d00f      	beq.n	4c64 <I2C_MasterTransferData+0xb4>
			TransferCfg->retransmissions_count++;
    4c44:	68bb      	ldr	r3, [r7, #8]
    4c46:	6a1b      	ldr	r3, [r3, #32]
    4c48:	f103 0201 	add.w	r2, r3, #1
    4c4c:	68bb      	ldr	r3, [r7, #8]
    4c4e:	621a      	str	r2, [r3, #32]
			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4c50:	68bb      	ldr	r3, [r7, #8]
    4c52:	6a1a      	ldr	r2, [r3, #32]
    4c54:	68bb      	ldr	r3, [r7, #8]
    4c56:	69db      	ldr	r3, [r3, #28]
    4c58:	429a      	cmp	r2, r3
    4c5a:	d9cb      	bls.n	4bf4 <I2C_MasterTransferData+0x44>
				// save status
				TransferCfg->status = CodeStatus;
    4c5c:	68bb      	ldr	r3, [r7, #8]
    4c5e:	697a      	ldr	r2, [r7, #20]
    4c60:	625a      	str	r2, [r3, #36]	; 0x24
				goto error;
    4c62:	e109      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL)){
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	689b      	ldr	r3, [r3, #8]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d051      	beq.n	4d10 <I2C_MasterTransferData+0x160>
    4c6c:	68bb      	ldr	r3, [r7, #8]
    4c6e:	685b      	ldr	r3, [r3, #4]
    4c70:	2b00      	cmp	r3, #0
    4c72:	d04d      	beq.n	4d10 <I2C_MasterTransferData+0x160>

			/* Send slave address + WR direction bit = 0 ----------------------------------- */
			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
    4c74:	68bb      	ldr	r3, [r7, #8]
    4c76:	681b      	ldr	r3, [r3, #0]
    4c78:	b2db      	uxtb	r3, r3
    4c7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4c7e:	b2db      	uxtb	r3, r3
    4c80:	68f8      	ldr	r0, [r7, #12]
    4c82:	4619      	mov	r1, r3
    4c84:	f7ff faf6 	bl	4274 <I2C_SendByte>
    4c88:	6178      	str	r0, [r7, #20]
			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK){
    4c8a:	697b      	ldr	r3, [r7, #20]
    4c8c:	2b18      	cmp	r3, #24
    4c8e:	d038      	beq.n	4d02 <I2C_MasterTransferData+0x152>
				TransferCfg->retransmissions_count++;
    4c90:	68bb      	ldr	r3, [r7, #8]
    4c92:	6a1b      	ldr	r3, [r3, #32]
    4c94:	f103 0201 	add.w	r2, r3, #1
    4c98:	68bb      	ldr	r3, [r7, #8]
    4c9a:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4c9c:	68bb      	ldr	r3, [r7, #8]
    4c9e:	6a1a      	ldr	r2, [r3, #32]
    4ca0:	68bb      	ldr	r3, [r7, #8]
    4ca2:	69db      	ldr	r3, [r3, #28]
    4ca4:	429a      	cmp	r2, r3
    4ca6:	d9a7      	bls.n	4bf8 <I2C_MasterTransferData+0x48>
					// save status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    4ca8:	697b      	ldr	r3, [r7, #20]
    4caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4cae:	68bb      	ldr	r3, [r7, #8]
    4cb0:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    4cb2:	e0e1      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
			{
				CodeStatus = I2C_SendByte(I2Cx, *txdat);
    4cb4:	69fb      	ldr	r3, [r7, #28]
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	68f8      	ldr	r0, [r7, #12]
    4cba:	4619      	mov	r1, r3
    4cbc:	f7ff fada 	bl	4274 <I2C_SendByte>
    4cc0:	6178      	str	r0, [r7, #20]
				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK){
    4cc2:	697b      	ldr	r3, [r7, #20]
    4cc4:	2b28      	cmp	r3, #40	; 0x28
    4cc6:	d011      	beq.n	4cec <I2C_MasterTransferData+0x13c>
					TransferCfg->retransmissions_count++;
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	6a1b      	ldr	r3, [r3, #32]
    4ccc:	f103 0201 	add.w	r2, r3, #1
    4cd0:	68bb      	ldr	r3, [r7, #8]
    4cd2:	621a      	str	r2, [r3, #32]
					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4cd4:	68bb      	ldr	r3, [r7, #8]
    4cd6:	6a1a      	ldr	r2, [r3, #32]
    4cd8:	68bb      	ldr	r3, [r7, #8]
    4cda:	69db      	ldr	r3, [r3, #28]
    4cdc:	429a      	cmp	r2, r3
    4cde:	d98d      	bls.n	4bfc <I2C_MasterTransferData+0x4c>
						// save status
						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    4ce0:	697b      	ldr	r3, [r7, #20]
    4ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4ce6:	68bb      	ldr	r3, [r7, #8]
    4ce8:	625a      	str	r2, [r3, #36]	; 0x24
						goto error;
    4cea:	e0c5      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
					} else {
						goto retry;
					}
				}

				txdat++;
    4cec:	69fb      	ldr	r3, [r7, #28]
    4cee:	f103 0301 	add.w	r3, r3, #1
    4cf2:	61fb      	str	r3, [r7, #28]
				TransferCfg->tx_count++;
    4cf4:	68bb      	ldr	r3, [r7, #8]
    4cf6:	68db      	ldr	r3, [r3, #12]
    4cf8:	f103 0201 	add.w	r2, r3, #1
    4cfc:	68bb      	ldr	r3, [r7, #8]
    4cfe:	60da      	str	r2, [r3, #12]
    4d00:	e000      	b.n	4d04 <I2C_MasterTransferData+0x154>
					goto retry;
				}
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
    4d02:	bf00      	nop
    4d04:	68bb      	ldr	r3, [r7, #8]
    4d06:	68da      	ldr	r2, [r3, #12]
    4d08:	68bb      	ldr	r3, [r7, #8]
    4d0a:	689b      	ldr	r3, [r3, #8]
    4d0c:	429a      	cmp	r2, r3
    4d0e:	d3d1      	bcc.n	4cb4 <I2C_MasterTransferData+0x104>
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
    4d10:	68bb      	ldr	r3, [r7, #8]
    4d12:	689b      	ldr	r3, [r3, #8]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d026      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>
    4d18:	68bb      	ldr	r3, [r7, #8]
    4d1a:	685b      	ldr	r3, [r3, #4]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d022      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
    4d20:	68bb      	ldr	r3, [r7, #8]
    4d22:	695b      	ldr	r3, [r3, #20]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d01e      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>
    4d28:	68bb      	ldr	r3, [r7, #8]
    4d2a:	691b      	ldr	r3, [r3, #16]
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d01a      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>

			CodeStatus = I2C_Start(I2Cx);
    4d30:	68f8      	ldr	r0, [r7, #12]
    4d32:	f7ff fa61 	bl	41f8 <I2C_Start>
    4d36:	6178      	str	r0, [r7, #20]
			if ((CodeStatus != I2C_I2STAT_M_RX_START) \
    4d38:	697b      	ldr	r3, [r7, #20]
    4d3a:	2b08      	cmp	r3, #8
    4d3c:	d013      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>
					&& (CodeStatus != I2C_I2STAT_M_RX_RESTART)){
    4d3e:	697b      	ldr	r3, [r7, #20]
    4d40:	2b10      	cmp	r3, #16
    4d42:	d010      	beq.n	4d66 <I2C_MasterTransferData+0x1b6>
				TransferCfg->retransmissions_count++;
    4d44:	68bb      	ldr	r3, [r7, #8]
    4d46:	6a1b      	ldr	r3, [r3, #32]
    4d48:	f103 0201 	add.w	r2, r3, #1
    4d4c:	68bb      	ldr	r3, [r7, #8]
    4d4e:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4d50:	68bb      	ldr	r3, [r7, #8]
    4d52:	6a1a      	ldr	r2, [r3, #32]
    4d54:	68bb      	ldr	r3, [r7, #8]
    4d56:	69db      	ldr	r3, [r3, #28]
    4d58:	429a      	cmp	r2, r3
    4d5a:	f67f af51 	bls.w	4c00 <I2C_MasterTransferData+0x50>
					// Update status
					TransferCfg->status = CodeStatus;
    4d5e:	68bb      	ldr	r3, [r7, #8]
    4d60:	697a      	ldr	r2, [r7, #20]
    4d62:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    4d64:	e088      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
    4d66:	68bb      	ldr	r3, [r7, #8]
    4d68:	695b      	ldr	r3, [r3, #20]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d07e      	beq.n	4e6c <I2C_MasterTransferData+0x2bc>
    4d6e:	68bb      	ldr	r3, [r7, #8]
    4d70:	691b      	ldr	r3, [r3, #16]
    4d72:	2b00      	cmp	r3, #0
    4d74:	d07a      	beq.n	4e6c <I2C_MasterTransferData+0x2bc>
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
    4d76:	68bb      	ldr	r3, [r7, #8]
    4d78:	681b      	ldr	r3, [r3, #0]
    4d7a:	b2db      	uxtb	r3, r3
    4d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4d80:	b2db      	uxtb	r3, r3
    4d82:	f043 0301 	orr.w	r3, r3, #1
    4d86:	b2db      	uxtb	r3, r3
    4d88:	68f8      	ldr	r0, [r7, #12]
    4d8a:	4619      	mov	r1, r3
    4d8c:	f7ff fa72 	bl	4274 <I2C_SendByte>
    4d90:	6178      	str	r0, [r7, #20]
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK){
    4d92:	697b      	ldr	r3, [r7, #20]
    4d94:	2b40      	cmp	r3, #64	; 0x40
    4d96:	d062      	beq.n	4e5e <I2C_MasterTransferData+0x2ae>
				TransferCfg->retransmissions_count++;
    4d98:	68bb      	ldr	r3, [r7, #8]
    4d9a:	6a1b      	ldr	r3, [r3, #32]
    4d9c:	f103 0201 	add.w	r2, r3, #1
    4da0:	68bb      	ldr	r3, [r7, #8]
    4da2:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4da4:	68bb      	ldr	r3, [r7, #8]
    4da6:	6a1a      	ldr	r2, [r3, #32]
    4da8:	68bb      	ldr	r3, [r7, #8]
    4daa:	69db      	ldr	r3, [r3, #28]
    4dac:	429a      	cmp	r2, r3
    4dae:	f67f af29 	bls.w	4c04 <I2C_MasterTransferData+0x54>
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    4db2:	697b      	ldr	r3, [r7, #20]
    4db4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    4db8:	68bb      	ldr	r3, [r7, #8]
    4dba:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    4dbc:	e05c      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
				/*
				 * Note that: if data length is only one, the master should not
				 * issue an ACK signal on bus after reading to avoid of next data frame
				 * on slave side
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1)){
    4dbe:	68bb      	ldr	r3, [r7, #8]
    4dc0:	699a      	ldr	r2, [r3, #24]
    4dc2:	68bb      	ldr	r3, [r7, #8]
    4dc4:	695b      	ldr	r3, [r3, #20]
    4dc6:	f103 33ff 	add.w	r3, r3, #4294967295
    4dca:	429a      	cmp	r2, r3
    4dcc:	d21c      	bcs.n	4e08 <I2C_MasterTransferData+0x258>
					// Issue an ACK signal for next data frame
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
    4dce:	f107 0313 	add.w	r3, r7, #19
    4dd2:	68f8      	ldr	r0, [r7, #12]
    4dd4:	4619      	mov	r1, r3
    4dd6:	f04f 0201 	mov.w	r2, #1
    4dda:	f7ff fa73 	bl	42c4 <I2C_GetByte>
    4dde:	6178      	str	r0, [r7, #20]
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK){
    4de0:	697b      	ldr	r3, [r7, #20]
    4de2:	2b50      	cmp	r3, #80	; 0x50
    4de4:	d02d      	beq.n	4e42 <I2C_MasterTransferData+0x292>
						TransferCfg->retransmissions_count++;
    4de6:	68bb      	ldr	r3, [r7, #8]
    4de8:	6a1b      	ldr	r3, [r3, #32]
    4dea:	f103 0201 	add.w	r2, r3, #1
    4dee:	68bb      	ldr	r3, [r7, #8]
    4df0:	621a      	str	r2, [r3, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4df2:	68bb      	ldr	r3, [r7, #8]
    4df4:	6a1a      	ldr	r2, [r3, #32]
    4df6:	68bb      	ldr	r3, [r7, #8]
    4df8:	69db      	ldr	r3, [r3, #28]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	f67f af04 	bls.w	4c08 <I2C_MasterTransferData+0x58>
							// update status
							TransferCfg->status = CodeStatus;
    4e00:	68bb      	ldr	r3, [r7, #8]
    4e02:	697a      	ldr	r2, [r7, #20]
    4e04:	625a      	str	r2, [r3, #36]	; 0x24
							goto error;
    4e06:	e037      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
							goto retry;
						}
					}
				} else {
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
    4e08:	f107 0313 	add.w	r3, r7, #19
    4e0c:	68f8      	ldr	r0, [r7, #12]
    4e0e:	4619      	mov	r1, r3
    4e10:	f04f 0200 	mov.w	r2, #0
    4e14:	f7ff fa56 	bl	42c4 <I2C_GetByte>
    4e18:	6178      	str	r0, [r7, #20]
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK){
    4e1a:	697b      	ldr	r3, [r7, #20]
    4e1c:	2b58      	cmp	r3, #88	; 0x58
    4e1e:	d010      	beq.n	4e42 <I2C_MasterTransferData+0x292>
						TransferCfg->retransmissions_count++;
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	6a1b      	ldr	r3, [r3, #32]
    4e24:	f103 0201 	add.w	r2, r3, #1
    4e28:	68bb      	ldr	r3, [r7, #8]
    4e2a:	621a      	str	r2, [r3, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4e2c:	68bb      	ldr	r3, [r7, #8]
    4e2e:	6a1a      	ldr	r2, [r3, #32]
    4e30:	68bb      	ldr	r3, [r7, #8]
    4e32:	69db      	ldr	r3, [r3, #28]
    4e34:	429a      	cmp	r2, r3
    4e36:	f67f aee9 	bls.w	4c0c <I2C_MasterTransferData+0x5c>
							// update status
							TransferCfg->status = CodeStatus;
    4e3a:	68bb      	ldr	r3, [r7, #8]
    4e3c:	697a      	ldr	r2, [r7, #20]
    4e3e:	625a      	str	r2, [r3, #36]	; 0x24
							goto error;
    4e40:	e01a      	b.n	4e78 <I2C_MasterTransferData+0x2c8>
						} else {
							goto retry;
						}
					}
				}
				*rxdat++ = tmp;
    4e42:	7cfa      	ldrb	r2, [r7, #19]
    4e44:	69bb      	ldr	r3, [r7, #24]
    4e46:	701a      	strb	r2, [r3, #0]
    4e48:	69bb      	ldr	r3, [r7, #24]
    4e4a:	f103 0301 	add.w	r3, r3, #1
    4e4e:	61bb      	str	r3, [r7, #24]
				TransferCfg->rx_count++;
    4e50:	68bb      	ldr	r3, [r7, #8]
    4e52:	699b      	ldr	r3, [r3, #24]
    4e54:	f103 0201 	add.w	r2, r3, #1
    4e58:	68bb      	ldr	r3, [r7, #8]
    4e5a:	619a      	str	r2, [r3, #24]
    4e5c:	e000      	b.n	4e60 <I2C_MasterTransferData+0x2b0>
					goto retry;
				}
			}

			/* Receive a number of data bytes ------------------------------------------------- */
			while (TransferCfg->rx_count < TransferCfg->rx_length){
    4e5e:	bf00      	nop
    4e60:	68bb      	ldr	r3, [r7, #8]
    4e62:	699a      	ldr	r2, [r3, #24]
    4e64:	68bb      	ldr	r3, [r7, #8]
    4e66:	695b      	ldr	r3, [r3, #20]
    4e68:	429a      	cmp	r2, r3
    4e6a:	d3a8      	bcc.n	4dbe <I2C_MasterTransferData+0x20e>
				TransferCfg->rx_count++;
			}
		}

		/* Send STOP condition ------------------------------------------------- */
		I2C_Stop(I2Cx);
    4e6c:	68f8      	ldr	r0, [r7, #12]
    4e6e:	f7ff f9e5 	bl	423c <I2C_Stop>
		return SUCCESS;
    4e72:	f04f 0301 	mov.w	r3, #1
    4e76:	e02e      	b.n	4ed6 <I2C_MasterTransferData+0x326>

error:
		// Send stop condition
		I2C_Stop(I2Cx);
    4e78:	68f8      	ldr	r0, [r7, #12]
    4e7a:	f7ff f9df 	bl	423c <I2C_Stop>
		return ERROR;
    4e7e:	f04f 0300 	mov.w	r3, #0
    4e82:	e028      	b.n	4ed6 <I2C_MasterTransferData+0x326>
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT){
    4e84:	79fb      	ldrb	r3, [r7, #7]
    4e86:	2b01      	cmp	r3, #1
    4e88:	d123      	bne.n	4ed2 <I2C_MasterTransferData+0x322>
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
    4e8a:	68f8      	ldr	r0, [r7, #12]
    4e8c:	f7ff f98c 	bl	41a8 <I2C_getNum>
    4e90:	4603      	mov	r3, r0
    4e92:	b2db      	uxtb	r3, r3
    4e94:	74fb      	strb	r3, [r7, #19]
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
    4e96:	7cfb      	ldrb	r3, [r7, #19]
    4e98:	461a      	mov	r2, r3
    4e9a:	68b9      	ldr	r1, [r7, #8]
    4e9c:	4b10      	ldr	r3, [pc, #64]	; (4ee0 <I2C_MasterTransferData+0x330>)
    4e9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
    4ea2:	7cfb      	ldrb	r3, [r7, #19]
    4ea4:	4a0e      	ldr	r2, [pc, #56]	; (4ee0 <I2C_MasterTransferData+0x330>)
    4ea6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4eaa:	18d3      	adds	r3, r2, r3
    4eac:	f04f 0200 	mov.w	r2, #0
    4eb0:	605a      	str	r2, [r3, #4]

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	f04f 0208 	mov.w	r2, #8
    4eb8:	619a      	str	r2, [r3, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4eba:	68fb      	ldr	r3, [r7, #12]
    4ebc:	f04f 0220 	mov.w	r2, #32
    4ec0:	601a      	str	r2, [r3, #0]
		I2C_IntCmd(I2Cx, 1);
    4ec2:	68f8      	ldr	r0, [r7, #12]
    4ec4:	f04f 0101 	mov.w	r1, #1
    4ec8:	f7ff fb5e 	bl	4588 <I2C_IntCmd>

		return (SUCCESS);
    4ecc:	f04f 0301 	mov.w	r3, #1
    4ed0:	e001      	b.n	4ed6 <I2C_MasterTransferData+0x326>
	}

	return ERROR;
    4ed2:	f04f 0300 	mov.w	r3, #0
}
    4ed6:	4618      	mov	r0, r3
    4ed8:	f107 0720 	add.w	r7, r7, #32
    4edc:	46bd      	mov	sp, r7
    4ede:	bd80      	pop	{r7, pc}
    4ee0:	10004d9c 	.word	0x10004d9c

00004ee4 <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b08a      	sub	sp, #40	; 0x28
    4ee8:	af00      	add	r7, sp, #0
    4eea:	60f8      	str	r0, [r7, #12]
    4eec:	60b9      	str	r1, [r7, #8]
    4eee:	4613      	mov	r3, r2
    4ef0:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout;
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
    4ef2:	68bb      	ldr	r3, [r7, #8]
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	627b      	str	r3, [r7, #36]	; 0x24
	rxdat = (uint8_t *) TransferCfg->rx_data;
    4ef8:	68bb      	ldr	r3, [r7, #8]
    4efa:	68db      	ldr	r3, [r3, #12]
    4efc:	623b      	str	r3, [r7, #32]
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    4efe:	68bb      	ldr	r3, [r7, #8]
    4f00:	f04f 0200 	mov.w	r2, #0
    4f04:	609a      	str	r2, [r3, #8]
	TransferCfg->rx_count = 0;
    4f06:	68bb      	ldr	r3, [r7, #8]
    4f08:	f04f 0200 	mov.w	r2, #0
    4f0c:	615a      	str	r2, [r3, #20]
	TransferCfg->status = 0;
    4f0e:	68bb      	ldr	r3, [r7, #8]
    4f10:	f04f 0200 	mov.w	r2, #0
    4f14:	619a      	str	r2, [r3, #24]


	// Polling option
	if (Opt == I2C_TRANSFER_POLLING){
    4f16:	79fb      	ldrb	r3, [r7, #7]
    4f18:	2b00      	cmp	r3, #0
    4f1a:	f040 80e5 	bne.w	50e8 <I2C_SlaveTransferData+0x204>

		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4f1e:	68fb      	ldr	r3, [r7, #12]
    4f20:	f04f 0204 	mov.w	r2, #4
    4f24:	601a      	str	r2, [r3, #0]
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
    4f26:	68fb      	ldr	r3, [r7, #12]
    4f28:	f04f 0228 	mov.w	r2, #40	; 0x28
    4f2c:	619a      	str	r2, [r3, #24]

		time_en = 0;
    4f2e:	f04f 0300 	mov.w	r3, #0
    4f32:	617b      	str	r3, [r7, #20]
		timeout = 0;
    4f34:	f04f 0300 	mov.w	r3, #0
    4f38:	61bb      	str	r3, [r7, #24]
    4f3a:	e002      	b.n	4f42 <I2C_SlaveTransferData+0x5e>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
					// it's really a stop condition, goto end stage
					goto s_end_stage;
				}
			}
		}
    4f3c:	bf00      	nop
    4f3e:	e000      	b.n	4f42 <I2C_SlaveTransferData+0x5e>
    4f40:	bf00      	nop
		timeout = 0;

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
    4f42:	68fb      	ldr	r3, [r7, #12]
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	f003 0308 	and.w	r3, r3, #8
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	f000 80ad 	beq.w	50aa <I2C_SlaveTransferData+0x1c6>
			{
				time_en = 0;
    4f50:	f04f 0300 	mov.w	r3, #0
    4f54:	617b      	str	r3, [r7, #20]

				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
    4f56:	68fb      	ldr	r3, [r7, #12]
    4f58:	685b      	ldr	r3, [r3, #4]
    4f5a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    4f5e:	61fb      	str	r3, [r7, #28]
    4f60:	69fb      	ldr	r3, [r7, #28]
    4f62:	2b98      	cmp	r3, #152	; 0x98
    4f64:	d050      	beq.n	5008 <I2C_SlaveTransferData+0x124>
    4f66:	2b98      	cmp	r3, #152	; 0x98
    4f68:	d80d      	bhi.n	4f86 <I2C_SlaveTransferData+0xa2>
    4f6a:	2b80      	cmp	r3, #128	; 0x80
    4f6c:	d02a      	beq.n	4fc4 <I2C_SlaveTransferData+0xe0>
    4f6e:	2b80      	cmp	r3, #128	; 0x80
    4f70:	d804      	bhi.n	4f7c <I2C_SlaveTransferData+0x98>
    4f72:	2b60      	cmp	r3, #96	; 0x60
    4f74:	d01d      	beq.n	4fb2 <I2C_SlaveTransferData+0xce>
    4f76:	2b70      	cmp	r3, #112	; 0x70
    4f78:	d01b      	beq.n	4fb2 <I2C_SlaveTransferData+0xce>
    4f7a:	e086      	b.n	508a <I2C_SlaveTransferData+0x1a6>
    4f7c:	2b88      	cmp	r3, #136	; 0x88
    4f7e:	d043      	beq.n	5008 <I2C_SlaveTransferData+0x124>
    4f80:	2b90      	cmp	r3, #144	; 0x90
    4f82:	d01f      	beq.n	4fc4 <I2C_SlaveTransferData+0xe0>
    4f84:	e081      	b.n	508a <I2C_SlaveTransferData+0x1a6>
    4f86:	2bb8      	cmp	r3, #184	; 0xb8
    4f88:	d04e      	beq.n	5028 <I2C_SlaveTransferData+0x144>
    4f8a:	2bb8      	cmp	r3, #184	; 0xb8
    4f8c:	d804      	bhi.n	4f98 <I2C_SlaveTransferData+0xb4>
    4f8e:	2ba0      	cmp	r3, #160	; 0xa0
    4f90:	d03f      	beq.n	5012 <I2C_SlaveTransferData+0x12e>
    4f92:	2ba8      	cmp	r3, #168	; 0xa8
    4f94:	d048      	beq.n	5028 <I2C_SlaveTransferData+0x144>
    4f96:	e078      	b.n	508a <I2C_SlaveTransferData+0x1a6>
    4f98:	2bc0      	cmp	r3, #192	; 0xc0
    4f9a:	d067      	beq.n	506c <I2C_SlaveTransferData+0x188>
    4f9c:	2bf8      	cmp	r3, #248	; 0xf8
    4f9e:	d174      	bne.n	508a <I2C_SlaveTransferData+0x1a6>
				{

				/* No status information */
				case I2C_I2STAT_NO_INF:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4fa0:	68fb      	ldr	r3, [r7, #12]
    4fa2:	f04f 0204 	mov.w	r2, #4
    4fa6:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4fa8:	68fb      	ldr	r3, [r7, #12]
    4faa:	f04f 0208 	mov.w	r2, #8
    4fae:	619a      	str	r2, [r3, #24]
					break;
    4fb0:	e07a      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				/* Reading phase -------------------------------------------------------- */
				/* Own SLA+R has been received, ACK has been returned */
				case I2C_I2STAT_S_RX_SLAW_ACK:
				/* General call address has been received, ACK has been returned */
				case I2C_I2STAT_S_RX_GENCALL_ACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4fb2:	68fb      	ldr	r3, [r7, #12]
    4fb4:	f04f 0204 	mov.w	r2, #4
    4fb8:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4fba:	68fb      	ldr	r3, [r7, #12]
    4fbc:	f04f 0208 	mov.w	r2, #8
    4fc0:	619a      	str	r2, [r3, #24]
					break;
    4fc2:	e071      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
    4fc4:	68bb      	ldr	r3, [r7, #8]
    4fc6:	695a      	ldr	r2, [r3, #20]
    4fc8:	68bb      	ldr	r3, [r7, #8]
    4fca:	691b      	ldr	r3, [r3, #16]
    4fcc:	429a      	cmp	r2, r3
    4fce:	d212      	bcs.n	4ff6 <I2C_SlaveTransferData+0x112>
							&& (TransferCfg->rx_data != NULL)){
    4fd0:	68bb      	ldr	r3, [r7, #8]
    4fd2:	68db      	ldr	r3, [r3, #12]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d00e      	beq.n	4ff6 <I2C_SlaveTransferData+0x112>
						*rxdat++ = (uint8_t)I2Cx->I2DAT;
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	689b      	ldr	r3, [r3, #8]
    4fdc:	b2da      	uxtb	r2, r3
    4fde:	6a3b      	ldr	r3, [r7, #32]
    4fe0:	701a      	strb	r2, [r3, #0]
    4fe2:	6a3b      	ldr	r3, [r7, #32]
    4fe4:	f103 0301 	add.w	r3, r3, #1
    4fe8:	623b      	str	r3, [r7, #32]
						TransferCfg->rx_count++;
    4fea:	68bb      	ldr	r3, [r7, #8]
    4fec:	695b      	ldr	r3, [r3, #20]
    4fee:	f103 0201 	add.w	r2, r3, #1
    4ff2:	68bb      	ldr	r3, [r7, #8]
    4ff4:	615a      	str	r2, [r3, #20]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4ff6:	68fb      	ldr	r3, [r7, #12]
    4ff8:	f04f 0204 	mov.w	r2, #4
    4ffc:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4ffe:	68fb      	ldr	r3, [r7, #12]
    5000:	f04f 0208 	mov.w	r2, #8
    5004:	619a      	str	r2, [r3, #24]
					break;
    5006:	e04f      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				 * DATA byte has been received;
				 * NOT ACK has been returned */
				case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
				/* DATA has been received, NOT ACK has been returned */
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5008:	68fb      	ldr	r3, [r7, #12]
    500a:	f04f 0208 	mov.w	r2, #8
    500e:	619a      	str	r2, [r3, #24]
					break;
    5010:	e04a      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				 * next session that is slave receive data will be completed.
				 */

				/* A Stop or a repeat start condition */
				case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5012:	68fb      	ldr	r3, [r7, #12]
    5014:	f04f 0208 	mov.w	r2, #8
    5018:	619a      	str	r2, [r3, #24]
					// enable time out
					time_en = 1;
    501a:	f04f 0301 	mov.w	r3, #1
    501e:	617b      	str	r3, [r7, #20]
					timeout = 0;
    5020:	f04f 0300 	mov.w	r3, #0
    5024:	61bb      	str	r3, [r7, #24]
					break;
    5026:	e03f      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
    5028:	68bb      	ldr	r3, [r7, #8]
    502a:	689a      	ldr	r2, [r3, #8]
    502c:	68bb      	ldr	r3, [r7, #8]
    502e:	685b      	ldr	r3, [r3, #4]
    5030:	429a      	cmp	r2, r3
    5032:	d212      	bcs.n	505a <I2C_SlaveTransferData+0x176>
							&& (TransferCfg->tx_data != NULL)){
    5034:	68bb      	ldr	r3, [r7, #8]
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	2b00      	cmp	r3, #0
    503a:	d00e      	beq.n	505a <I2C_SlaveTransferData+0x176>
						I2Cx->I2DAT = *txdat++;
    503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	461a      	mov	r2, r3
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	609a      	str	r2, [r3, #8]
    5046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5048:	f103 0301 	add.w	r3, r3, #1
    504c:	627b      	str	r3, [r7, #36]	; 0x24
						TransferCfg->tx_count++;
    504e:	68bb      	ldr	r3, [r7, #8]
    5050:	689b      	ldr	r3, [r3, #8]
    5052:	f103 0201 	add.w	r2, r3, #1
    5056:	68bb      	ldr	r3, [r7, #8]
    5058:	609a      	str	r2, [r3, #8]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	f04f 0204 	mov.w	r2, #4
    5060:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5062:	68fb      	ldr	r3, [r7, #12]
    5064:	f04f 0208 	mov.w	r2, #8
    5068:	619a      	str	r2, [r3, #24]
					break;
    506a:	e01d      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>
				 * Note: Don't wait for stop event since in slave transmit mode,
				 * since there no proof lets us know when a stop signal has been received
				 * on slave side.
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    506c:	68fb      	ldr	r3, [r7, #12]
    506e:	f04f 0204 	mov.w	r2, #4
    5072:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5074:	68fb      	ldr	r3, [r7, #12]
    5076:	f04f 0208 	mov.w	r2, #8
    507a:	619a      	str	r2, [r3, #24]
					// enable time out
					time_en = 1;
    507c:	f04f 0301 	mov.w	r3, #1
    5080:	617b      	str	r3, [r7, #20]
					timeout = 0;
    5082:	f04f 0300 	mov.w	r3, #0
    5086:	61bb      	str	r3, [r7, #24]
					break;
    5088:	e00e      	b.n	50a8 <I2C_SlaveTransferData+0x1c4>

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    508a:	68fb      	ldr	r3, [r7, #12]
    508c:	f04f 0208 	mov.w	r2, #8
    5090:	619a      	str	r2, [r3, #24]
					goto s_error;
    5092:	bf00      	nop
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    5094:	68fb      	ldr	r3, [r7, #12]
    5096:	f04f 0204 	mov.w	r2, #4
    509a:	619a      	str	r2, [r3, #24]
		// Update status
		TransferCfg->status = CodeStatus;
    509c:	68bb      	ldr	r3, [r7, #8]
    509e:	69fa      	ldr	r2, [r7, #28]
    50a0:	619a      	str	r2, [r3, #24]
		return ERROR;
    50a2:	f04f 0300 	mov.w	r3, #0
    50a6:	e045      	b.n	5134 <I2C_SlaveTransferData+0x250>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
					// it's really a stop condition, goto end stage
					goto s_end_stage;
				}
			}
		}
    50a8:	e74b      	b.n	4f42 <I2C_SlaveTransferData+0x5e>
				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					goto s_error;
				}
			} else if (time_en){
    50aa:	697b      	ldr	r3, [r7, #20]
    50ac:	2b00      	cmp	r3, #0
    50ae:	f43f af45 	beq.w	4f3c <I2C_SlaveTransferData+0x58>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
    50b2:	69bb      	ldr	r3, [r7, #24]
    50b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    50b8:	bf94      	ite	ls
    50ba:	2300      	movls	r3, #0
    50bc:	2301      	movhi	r3, #1
    50be:	b2db      	uxtb	r3, r3
    50c0:	69ba      	ldr	r2, [r7, #24]
    50c2:	f102 0201 	add.w	r2, r2, #1
    50c6:	61ba      	str	r2, [r7, #24]
    50c8:	2b00      	cmp	r3, #0
    50ca:	f43f af39 	beq.w	4f40 <I2C_SlaveTransferData+0x5c>
					// it's really a stop condition, goto end stage
					goto s_end_stage;
    50ce:	bf00      	nop
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    50d0:	68fb      	ldr	r3, [r7, #12]
    50d2:	f04f 0204 	mov.w	r2, #4
    50d6:	619a      	str	r2, [r3, #24]
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
    50d8:	69fb      	ldr	r3, [r7, #28]
    50da:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    50de:	68bb      	ldr	r3, [r7, #8]
    50e0:	619a      	str	r2, [r3, #24]
		return SUCCESS;
    50e2:	f04f 0301 	mov.w	r3, #1
    50e6:	e025      	b.n	5134 <I2C_SlaveTransferData+0x250>
		// Update status
		TransferCfg->status = CodeStatus;
		return ERROR;
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT){
    50e8:	79fb      	ldrb	r3, [r7, #7]
    50ea:	2b01      	cmp	r3, #1
    50ec:	d120      	bne.n	5130 <I2C_SlaveTransferData+0x24c>
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
    50ee:	68f8      	ldr	r0, [r7, #12]
    50f0:	f7ff f85a 	bl	41a8 <I2C_getNum>
    50f4:	6138      	str	r0, [r7, #16]
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
    50f6:	68b9      	ldr	r1, [r7, #8]
    50f8:	4b11      	ldr	r3, [pc, #68]	; (5140 <I2C_SlaveTransferData+0x25c>)
    50fa:	693a      	ldr	r2, [r7, #16]
    50fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;
    5100:	4a0f      	ldr	r2, [pc, #60]	; (5140 <I2C_SlaveTransferData+0x25c>)
    5102:	693b      	ldr	r3, [r7, #16]
    5104:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5108:	18d3      	adds	r3, r2, r3
    510a:	f04f 0201 	mov.w	r2, #1
    510e:	605a      	str	r2, [r3, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5110:	68fb      	ldr	r3, [r7, #12]
    5112:	f04f 0204 	mov.w	r2, #4
    5116:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	f04f 0228 	mov.w	r2, #40	; 0x28
    511e:	619a      	str	r2, [r3, #24]
		I2C_IntCmd(I2Cx, 1);
    5120:	68f8      	ldr	r0, [r7, #12]
    5122:	f04f 0101 	mov.w	r1, #1
    5126:	f7ff fa2f 	bl	4588 <I2C_IntCmd>

		return (SUCCESS);
    512a:	f04f 0301 	mov.w	r3, #1
    512e:	e001      	b.n	5134 <I2C_SlaveTransferData+0x250>
	}

	return ERROR;
    5130:	f04f 0300 	mov.w	r3, #0
}
    5134:	4618      	mov	r0, r3
    5136:	f107 0728 	add.w	r7, r7, #40	; 0x28
    513a:	46bd      	mov	sp, r7
    513c:	bd80      	pop	{r7, pc}
    513e:	bf00      	nop
    5140:	10004d9c 	.word	0x10004d9c

00005144 <I2C_SetOwnSlaveAddr>:
 * 				structure that contains the configuration information for the
*               specified I2C slave address.
 * @return 		None
 **********************************************************************/
void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct)
{
    5144:	b580      	push	{r7, lr}
    5146:	b084      	sub	sp, #16
    5148:	af00      	add	r7, sp, #0
    514a:	6078      	str	r0, [r7, #4]
    514c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    514e:	687a      	ldr	r2, [r7, #4]
    5150:	4b39      	ldr	r3, [pc, #228]	; (5238 <I2C_SetOwnSlaveAddr+0xf4>)
    5152:	429a      	cmp	r2, r3
    5154:	d00c      	beq.n	5170 <I2C_SetOwnSlaveAddr+0x2c>
    5156:	687a      	ldr	r2, [r7, #4]
    5158:	4b38      	ldr	r3, [pc, #224]	; (523c <I2C_SetOwnSlaveAddr+0xf8>)
    515a:	429a      	cmp	r2, r3
    515c:	d008      	beq.n	5170 <I2C_SetOwnSlaveAddr+0x2c>
    515e:	687a      	ldr	r2, [r7, #4]
    5160:	4b37      	ldr	r3, [pc, #220]	; (5240 <I2C_SetOwnSlaveAddr+0xfc>)
    5162:	429a      	cmp	r2, r3
    5164:	d004      	beq.n	5170 <I2C_SetOwnSlaveAddr+0x2c>
    5166:	4837      	ldr	r0, [pc, #220]	; (5244 <I2C_SetOwnSlaveAddr+0x100>)
    5168:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
    516c:	f000 f98a 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	2b03      	cmp	r3, #3
    5176:	d904      	bls.n	5182 <I2C_SetOwnSlaveAddr+0x3e>
    5178:	4832      	ldr	r0, [pc, #200]	; (5244 <I2C_SetOwnSlaveAddr+0x100>)
    517a:	f240 41a1 	movw	r1, #1185	; 0x4a1
    517e:	f000 f981 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));
    5182:	683b      	ldr	r3, [r7, #0]
    5184:	789b      	ldrb	r3, [r3, #2]
    5186:	2b00      	cmp	r3, #0
    5188:	d008      	beq.n	519c <I2C_SetOwnSlaveAddr+0x58>
    518a:	683b      	ldr	r3, [r7, #0]
    518c:	789b      	ldrb	r3, [r3, #2]
    518e:	2b01      	cmp	r3, #1
    5190:	d004      	beq.n	519c <I2C_SetOwnSlaveAddr+0x58>
    5192:	482c      	ldr	r0, [pc, #176]	; (5244 <I2C_SetOwnSlaveAddr+0x100>)
    5194:	f240 41a2 	movw	r1, #1186	; 0x4a2
    5198:	f000 f974 	bl	5484 <check_failed>

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	785b      	ldrb	r3, [r3, #1]
    51a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    51a4:	461a      	mov	r2, r3
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
    51a6:	683b      	ldr	r3, [r7, #0]
    51a8:	789b      	ldrb	r3, [r3, #2]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d102      	bne.n	51b4 <I2C_SetOwnSlaveAddr+0x70>
    51ae:	f04f 0301 	mov.w	r3, #1
    51b2:	e001      	b.n	51b8 <I2C_SetOwnSlaveAddr+0x74>
    51b4:	f04f 0300 	mov.w	r3, #0
    51b8:	ea42 0303 	orr.w	r3, r2, r3
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    51bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    51c0:	60fb      	str	r3, [r7, #12]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
    51c2:	683b      	ldr	r3, [r7, #0]
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	2b03      	cmp	r3, #3
    51c8:	d832      	bhi.n	5230 <I2C_SetOwnSlaveAddr+0xec>
    51ca:	a201      	add	r2, pc, #4	; (adr r2, 51d0 <I2C_SetOwnSlaveAddr+0x8c>)
    51cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    51d0:	000051e1 	.word	0x000051e1
    51d4:	000051f5 	.word	0x000051f5
    51d8:	00005209 	.word	0x00005209
    51dc:	0000521d 	.word	0x0000521d
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
    51e0:	687b      	ldr	r3, [r7, #4]
    51e2:	68fa      	ldr	r2, [r7, #12]
    51e4:	60da      	str	r2, [r3, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
    51e6:	683b      	ldr	r3, [r7, #0]
    51e8:	78db      	ldrb	r3, [r3, #3]
    51ea:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	631a      	str	r2, [r3, #48]	; 0x30
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    51f2:	e01d      	b.n	5230 <I2C_SetOwnSlaveAddr+0xec>
	case 1:
		I2Cx->I2ADR1 = tmp;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	68fa      	ldr	r2, [r7, #12]
    51f8:	621a      	str	r2, [r3, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
    51fa:	683b      	ldr	r3, [r7, #0]
    51fc:	78db      	ldrb	r3, [r3, #3]
    51fe:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	635a      	str	r2, [r3, #52]	; 0x34
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    5206:	e013      	b.n	5230 <I2C_SetOwnSlaveAddr+0xec>
	case 2:
		I2Cx->I2ADR2 = tmp;
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	68fa      	ldr	r2, [r7, #12]
    520c:	625a      	str	r2, [r3, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
    520e:	683b      	ldr	r3, [r7, #0]
    5210:	78db      	ldrb	r3, [r3, #3]
    5212:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	639a      	str	r2, [r3, #56]	; 0x38
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    521a:	e009      	b.n	5230 <I2C_SetOwnSlaveAddr+0xec>
	case 3:
		I2Cx->I2ADR3 = tmp;
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	68fa      	ldr	r2, [r7, #12]
    5220:	629a      	str	r2, [r3, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
    5222:	683b      	ldr	r3, [r7, #0]
    5224:	78db      	ldrb	r3, [r3, #3]
    5226:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	63da      	str	r2, [r3, #60]	; 0x3c
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    522e:	bf00      	nop
	}
}
    5230:	f107 0710 	add.w	r7, r7, #16
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}
    5238:	4001c000 	.word	0x4001c000
    523c:	4005c000 	.word	0x4005c000
    5240:	400a0000 	.word	0x400a0000
    5244:	0000a37c 	.word	0x0000a37c

00005248 <I2C_MonitorModeConfig>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void I2C_MonitorModeConfig(LPC_I2C_TypeDef *I2Cx, uint32_t MonitorCfgType, FunctionalState NewState)
{
    5248:	b580      	push	{r7, lr}
    524a:	b084      	sub	sp, #16
    524c:	af00      	add	r7, sp, #0
    524e:	60f8      	str	r0, [r7, #12]
    5250:	60b9      	str	r1, [r7, #8]
    5252:	4613      	mov	r3, r2
    5254:	71fb      	strb	r3, [r7, #7]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5256:	68fa      	ldr	r2, [r7, #12]
    5258:	4b19      	ldr	r3, [pc, #100]	; (52c0 <I2C_MonitorModeConfig+0x78>)
    525a:	429a      	cmp	r2, r3
    525c:	d00c      	beq.n	5278 <I2C_MonitorModeConfig+0x30>
    525e:	68fa      	ldr	r2, [r7, #12]
    5260:	4b18      	ldr	r3, [pc, #96]	; (52c4 <I2C_MonitorModeConfig+0x7c>)
    5262:	429a      	cmp	r2, r3
    5264:	d008      	beq.n	5278 <I2C_MonitorModeConfig+0x30>
    5266:	68fa      	ldr	r2, [r7, #12]
    5268:	4b17      	ldr	r3, [pc, #92]	; (52c8 <I2C_MonitorModeConfig+0x80>)
    526a:	429a      	cmp	r2, r3
    526c:	d004      	beq.n	5278 <I2C_MonitorModeConfig+0x30>
    526e:	4817      	ldr	r0, [pc, #92]	; (52cc <I2C_MonitorModeConfig+0x84>)
    5270:	f240 41d4 	movw	r1, #1236	; 0x4d4
    5274:	f000 f906 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    5278:	79fb      	ldrb	r3, [r7, #7]
    527a:	2b00      	cmp	r3, #0
    527c:	d007      	beq.n	528e <I2C_MonitorModeConfig+0x46>
    527e:	79fb      	ldrb	r3, [r7, #7]
    5280:	2b01      	cmp	r3, #1
    5282:	d004      	beq.n	528e <I2C_MonitorModeConfig+0x46>
    5284:	4811      	ldr	r0, [pc, #68]	; (52cc <I2C_MonitorModeConfig+0x84>)
    5286:	f240 41d6 	movw	r1, #1238	; 0x4d6
    528a:	f000 f8fb 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    528e:	79fb      	ldrb	r3, [r7, #7]
    5290:	2b01      	cmp	r3, #1
    5292:	d106      	bne.n	52a2 <I2C_MonitorModeConfig+0x5a>
	{
		I2Cx->MMCTRL |= MonitorCfgType;
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	69da      	ldr	r2, [r3, #28]
    5298:	68bb      	ldr	r3, [r7, #8]
    529a:	431a      	orrs	r2, r3
    529c:	68fb      	ldr	r3, [r7, #12]
    529e:	61da      	str	r2, [r3, #28]
    52a0:	e00a      	b.n	52b8 <I2C_MonitorModeConfig+0x70>
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
    52a2:	68fb      	ldr	r3, [r7, #12]
    52a4:	69da      	ldr	r2, [r3, #28]
    52a6:	68bb      	ldr	r3, [r7, #8]
    52a8:	ea6f 0303 	mvn.w	r3, r3
    52ac:	ea02 0303 	and.w	r3, r2, r3
    52b0:	f003 0207 	and.w	r2, r3, #7
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	61da      	str	r2, [r3, #28]
	}
}
    52b8:	f107 0710 	add.w	r7, r7, #16
    52bc:	46bd      	mov	sp, r7
    52be:	bd80      	pop	{r7, pc}
    52c0:	4001c000 	.word	0x4001c000
    52c4:	4005c000 	.word	0x4005c000
    52c8:	400a0000 	.word	0x400a0000
    52cc:	0000a37c 	.word	0x0000a37c

000052d0 <I2C_MonitorModeCmd>:
 * 				- ENABLE: Enable monitor mode.
 * 				- DISABLE: Disable monitor mode.
 * @return		None
 **********************************************************************/
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    52d0:	b580      	push	{r7, lr}
    52d2:	b082      	sub	sp, #8
    52d4:	af00      	add	r7, sp, #0
    52d6:	6078      	str	r0, [r7, #4]
    52d8:	460b      	mov	r3, r1
    52da:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    52dc:	687a      	ldr	r2, [r7, #4]
    52de:	4b1f      	ldr	r3, [pc, #124]	; (535c <I2C_MonitorModeCmd+0x8c>)
    52e0:	429a      	cmp	r2, r3
    52e2:	d00c      	beq.n	52fe <I2C_MonitorModeCmd+0x2e>
    52e4:	687a      	ldr	r2, [r7, #4]
    52e6:	4b1e      	ldr	r3, [pc, #120]	; (5360 <I2C_MonitorModeCmd+0x90>)
    52e8:	429a      	cmp	r2, r3
    52ea:	d008      	beq.n	52fe <I2C_MonitorModeCmd+0x2e>
    52ec:	687a      	ldr	r2, [r7, #4]
    52ee:	4b1d      	ldr	r3, [pc, #116]	; (5364 <I2C_MonitorModeCmd+0x94>)
    52f0:	429a      	cmp	r2, r3
    52f2:	d004      	beq.n	52fe <I2C_MonitorModeCmd+0x2e>
    52f4:	481c      	ldr	r0, [pc, #112]	; (5368 <I2C_MonitorModeCmd+0x98>)
    52f6:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    52fa:	f000 f8c3 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    52fe:	78fb      	ldrb	r3, [r7, #3]
    5300:	2b00      	cmp	r3, #0
    5302:	d007      	beq.n	5314 <I2C_MonitorModeCmd+0x44>
    5304:	78fb      	ldrb	r3, [r7, #3]
    5306:	2b01      	cmp	r3, #1
    5308:	d004      	beq.n	5314 <I2C_MonitorModeCmd+0x44>
    530a:	4817      	ldr	r0, [pc, #92]	; (5368 <I2C_MonitorModeCmd+0x98>)
    530c:	f240 41f1 	movw	r1, #1265	; 0x4f1
    5310:	f000 f8b8 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    5314:	78fb      	ldrb	r3, [r7, #3]
    5316:	2b01      	cmp	r3, #1
    5318:	d10e      	bne.n	5338 <I2C_MonitorModeCmd+0x68>
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	69db      	ldr	r3, [r3, #28]
    531e:	f043 0201 	orr.w	r2, r3, #1
    5322:	687b      	ldr	r3, [r7, #4]
    5324:	61da      	str	r2, [r3, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	f04f 0204 	mov.w	r2, #4
    532c:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	f04f 0228 	mov.w	r2, #40	; 0x28
    5334:	619a      	str	r2, [r3, #24]
    5336:	e009      	b.n	534c <I2C_MonitorModeCmd+0x7c>
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
    5338:	687b      	ldr	r3, [r7, #4]
    533a:	69db      	ldr	r3, [r3, #28]
    533c:	f003 0206 	and.w	r2, r3, #6
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	61da      	str	r2, [r3, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	f04f 022c 	mov.w	r2, #44	; 0x2c
    534a:	619a      	str	r2, [r3, #24]
	}
	I2C_MonitorBufferIndex = 0;
    534c:	4b07      	ldr	r3, [pc, #28]	; (536c <I2C_MonitorModeCmd+0x9c>)
    534e:	f04f 0200 	mov.w	r2, #0
    5352:	601a      	str	r2, [r3, #0]
}
    5354:	f107 0708 	add.w	r7, r7, #8
    5358:	46bd      	mov	sp, r7
    535a:	bd80      	pop	{r7, pc}
    535c:	4001c000 	.word	0x4001c000
    5360:	4005c000 	.word	0x4005c000
    5364:	400a0000 	.word	0x400a0000
    5368:	0000a37c 	.word	0x0000a37c
    536c:	10004dcc 	.word	0x10004dcc

00005370 <I2C_MonitorGetDatabuffer>:
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
    5370:	b580      	push	{r7, lr}
    5372:	b082      	sub	sp, #8
    5374:	af00      	add	r7, sp, #0
    5376:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5378:	687a      	ldr	r2, [r7, #4]
    537a:	4b0c      	ldr	r3, [pc, #48]	; (53ac <I2C_MonitorGetDatabuffer+0x3c>)
    537c:	429a      	cmp	r2, r3
    537e:	d00c      	beq.n	539a <I2C_MonitorGetDatabuffer+0x2a>
    5380:	687a      	ldr	r2, [r7, #4]
    5382:	4b0b      	ldr	r3, [pc, #44]	; (53b0 <I2C_MonitorGetDatabuffer+0x40>)
    5384:	429a      	cmp	r2, r3
    5386:	d008      	beq.n	539a <I2C_MonitorGetDatabuffer+0x2a>
    5388:	687a      	ldr	r2, [r7, #4]
    538a:	4b0a      	ldr	r3, [pc, #40]	; (53b4 <I2C_MonitorGetDatabuffer+0x44>)
    538c:	429a      	cmp	r2, r3
    538e:	d004      	beq.n	539a <I2C_MonitorGetDatabuffer+0x2a>
    5390:	4809      	ldr	r0, [pc, #36]	; (53b8 <I2C_MonitorGetDatabuffer+0x48>)
    5392:	f240 5113 	movw	r1, #1299	; 0x513
    5396:	f000 f875 	bl	5484 <check_failed>
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    539e:	b2db      	uxtb	r3, r3
}
    53a0:	4618      	mov	r0, r3
    53a2:	f107 0708 	add.w	r7, r7, #8
    53a6:	46bd      	mov	sp, r7
    53a8:	bd80      	pop	{r7, pc}
    53aa:	bf00      	nop
    53ac:	4001c000 	.word	0x4001c000
    53b0:	4005c000 	.word	0x4005c000
    53b4:	400a0000 	.word	0x400a0000
    53b8:	0000a37c 	.word	0x0000a37c

000053bc <I2C_MonitorHandler>:
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
    53bc:	b480      	push	{r7}
    53be:	b087      	sub	sp, #28
    53c0:	af00      	add	r7, sp, #0
    53c2:	60f8      	str	r0, [r7, #12]
    53c4:	60b9      	str	r1, [r7, #8]
    53c6:	607a      	str	r2, [r7, #4]
	BOOL_8 ret=FALSE;
    53c8:	f04f 0300 	mov.w	r3, #0
    53cc:	75fb      	strb	r3, [r7, #23]

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	f04f 0208 	mov.w	r2, #8
    53d4:	619a      	str	r2, [r3, #24]

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
    53d6:	4b0e      	ldr	r3, [pc, #56]	; (5410 <I2C_MonitorHandler+0x54>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	68ba      	ldr	r2, [r7, #8]
    53dc:	18d3      	adds	r3, r2, r3
    53de:	68fa      	ldr	r2, [r7, #12]
    53e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    53e2:	b2d2      	uxtb	r2, r2
    53e4:	701a      	strb	r2, [r3, #0]
	I2C_MonitorBufferIndex++;
    53e6:	4b0a      	ldr	r3, [pc, #40]	; (5410 <I2C_MonitorHandler+0x54>)
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	f103 0201 	add.w	r2, r3, #1
    53ee:	4b08      	ldr	r3, [pc, #32]	; (5410 <I2C_MonitorHandler+0x54>)
    53f0:	601a      	str	r2, [r3, #0]
	if(I2C_MonitorBufferIndex >= size)
    53f2:	4b07      	ldr	r3, [pc, #28]	; (5410 <I2C_MonitorHandler+0x54>)
    53f4:	681a      	ldr	r2, [r3, #0]
    53f6:	687b      	ldr	r3, [r7, #4]
    53f8:	429a      	cmp	r2, r3
    53fa:	d302      	bcc.n	5402 <I2C_MonitorHandler+0x46>
	{
		ret = TRUE;
    53fc:	f04f 0301 	mov.w	r3, #1
    5400:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
    5402:	7dfb      	ldrb	r3, [r7, #23]
}
    5404:	4618      	mov	r0, r3
    5406:	f107 071c 	add.w	r7, r7, #28
    540a:	46bd      	mov	sp, r7
    540c:	bc80      	pop	{r7}
    540e:	4770      	bx	lr
    5410:	10004dcc 	.word	0x10004dcc

00005414 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    5414:	b580      	push	{r7, lr}
    5416:	b084      	sub	sp, #16
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    541c:	6878      	ldr	r0, [r7, #4]
    541e:	f7fe fec3 	bl	41a8 <I2C_getNum>
    5422:	4603      	mov	r3, r0
    5424:	60fb      	str	r3, [r7, #12]
	retval = I2C_MasterComplete[tmp];
    5426:	4b08      	ldr	r3, [pc, #32]	; (5448 <I2C_MasterTransferComplete+0x34>)
    5428:	68fa      	ldr	r2, [r7, #12]
    542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    542e:	60bb      	str	r3, [r7, #8]
	I2C_MasterComplete[tmp] = FALSE;
    5430:	4b05      	ldr	r3, [pc, #20]	; (5448 <I2C_MasterTransferComplete+0x34>)
    5432:	68fa      	ldr	r2, [r7, #12]
    5434:	f04f 0100 	mov.w	r1, #0
    5438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return retval;
    543c:	68bb      	ldr	r3, [r7, #8]
}
    543e:	4618      	mov	r0, r3
    5440:	f107 0710 	add.w	r7, r7, #16
    5444:	46bd      	mov	sp, r7
    5446:	bd80      	pop	{r7, pc}
    5448:	10004db4 	.word	0x10004db4

0000544c <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    544c:	b580      	push	{r7, lr}
    544e:	b084      	sub	sp, #16
    5450:	af00      	add	r7, sp, #0
    5452:	6078      	str	r0, [r7, #4]
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    5454:	6878      	ldr	r0, [r7, #4]
    5456:	f7fe fea7 	bl	41a8 <I2C_getNum>
    545a:	4603      	mov	r3, r0
    545c:	60fb      	str	r3, [r7, #12]
	retval = I2C_SlaveComplete[tmp];
    545e:	4b08      	ldr	r3, [pc, #32]	; (5480 <I2C_SlaveTransferComplete+0x34>)
    5460:	68fa      	ldr	r2, [r7, #12]
    5462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5466:	60bb      	str	r3, [r7, #8]
	I2C_SlaveComplete[tmp] = FALSE;
    5468:	4b05      	ldr	r3, [pc, #20]	; (5480 <I2C_SlaveTransferComplete+0x34>)
    546a:	68fa      	ldr	r2, [r7, #12]
    546c:	f04f 0100 	mov.w	r1, #0
    5470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return retval;
    5474:	68bb      	ldr	r3, [r7, #8]
}
    5476:	4618      	mov	r0, r3
    5478:	f107 0710 	add.w	r7, r7, #16
    547c:	46bd      	mov	sp, r7
    547e:	bd80      	pop	{r7, pc}
    5480:	10004dc0 	.word	0x10004dc0

00005484 <check_failed>:
* @param[in]	file Pointer to the source file name
* @param[in]    line assert_param error line source number
* @return		None
*******************************************************************************/
void check_failed(uint8_t *file, uint32_t line)
{
    5484:	b480      	push	{r7}
    5486:	b083      	sub	sp, #12
    5488:	af00      	add	r7, sp, #0
    548a:	6078      	str	r0, [r7, #4]
    548c:	6039      	str	r1, [r7, #0]
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
    548e:	e7fe      	b.n	548e <check_failed+0xa>

00005490 <MCPWM_Init>:
 * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 * 				Should be: LPC_MCPWM
 * @return		None
 **********************************************************************/
void MCPWM_Init(LPC_MCPWM_TypeDef *MCPWMx)
{
    5490:	b580      	push	{r7, lr}
    5492:	b082      	sub	sp, #8
    5494:	af00      	add	r7, sp, #0
    5496:	6078      	str	r0, [r7, #4]

	/* Turn On MCPWM PCLK */
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCMC, ENABLE);
    5498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    549c:	f04f 0101 	mov.w	r1, #1
    54a0:	f7fe f8e8 	bl	3674 <CLKPWR_ConfigPPWR>
	/* As default, peripheral clock for MCPWM module
	 * is set to FCCLK / 2 */
	// CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_MC, CLKPWR_PCLKSEL_CCLK_DIV_2);

	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
    54a4:	687b      	ldr	r3, [r7, #4]
    54a6:	f04f 0207 	mov.w	r2, #7
    54aa:	675a      	str	r2, [r3, #116]	; 0x74
	MCPWMx->MCINTFLAG_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	f240 7277 	movw	r2, #1911	; 0x777
    54b2:	671a      	str	r2, [r3, #112]	; 0x70
							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
	MCPWMx->MCINTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	f240 7277 	movw	r2, #1911	; 0x777
    54ba:	659a      	str	r2, [r3, #88]	; 0x58
							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
}
    54bc:	f107 0708 	add.w	r7, r7, #8
    54c0:	46bd      	mov	sp, r7
    54c2:	bd80      	pop	{r7, pc}

000054c4 <MCPWM_ConfigChannel>:
*                    			specified MCPWM channel.
 * @return		None
 **********************************************************************/
void MCPWM_ConfigChannel(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
						MCPWM_CHANNEL_CFG_Type * channelSetup)
{
    54c4:	b480      	push	{r7}
    54c6:	b085      	sub	sp, #20
    54c8:	af00      	add	r7, sp, #0
    54ca:	60f8      	str	r0, [r7, #12]
    54cc:	60b9      	str	r1, [r7, #8]
    54ce:	607a      	str	r2, [r7, #4]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    54d0:	68bb      	ldr	r3, [r7, #8]
    54d2:	2b02      	cmp	r3, #2
    54d4:	f200 8102 	bhi.w	56dc <MCPWM_ConfigChannel+0x218>
		if (channelNum == 0) {
    54d8:	68bb      	ldr	r3, [r7, #8]
    54da:	2b00      	cmp	r3, #0
    54dc:	d10c      	bne.n	54f8 <MCPWM_ConfigChannel+0x34>
			MCPWMx->MCTIM0 = channelSetup->channelTimercounterValue;
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	695a      	ldr	r2, [r3, #20]
    54e2:	68fb      	ldr	r3, [r7, #12]
    54e4:	619a      	str	r2, [r3, #24]
			MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	699a      	ldr	r2, [r3, #24]
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	625a      	str	r2, [r3, #36]	; 0x24
			MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	69da      	ldr	r2, [r3, #28]
    54f2:	68fb      	ldr	r3, [r7, #12]
    54f4:	631a      	str	r2, [r3, #48]	; 0x30
    54f6:	e01f      	b.n	5538 <MCPWM_ConfigChannel+0x74>
		} else if (channelNum == 1) {
    54f8:	68bb      	ldr	r3, [r7, #8]
    54fa:	2b01      	cmp	r3, #1
    54fc:	d10c      	bne.n	5518 <MCPWM_ConfigChannel+0x54>
			MCPWMx->MCTIM1 = channelSetup->channelTimercounterValue;
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	695a      	ldr	r2, [r3, #20]
    5502:	68fb      	ldr	r3, [r7, #12]
    5504:	61da      	str	r2, [r3, #28]
			MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
    5506:	687b      	ldr	r3, [r7, #4]
    5508:	699a      	ldr	r2, [r3, #24]
    550a:	68fb      	ldr	r3, [r7, #12]
    550c:	629a      	str	r2, [r3, #40]	; 0x28
			MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	69da      	ldr	r2, [r3, #28]
    5512:	68fb      	ldr	r3, [r7, #12]
    5514:	635a      	str	r2, [r3, #52]	; 0x34
    5516:	e00f      	b.n	5538 <MCPWM_ConfigChannel+0x74>
		} else if (channelNum == 2) {
    5518:	68bb      	ldr	r3, [r7, #8]
    551a:	2b02      	cmp	r3, #2
    551c:	f040 80dd 	bne.w	56da <MCPWM_ConfigChannel+0x216>
			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
    5520:	687b      	ldr	r3, [r7, #4]
    5522:	695a      	ldr	r2, [r3, #20]
    5524:	68fb      	ldr	r3, [r7, #12]
    5526:	621a      	str	r2, [r3, #32]
			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	699a      	ldr	r2, [r3, #24]
    552c:	68fb      	ldr	r3, [r7, #12]
    552e:	62da      	str	r2, [r3, #44]	; 0x2c
			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	69da      	ldr	r2, [r3, #28]
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			return;
		}

		if (channelSetup->channelType /* == MCPWM_CHANNEL_CENTER_MODE */){
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	681b      	ldr	r3, [r3, #0]
    553c:	2b00      	cmp	r3, #0
    553e:	d011      	beq.n	5564 <MCPWM_ConfigChannel+0xa0>
			MCPWMx->MCCON_SET = MCPWM_CON_CENTER(channelNum);
    5540:	68bb      	ldr	r3, [r7, #8]
    5542:	2b02      	cmp	r3, #2
    5544:	d809      	bhi.n	555a <MCPWM_ConfigChannel+0x96>
    5546:	68bb      	ldr	r3, [r7, #8]
    5548:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    554c:	f103 0301 	add.w	r3, r3, #1
    5550:	f04f 0201 	mov.w	r2, #1
    5554:	fa02 f303 	lsl.w	r3, r2, r3
    5558:	e001      	b.n	555e <MCPWM_ConfigChannel+0x9a>
    555a:	f04f 0300 	mov.w	r3, #0
    555e:	68fa      	ldr	r2, [r7, #12]
    5560:	6053      	str	r3, [r2, #4]
    5562:	e010      	b.n	5586 <MCPWM_ConfigChannel+0xc2>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_CENTER(channelNum);
    5564:	68bb      	ldr	r3, [r7, #8]
    5566:	2b02      	cmp	r3, #2
    5568:	d809      	bhi.n	557e <MCPWM_ConfigChannel+0xba>
    556a:	68bb      	ldr	r3, [r7, #8]
    556c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5570:	f103 0301 	add.w	r3, r3, #1
    5574:	f04f 0201 	mov.w	r2, #1
    5578:	fa02 f303 	lsl.w	r3, r2, r3
    557c:	e001      	b.n	5582 <MCPWM_ConfigChannel+0xbe>
    557e:	f04f 0300 	mov.w	r3, #0
    5582:	68fa      	ldr	r2, [r7, #12]
    5584:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelPolarity /* == MCPWM_CHANNEL_PASSIVE_HI */){
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	685b      	ldr	r3, [r3, #4]
    558a:	2b00      	cmp	r3, #0
    558c:	d011      	beq.n	55b2 <MCPWM_ConfigChannel+0xee>
			MCPWMx->MCCON_SET = MCPWM_CON_POLAR(channelNum);
    558e:	68bb      	ldr	r3, [r7, #8]
    5590:	2b02      	cmp	r3, #2
    5592:	d809      	bhi.n	55a8 <MCPWM_ConfigChannel+0xe4>
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    559a:	f103 0302 	add.w	r3, r3, #2
    559e:	f04f 0201 	mov.w	r2, #1
    55a2:	fa02 f303 	lsl.w	r3, r2, r3
    55a6:	e001      	b.n	55ac <MCPWM_ConfigChannel+0xe8>
    55a8:	f04f 0300 	mov.w	r3, #0
    55ac:	68fa      	ldr	r2, [r7, #12]
    55ae:	6053      	str	r3, [r2, #4]
    55b0:	e010      	b.n	55d4 <MCPWM_ConfigChannel+0x110>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_POLAR(channelNum);
    55b2:	68bb      	ldr	r3, [r7, #8]
    55b4:	2b02      	cmp	r3, #2
    55b6:	d809      	bhi.n	55cc <MCPWM_ConfigChannel+0x108>
    55b8:	68bb      	ldr	r3, [r7, #8]
    55ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    55be:	f103 0302 	add.w	r3, r3, #2
    55c2:	f04f 0201 	mov.w	r2, #1
    55c6:	fa02 f303 	lsl.w	r3, r2, r3
    55ca:	e001      	b.n	55d0 <MCPWM_ConfigChannel+0x10c>
    55cc:	f04f 0300 	mov.w	r3, #0
    55d0:	68fa      	ldr	r2, [r7, #12]
    55d2:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelDeadtimeEnable /* == ENABLE */){
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	689b      	ldr	r3, [r3, #8]
    55d8:	2b00      	cmp	r3, #0
    55da:	d045      	beq.n	5668 <MCPWM_ConfigChannel+0x1a4>
			MCPWMx->MCCON_SET = MCPWM_CON_DTE(channelNum);
    55dc:	68bb      	ldr	r3, [r7, #8]
    55de:	2b02      	cmp	r3, #2
    55e0:	d809      	bhi.n	55f6 <MCPWM_ConfigChannel+0x132>
    55e2:	68bb      	ldr	r3, [r7, #8]
    55e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    55e8:	f103 0303 	add.w	r3, r3, #3
    55ec:	f04f 0201 	mov.w	r2, #1
    55f0:	fa02 f303 	lsl.w	r3, r2, r3
    55f4:	e001      	b.n	55fa <MCPWM_ConfigChannel+0x136>
    55f6:	f04f 0300 	mov.w	r3, #0
    55fa:	68fa      	ldr	r2, [r7, #12]
    55fc:	6053      	str	r3, [r2, #4]
			MCPWMx->MCDEADTIME &= ~(MCPWM_DT(channelNum, 0x3FF));
    55fe:	68fb      	ldr	r3, [r7, #12]
    5600:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5602:	68bb      	ldr	r3, [r7, #8]
    5604:	2b02      	cmp	r3, #2
    5606:	d80d      	bhi.n	5624 <MCPWM_ConfigChannel+0x160>
    5608:	68ba      	ldr	r2, [r7, #8]
    560a:	4613      	mov	r3, r2
    560c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5610:	189b      	adds	r3, r3, r2
    5612:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5616:	f240 32ff 	movw	r2, #1023	; 0x3ff
    561a:	fa02 f303 	lsl.w	r3, r2, r3
    561e:	ea6f 0303 	mvn.w	r3, r3
    5622:	e001      	b.n	5628 <MCPWM_ConfigChannel+0x164>
    5624:	f04f 33ff 	mov.w	r3, #4294967295
    5628:	ea01 0203 	and.w	r2, r1, r3
    562c:	68fb      	ldr	r3, [r7, #12]
    562e:	63da      	str	r2, [r3, #60]	; 0x3c
			MCPWMx->MCDEADTIME |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
    5630:	68fb      	ldr	r3, [r7, #12]
    5632:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    5634:	68bb      	ldr	r3, [r7, #8]
    5636:	2b02      	cmp	r3, #2
    5638:	d80f      	bhi.n	565a <MCPWM_ConfigChannel+0x196>
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	68db      	ldr	r3, [r3, #12]
    563e:	ea4f 5283 	mov.w	r2, r3, lsl #22
    5642:	ea4f 5292 	mov.w	r2, r2, lsr #22
    5646:	68b9      	ldr	r1, [r7, #8]
    5648:	460b      	mov	r3, r1
    564a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    564e:	185b      	adds	r3, r3, r1
    5650:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5654:	fa02 f303 	lsl.w	r3, r2, r3
    5658:	e001      	b.n	565e <MCPWM_ConfigChannel+0x19a>
    565a:	f04f 0300 	mov.w	r3, #0
    565e:	ea40 0203 	orr.w	r2, r0, r3
    5662:	68fb      	ldr	r3, [r7, #12]
    5664:	63da      	str	r2, [r3, #60]	; 0x3c
    5666:	e010      	b.n	568a <MCPWM_ConfigChannel+0x1c6>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_DTE(channelNum);
    5668:	68bb      	ldr	r3, [r7, #8]
    566a:	2b02      	cmp	r3, #2
    566c:	d809      	bhi.n	5682 <MCPWM_ConfigChannel+0x1be>
    566e:	68bb      	ldr	r3, [r7, #8]
    5670:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5674:	f103 0303 	add.w	r3, r3, #3
    5678:	f04f 0201 	mov.w	r2, #1
    567c:	fa02 f303 	lsl.w	r3, r2, r3
    5680:	e001      	b.n	5686 <MCPWM_ConfigChannel+0x1c2>
    5682:	f04f 0300 	mov.w	r3, #0
    5686:	68fa      	ldr	r2, [r7, #12]
    5688:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelUpdateEnable /* == ENABLE */){
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	691b      	ldr	r3, [r3, #16]
    568e:	2b00      	cmp	r3, #0
    5690:	d011      	beq.n	56b6 <MCPWM_ConfigChannel+0x1f2>
			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
    5692:	68bb      	ldr	r3, [r7, #8]
    5694:	2b02      	cmp	r3, #2
    5696:	d809      	bhi.n	56ac <MCPWM_ConfigChannel+0x1e8>
    5698:	68bb      	ldr	r3, [r7, #8]
    569a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    569e:	f103 0304 	add.w	r3, r3, #4
    56a2:	f04f 0201 	mov.w	r2, #1
    56a6:	fa02 f303 	lsl.w	r3, r2, r3
    56aa:	e001      	b.n	56b0 <MCPWM_ConfigChannel+0x1ec>
    56ac:	f04f 0300 	mov.w	r3, #0
    56b0:	68fa      	ldr	r2, [r7, #12]
    56b2:	6093      	str	r3, [r2, #8]
    56b4:	e012      	b.n	56dc <MCPWM_ConfigChannel+0x218>
		} else {
			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
    56b6:	68bb      	ldr	r3, [r7, #8]
    56b8:	2b02      	cmp	r3, #2
    56ba:	d809      	bhi.n	56d0 <MCPWM_ConfigChannel+0x20c>
    56bc:	68bb      	ldr	r3, [r7, #8]
    56be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    56c2:	f103 0304 	add.w	r3, r3, #4
    56c6:	f04f 0201 	mov.w	r2, #1
    56ca:	fa02 f303 	lsl.w	r3, r2, r3
    56ce:	e001      	b.n	56d4 <MCPWM_ConfigChannel+0x210>
    56d0:	f04f 0300 	mov.w	r3, #0
    56d4:	68fa      	ldr	r2, [r7, #12]
    56d6:	6053      	str	r3, [r2, #4]
    56d8:	e000      	b.n	56dc <MCPWM_ConfigChannel+0x218>
		} else if (channelNum == 2) {
			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
		} else {
			return;
    56da:	bf00      	nop
			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
		} else {
			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
		}
	}
}
    56dc:	f107 0714 	add.w	r7, r7, #20
    56e0:	46bd      	mov	sp, r7
    56e2:	bc80      	pop	{r7}
    56e4:	4770      	bx	lr
    56e6:	bf00      	nop

000056e8 <MCPWM_WriteToShadow>:
*                    			specified MCPWM channel.
 * @return		None
 **********************************************************************/
void MCPWM_WriteToShadow(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
								MCPWM_CHANNEL_CFG_Type *channelSetup)
{
    56e8:	b480      	push	{r7}
    56ea:	b085      	sub	sp, #20
    56ec:	af00      	add	r7, sp, #0
    56ee:	60f8      	str	r0, [r7, #12]
    56f0:	60b9      	str	r1, [r7, #8]
    56f2:	607a      	str	r2, [r7, #4]
	if (channelNum == 0){
    56f4:	68bb      	ldr	r3, [r7, #8]
    56f6:	2b00      	cmp	r3, #0
    56f8:	d108      	bne.n	570c <MCPWM_WriteToShadow+0x24>
		MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	699a      	ldr	r2, [r3, #24]
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	625a      	str	r2, [r3, #36]	; 0x24
		MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
    5702:	687b      	ldr	r3, [r7, #4]
    5704:	69da      	ldr	r2, [r3, #28]
    5706:	68fb      	ldr	r3, [r7, #12]
    5708:	631a      	str	r2, [r3, #48]	; 0x30
    570a:	e016      	b.n	573a <MCPWM_WriteToShadow+0x52>
	} else if (channelNum == 1) {
    570c:	68bb      	ldr	r3, [r7, #8]
    570e:	2b01      	cmp	r3, #1
    5710:	d108      	bne.n	5724 <MCPWM_WriteToShadow+0x3c>
		MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
    5712:	687b      	ldr	r3, [r7, #4]
    5714:	699a      	ldr	r2, [r3, #24]
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	629a      	str	r2, [r3, #40]	; 0x28
		MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	69da      	ldr	r2, [r3, #28]
    571e:	68fb      	ldr	r3, [r7, #12]
    5720:	635a      	str	r2, [r3, #52]	; 0x34
    5722:	e00a      	b.n	573a <MCPWM_WriteToShadow+0x52>
	} else if (channelNum == 2) {
    5724:	68bb      	ldr	r3, [r7, #8]
    5726:	2b02      	cmp	r3, #2
    5728:	d107      	bne.n	573a <MCPWM_WriteToShadow+0x52>
		MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
    572a:	687b      	ldr	r3, [r7, #4]
    572c:	699a      	ldr	r2, [r3, #24]
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	62da      	str	r2, [r3, #44]	; 0x2c
		MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
    5732:	687b      	ldr	r3, [r7, #4]
    5734:	69da      	ldr	r2, [r3, #28]
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
    573a:	f107 0714 	add.w	r7, r7, #20
    573e:	46bd      	mov	sp, r7
    5740:	bc80      	pop	{r7}
    5742:	4770      	bx	lr

00005744 <MCPWM_ConfigCapture>:
*                    			specified MCPWM capture.
 * @return
 **********************************************************************/
void MCPWM_ConfigCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
						MCPWM_CAPTURE_CFG_Type *captureConfig)
{
    5744:	b480      	push	{r7}
    5746:	b085      	sub	sp, #20
    5748:	af00      	add	r7, sp, #0
    574a:	60f8      	str	r0, [r7, #12]
    574c:	60b9      	str	r1, [r7, #8]
    574e:	607a      	str	r2, [r7, #4]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    5750:	68bb      	ldr	r3, [r7, #8]
    5752:	2b02      	cmp	r3, #2
    5754:	f200 80c0 	bhi.w	58d8 <MCPWM_ConfigCapture+0x194>

		if (captureConfig->captureFalling /* == ENABLE */) {
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	689b      	ldr	r3, [r3, #8]
    575c:	2b00      	cmp	r3, #0
    575e:	d01c      	beq.n	579a <MCPWM_ConfigCapture+0x56>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	2b02      	cmp	r3, #2
    5766:	d813      	bhi.n	5790 <MCPWM_ConfigCapture+0x4c>
    5768:	68bb      	ldr	r3, [r7, #8]
    576a:	2b02      	cmp	r3, #2
    576c:	d810      	bhi.n	5790 <MCPWM_ConfigCapture+0x4c>
    576e:	687b      	ldr	r3, [r7, #4]
    5770:	681a      	ldr	r2, [r3, #0]
    5772:	4613      	mov	r3, r2
    5774:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5778:	189a      	adds	r2, r3, r2
    577a:	68bb      	ldr	r3, [r7, #8]
    577c:	18d3      	adds	r3, r2, r3
    577e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5782:	f103 0301 	add.w	r3, r3, #1
    5786:	f04f 0201 	mov.w	r2, #1
    578a:	fa02 f303 	lsl.w	r3, r2, r3
    578e:	e001      	b.n	5794 <MCPWM_ConfigCapture+0x50>
    5790:	f04f 0300 	mov.w	r3, #0
    5794:	68fa      	ldr	r2, [r7, #12]
    5796:	6113      	str	r3, [r2, #16]
    5798:	e01b      	b.n	57d2 <MCPWM_ConfigCapture+0x8e>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
    579a:	687b      	ldr	r3, [r7, #4]
    579c:	681b      	ldr	r3, [r3, #0]
    579e:	2b02      	cmp	r3, #2
    57a0:	d813      	bhi.n	57ca <MCPWM_ConfigCapture+0x86>
    57a2:	68bb      	ldr	r3, [r7, #8]
    57a4:	2b02      	cmp	r3, #2
    57a6:	d810      	bhi.n	57ca <MCPWM_ConfigCapture+0x86>
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	681a      	ldr	r2, [r3, #0]
    57ac:	4613      	mov	r3, r2
    57ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57b2:	189a      	adds	r2, r3, r2
    57b4:	68bb      	ldr	r3, [r7, #8]
    57b6:	18d3      	adds	r3, r2, r3
    57b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57bc:	f103 0301 	add.w	r3, r3, #1
    57c0:	f04f 0201 	mov.w	r2, #1
    57c4:	fa02 f303 	lsl.w	r3, r2, r3
    57c8:	e001      	b.n	57ce <MCPWM_ConfigCapture+0x8a>
    57ca:	f04f 0300 	mov.w	r3, #0
    57ce:	68fa      	ldr	r2, [r7, #12]
    57d0:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->captureRising /* == ENABLE */) {
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	685b      	ldr	r3, [r3, #4]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d01a      	beq.n	5810 <MCPWM_ConfigCapture+0xcc>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	2b02      	cmp	r3, #2
    57e0:	d811      	bhi.n	5806 <MCPWM_ConfigCapture+0xc2>
    57e2:	68bb      	ldr	r3, [r7, #8]
    57e4:	2b02      	cmp	r3, #2
    57e6:	d80e      	bhi.n	5806 <MCPWM_ConfigCapture+0xc2>
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	681a      	ldr	r2, [r3, #0]
    57ec:	4613      	mov	r3, r2
    57ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57f2:	189a      	adds	r2, r3, r2
    57f4:	68bb      	ldr	r3, [r7, #8]
    57f6:	18d3      	adds	r3, r2, r3
    57f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    57fc:	f04f 0201 	mov.w	r2, #1
    5800:	fa02 f303 	lsl.w	r3, r2, r3
    5804:	e001      	b.n	580a <MCPWM_ConfigCapture+0xc6>
    5806:	f04f 0300 	mov.w	r3, #0
    580a:	68fa      	ldr	r2, [r7, #12]
    580c:	6113      	str	r3, [r2, #16]
    580e:	e019      	b.n	5844 <MCPWM_ConfigCapture+0x100>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	681b      	ldr	r3, [r3, #0]
    5814:	2b02      	cmp	r3, #2
    5816:	d811      	bhi.n	583c <MCPWM_ConfigCapture+0xf8>
    5818:	68bb      	ldr	r3, [r7, #8]
    581a:	2b02      	cmp	r3, #2
    581c:	d80e      	bhi.n	583c <MCPWM_ConfigCapture+0xf8>
    581e:	687b      	ldr	r3, [r7, #4]
    5820:	681a      	ldr	r2, [r3, #0]
    5822:	4613      	mov	r3, r2
    5824:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5828:	189a      	adds	r2, r3, r2
    582a:	68bb      	ldr	r3, [r7, #8]
    582c:	18d3      	adds	r3, r2, r3
    582e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5832:	f04f 0201 	mov.w	r2, #1
    5836:	fa02 f303 	lsl.w	r3, r2, r3
    583a:	e001      	b.n	5840 <MCPWM_ConfigCapture+0xfc>
    583c:	f04f 0300 	mov.w	r3, #0
    5840:	68fa      	ldr	r2, [r7, #12]
    5842:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->timerReset /* == ENABLE */){
    5844:	687b      	ldr	r3, [r7, #4]
    5846:	68db      	ldr	r3, [r3, #12]
    5848:	2b00      	cmp	r3, #0
    584a:	d011      	beq.n	5870 <MCPWM_ConfigCapture+0x12c>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_RT(captureConfig->captureChannel);
    584c:	687b      	ldr	r3, [r7, #4]
    584e:	681b      	ldr	r3, [r3, #0]
    5850:	2b02      	cmp	r3, #2
    5852:	d808      	bhi.n	5866 <MCPWM_ConfigCapture+0x122>
    5854:	687b      	ldr	r3, [r7, #4]
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	f103 0312 	add.w	r3, r3, #18
    585c:	f04f 0201 	mov.w	r2, #1
    5860:	fa02 f303 	lsl.w	r3, r2, r3
    5864:	e001      	b.n	586a <MCPWM_ConfigCapture+0x126>
    5866:	f04f 0300 	mov.w	r3, #0
    586a:	68fa      	ldr	r2, [r7, #12]
    586c:	6113      	str	r3, [r2, #16]
    586e:	e010      	b.n	5892 <MCPWM_ConfigCapture+0x14e>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_RT(captureConfig->captureChannel);
    5870:	687b      	ldr	r3, [r7, #4]
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	2b02      	cmp	r3, #2
    5876:	d808      	bhi.n	588a <MCPWM_ConfigCapture+0x146>
    5878:	687b      	ldr	r3, [r7, #4]
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	f103 0312 	add.w	r3, r3, #18
    5880:	f04f 0201 	mov.w	r2, #1
    5884:	fa02 f303 	lsl.w	r3, r2, r3
    5888:	e001      	b.n	588e <MCPWM_ConfigCapture+0x14a>
    588a:	f04f 0300 	mov.w	r3, #0
    588e:	68fa      	ldr	r2, [r7, #12]
    5890:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->hnfEnable /* == ENABLE */){
    5892:	687b      	ldr	r3, [r7, #4]
    5894:	691b      	ldr	r3, [r3, #16]
    5896:	2b00      	cmp	r3, #0
    5898:	d00f      	beq.n	58ba <MCPWM_ConfigCapture+0x176>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_HNFCAP(channelNum);
    589a:	68bb      	ldr	r3, [r7, #8]
    589c:	2b02      	cmp	r3, #2
    589e:	d807      	bhi.n	58b0 <MCPWM_ConfigCapture+0x16c>
    58a0:	68bb      	ldr	r3, [r7, #8]
    58a2:	f103 0315 	add.w	r3, r3, #21
    58a6:	f04f 0201 	mov.w	r2, #1
    58aa:	fa02 f303 	lsl.w	r3, r2, r3
    58ae:	e001      	b.n	58b4 <MCPWM_ConfigCapture+0x170>
    58b0:	f04f 0300 	mov.w	r3, #0
    58b4:	68fa      	ldr	r2, [r7, #12]
    58b6:	6113      	str	r3, [r2, #16]
    58b8:	e00e      	b.n	58d8 <MCPWM_ConfigCapture+0x194>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_HNFCAP(channelNum);
    58ba:	68bb      	ldr	r3, [r7, #8]
    58bc:	2b02      	cmp	r3, #2
    58be:	d807      	bhi.n	58d0 <MCPWM_ConfigCapture+0x18c>
    58c0:	68bb      	ldr	r3, [r7, #8]
    58c2:	f103 0315 	add.w	r3, r3, #21
    58c6:	f04f 0201 	mov.w	r2, #1
    58ca:	fa02 f303 	lsl.w	r3, r2, r3
    58ce:	e001      	b.n	58d4 <MCPWM_ConfigCapture+0x190>
    58d0:	f04f 0300 	mov.w	r3, #0
    58d4:	68fa      	ldr	r2, [r7, #12]
    58d6:	6153      	str	r3, [r2, #20]
		}
	}
}
    58d8:	f107 0714 	add.w	r7, r7, #20
    58dc:	46bd      	mov	sp, r7
    58de:	bc80      	pop	{r7}
    58e0:	4770      	bx	lr
    58e2:	bf00      	nop

000058e4 <MCPWM_ClearCapture>:
 * 							Should be: LPC_MCPWM
 * @param[in]	captureChannel	Capture channel number, should be: 0..2
 * @return		None
 **********************************************************************/
void MCPWM_ClearCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
{
    58e4:	b480      	push	{r7}
    58e6:	b083      	sub	sp, #12
    58e8:	af00      	add	r7, sp, #0
    58ea:	6078      	str	r0, [r7, #4]
    58ec:	6039      	str	r1, [r7, #0]
	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
    58ee:	683b      	ldr	r3, [r7, #0]
    58f0:	2b02      	cmp	r3, #2
    58f2:	d805      	bhi.n	5900 <MCPWM_ClearCapture+0x1c>
    58f4:	683b      	ldr	r3, [r7, #0]
    58f6:	f04f 0201 	mov.w	r2, #1
    58fa:	fa02 f303 	lsl.w	r3, r2, r3
    58fe:	e001      	b.n	5904 <MCPWM_ClearCapture+0x20>
    5900:	f04f 0300 	mov.w	r3, #0
    5904:	687a      	ldr	r2, [r7, #4]
    5906:	6753      	str	r3, [r2, #116]	; 0x74
}
    5908:	f107 070c 	add.w	r7, r7, #12
    590c:	46bd      	mov	sp, r7
    590e:	bc80      	pop	{r7}
    5910:	4770      	bx	lr
    5912:	bf00      	nop

00005914 <MCPWM_GetCapture>:
 * 							Should be: LPC_MCPWM
 * @param[in]	captureChannel	Capture channel number, should be: 0..2
 * @return		None
 **********************************************************************/
uint32_t MCPWM_GetCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
{
    5914:	b480      	push	{r7}
    5916:	b083      	sub	sp, #12
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
    591c:	6039      	str	r1, [r7, #0]
	if (captureChannel == 0){
    591e:	683b      	ldr	r3, [r7, #0]
    5920:	2b00      	cmp	r3, #0
    5922:	d102      	bne.n	592a <MCPWM_GetCapture+0x16>
		return (MCPWMx->MCCR0);
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5928:	e00d      	b.n	5946 <MCPWM_GetCapture+0x32>
	} else if (captureChannel == 1) {
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	2b01      	cmp	r3, #1
    592e:	d102      	bne.n	5936 <MCPWM_GetCapture+0x22>
		return (MCPWMx->MCCR1);
    5930:	687b      	ldr	r3, [r7, #4]
    5932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5934:	e007      	b.n	5946 <MCPWM_GetCapture+0x32>
	} else if (captureChannel == 2) {
    5936:	683b      	ldr	r3, [r7, #0]
    5938:	2b02      	cmp	r3, #2
    593a:	d102      	bne.n	5942 <MCPWM_GetCapture+0x2e>
		return (MCPWMx->MCCR2);
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5940:	e001      	b.n	5946 <MCPWM_GetCapture+0x32>
	}
	return (0);
    5942:	f04f 0300 	mov.w	r3, #0
}
    5946:	4618      	mov	r0, r3
    5948:	f107 070c 	add.w	r7, r7, #12
    594c:	46bd      	mov	sp, r7
    594e:	bc80      	pop	{r7}
    5950:	4770      	bx	lr
    5952:	bf00      	nop

00005954 <MCPWM_CountConfig>:
*                    		specified MCPWM count control.
 * @return		None
 **********************************************************************/
void MCPWM_CountConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
					uint32_t countMode, MCPWM_COUNT_CFG_Type *countConfig)
{
    5954:	b480      	push	{r7}
    5956:	b085      	sub	sp, #20
    5958:	af00      	add	r7, sp, #0
    595a:	60f8      	str	r0, [r7, #12]
    595c:	60b9      	str	r1, [r7, #8]
    595e:	607a      	str	r2, [r7, #4]
    5960:	603b      	str	r3, [r7, #0]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    5962:	68bb      	ldr	r3, [r7, #8]
    5964:	2b02      	cmp	r3, #2
    5966:	f200 8099 	bhi.w	5a9c <MCPWM_CountConfig+0x148>
		if (countMode /* == ENABLE */){
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	2b00      	cmp	r3, #0
    596e:	f000 8086 	beq.w	5a7e <MCPWM_CountConfig+0x12a>
			MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_CNTR(channelNum);
    5972:	68bb      	ldr	r3, [r7, #8]
    5974:	2b02      	cmp	r3, #2
    5976:	d807      	bhi.n	5988 <MCPWM_CountConfig+0x34>
    5978:	68bb      	ldr	r3, [r7, #8]
    597a:	f103 031d 	add.w	r3, r3, #29
    597e:	f04f 0201 	mov.w	r2, #1
    5982:	fa02 f303 	lsl.w	r3, r2, r3
    5986:	e001      	b.n	598c <MCPWM_CountConfig+0x38>
    5988:	f04f 0300 	mov.w	r3, #0
    598c:	68fa      	ldr	r2, [r7, #12]
    598e:	6613      	str	r3, [r2, #96]	; 0x60
			if (countConfig->countFalling /* == ENABLE */) {
    5990:	683b      	ldr	r3, [r7, #0]
    5992:	689b      	ldr	r3, [r3, #8]
    5994:	2b00      	cmp	r3, #0
    5996:	d01c      	beq.n	59d2 <MCPWM_CountConfig+0x7e>
				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
    5998:	683b      	ldr	r3, [r7, #0]
    599a:	681b      	ldr	r3, [r3, #0]
    599c:	2b02      	cmp	r3, #2
    599e:	d813      	bhi.n	59c8 <MCPWM_CountConfig+0x74>
    59a0:	68bb      	ldr	r3, [r7, #8]
    59a2:	2b02      	cmp	r3, #2
    59a4:	d810      	bhi.n	59c8 <MCPWM_CountConfig+0x74>
    59a6:	683b      	ldr	r3, [r7, #0]
    59a8:	681a      	ldr	r2, [r3, #0]
    59aa:	4613      	mov	r3, r2
    59ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
    59b0:	189a      	adds	r2, r3, r2
    59b2:	68bb      	ldr	r3, [r7, #8]
    59b4:	18d3      	adds	r3, r2, r3
    59b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    59ba:	f103 0301 	add.w	r3, r3, #1
    59be:	f04f 0201 	mov.w	r2, #1
    59c2:	fa02 f303 	lsl.w	r3, r2, r3
    59c6:	e001      	b.n	59cc <MCPWM_CountConfig+0x78>
    59c8:	f04f 0300 	mov.w	r3, #0
    59cc:	68fa      	ldr	r2, [r7, #12]
    59ce:	6613      	str	r3, [r2, #96]	; 0x60
    59d0:	e01b      	b.n	5a0a <MCPWM_CountConfig+0xb6>
			} else {
				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
    59d2:	683b      	ldr	r3, [r7, #0]
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	2b02      	cmp	r3, #2
    59d8:	d813      	bhi.n	5a02 <MCPWM_CountConfig+0xae>
    59da:	68bb      	ldr	r3, [r7, #8]
    59dc:	2b02      	cmp	r3, #2
    59de:	d810      	bhi.n	5a02 <MCPWM_CountConfig+0xae>
    59e0:	683b      	ldr	r3, [r7, #0]
    59e2:	681a      	ldr	r2, [r3, #0]
    59e4:	4613      	mov	r3, r2
    59e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    59ea:	189a      	adds	r2, r3, r2
    59ec:	68bb      	ldr	r3, [r7, #8]
    59ee:	18d3      	adds	r3, r2, r3
    59f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    59f4:	f103 0301 	add.w	r3, r3, #1
    59f8:	f04f 0201 	mov.w	r2, #1
    59fc:	fa02 f303 	lsl.w	r3, r2, r3
    5a00:	e001      	b.n	5a06 <MCPWM_CountConfig+0xb2>
    5a02:	f04f 0300 	mov.w	r3, #0
    5a06:	68fa      	ldr	r2, [r7, #12]
    5a08:	6653      	str	r3, [r2, #100]	; 0x64
			}
			if (countConfig->countRising /* == ENABLE */) {
    5a0a:	683b      	ldr	r3, [r7, #0]
    5a0c:	685b      	ldr	r3, [r3, #4]
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d01a      	beq.n	5a48 <MCPWM_CountConfig+0xf4>
				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
    5a12:	683b      	ldr	r3, [r7, #0]
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	2b02      	cmp	r3, #2
    5a18:	d811      	bhi.n	5a3e <MCPWM_CountConfig+0xea>
    5a1a:	68bb      	ldr	r3, [r7, #8]
    5a1c:	2b02      	cmp	r3, #2
    5a1e:	d80e      	bhi.n	5a3e <MCPWM_CountConfig+0xea>
    5a20:	683b      	ldr	r3, [r7, #0]
    5a22:	681a      	ldr	r2, [r3, #0]
    5a24:	4613      	mov	r3, r2
    5a26:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5a2a:	189a      	adds	r2, r3, r2
    5a2c:	68bb      	ldr	r3, [r7, #8]
    5a2e:	18d3      	adds	r3, r2, r3
    5a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5a34:	f04f 0201 	mov.w	r2, #1
    5a38:	fa02 f303 	lsl.w	r3, r2, r3
    5a3c:	e001      	b.n	5a42 <MCPWM_CountConfig+0xee>
    5a3e:	f04f 0300 	mov.w	r3, #0
    5a42:	68fa      	ldr	r2, [r7, #12]
    5a44:	6613      	str	r3, [r2, #96]	; 0x60
    5a46:	e029      	b.n	5a9c <MCPWM_CountConfig+0x148>
			} else {
				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
    5a48:	683b      	ldr	r3, [r7, #0]
    5a4a:	681b      	ldr	r3, [r3, #0]
    5a4c:	2b02      	cmp	r3, #2
    5a4e:	d811      	bhi.n	5a74 <MCPWM_CountConfig+0x120>
    5a50:	68bb      	ldr	r3, [r7, #8]
    5a52:	2b02      	cmp	r3, #2
    5a54:	d80e      	bhi.n	5a74 <MCPWM_CountConfig+0x120>
    5a56:	683b      	ldr	r3, [r7, #0]
    5a58:	681a      	ldr	r2, [r3, #0]
    5a5a:	4613      	mov	r3, r2
    5a5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5a60:	189a      	adds	r2, r3, r2
    5a62:	68bb      	ldr	r3, [r7, #8]
    5a64:	18d3      	adds	r3, r2, r3
    5a66:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5a6a:	f04f 0201 	mov.w	r2, #1
    5a6e:	fa02 f303 	lsl.w	r3, r2, r3
    5a72:	e001      	b.n	5a78 <MCPWM_CountConfig+0x124>
    5a74:	f04f 0300 	mov.w	r3, #0
    5a78:	68fa      	ldr	r2, [r7, #12]
    5a7a:	6653      	str	r3, [r2, #100]	; 0x64
    5a7c:	e00e      	b.n	5a9c <MCPWM_CountConfig+0x148>
			}
		} else {
			MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_CNTR(channelNum);
    5a7e:	68bb      	ldr	r3, [r7, #8]
    5a80:	2b02      	cmp	r3, #2
    5a82:	d807      	bhi.n	5a94 <MCPWM_CountConfig+0x140>
    5a84:	68bb      	ldr	r3, [r7, #8]
    5a86:	f103 031d 	add.w	r3, r3, #29
    5a8a:	f04f 0201 	mov.w	r2, #1
    5a8e:	fa02 f303 	lsl.w	r3, r2, r3
    5a92:	e001      	b.n	5a98 <MCPWM_CountConfig+0x144>
    5a94:	f04f 0300 	mov.w	r3, #0
    5a98:	68fa      	ldr	r2, [r7, #12]
    5a9a:	6653      	str	r3, [r2, #100]	; 0x64
		}
	}
}
    5a9c:	f107 0714 	add.w	r7, r7, #20
    5aa0:	46bd      	mov	sp, r7
    5aa2:	bc80      	pop	{r7}
    5aa4:	4770      	bx	lr
    5aa6:	bf00      	nop

00005aa8 <MCPWM_Start>:
 * 							- DISABLE: 'Start' command will not effect on channel 2
 * @return		None
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
					uint32_t channel1, uint32_t channel2)
{
    5aa8:	b480      	push	{r7}
    5aaa:	b087      	sub	sp, #28
    5aac:	af00      	add	r7, sp, #0
    5aae:	60f8      	str	r0, [r7, #12]
    5ab0:	60b9      	str	r1, [r7, #8]
    5ab2:	607a      	str	r2, [r7, #4]
    5ab4:	603b      	str	r3, [r7, #0]
	uint32_t regVal = 0;
    5ab6:	f04f 0300 	mov.w	r3, #0
    5aba:	617b      	str	r3, [r7, #20]
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    5abc:	68bb      	ldr	r3, [r7, #8]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d002      	beq.n	5ac8 <MCPWM_Start+0x20>
    5ac2:	f04f 0201 	mov.w	r2, #1
    5ac6:	e001      	b.n	5acc <MCPWM_Start+0x24>
    5ac8:	f04f 0200 	mov.w	r2, #0
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d002      	beq.n	5ad8 <MCPWM_Start+0x30>
    5ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
    5ad6:	e001      	b.n	5adc <MCPWM_Start+0x34>
    5ad8:	f04f 0300 	mov.w	r3, #0
    5adc:	431a      	orrs	r2, r3
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
    5ade:	683b      	ldr	r3, [r7, #0]
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d002      	beq.n	5aea <MCPWM_Start+0x42>
    5ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5ae8:	e001      	b.n	5aee <MCPWM_Start+0x46>
    5aea:	f04f 0300 	mov.w	r3, #0
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
					uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    5aee:	ea42 0303 	orr.w	r3, r2, r3
    5af2:	617b      	str	r3, [r7, #20]
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
	MCPWMx->MCCON_SET = regVal;
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	697a      	ldr	r2, [r7, #20]
    5af8:	605a      	str	r2, [r3, #4]
}
    5afa:	f107 071c 	add.w	r7, r7, #28
    5afe:	46bd      	mov	sp, r7
    5b00:	bc80      	pop	{r7}
    5b02:	4770      	bx	lr

00005b04 <MCPWM_Stop>:
 * 							- DISABLE: 'Stop' command will not effect on channel 2
 * @return		None
 **********************************************************************/
void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
		uint32_t channel1, uint32_t channel2)
{
    5b04:	b480      	push	{r7}
    5b06:	b087      	sub	sp, #28
    5b08:	af00      	add	r7, sp, #0
    5b0a:	60f8      	str	r0, [r7, #12]
    5b0c:	60b9      	str	r1, [r7, #8]
    5b0e:	607a      	str	r2, [r7, #4]
    5b10:	603b      	str	r3, [r7, #0]
	uint32_t regVal = 0;
    5b12:	f04f 0300 	mov.w	r3, #0
    5b16:	617b      	str	r3, [r7, #20]
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    5b18:	68bb      	ldr	r3, [r7, #8]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d002      	beq.n	5b24 <MCPWM_Stop+0x20>
    5b1e:	f04f 0201 	mov.w	r2, #1
    5b22:	e001      	b.n	5b28 <MCPWM_Stop+0x24>
    5b24:	f04f 0200 	mov.w	r2, #0
    5b28:	687b      	ldr	r3, [r7, #4]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d002      	beq.n	5b34 <MCPWM_Stop+0x30>
    5b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b32:	e001      	b.n	5b38 <MCPWM_Stop+0x34>
    5b34:	f04f 0300 	mov.w	r3, #0
    5b38:	431a      	orrs	r2, r3
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
    5b3a:	683b      	ldr	r3, [r7, #0]
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d002      	beq.n	5b46 <MCPWM_Stop+0x42>
    5b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5b44:	e001      	b.n	5b4a <MCPWM_Stop+0x46>
    5b46:	f04f 0300 	mov.w	r3, #0
 **********************************************************************/
void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
		uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    5b4a:	ea42 0303 	orr.w	r3, r2, r3
    5b4e:	617b      	str	r3, [r7, #20]
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
	MCPWMx->MCCON_CLR = regVal;
    5b50:	68fb      	ldr	r3, [r7, #12]
    5b52:	697a      	ldr	r2, [r7, #20]
    5b54:	609a      	str	r2, [r3, #8]
}
    5b56:	f107 071c 	add.w	r7, r7, #28
    5b5a:	46bd      	mov	sp, r7
    5b5c:	bc80      	pop	{r7}
    5b5e:	4770      	bx	lr

00005b60 <MCPWM_ACMode>:
 * 							- ENABLE.
 * 							- DISABLE.
 * @return		None
 **********************************************************************/
void MCPWM_ACMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t acMode)
{
    5b60:	b480      	push	{r7}
    5b62:	b083      	sub	sp, #12
    5b64:	af00      	add	r7, sp, #0
    5b66:	6078      	str	r0, [r7, #4]
    5b68:	6039      	str	r1, [r7, #0]
	if (acMode){
    5b6a:	683b      	ldr	r3, [r7, #0]
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d004      	beq.n	5b7a <MCPWM_ACMode+0x1a>
		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b76:	605a      	str	r2, [r3, #4]
    5b78:	e003      	b.n	5b82 <MCPWM_ACMode+0x22>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_ACMODE;
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b80:	609a      	str	r2, [r3, #8]
	}
}
    5b82:	f107 070c 	add.w	r7, r7, #12
    5b86:	46bd      	mov	sp, r7
    5b88:	bc80      	pop	{r7}
    5b8a:	4770      	bx	lr

00005b8c <MCPWM_DCMode>:
 *
 * Note: all these outputPatent values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_DCMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t dcMode,
					uint32_t outputInvered, uint32_t outputPattern)
{
    5b8c:	b480      	push	{r7}
    5b8e:	b085      	sub	sp, #20
    5b90:	af00      	add	r7, sp, #0
    5b92:	60f8      	str	r0, [r7, #12]
    5b94:	60b9      	str	r1, [r7, #8]
    5b96:	607a      	str	r2, [r7, #4]
    5b98:	603b      	str	r3, [r7, #0]
	if (dcMode){
    5b9a:	68bb      	ldr	r3, [r7, #8]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d004      	beq.n	5baa <MCPWM_DCMode+0x1e>
		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
    5ba0:	68fb      	ldr	r3, [r7, #12]
    5ba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5ba6:	605a      	str	r2, [r3, #4]
    5ba8:	e003      	b.n	5bb2 <MCPWM_DCMode+0x26>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_DCMODE;
    5baa:	68fb      	ldr	r3, [r7, #12]
    5bac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bb0:	609a      	str	r2, [r3, #8]
	}

	if (outputInvered) {
    5bb2:	687b      	ldr	r3, [r7, #4]
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d004      	beq.n	5bc2 <MCPWM_DCMode+0x36>
		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5bbe:	605a      	str	r2, [r3, #4]
    5bc0:	e003      	b.n	5bca <MCPWM_DCMode+0x3e>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_INVBDC;
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5bc8:	609a      	str	r2, [r3, #8]
	}

	MCPWMx->MCCCP = outputPattern;
    5bca:	68fb      	ldr	r3, [r7, #12]
    5bcc:	683a      	ldr	r2, [r7, #0]
    5bce:	641a      	str	r2, [r3, #64]	; 0x40
}
    5bd0:	f107 0714 	add.w	r7, r7, #20
    5bd4:	46bd      	mov	sp, r7
    5bd6:	bc80      	pop	{r7}
    5bd8:	4770      	bx	lr
    5bda:	bf00      	nop

00005bdc <MCPWM_IntConfig>:
 * @return		None
 *
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType, FunctionalState NewState)
{
    5bdc:	b480      	push	{r7}
    5bde:	b085      	sub	sp, #20
    5be0:	af00      	add	r7, sp, #0
    5be2:	60f8      	str	r0, [r7, #12]
    5be4:	60b9      	str	r1, [r7, #8]
    5be6:	4613      	mov	r3, r2
    5be8:	71fb      	strb	r3, [r7, #7]
	if (NewState) {
    5bea:	79fb      	ldrb	r3, [r7, #7]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d003      	beq.n	5bf8 <MCPWM_IntConfig+0x1c>
		MCPWMx->MCINTEN_SET = ulIntType;
    5bf0:	68fb      	ldr	r3, [r7, #12]
    5bf2:	68ba      	ldr	r2, [r7, #8]
    5bf4:	655a      	str	r2, [r3, #84]	; 0x54
    5bf6:	e002      	b.n	5bfe <MCPWM_IntConfig+0x22>
	} else {
		MCPWMx->MCINTEN_CLR = ulIntType;
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	68ba      	ldr	r2, [r7, #8]
    5bfc:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
    5bfe:	f107 0714 	add.w	r7, r7, #20
    5c02:	46bd      	mov	sp, r7
    5c04:	bc80      	pop	{r7}
    5c06:	4770      	bx	lr

00005c08 <MCPWM_IntSet>:
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntSet(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    5c08:	b480      	push	{r7}
    5c0a:	b083      	sub	sp, #12
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	6078      	str	r0, [r7, #4]
    5c10:	6039      	str	r1, [r7, #0]
	MCPWMx->MCINTFLAG_SET = ulIntType;
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	683a      	ldr	r2, [r7, #0]
    5c16:	66da      	str	r2, [r3, #108]	; 0x6c
}
    5c18:	f107 070c 	add.w	r7, r7, #12
    5c1c:	46bd      	mov	sp, r7
    5c1e:	bc80      	pop	{r7}
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop

00005c24 <MCPWM_IntClear>:
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntClear(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    5c24:	b480      	push	{r7}
    5c26:	b083      	sub	sp, #12
    5c28:	af00      	add	r7, sp, #0
    5c2a:	6078      	str	r0, [r7, #4]
    5c2c:	6039      	str	r1, [r7, #0]
	MCPWMx->MCINTFLAG_CLR = ulIntType;
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	671a      	str	r2, [r3, #112]	; 0x70
}
    5c34:	f107 070c 	add.w	r7, r7, #12
    5c38:	46bd      	mov	sp, r7
    5c3a:	bc80      	pop	{r7}
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop

00005c40 <MCPWM_GetIntStatus>:
 * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 **********************************************************************/
FlagStatus MCPWM_GetIntStatus(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    5c40:	b480      	push	{r7}
    5c42:	b083      	sub	sp, #12
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
    5c48:	6039      	str	r1, [r7, #0]
	return ((MCPWMx->MCINTFLAG & ulIntType) ? SET : RESET);
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    5c4e:	683b      	ldr	r3, [r7, #0]
    5c50:	ea02 0303 	and.w	r3, r2, r3
    5c54:	2b00      	cmp	r3, #0
    5c56:	bf0c      	ite	eq
    5c58:	2300      	moveq	r3, #0
    5c5a:	2301      	movne	r3, #1
    5c5c:	b2db      	uxtb	r3, r3
}
    5c5e:	4618      	mov	r0, r3
    5c60:	f107 070c 	add.w	r7, r7, #12
    5c64:	46bd      	mov	sp, r7
    5c66:	bc80      	pop	{r7}
    5c68:	4770      	bx	lr
    5c6a:	bf00      	nop

00005c6c <set_PinFunc>:
 *				- PINSEL_FUNC_3 : third alternate function
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
    5c6c:	b480      	push	{r7}
    5c6e:	b087      	sub	sp, #28
    5c70:	af00      	add	r7, sp, #0
    5c72:	4613      	mov	r3, r2
    5c74:	4602      	mov	r2, r0
    5c76:	71fa      	strb	r2, [r7, #7]
    5c78:	460a      	mov	r2, r1
    5c7a:	71ba      	strb	r2, [r7, #6]
    5c7c:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
    5c7e:	79bb      	ldrb	r3, [r7, #6]
    5c80:	617b      	str	r3, [r7, #20]
	uint32_t pinselreg_idx = 2 * portnum;
    5c82:	79fb      	ldrb	r3, [r7, #7]
    5c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5c88:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;
    5c8a:	4b1e      	ldr	r3, [pc, #120]	; (5d04 <set_PinFunc+0x98>)
    5c8c:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
    5c8e:	697b      	ldr	r3, [r7, #20]
    5c90:	2b0f      	cmp	r3, #15
    5c92:	d907      	bls.n	5ca4 <set_PinFunc+0x38>
		pinnum_t -= 16;
    5c94:	697b      	ldr	r3, [r7, #20]
    5c96:	f1a3 0310 	sub.w	r3, r3, #16
    5c9a:	617b      	str	r3, [r7, #20]
		pinselreg_idx++;
    5c9c:	693b      	ldr	r3, [r7, #16]
    5c9e:	f103 0301 	add.w	r3, r3, #1
    5ca2:	613b      	str	r3, [r7, #16]
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    5ca4:	693b      	ldr	r3, [r7, #16]
    5ca6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5caa:	68fa      	ldr	r2, [r7, #12]
    5cac:	18d3      	adds	r3, r2, r3
    5cae:	693a      	ldr	r2, [r7, #16]
    5cb0:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5cb4:	68f9      	ldr	r1, [r7, #12]
    5cb6:	188a      	adds	r2, r1, r2
    5cb8:	6811      	ldr	r1, [r2, #0]
    5cba:	697a      	ldr	r2, [r7, #20]
    5cbc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5cc0:	f04f 0003 	mov.w	r0, #3
    5cc4:	fa00 f202 	lsl.w	r2, r0, r2
    5cc8:	ea6f 0202 	mvn.w	r2, r2
    5ccc:	ea01 0202 	and.w	r2, r1, r2
    5cd0:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    5cd2:	693b      	ldr	r3, [r7, #16]
    5cd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cd8:	68fa      	ldr	r2, [r7, #12]
    5cda:	18d3      	adds	r3, r2, r3
    5cdc:	693a      	ldr	r2, [r7, #16]
    5cde:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5ce2:	68f9      	ldr	r1, [r7, #12]
    5ce4:	188a      	adds	r2, r1, r2
    5ce6:	6811      	ldr	r1, [r2, #0]
    5ce8:	7978      	ldrb	r0, [r7, #5]
    5cea:	697a      	ldr	r2, [r7, #20]
    5cec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5cf0:	fa00 f202 	lsl.w	r2, r0, r2
    5cf4:	ea41 0202 	orr.w	r2, r1, r2
    5cf8:	601a      	str	r2, [r3, #0]
}
    5cfa:	f107 071c 	add.w	r7, r7, #28
    5cfe:	46bd      	mov	sp, r7
    5d00:	bc80      	pop	{r7}
    5d02:	4770      	bx	lr
    5d04:	4002c000 	.word	0x4002c000

00005d08 <set_ResistorMode>:
				- PINSEL_PINMODE_PULLDOWN : Internal pull-down resistor

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
    5d08:	b480      	push	{r7}
    5d0a:	b087      	sub	sp, #28
    5d0c:	af00      	add	r7, sp, #0
    5d0e:	4613      	mov	r3, r2
    5d10:	4602      	mov	r2, r0
    5d12:	71fa      	strb	r2, [r7, #7]
    5d14:	460a      	mov	r2, r1
    5d16:	71ba      	strb	r2, [r7, #6]
    5d18:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
    5d1a:	79bb      	ldrb	r3, [r7, #6]
    5d1c:	617b      	str	r3, [r7, #20]
	uint32_t pinmodereg_idx = 2 * portnum;
    5d1e:	79fb      	ldrb	r3, [r7, #7]
    5d20:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5d24:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;
    5d26:	4b1e      	ldr	r3, [pc, #120]	; (5da0 <set_ResistorMode+0x98>)
    5d28:	60fb      	str	r3, [r7, #12]

	if (pinnum_t >= 16) {
    5d2a:	697b      	ldr	r3, [r7, #20]
    5d2c:	2b0f      	cmp	r3, #15
    5d2e:	d907      	bls.n	5d40 <set_ResistorMode+0x38>
		pinnum_t -= 16;
    5d30:	697b      	ldr	r3, [r7, #20]
    5d32:	f1a3 0310 	sub.w	r3, r3, #16
    5d36:	617b      	str	r3, [r7, #20]
		pinmodereg_idx++ ;
    5d38:	693b      	ldr	r3, [r7, #16]
    5d3a:	f103 0301 	add.w	r3, r3, #1
    5d3e:	613b      	str	r3, [r7, #16]
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    5d40:	693b      	ldr	r3, [r7, #16]
    5d42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d46:	68fa      	ldr	r2, [r7, #12]
    5d48:	18d3      	adds	r3, r2, r3
    5d4a:	693a      	ldr	r2, [r7, #16]
    5d4c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5d50:	68f9      	ldr	r1, [r7, #12]
    5d52:	188a      	adds	r2, r1, r2
    5d54:	6811      	ldr	r1, [r2, #0]
    5d56:	697a      	ldr	r2, [r7, #20]
    5d58:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5d5c:	f04f 0003 	mov.w	r0, #3
    5d60:	fa00 f202 	lsl.w	r2, r0, r2
    5d64:	ea6f 0202 	mvn.w	r2, r2
    5d68:	ea01 0202 	and.w	r2, r1, r2
    5d6c:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    5d6e:	693b      	ldr	r3, [r7, #16]
    5d70:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d74:	68fa      	ldr	r2, [r7, #12]
    5d76:	18d3      	adds	r3, r2, r3
    5d78:	693a      	ldr	r2, [r7, #16]
    5d7a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5d7e:	68f9      	ldr	r1, [r7, #12]
    5d80:	188a      	adds	r2, r1, r2
    5d82:	6811      	ldr	r1, [r2, #0]
    5d84:	7978      	ldrb	r0, [r7, #5]
    5d86:	697a      	ldr	r2, [r7, #20]
    5d88:	ea4f 0242 	mov.w	r2, r2, lsl #1
    5d8c:	fa00 f202 	lsl.w	r2, r0, r2
    5d90:	ea41 0202 	orr.w	r2, r1, r2
    5d94:	601a      	str	r2, [r3, #0]
}
    5d96:	f107 071c 	add.w	r7, r7, #28
    5d9a:	46bd      	mov	sp, r7
    5d9c:	bc80      	pop	{r7}
    5d9e:	4770      	bx	lr
    5da0:	4002c040 	.word	0x4002c040

00005da4 <set_OpenDrainMode>:
 * 				- PINSEL_PINMODE_OPENDRAIN : Pin is in the open drain mode
 *
 * @return 		None
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
    5da4:	b480      	push	{r7}
    5da6:	b085      	sub	sp, #20
    5da8:	af00      	add	r7, sp, #0
    5daa:	4613      	mov	r3, r2
    5dac:	4602      	mov	r2, r0
    5dae:	71fa      	strb	r2, [r7, #7]
    5db0:	460a      	mov	r2, r1
    5db2:	71ba      	strb	r2, [r7, #6]
    5db4:	717b      	strb	r3, [r7, #5]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;
    5db6:	4b19      	ldr	r3, [pc, #100]	; (5e1c <set_OpenDrainMode+0x78>)
    5db8:	60fb      	str	r3, [r7, #12]

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    5dba:	797b      	ldrb	r3, [r7, #5]
    5dbc:	2b01      	cmp	r3, #1
    5dbe:	d113      	bne.n	5de8 <set_OpenDrainMode+0x44>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    5dc0:	79fb      	ldrb	r3, [r7, #7]
    5dc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dc6:	68fa      	ldr	r2, [r7, #12]
    5dc8:	18d3      	adds	r3, r2, r3
    5dca:	79fa      	ldrb	r2, [r7, #7]
    5dcc:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5dd0:	68f9      	ldr	r1, [r7, #12]
    5dd2:	188a      	adds	r2, r1, r2
    5dd4:	6811      	ldr	r1, [r2, #0]
    5dd6:	79ba      	ldrb	r2, [r7, #6]
    5dd8:	f04f 0001 	mov.w	r0, #1
    5ddc:	fa00 f202 	lsl.w	r2, r0, r2
    5de0:	ea41 0202 	orr.w	r2, r1, r2
    5de4:	601a      	str	r2, [r3, #0]
    5de6:	e014      	b.n	5e12 <set_OpenDrainMode+0x6e>
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    5de8:	79fb      	ldrb	r3, [r7, #7]
    5dea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dee:	68fa      	ldr	r2, [r7, #12]
    5df0:	18d3      	adds	r3, r2, r3
    5df2:	79fa      	ldrb	r2, [r7, #7]
    5df4:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5df8:	68f9      	ldr	r1, [r7, #12]
    5dfa:	188a      	adds	r2, r1, r2
    5dfc:	6811      	ldr	r1, [r2, #0]
    5dfe:	79ba      	ldrb	r2, [r7, #6]
    5e00:	f04f 0001 	mov.w	r0, #1
    5e04:	fa00 f202 	lsl.w	r2, r0, r2
    5e08:	ea6f 0202 	mvn.w	r2, r2
    5e0c:	ea01 0202 	and.w	r2, r1, r2
    5e10:	601a      	str	r2, [r3, #0]
	}
}
    5e12:	f107 0714 	add.w	r7, r7, #20
    5e16:	46bd      	mov	sp, r7
    5e18:	bc80      	pop	{r7}
    5e1a:	4770      	bx	lr
    5e1c:	4002c068 	.word	0x4002c068

00005e20 <PINSEL_ConfigTraceFunc>:
 * 				- DISABLE : Disable Trace Function
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
    5e20:	b480      	push	{r7}
    5e22:	b083      	sub	sp, #12
    5e24:	af00      	add	r7, sp, #0
    5e26:	4603      	mov	r3, r0
    5e28:	71fb      	strb	r3, [r7, #7]
	if (NewState == ENABLE) {
    5e2a:	79fb      	ldrb	r3, [r7, #7]
    5e2c:	2b01      	cmp	r3, #1
    5e2e:	d106      	bne.n	5e3e <PINSEL_ConfigTraceFunc+0x1e>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
    5e30:	4b0a      	ldr	r3, [pc, #40]	; (5e5c <PINSEL_ConfigTraceFunc+0x3c>)
    5e32:	4a0a      	ldr	r2, [pc, #40]	; (5e5c <PINSEL_ConfigTraceFunc+0x3c>)
    5e34:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5e36:	f042 0208 	orr.w	r2, r2, #8
    5e3a:	629a      	str	r2, [r3, #40]	; 0x28
    5e3c:	e008      	b.n	5e50 <PINSEL_ConfigTraceFunc+0x30>
	} else if (NewState == DISABLE) {
    5e3e:	79fb      	ldrb	r3, [r7, #7]
    5e40:	2b00      	cmp	r3, #0
    5e42:	d105      	bne.n	5e50 <PINSEL_ConfigTraceFunc+0x30>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
    5e44:	4b05      	ldr	r3, [pc, #20]	; (5e5c <PINSEL_ConfigTraceFunc+0x3c>)
    5e46:	4a05      	ldr	r2, [pc, #20]	; (5e5c <PINSEL_ConfigTraceFunc+0x3c>)
    5e48:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5e4a:	f022 0208 	bic.w	r2, r2, #8
    5e4e:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
    5e50:	f107 070c 	add.w	r7, r7, #12
    5e54:	46bd      	mov	sp, r7
    5e56:	bc80      	pop	{r7}
    5e58:	4770      	bx	lr
    5e5a:	bf00      	nop
    5e5c:	4002c000 	.word	0x4002c000

00005e60 <PINSEL_SetI2C0Pins>:
 * 				- DISABLE: Disable filter and slew rate.
 *
 * @return 		None
 **********************************************************************/
void PINSEL_SetI2C0Pins(uint8_t i2cPinMode, FunctionalState filterSlewRateEnable)
{
    5e60:	b480      	push	{r7}
    5e62:	b085      	sub	sp, #20
    5e64:	af00      	add	r7, sp, #0
    5e66:	4602      	mov	r2, r0
    5e68:	460b      	mov	r3, r1
    5e6a:	71fa      	strb	r2, [r7, #7]
    5e6c:	71bb      	strb	r3, [r7, #6]
	uint32_t regVal;

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
    5e6e:	79fb      	ldrb	r3, [r7, #7]
    5e70:	2b01      	cmp	r3, #1
    5e72:	d102      	bne.n	5e7a <PINSEL_SetI2C0Pins+0x1a>
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
    5e74:	f04f 0305 	mov.w	r3, #5
    5e78:	60fb      	str	r3, [r7, #12]
	}

	if (filterSlewRateEnable == DISABLE){
    5e7a:	79bb      	ldrb	r3, [r7, #6]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d102      	bne.n	5e86 <PINSEL_SetI2C0Pins+0x26>
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
    5e80:	f04f 030a 	mov.w	r3, #10
    5e84:	60fb      	str	r3, [r7, #12]
	}
	LPC_PINCON->I2CPADCFG = regVal;
    5e86:	4b04      	ldr	r3, [pc, #16]	; (5e98 <PINSEL_SetI2C0Pins+0x38>)
    5e88:	68fa      	ldr	r2, [r7, #12]
    5e8a:	67da      	str	r2, [r3, #124]	; 0x7c
}
    5e8c:	f107 0714 	add.w	r7, r7, #20
    5e90:	46bd      	mov	sp, r7
    5e92:	bc80      	pop	{r7}
    5e94:	4770      	bx	lr
    5e96:	bf00      	nop
    5e98:	4002c000 	.word	0x4002c000

00005e9c <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
    5e9c:	b580      	push	{r7, lr}
    5e9e:	b082      	sub	sp, #8
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	6078      	str	r0, [r7, #4]
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    5ea4:	687b      	ldr	r3, [r7, #4]
    5ea6:	7819      	ldrb	r1, [r3, #0]
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	785a      	ldrb	r2, [r3, #1]
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	789b      	ldrb	r3, [r3, #2]
    5eb0:	4608      	mov	r0, r1
    5eb2:	4611      	mov	r1, r2
    5eb4:	461a      	mov	r2, r3
    5eb6:	f7ff fed9 	bl	5c6c <set_PinFunc>
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	7819      	ldrb	r1, [r3, #0]
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	785a      	ldrb	r2, [r3, #1]
    5ec2:	687b      	ldr	r3, [r7, #4]
    5ec4:	78db      	ldrb	r3, [r3, #3]
    5ec6:	4608      	mov	r0, r1
    5ec8:	4611      	mov	r1, r2
    5eca:	461a      	mov	r2, r3
    5ecc:	f7ff ff1c 	bl	5d08 <set_ResistorMode>
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	7819      	ldrb	r1, [r3, #0]
    5ed4:	687b      	ldr	r3, [r7, #4]
    5ed6:	785a      	ldrb	r2, [r3, #1]
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	791b      	ldrb	r3, [r3, #4]
    5edc:	4608      	mov	r0, r1
    5ede:	4611      	mov	r1, r2
    5ee0:	461a      	mov	r2, r3
    5ee2:	f7ff ff5f 	bl	5da4 <set_OpenDrainMode>
}
    5ee6:	f107 0708 	add.w	r7, r7, #8
    5eea:	46bd      	mov	sp, r7
    5eec:	bd80      	pop	{r7, pc}
    5eee:	bf00      	nop

00005ef0 <PWM_GetIntStatus>:
 * 				- PWM_INTSTAT_CAP0: Interrupt flag for capture input 0
 * 				- PWM_INTSTAT_CAP1: Interrupt flag for capture input 1
 * @return 		New State of PWM interrupt flag (SET or RESET)
 **********************************************************************/
IntStatus PWM_GetIntStatus(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
    5ef0:	b580      	push	{r7, lr}
    5ef2:	b082      	sub	sp, #8
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    5efa:	687a      	ldr	r2, [r7, #4]
    5efc:	4b1c      	ldr	r3, [pc, #112]	; (5f70 <PWM_GetIntStatus+0x80>)
    5efe:	429a      	cmp	r2, r3
    5f00:	d004      	beq.n	5f0c <PWM_GetIntStatus+0x1c>
    5f02:	481c      	ldr	r0, [pc, #112]	; (5f74 <PWM_GetIntStatus+0x84>)
    5f04:	f04f 0148 	mov.w	r1, #72	; 0x48
    5f08:	f7ff fabc 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));
    5f0c:	683b      	ldr	r3, [r7, #0]
    5f0e:	2b01      	cmp	r3, #1
    5f10:	d01f      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f12:	683b      	ldr	r3, [r7, #0]
    5f14:	2b02      	cmp	r3, #2
    5f16:	d01c      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f18:	683b      	ldr	r3, [r7, #0]
    5f1a:	2b04      	cmp	r3, #4
    5f1c:	d019      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f1e:	683b      	ldr	r3, [r7, #0]
    5f20:	2b08      	cmp	r3, #8
    5f22:	d016      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f24:	683b      	ldr	r3, [r7, #0]
    5f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5f2a:	d012      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5f32:	d00e      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f34:	683b      	ldr	r3, [r7, #0]
    5f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5f3a:	d00a      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f3c:	683b      	ldr	r3, [r7, #0]
    5f3e:	2b10      	cmp	r3, #16
    5f40:	d007      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f42:	683b      	ldr	r3, [r7, #0]
    5f44:	2b20      	cmp	r3, #32
    5f46:	d004      	beq.n	5f52 <PWM_GetIntStatus+0x62>
    5f48:	480a      	ldr	r0, [pc, #40]	; (5f74 <PWM_GetIntStatus+0x84>)
    5f4a:	f04f 0149 	mov.w	r1, #73	; 0x49
    5f4e:	f7ff fa99 	bl	5484 <check_failed>

	return ((PWMx->IR & IntFlag) ? SET : RESET);
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	681a      	ldr	r2, [r3, #0]
    5f56:	683b      	ldr	r3, [r7, #0]
    5f58:	ea02 0303 	and.w	r3, r2, r3
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	bf0c      	ite	eq
    5f60:	2300      	moveq	r3, #0
    5f62:	2301      	movne	r3, #1
    5f64:	b2db      	uxtb	r3, r3
}
    5f66:	4618      	mov	r0, r3
    5f68:	f107 0708 	add.w	r7, r7, #8
    5f6c:	46bd      	mov	sp, r7
    5f6e:	bd80      	pop	{r7, pc}
    5f70:	40018000 	.word	0x40018000
    5f74:	0000a3a8 	.word	0x0000a3a8

00005f78 <PWM_ClearIntPending>:
 * 				- PWM_INTSTAT_CAP0: Interrupt flag for capture input 0
 * 				- PWM_INTSTAT_CAP1: Interrupt flag for capture input 1
 * @return 		None
 **********************************************************************/
void PWM_ClearIntPending(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b082      	sub	sp, #8
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	6078      	str	r0, [r7, #4]
    5f80:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    5f82:	687a      	ldr	r2, [r7, #4]
    5f84:	4b18      	ldr	r3, [pc, #96]	; (5fe8 <PWM_ClearIntPending+0x70>)
    5f86:	429a      	cmp	r2, r3
    5f88:	d004      	beq.n	5f94 <PWM_ClearIntPending+0x1c>
    5f8a:	4818      	ldr	r0, [pc, #96]	; (5fec <PWM_ClearIntPending+0x74>)
    5f8c:	f04f 0161 	mov.w	r1, #97	; 0x61
    5f90:	f7ff fa78 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));
    5f94:	683b      	ldr	r3, [r7, #0]
    5f96:	2b01      	cmp	r3, #1
    5f98:	d01f      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5f9a:	683b      	ldr	r3, [r7, #0]
    5f9c:	2b02      	cmp	r3, #2
    5f9e:	d01c      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fa0:	683b      	ldr	r3, [r7, #0]
    5fa2:	2b04      	cmp	r3, #4
    5fa4:	d019      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	2b08      	cmp	r3, #8
    5faa:	d016      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fac:	683b      	ldr	r3, [r7, #0]
    5fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5fb2:	d012      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fb4:	683b      	ldr	r3, [r7, #0]
    5fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5fba:	d00e      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fbc:	683b      	ldr	r3, [r7, #0]
    5fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5fc2:	d00a      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	2b10      	cmp	r3, #16
    5fc8:	d007      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fca:	683b      	ldr	r3, [r7, #0]
    5fcc:	2b20      	cmp	r3, #32
    5fce:	d004      	beq.n	5fda <PWM_ClearIntPending+0x62>
    5fd0:	4806      	ldr	r0, [pc, #24]	; (5fec <PWM_ClearIntPending+0x74>)
    5fd2:	f04f 0162 	mov.w	r1, #98	; 0x62
    5fd6:	f7ff fa55 	bl	5484 <check_failed>
	PWMx->IR = IntFlag;
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	683a      	ldr	r2, [r7, #0]
    5fde:	601a      	str	r2, [r3, #0]
}
    5fe0:	f107 0708 	add.w	r7, r7, #8
    5fe4:	46bd      	mov	sp, r7
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	40018000 	.word	0x40018000
    5fec:	0000a3a8 	.word	0x0000a3a8

00005ff0 <PWM_ConfigStructInit>:
* @return		None
* Note: PWM_InitStruct pointer will be assigned to corresponding structure
* 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
*******************************************************************************/
void PWM_ConfigStructInit(uint8_t PWMTimerCounterMode, void *PWM_InitStruct)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b084      	sub	sp, #16
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	4603      	mov	r3, r0
    5ff8:	6039      	str	r1, [r7, #0]
    5ffa:	71fb      	strb	r3, [r7, #7]
	PWM_TIMERCFG_Type *pTimeCfg;
	PWM_COUNTERCFG_Type *pCounterCfg;
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));
    5ffc:	79fb      	ldrb	r3, [r7, #7]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d007      	beq.n	6012 <PWM_ConfigStructInit+0x22>
    6002:	79fb      	ldrb	r3, [r7, #7]
    6004:	2b01      	cmp	r3, #1
    6006:	d004      	beq.n	6012 <PWM_ConfigStructInit+0x22>
    6008:	4811      	ldr	r0, [pc, #68]	; (6050 <PWM_ConfigStructInit+0x60>)
    600a:	f04f 017d 	mov.w	r1, #125	; 0x7d
    600e:	f7ff fa39 	bl	5484 <check_failed>

	pTimeCfg = (PWM_TIMERCFG_Type *) PWM_InitStruct;
    6012:	683b      	ldr	r3, [r7, #0]
    6014:	60fb      	str	r3, [r7, #12]
	pCounterCfg = (PWM_COUNTERCFG_Type *) PWM_InitStruct;
    6016:	683b      	ldr	r3, [r7, #0]
    6018:	60bb      	str	r3, [r7, #8]

	if (PWMTimerCounterMode == PWM_MODE_TIMER )
    601a:	79fb      	ldrb	r3, [r7, #7]
    601c:	2b00      	cmp	r3, #0
    601e:	d108      	bne.n	6032 <PWM_ConfigStructInit+0x42>
	{
		pTimeCfg->PrescaleOption = PWM_TIMER_PRESCALE_USVAL;
    6020:	68fb      	ldr	r3, [r7, #12]
    6022:	f04f 0201 	mov.w	r2, #1
    6026:	701a      	strb	r2, [r3, #0]
		pTimeCfg->PrescaleValue = 1;
    6028:	68fb      	ldr	r3, [r7, #12]
    602a:	f04f 0201 	mov.w	r2, #1
    602e:	605a      	str	r2, [r3, #4]
    6030:	e00a      	b.n	6048 <PWM_ConfigStructInit+0x58>
	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    6032:	79fb      	ldrb	r3, [r7, #7]
    6034:	2b01      	cmp	r3, #1
    6036:	d107      	bne.n	6048 <PWM_ConfigStructInit+0x58>
	{
		pCounterCfg->CountInputSelect = PWM_COUNTER_PCAP1_0;
    6038:	68bb      	ldr	r3, [r7, #8]
    603a:	f04f 0200 	mov.w	r2, #0
    603e:	705a      	strb	r2, [r3, #1]
		pCounterCfg->CounterOption = PWM_COUNTER_RISING;
    6040:	68bb      	ldr	r3, [r7, #8]
    6042:	f04f 0201 	mov.w	r2, #1
    6046:	701a      	strb	r2, [r3, #0]
	}
}
    6048:	f107 0710 	add.w	r7, r7, #16
    604c:	46bd      	mov	sp, r7
    604e:	bd80      	pop	{r7, pc}
    6050:	0000a3a8 	.word	0x0000a3a8

00006054 <PWM_Init>:
 * @return 		None
 * Note: PWM_ConfigStruct pointer will be assigned to corresponding structure
 * 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
 **********************************************************************/
void PWM_Init(LPC_PWM_TypeDef *PWMx, uint32_t PWMTimerCounterMode, void *PWM_ConfigStruct)
{
    6054:	b580      	push	{r7, lr}
    6056:	b088      	sub	sp, #32
    6058:	af00      	add	r7, sp, #0
    605a:	60f8      	str	r0, [r7, #12]
    605c:	60b9      	str	r1, [r7, #8]
    605e:	607a      	str	r2, [r7, #4]
	PWM_TIMERCFG_Type *pTimeCfg;
	PWM_COUNTERCFG_Type *pCounterCfg;
	uint64_t clkdlycnt;

	CHECK_PARAM(PARAM_PWMx(PWMx));
    6060:	68fa      	ldr	r2, [r7, #12]
    6062:	4b5f      	ldr	r3, [pc, #380]	; (61e0 <PWM_Init+0x18c>)
    6064:	429a      	cmp	r2, r3
    6066:	d004      	beq.n	6072 <PWM_Init+0x1e>
    6068:	485e      	ldr	r0, [pc, #376]	; (61e4 <PWM_Init+0x190>)
    606a:	f04f 01a2 	mov.w	r1, #162	; 0xa2
    606e:	f7ff fa09 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));
    6072:	68bb      	ldr	r3, [r7, #8]
    6074:	2b00      	cmp	r3, #0
    6076:	d007      	beq.n	6088 <PWM_Init+0x34>
    6078:	68bb      	ldr	r3, [r7, #8]
    607a:	2b01      	cmp	r3, #1
    607c:	d004      	beq.n	6088 <PWM_Init+0x34>
    607e:	4859      	ldr	r0, [pc, #356]	; (61e4 <PWM_Init+0x190>)
    6080:	f04f 01a3 	mov.w	r1, #163	; 0xa3
    6084:	f7ff f9fe 	bl	5484 <check_failed>

	pTimeCfg = (PWM_TIMERCFG_Type *)PWM_ConfigStruct;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	61fb      	str	r3, [r7, #28]
	pCounterCfg = (PWM_COUNTERCFG_Type *)PWM_ConfigStruct;
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	61bb      	str	r3, [r7, #24]


	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, ENABLE);
    6090:	f04f 0040 	mov.w	r0, #64	; 0x40
    6094:	f04f 0101 	mov.w	r1, #1
    6098:	f7fd faec 	bl	3674 <CLKPWR_ConfigPPWR>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_PWM1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    609c:	f04f 000c 	mov.w	r0, #12
    60a0:	f04f 0100 	mov.w	r1, #0
    60a4:	f7fd fa38 	bl	3518 <CLKPWR_SetPCLKDiv>
	// Get peripheral clock of PWM1
	clkdlycnt = (uint64_t) CLKPWR_GetPCLK (CLKPWR_PCLKSEL_PWM1);
    60a8:	f04f 000c 	mov.w	r0, #12
    60ac:	f7fd faaa 	bl	3604 <CLKPWR_GetPCLK>
    60b0:	4603      	mov	r3, r0
    60b2:	461a      	mov	r2, r3
    60b4:	f04f 0300 	mov.w	r3, #0
    60b8:	e9c7 2304 	strd	r2, r3, [r7, #16]


	// Clear all interrupts pending
	PWMx->IR = 0xFF & PWM_IR_BITMASK;
    60bc:	68fb      	ldr	r3, [r7, #12]
    60be:	f04f 023f 	mov.w	r2, #63	; 0x3f
    60c2:	601a      	str	r2, [r3, #0]
	PWMx->TCR = 0x00;
    60c4:	68fb      	ldr	r3, [r7, #12]
    60c6:	f04f 0200 	mov.w	r2, #0
    60ca:	605a      	str	r2, [r3, #4]
	PWMx->CTCR = 0x00;
    60cc:	68fb      	ldr	r3, [r7, #12]
    60ce:	f04f 0200 	mov.w	r2, #0
    60d2:	671a      	str	r2, [r3, #112]	; 0x70
	PWMx->MCR = 0x00;
    60d4:	68fb      	ldr	r3, [r7, #12]
    60d6:	f04f 0200 	mov.w	r2, #0
    60da:	615a      	str	r2, [r3, #20]
	PWMx->CCR = 0x00;
    60dc:	68fb      	ldr	r3, [r7, #12]
    60de:	f04f 0200 	mov.w	r2, #0
    60e2:	629a      	str	r2, [r3, #40]	; 0x28
	PWMx->PCR = 0x00;
    60e4:	68fb      	ldr	r3, [r7, #12]
    60e6:	f04f 0200 	mov.w	r2, #0
    60ea:	64da      	str	r2, [r3, #76]	; 0x4c
	PWMx->LER = 0x00;
    60ec:	68fb      	ldr	r3, [r7, #12]
    60ee:	f04f 0200 	mov.w	r2, #0
    60f2:	651a      	str	r2, [r3, #80]	; 0x50

	if (PWMTimerCounterMode == PWM_MODE_TIMER)
    60f4:	68bb      	ldr	r3, [r7, #8]
    60f6:	2b00      	cmp	r3, #0
    60f8:	d13c      	bne.n	6174 <PWM_Init+0x120>
	{
		CHECK_PARAM(PARAM_PWM_TIMER_PRESCALE(pTimeCfg->PrescaleOption));
    60fa:	69fb      	ldr	r3, [r7, #28]
    60fc:	781b      	ldrb	r3, [r3, #0]
    60fe:	2b00      	cmp	r3, #0
    6100:	d008      	beq.n	6114 <PWM_Init+0xc0>
    6102:	69fb      	ldr	r3, [r7, #28]
    6104:	781b      	ldrb	r3, [r3, #0]
    6106:	2b01      	cmp	r3, #1
    6108:	d004      	beq.n	6114 <PWM_Init+0xc0>
    610a:	4836      	ldr	r0, [pc, #216]	; (61e4 <PWM_Init+0x190>)
    610c:	f04f 01ba 	mov.w	r1, #186	; 0xba
    6110:	f7ff f9b8 	bl	5484 <check_failed>

		/* Absolute prescale value */
		if (pTimeCfg->PrescaleOption == PWM_TIMER_PRESCALE_TICKVAL)
    6114:	69fb      	ldr	r3, [r7, #28]
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	2b00      	cmp	r3, #0
    611a:	d106      	bne.n	612a <PWM_Init+0xd6>
		{
			PWMx->PR   = pTimeCfg->PrescaleValue - 1;
    611c:	69fb      	ldr	r3, [r7, #28]
    611e:	685b      	ldr	r3, [r3, #4]
    6120:	f103 32ff 	add.w	r2, r3, #4294967295
    6124:	68fb      	ldr	r3, [r7, #12]
    6126:	60da      	str	r2, [r3, #12]
    6128:	e056      	b.n	61d8 <PWM_Init+0x184>
		}
		/* uSecond prescale value */
		else
		{
			clkdlycnt = (clkdlycnt * pTimeCfg->PrescaleValue) / 1000000;
    612a:	69fb      	ldr	r3, [r7, #28]
    612c:	685b      	ldr	r3, [r3, #4]
    612e:	461a      	mov	r2, r3
    6130:	f04f 0300 	mov.w	r3, #0
    6134:	6939      	ldr	r1, [r7, #16]
    6136:	fb03 f101 	mul.w	r1, r3, r1
    613a:	6978      	ldr	r0, [r7, #20]
    613c:	fb02 f000 	mul.w	r0, r2, r0
    6140:	1809      	adds	r1, r1, r0
    6142:	6938      	ldr	r0, [r7, #16]
    6144:	fba0 2302 	umull	r2, r3, r0, r2
    6148:	18c9      	adds	r1, r1, r3
    614a:	460b      	mov	r3, r1
    614c:	4610      	mov	r0, r2
    614e:	4619      	mov	r1, r3
    6150:	f44f 2274 	mov.w	r2, #999424	; 0xf4000
    6154:	f502 7210 	add.w	r2, r2, #576	; 0x240
    6158:	f04f 0300 	mov.w	r3, #0
    615c:	f003 f9f2 	bl	9544 <__aeabi_uldivmod>
    6160:	4602      	mov	r2, r0
    6162:	460b      	mov	r3, r1
    6164:	e9c7 2304 	strd	r2, r3, [r7, #16]
			PWMx->PR = ((uint32_t) clkdlycnt) - 1;
    6168:	693b      	ldr	r3, [r7, #16]
    616a:	f103 32ff 	add.w	r2, r3, #4294967295
    616e:	68fb      	ldr	r3, [r7, #12]
    6170:	60da      	str	r2, [r3, #12]
    6172:	e031      	b.n	61d8 <PWM_Init+0x184>
		}

	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    6174:	68bb      	ldr	r3, [r7, #8]
    6176:	2b01      	cmp	r3, #1
    6178:	d12e      	bne.n	61d8 <PWM_Init+0x184>
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
    617a:	69bb      	ldr	r3, [r7, #24]
    617c:	785b      	ldrb	r3, [r3, #1]
    617e:	2b00      	cmp	r3, #0
    6180:	d008      	beq.n	6194 <PWM_Init+0x140>
    6182:	69bb      	ldr	r3, [r7, #24]
    6184:	785b      	ldrb	r3, [r3, #1]
    6186:	2b01      	cmp	r3, #1
    6188:	d004      	beq.n	6194 <PWM_Init+0x140>
    618a:	4816      	ldr	r0, [pc, #88]	; (61e4 <PWM_Init+0x190>)
    618c:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    6190:	f7ff f978 	bl	5484 <check_failed>
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));
    6194:	69bb      	ldr	r3, [r7, #24]
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	2b01      	cmp	r3, #1
    619a:	d00c      	beq.n	61b6 <PWM_Init+0x162>
    619c:	69bb      	ldr	r3, [r7, #24]
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	2b02      	cmp	r3, #2
    61a2:	d008      	beq.n	61b6 <PWM_Init+0x162>
    61a4:	69bb      	ldr	r3, [r7, #24]
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	2b03      	cmp	r3, #3
    61aa:	d004      	beq.n	61b6 <PWM_Init+0x162>
    61ac:	480d      	ldr	r0, [pc, #52]	; (61e4 <PWM_Init+0x190>)
    61ae:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    61b2:	f7ff f967 	bl	5484 <check_failed>

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    61b6:	68fb      	ldr	r3, [r7, #12]
    61b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    61ba:	69bb      	ldr	r3, [r7, #24]
    61bc:	781b      	ldrb	r3, [r3, #0]
    61be:	f003 0103 	and.w	r1, r3, #3
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    61c2:	69bb      	ldr	r3, [r7, #24]
    61c4:	785b      	ldrb	r3, [r3, #1]
    61c6:	f003 0303 	and.w	r3, r3, #3
    61ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61ce:	ea41 0303 	orr.w	r3, r1, r3
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    61d2:	431a      	orrs	r2, r3
    61d4:	68fb      	ldr	r3, [r7, #12]
    61d6:	671a      	str	r2, [r3, #112]	; 0x70
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
	}
}
    61d8:	f107 0720 	add.w	r7, r7, #32
    61dc:	46bd      	mov	sp, r7
    61de:	bd80      	pop	{r7, pc}
    61e0:	40018000 	.word	0x40018000
    61e4:	0000a3a8 	.word	0x0000a3a8

000061e8 <PWM_DeInit>:
*                  default reset values.
 * @param[in]	PWMx	PWM peripheral selected, should be LPC_PWM1
 * @return 		None
 **********************************************************************/
void PWM_DeInit (LPC_PWM_TypeDef *PWMx)
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b082      	sub	sp, #8
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    61f0:	687a      	ldr	r2, [r7, #4]
    61f2:	4b0b      	ldr	r3, [pc, #44]	; (6220 <PWM_DeInit+0x38>)
    61f4:	429a      	cmp	r2, r3
    61f6:	d004      	beq.n	6202 <PWM_DeInit+0x1a>
    61f8:	480a      	ldr	r0, [pc, #40]	; (6224 <PWM_DeInit+0x3c>)
    61fa:	f04f 01db 	mov.w	r1, #219	; 0xdb
    61fe:	f7ff f941 	bl	5484 <check_failed>

	// Disable PWM control (timer, counter and PWM)
	PWMx->TCR = 0x00;
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	f04f 0200 	mov.w	r2, #0
    6208:	605a      	str	r2, [r3, #4]
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, DISABLE);
    620a:	f04f 0040 	mov.w	r0, #64	; 0x40
    620e:	f04f 0100 	mov.w	r1, #0
    6212:	f7fd fa2f 	bl	3674 <CLKPWR_ConfigPPWR>

}
    6216:	f107 0708 	add.w	r7, r7, #8
    621a:	46bd      	mov	sp, r7
    621c:	bd80      	pop	{r7, pc}
    621e:	bf00      	nop
    6220:	40018000 	.word	0x40018000
    6224:	0000a3a8 	.word	0x0000a3a8

00006228 <PWM_Cmd>:
 * 							- ENABLE: Enable PWM peripheral
 * 							- DISABLE: Disable PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_Cmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    6228:	b580      	push	{r7, lr}
    622a:	b082      	sub	sp, #8
    622c:	af00      	add	r7, sp, #0
    622e:	6078      	str	r0, [r7, #4]
    6230:	460b      	mov	r3, r1
    6232:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6234:	687a      	ldr	r2, [r7, #4]
    6236:	4b13      	ldr	r3, [pc, #76]	; (6284 <PWM_Cmd+0x5c>)
    6238:	429a      	cmp	r2, r3
    623a:	d004      	beq.n	6246 <PWM_Cmd+0x1e>
    623c:	4812      	ldr	r0, [pc, #72]	; (6288 <PWM_Cmd+0x60>)
    623e:	f04f 01ee 	mov.w	r1, #238	; 0xee
    6242:	f7ff f91f 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    6246:	78fb      	ldrb	r3, [r7, #3]
    6248:	2b00      	cmp	r3, #0
    624a:	d007      	beq.n	625c <PWM_Cmd+0x34>
    624c:	78fb      	ldrb	r3, [r7, #3]
    624e:	2b01      	cmp	r3, #1
    6250:	d004      	beq.n	625c <PWM_Cmd+0x34>
    6252:	480d      	ldr	r0, [pc, #52]	; (6288 <PWM_Cmd+0x60>)
    6254:	f04f 01ef 	mov.w	r1, #239	; 0xef
    6258:	f7ff f914 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    625c:	78fb      	ldrb	r3, [r7, #3]
    625e:	2b01      	cmp	r3, #1
    6260:	d106      	bne.n	6270 <PWM_Cmd+0x48>
	{
		PWMx->TCR	|=  PWM_TCR_PWM_ENABLE;
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	685b      	ldr	r3, [r3, #4]
    6266:	f043 0208 	orr.w	r2, r3, #8
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	605a      	str	r2, [r3, #4]
    626e:	e005      	b.n	627c <PWM_Cmd+0x54>
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_PWM_ENABLE) & PWM_TCR_BITMASK;
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	685b      	ldr	r3, [r3, #4]
    6274:	f003 0203 	and.w	r2, r3, #3
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	605a      	str	r2, [r3, #4]
	}
}
    627c:	f107 0708 	add.w	r7, r7, #8
    6280:	46bd      	mov	sp, r7
    6282:	bd80      	pop	{r7, pc}
    6284:	40018000 	.word	0x40018000
    6288:	0000a3a8 	.word	0x0000a3a8

0000628c <PWM_CounterCmd>:
 * 							- ENABLE: Enable Counter in PWM peripheral
 * 							- DISABLE: Disable Counter in PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_CounterCmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    628c:	b580      	push	{r7, lr}
    628e:	b082      	sub	sp, #8
    6290:	af00      	add	r7, sp, #0
    6292:	6078      	str	r0, [r7, #4]
    6294:	460b      	mov	r3, r1
    6296:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6298:	687a      	ldr	r2, [r7, #4]
    629a:	4b13      	ldr	r3, [pc, #76]	; (62e8 <PWM_CounterCmd+0x5c>)
    629c:	429a      	cmp	r2, r3
    629e:	d004      	beq.n	62aa <PWM_CounterCmd+0x1e>
    62a0:	4812      	ldr	r0, [pc, #72]	; (62ec <PWM_CounterCmd+0x60>)
    62a2:	f44f 7183 	mov.w	r1, #262	; 0x106
    62a6:	f7ff f8ed 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    62aa:	78fb      	ldrb	r3, [r7, #3]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d007      	beq.n	62c0 <PWM_CounterCmd+0x34>
    62b0:	78fb      	ldrb	r3, [r7, #3]
    62b2:	2b01      	cmp	r3, #1
    62b4:	d004      	beq.n	62c0 <PWM_CounterCmd+0x34>
    62b6:	480d      	ldr	r0, [pc, #52]	; (62ec <PWM_CounterCmd+0x60>)
    62b8:	f240 1107 	movw	r1, #263	; 0x107
    62bc:	f7ff f8e2 	bl	5484 <check_failed>
	if (NewState == ENABLE)
    62c0:	78fb      	ldrb	r3, [r7, #3]
    62c2:	2b01      	cmp	r3, #1
    62c4:	d106      	bne.n	62d4 <PWM_CounterCmd+0x48>
	{
		PWMx->TCR	|=  PWM_TCR_COUNTER_ENABLE;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	685b      	ldr	r3, [r3, #4]
    62ca:	f043 0201 	orr.w	r2, r3, #1
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	605a      	str	r2, [r3, #4]
    62d2:	e005      	b.n	62e0 <PWM_CounterCmd+0x54>
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_COUNTER_ENABLE) & PWM_TCR_BITMASK;
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	685b      	ldr	r3, [r3, #4]
    62d8:	f003 020a 	and.w	r2, r3, #10
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	605a      	str	r2, [r3, #4]
	}
}
    62e0:	f107 0708 	add.w	r7, r7, #8
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	40018000 	.word	0x40018000
    62ec:	0000a3a8 	.word	0x0000a3a8

000062f0 <PWM_ResetCounter>:
 * @brief 		Reset Counter in PWM peripheral
 * @param[in]	PWMx	PWM peripheral selected, should be LPC_PWM1
 * @return 		None
 **********************************************************************/
void PWM_ResetCounter(LPC_PWM_TypeDef *PWMx)
{
    62f0:	b580      	push	{r7, lr}
    62f2:	b082      	sub	sp, #8
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    62f8:	687a      	ldr	r2, [r7, #4]
    62fa:	4b0c      	ldr	r3, [pc, #48]	; (632c <PWM_ResetCounter+0x3c>)
    62fc:	429a      	cmp	r2, r3
    62fe:	d004      	beq.n	630a <PWM_ResetCounter+0x1a>
    6300:	480b      	ldr	r0, [pc, #44]	; (6330 <PWM_ResetCounter+0x40>)
    6302:	f44f 718d 	mov.w	r1, #282	; 0x11a
    6306:	f7ff f8bd 	bl	5484 <check_failed>
	PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	685b      	ldr	r3, [r3, #4]
    630e:	f043 0202 	orr.w	r2, r3, #2
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	605a      	str	r2, [r3, #4]
	PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	685b      	ldr	r3, [r3, #4]
    631a:	f003 0209 	and.w	r2, r3, #9
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	605a      	str	r2, [r3, #4]
}
    6322:	f107 0708 	add.w	r7, r7, #8
    6326:	46bd      	mov	sp, r7
    6328:	bd80      	pop	{r7, pc}
    632a:	bf00      	nop
    632c:	40018000 	.word	0x40018000
    6330:	0000a3a8 	.word	0x0000a3a8

00006334 <PWM_ConfigMatch>:
*                    that contains the configuration information for the
*                    specified PWM match function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigMatch(LPC_PWM_TypeDef *PWMx, PWM_MATCHCFG_Type *PWM_MatchConfigStruct)
{
    6334:	b580      	push	{r7, lr}
    6336:	b082      	sub	sp, #8
    6338:	af00      	add	r7, sp, #0
    633a:	6078      	str	r0, [r7, #4]
    633c:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    633e:	687a      	ldr	r2, [r7, #4]
    6340:	4b6f      	ldr	r3, [pc, #444]	; (6500 <PWM_ConfigMatch+0x1cc>)
    6342:	429a      	cmp	r2, r3
    6344:	d004      	beq.n	6350 <PWM_ConfigMatch+0x1c>
    6346:	486f      	ldr	r0, [pc, #444]	; (6504 <PWM_ConfigMatch+0x1d0>)
    6348:	f44f 7195 	mov.w	r1, #298	; 0x12a
    634c:	f7ff f89a 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(PWM_MatchConfigStruct->MatchChannel));
    6350:	683b      	ldr	r3, [r7, #0]
    6352:	781b      	ldrb	r3, [r3, #0]
    6354:	2b06      	cmp	r3, #6
    6356:	d904      	bls.n	6362 <PWM_ConfigMatch+0x2e>
    6358:	486a      	ldr	r0, [pc, #424]	; (6504 <PWM_ConfigMatch+0x1d0>)
    635a:	f240 112b 	movw	r1, #299	; 0x12b
    635e:	f7ff f891 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->IntOnMatch));
    6362:	683b      	ldr	r3, [r7, #0]
    6364:	785b      	ldrb	r3, [r3, #1]
    6366:	2b00      	cmp	r3, #0
    6368:	d008      	beq.n	637c <PWM_ConfigMatch+0x48>
    636a:	683b      	ldr	r3, [r7, #0]
    636c:	785b      	ldrb	r3, [r3, #1]
    636e:	2b01      	cmp	r3, #1
    6370:	d004      	beq.n	637c <PWM_ConfigMatch+0x48>
    6372:	4864      	ldr	r0, [pc, #400]	; (6504 <PWM_ConfigMatch+0x1d0>)
    6374:	f44f 7196 	mov.w	r1, #300	; 0x12c
    6378:	f7ff f884 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->ResetOnMatch));
    637c:	683b      	ldr	r3, [r7, #0]
    637e:	78db      	ldrb	r3, [r3, #3]
    6380:	2b00      	cmp	r3, #0
    6382:	d008      	beq.n	6396 <PWM_ConfigMatch+0x62>
    6384:	683b      	ldr	r3, [r7, #0]
    6386:	78db      	ldrb	r3, [r3, #3]
    6388:	2b01      	cmp	r3, #1
    638a:	d004      	beq.n	6396 <PWM_ConfigMatch+0x62>
    638c:	485d      	ldr	r0, [pc, #372]	; (6504 <PWM_ConfigMatch+0x1d0>)
    638e:	f240 112d 	movw	r1, #301	; 0x12d
    6392:	f7ff f877 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->StopOnMatch));
    6396:	683b      	ldr	r3, [r7, #0]
    6398:	789b      	ldrb	r3, [r3, #2]
    639a:	2b00      	cmp	r3, #0
    639c:	d008      	beq.n	63b0 <PWM_ConfigMatch+0x7c>
    639e:	683b      	ldr	r3, [r7, #0]
    63a0:	789b      	ldrb	r3, [r3, #2]
    63a2:	2b01      	cmp	r3, #1
    63a4:	d004      	beq.n	63b0 <PWM_ConfigMatch+0x7c>
    63a6:	4857      	ldr	r0, [pc, #348]	; (6504 <PWM_ConfigMatch+0x1d0>)
    63a8:	f44f 7197 	mov.w	r1, #302	; 0x12e
    63ac:	f7ff f86a 	bl	5484 <check_failed>

	//interrupt on MRn
	if (PWM_MatchConfigStruct->IntOnMatch == ENABLE)
    63b0:	683b      	ldr	r3, [r7, #0]
    63b2:	785b      	ldrb	r3, [r3, #1]
    63b4:	2b01      	cmp	r3, #1
    63b6:	d114      	bne.n	63e2 <PWM_ConfigMatch+0xae>
	{
		PWMx->MCR |= PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	695a      	ldr	r2, [r3, #20]
    63bc:	683b      	ldr	r3, [r7, #0]
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	f003 0307 	and.w	r3, r3, #7
    63c4:	ea4f 0143 	mov.w	r1, r3, lsl #1
    63c8:	683b      	ldr	r3, [r7, #0]
    63ca:	781b      	ldrb	r3, [r3, #0]
    63cc:	f003 0307 	and.w	r3, r3, #7
    63d0:	18cb      	adds	r3, r1, r3
    63d2:	f04f 0101 	mov.w	r1, #1
    63d6:	fa01 f303 	lsl.w	r3, r1, r3
    63da:	431a      	orrs	r2, r3
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	615a      	str	r2, [r3, #20]
    63e0:	e01a      	b.n	6418 <PWM_ConfigMatch+0xe4>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	695a      	ldr	r2, [r3, #20]
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	f003 0307 	and.w	r3, r3, #7
    63ee:	ea4f 0143 	mov.w	r1, r3, lsl #1
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	f003 0307 	and.w	r3, r3, #7
    63fa:	18cb      	adds	r3, r1, r3
    63fc:	f04f 0101 	mov.w	r1, #1
    6400:	fa01 f303 	lsl.w	r3, r1, r3
    6404:	ea6f 0303 	mvn.w	r3, r3
    6408:	ea02 0303 	and.w	r3, r2, r3
    640c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6410:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    6414:	687a      	ldr	r2, [r7, #4]
    6416:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}

	//reset on MRn
	if (PWM_MatchConfigStruct->ResetOnMatch == ENABLE)
    6418:	683b      	ldr	r3, [r7, #0]
    641a:	78db      	ldrb	r3, [r3, #3]
    641c:	2b01      	cmp	r3, #1
    641e:	d116      	bne.n	644e <PWM_ConfigMatch+0x11a>
	{
		PWMx->MCR |= PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	695a      	ldr	r2, [r3, #20]
    6424:	683b      	ldr	r3, [r7, #0]
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	f003 0307 	and.w	r3, r3, #7
    642c:	ea4f 0143 	mov.w	r1, r3, lsl #1
    6430:	683b      	ldr	r3, [r7, #0]
    6432:	781b      	ldrb	r3, [r3, #0]
    6434:	f003 0307 	and.w	r3, r3, #7
    6438:	18cb      	adds	r3, r1, r3
    643a:	f103 0301 	add.w	r3, r3, #1
    643e:	f04f 0101 	mov.w	r1, #1
    6442:	fa01 f303 	lsl.w	r3, r1, r3
    6446:	431a      	orrs	r2, r3
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	615a      	str	r2, [r3, #20]
    644c:	e01c      	b.n	6488 <PWM_ConfigMatch+0x154>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	695a      	ldr	r2, [r3, #20]
    6452:	683b      	ldr	r3, [r7, #0]
    6454:	781b      	ldrb	r3, [r3, #0]
    6456:	f003 0307 	and.w	r3, r3, #7
    645a:	ea4f 0143 	mov.w	r1, r3, lsl #1
    645e:	683b      	ldr	r3, [r7, #0]
    6460:	781b      	ldrb	r3, [r3, #0]
    6462:	f003 0307 	and.w	r3, r3, #7
    6466:	18cb      	adds	r3, r1, r3
    6468:	f103 0301 	add.w	r3, r3, #1
    646c:	f04f 0101 	mov.w	r1, #1
    6470:	fa01 f303 	lsl.w	r3, r1, r3
    6474:	ea6f 0303 	mvn.w	r3, r3
    6478:	ea02 0303 	and.w	r3, r2, r3
    647c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6480:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    6484:	687a      	ldr	r2, [r7, #4]
    6486:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}

	//stop on MRn
	if (PWM_MatchConfigStruct->StopOnMatch == ENABLE)
    6488:	683b      	ldr	r3, [r7, #0]
    648a:	789b      	ldrb	r3, [r3, #2]
    648c:	2b01      	cmp	r3, #1
    648e:	d116      	bne.n	64be <PWM_ConfigMatch+0x18a>
	{
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	695a      	ldr	r2, [r3, #20]
    6494:	683b      	ldr	r3, [r7, #0]
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	f003 0307 	and.w	r3, r3, #7
    649c:	ea4f 0143 	mov.w	r1, r3, lsl #1
    64a0:	683b      	ldr	r3, [r7, #0]
    64a2:	781b      	ldrb	r3, [r3, #0]
    64a4:	f003 0307 	and.w	r3, r3, #7
    64a8:	18cb      	adds	r3, r1, r3
    64aa:	f103 0302 	add.w	r3, r3, #2
    64ae:	f04f 0101 	mov.w	r1, #1
    64b2:	fa01 f303 	lsl.w	r3, r1, r3
    64b6:	431a      	orrs	r2, r3
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	615a      	str	r2, [r3, #20]
    64bc:	e01c      	b.n	64f8 <PWM_ConfigMatch+0x1c4>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	695a      	ldr	r2, [r3, #20]
    64c2:	683b      	ldr	r3, [r7, #0]
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	f003 0307 	and.w	r3, r3, #7
    64ca:	ea4f 0143 	mov.w	r1, r3, lsl #1
    64ce:	683b      	ldr	r3, [r7, #0]
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	f003 0307 	and.w	r3, r3, #7
    64d6:	18cb      	adds	r3, r1, r3
    64d8:	f103 0302 	add.w	r3, r3, #2
    64dc:	f04f 0101 	mov.w	r1, #1
    64e0:	fa01 f303 	lsl.w	r3, r1, r3
    64e4:	ea6f 0303 	mvn.w	r3, r3
    64e8:	ea02 0303 	and.w	r3, r2, r3
    64ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    64f0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    64f4:	687a      	ldr	r2, [r7, #4]
    64f6:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}
}
    64f8:	f107 0708 	add.w	r7, r7, #8
    64fc:	46bd      	mov	sp, r7
    64fe:	bd80      	pop	{r7, pc}
    6500:	40018000 	.word	0x40018000
    6504:	0000a3a8 	.word	0x0000a3a8

00006508 <PWM_ConfigCapture>:
*                    that contains the configuration information for the
*                    specified PWM capture input function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigCapture(LPC_PWM_TypeDef *PWMx, PWM_CAPTURECFG_Type *PWM_CaptureConfigStruct)
{
    6508:	b580      	push	{r7, lr}
    650a:	b082      	sub	sp, #8
    650c:	af00      	add	r7, sp, #0
    650e:	6078      	str	r0, [r7, #4]
    6510:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6512:	687a      	ldr	r2, [r7, #4]
    6514:	4b6e      	ldr	r3, [pc, #440]	; (66d0 <PWM_ConfigCapture+0x1c8>)
    6516:	429a      	cmp	r2, r3
    6518:	d004      	beq.n	6524 <PWM_ConfigCapture+0x1c>
    651a:	486e      	ldr	r0, [pc, #440]	; (66d4 <PWM_ConfigCapture+0x1cc>)
    651c:	f240 115d 	movw	r1, #349	; 0x15d
    6520:	f7fe ffb0 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(PWM_CaptureConfigStruct->CaptureChannel));
    6524:	683b      	ldr	r3, [r7, #0]
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	2b00      	cmp	r3, #0
    652a:	d008      	beq.n	653e <PWM_ConfigCapture+0x36>
    652c:	683b      	ldr	r3, [r7, #0]
    652e:	781b      	ldrb	r3, [r3, #0]
    6530:	2b01      	cmp	r3, #1
    6532:	d004      	beq.n	653e <PWM_ConfigCapture+0x36>
    6534:	4867      	ldr	r0, [pc, #412]	; (66d4 <PWM_ConfigCapture+0x1cc>)
    6536:	f44f 71af 	mov.w	r1, #350	; 0x15e
    653a:	f7fe ffa3 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->FallingEdge));
    653e:	683b      	ldr	r3, [r7, #0]
    6540:	789b      	ldrb	r3, [r3, #2]
    6542:	2b00      	cmp	r3, #0
    6544:	d008      	beq.n	6558 <PWM_ConfigCapture+0x50>
    6546:	683b      	ldr	r3, [r7, #0]
    6548:	789b      	ldrb	r3, [r3, #2]
    654a:	2b01      	cmp	r3, #1
    654c:	d004      	beq.n	6558 <PWM_ConfigCapture+0x50>
    654e:	4861      	ldr	r0, [pc, #388]	; (66d4 <PWM_ConfigCapture+0x1cc>)
    6550:	f240 115f 	movw	r1, #351	; 0x15f
    6554:	f7fe ff96 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->IntOnCaption));
    6558:	683b      	ldr	r3, [r7, #0]
    655a:	78db      	ldrb	r3, [r3, #3]
    655c:	2b00      	cmp	r3, #0
    655e:	d008      	beq.n	6572 <PWM_ConfigCapture+0x6a>
    6560:	683b      	ldr	r3, [r7, #0]
    6562:	78db      	ldrb	r3, [r3, #3]
    6564:	2b01      	cmp	r3, #1
    6566:	d004      	beq.n	6572 <PWM_ConfigCapture+0x6a>
    6568:	485a      	ldr	r0, [pc, #360]	; (66d4 <PWM_ConfigCapture+0x1cc>)
    656a:	f44f 71b0 	mov.w	r1, #352	; 0x160
    656e:	f7fe ff89 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->RisingEdge));
    6572:	683b      	ldr	r3, [r7, #0]
    6574:	785b      	ldrb	r3, [r3, #1]
    6576:	2b00      	cmp	r3, #0
    6578:	d008      	beq.n	658c <PWM_ConfigCapture+0x84>
    657a:	683b      	ldr	r3, [r7, #0]
    657c:	785b      	ldrb	r3, [r3, #1]
    657e:	2b01      	cmp	r3, #1
    6580:	d004      	beq.n	658c <PWM_ConfigCapture+0x84>
    6582:	4854      	ldr	r0, [pc, #336]	; (66d4 <PWM_ConfigCapture+0x1cc>)
    6584:	f240 1161 	movw	r1, #353	; 0x161
    6588:	f7fe ff7c 	bl	5484 <check_failed>

	if (PWM_CaptureConfigStruct->RisingEdge == ENABLE)
    658c:	683b      	ldr	r3, [r7, #0]
    658e:	785b      	ldrb	r3, [r3, #1]
    6590:	2b01      	cmp	r3, #1
    6592:	d114      	bne.n	65be <PWM_ConfigCapture+0xb6>
	{
		PWMx->CCR |= PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel);
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6598:	683b      	ldr	r3, [r7, #0]
    659a:	781b      	ldrb	r3, [r3, #0]
    659c:	f003 0302 	and.w	r3, r3, #2
    65a0:	ea4f 0143 	mov.w	r1, r3, lsl #1
    65a4:	683b      	ldr	r3, [r7, #0]
    65a6:	781b      	ldrb	r3, [r3, #0]
    65a8:	f003 0301 	and.w	r3, r3, #1
    65ac:	18cb      	adds	r3, r1, r3
    65ae:	f04f 0101 	mov.w	r1, #1
    65b2:	fa01 f303 	lsl.w	r3, r1, r3
    65b6:	431a      	orrs	r2, r3
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	629a      	str	r2, [r3, #40]	; 0x28
    65bc:	e018      	b.n	65f0 <PWM_ConfigCapture+0xe8>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel)) \
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    65c2:	683b      	ldr	r3, [r7, #0]
    65c4:	781b      	ldrb	r3, [r3, #0]
    65c6:	f003 0302 	and.w	r3, r3, #2
    65ca:	ea4f 0143 	mov.w	r1, r3, lsl #1
    65ce:	683b      	ldr	r3, [r7, #0]
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	f003 0301 	and.w	r3, r3, #1
    65d6:	18cb      	adds	r3, r1, r3
    65d8:	f04f 0101 	mov.w	r1, #1
    65dc:	fa01 f303 	lsl.w	r3, r1, r3
    65e0:	ea6f 0303 	mvn.w	r3, r3
    65e4:	ea02 0303 	and.w	r3, r2, r3
    65e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    65ec:	687b      	ldr	r3, [r7, #4]
    65ee:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->FallingEdge == ENABLE)
    65f0:	683b      	ldr	r3, [r7, #0]
    65f2:	789b      	ldrb	r3, [r3, #2]
    65f4:	2b01      	cmp	r3, #1
    65f6:	d116      	bne.n	6626 <PWM_ConfigCapture+0x11e>
	{
		PWMx->CCR |= PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel);
    65f8:	687b      	ldr	r3, [r7, #4]
    65fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    65fc:	683b      	ldr	r3, [r7, #0]
    65fe:	781b      	ldrb	r3, [r3, #0]
    6600:	f003 0302 	and.w	r3, r3, #2
    6604:	ea4f 0143 	mov.w	r1, r3, lsl #1
    6608:	683b      	ldr	r3, [r7, #0]
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	f003 0301 	and.w	r3, r3, #1
    6610:	18cb      	adds	r3, r1, r3
    6612:	f103 0301 	add.w	r3, r3, #1
    6616:	f04f 0101 	mov.w	r1, #1
    661a:	fa01 f303 	lsl.w	r3, r1, r3
    661e:	431a      	orrs	r2, r3
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	629a      	str	r2, [r3, #40]	; 0x28
    6624:	e01a      	b.n	665c <PWM_ConfigCapture+0x154>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel)) \
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    662a:	683b      	ldr	r3, [r7, #0]
    662c:	781b      	ldrb	r3, [r3, #0]
    662e:	f003 0302 	and.w	r3, r3, #2
    6632:	ea4f 0143 	mov.w	r1, r3, lsl #1
    6636:	683b      	ldr	r3, [r7, #0]
    6638:	781b      	ldrb	r3, [r3, #0]
    663a:	f003 0301 	and.w	r3, r3, #1
    663e:	18cb      	adds	r3, r1, r3
    6640:	f103 0301 	add.w	r3, r3, #1
    6644:	f04f 0101 	mov.w	r1, #1
    6648:	fa01 f303 	lsl.w	r3, r1, r3
    664c:	ea6f 0303 	mvn.w	r3, r3
    6650:	ea02 0303 	and.w	r3, r2, r3
    6654:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->IntOnCaption == ENABLE)
    665c:	683b      	ldr	r3, [r7, #0]
    665e:	78db      	ldrb	r3, [r3, #3]
    6660:	2b01      	cmp	r3, #1
    6662:	d116      	bne.n	6692 <PWM_ConfigCapture+0x18a>
	{
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6668:	683b      	ldr	r3, [r7, #0]
    666a:	781b      	ldrb	r3, [r3, #0]
    666c:	f003 0302 	and.w	r3, r3, #2
    6670:	ea4f 0143 	mov.w	r1, r3, lsl #1
    6674:	683b      	ldr	r3, [r7, #0]
    6676:	781b      	ldrb	r3, [r3, #0]
    6678:	f003 0301 	and.w	r3, r3, #1
    667c:	18cb      	adds	r3, r1, r3
    667e:	f103 0302 	add.w	r3, r3, #2
    6682:	f04f 0101 	mov.w	r1, #1
    6686:	fa01 f303 	lsl.w	r3, r1, r3
    668a:	431a      	orrs	r2, r3
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	629a      	str	r2, [r3, #40]	; 0x28
    6690:	e01a      	b.n	66c8 <PWM_ConfigCapture+0x1c0>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel)) \
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6696:	683b      	ldr	r3, [r7, #0]
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	f003 0302 	and.w	r3, r3, #2
    669e:	ea4f 0143 	mov.w	r1, r3, lsl #1
    66a2:	683b      	ldr	r3, [r7, #0]
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	f003 0301 	and.w	r3, r3, #1
    66aa:	18cb      	adds	r3, r1, r3
    66ac:	f103 0302 	add.w	r3, r3, #2
    66b0:	f04f 0101 	mov.w	r1, #1
    66b4:	fa01 f303 	lsl.w	r3, r1, r3
    66b8:	ea6f 0303 	mvn.w	r3, r3
    66bc:	ea02 0303 	and.w	r3, r2, r3
    66c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    66c4:	687b      	ldr	r3, [r7, #4]
    66c6:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}
}
    66c8:	f107 0708 	add.w	r7, r7, #8
    66cc:	46bd      	mov	sp, r7
    66ce:	bd80      	pop	{r7, pc}
    66d0:	40018000 	.word	0x40018000
    66d4:	0000a3a8 	.word	0x0000a3a8

000066d8 <PWM_GetCaptureValue>:
 * @param[in]	CaptureChannel: capture channel number, should be in
 * 				range 0 to 1
 * @return 		Value of capture register
 **********************************************************************/
uint32_t PWM_GetCaptureValue(LPC_PWM_TypeDef *PWMx, uint8_t CaptureChannel)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b082      	sub	sp, #8
    66dc:	af00      	add	r7, sp, #0
    66de:	6078      	str	r0, [r7, #4]
    66e0:	460b      	mov	r3, r1
    66e2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    66e4:	687a      	ldr	r2, [r7, #4]
    66e6:	4b13      	ldr	r3, [pc, #76]	; (6734 <PWM_GetCaptureValue+0x5c>)
    66e8:	429a      	cmp	r2, r3
    66ea:	d004      	beq.n	66f6 <PWM_GetCaptureValue+0x1e>
    66ec:	4812      	ldr	r0, [pc, #72]	; (6738 <PWM_GetCaptureValue+0x60>)
    66ee:	f44f 71c6 	mov.w	r1, #396	; 0x18c
    66f2:	f7fe fec7 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(CaptureChannel));
    66f6:	78fb      	ldrb	r3, [r7, #3]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d007      	beq.n	670c <PWM_GetCaptureValue+0x34>
    66fc:	78fb      	ldrb	r3, [r7, #3]
    66fe:	2b01      	cmp	r3, #1
    6700:	d004      	beq.n	670c <PWM_GetCaptureValue+0x34>
    6702:	480d      	ldr	r0, [pc, #52]	; (6738 <PWM_GetCaptureValue+0x60>)
    6704:	f240 118d 	movw	r1, #397	; 0x18d
    6708:	f7fe febc 	bl	5484 <check_failed>

	switch (CaptureChannel)
    670c:	78fb      	ldrb	r3, [r7, #3]
    670e:	2b00      	cmp	r3, #0
    6710:	d002      	beq.n	6718 <PWM_GetCaptureValue+0x40>
    6712:	2b01      	cmp	r3, #1
    6714:	d003      	beq.n	671e <PWM_GetCaptureValue+0x46>
    6716:	e005      	b.n	6724 <PWM_GetCaptureValue+0x4c>
	{
	case 0:
		return PWMx->CR0;
    6718:	687b      	ldr	r3, [r7, #4]
    671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    671c:	e004      	b.n	6728 <PWM_GetCaptureValue+0x50>

	case 1:
		return PWMx->CR1;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6722:	e001      	b.n	6728 <PWM_GetCaptureValue+0x50>

	default:
		return (0);
    6724:	f04f 0300 	mov.w	r3, #0
	}
}
    6728:	4618      	mov	r0, r3
    672a:	f107 0708 	add.w	r7, r7, #8
    672e:	46bd      	mov	sp, r7
    6730:	bd80      	pop	{r7, pc}
    6732:	bf00      	nop
    6734:	40018000 	.word	0x40018000
    6738:	0000a3a8 	.word	0x0000a3a8

0000673c <PWM_MatchUpdate>:
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MatchUpdate(LPC_PWM_TypeDef *PWMx, uint8_t MatchChannel, \
					uint32_t MatchValue, uint8_t UpdateType)
{
    673c:	b580      	push	{r7, lr}
    673e:	b084      	sub	sp, #16
    6740:	af00      	add	r7, sp, #0
    6742:	60f8      	str	r0, [r7, #12]
    6744:	607a      	str	r2, [r7, #4]
    6746:	460a      	mov	r2, r1
    6748:	72fa      	strb	r2, [r7, #11]
    674a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    674c:	68fa      	ldr	r2, [r7, #12]
    674e:	4b37      	ldr	r3, [pc, #220]	; (682c <PWM_MatchUpdate+0xf0>)
    6750:	429a      	cmp	r2, r3
    6752:	d004      	beq.n	675e <PWM_MatchUpdate+0x22>
    6754:	4836      	ldr	r0, [pc, #216]	; (6830 <PWM_MatchUpdate+0xf4>)
    6756:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    675a:	f7fe fe93 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(MatchChannel));
    675e:	7afb      	ldrb	r3, [r7, #11]
    6760:	2b06      	cmp	r3, #6
    6762:	d904      	bls.n	676e <PWM_MatchUpdate+0x32>
    6764:	4832      	ldr	r0, [pc, #200]	; (6830 <PWM_MatchUpdate+0xf4>)
    6766:	f240 11ad 	movw	r1, #429	; 0x1ad
    676a:	f7fe fe8b 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));
    676e:	78fb      	ldrb	r3, [r7, #3]
    6770:	2b00      	cmp	r3, #0
    6772:	d007      	beq.n	6784 <PWM_MatchUpdate+0x48>
    6774:	78fb      	ldrb	r3, [r7, #3]
    6776:	2b01      	cmp	r3, #1
    6778:	d004      	beq.n	6784 <PWM_MatchUpdate+0x48>
    677a:	482d      	ldr	r0, [pc, #180]	; (6830 <PWM_MatchUpdate+0xf4>)
    677c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6780:	f7fe fe80 	bl	5484 <check_failed>

	switch (MatchChannel)
    6784:	7afb      	ldrb	r3, [r7, #11]
    6786:	2b06      	cmp	r3, #6
    6788:	d82c      	bhi.n	67e4 <PWM_MatchUpdate+0xa8>
    678a:	a201      	add	r2, pc, #4	; (adr r2, 6790 <PWM_MatchUpdate+0x54>)
    678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6790:	000067ad 	.word	0x000067ad
    6794:	000067b5 	.word	0x000067b5
    6798:	000067bd 	.word	0x000067bd
    679c:	000067c5 	.word	0x000067c5
    67a0:	000067cd 	.word	0x000067cd
    67a4:	000067d5 	.word	0x000067d5
    67a8:	000067dd 	.word	0x000067dd
	{
	case 0:
		PWMx->MR0 = MatchValue;
    67ac:	68fb      	ldr	r3, [r7, #12]
    67ae:	687a      	ldr	r2, [r7, #4]
    67b0:	619a      	str	r2, [r3, #24]
		break;
    67b2:	e017      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 1:
		PWMx->MR1 = MatchValue;
    67b4:	68fb      	ldr	r3, [r7, #12]
    67b6:	687a      	ldr	r2, [r7, #4]
    67b8:	61da      	str	r2, [r3, #28]
		break;
    67ba:	e013      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 2:
		PWMx->MR2 = MatchValue;
    67bc:	68fb      	ldr	r3, [r7, #12]
    67be:	687a      	ldr	r2, [r7, #4]
    67c0:	621a      	str	r2, [r3, #32]
		break;
    67c2:	e00f      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 3:
		PWMx->MR3 = MatchValue;
    67c4:	68fb      	ldr	r3, [r7, #12]
    67c6:	687a      	ldr	r2, [r7, #4]
    67c8:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    67ca:	e00b      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 4:
		PWMx->MR4 = MatchValue;
    67cc:	68fb      	ldr	r3, [r7, #12]
    67ce:	687a      	ldr	r2, [r7, #4]
    67d0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
    67d2:	e007      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 5:
		PWMx->MR5 = MatchValue;
    67d4:	68fb      	ldr	r3, [r7, #12]
    67d6:	687a      	ldr	r2, [r7, #4]
    67d8:	645a      	str	r2, [r3, #68]	; 0x44
		break;
    67da:	e003      	b.n	67e4 <PWM_MatchUpdate+0xa8>

	case 6:
		PWMx->MR6 = MatchValue;
    67dc:	68fb      	ldr	r3, [r7, #12]
    67de:	687a      	ldr	r2, [r7, #4]
    67e0:	649a      	str	r2, [r3, #72]	; 0x48
		break;
    67e2:	bf00      	nop
	}

	// Write Latch register
	PWMx->LER |= PWM_LER_EN_MATCHn_LATCH(MatchChannel);
    67e4:	68fb      	ldr	r3, [r7, #12]
    67e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    67e8:	7afb      	ldrb	r3, [r7, #11]
    67ea:	2b06      	cmp	r3, #6
    67ec:	d805      	bhi.n	67fa <PWM_MatchUpdate+0xbe>
    67ee:	7afb      	ldrb	r3, [r7, #11]
    67f0:	f04f 0101 	mov.w	r1, #1
    67f4:	fa01 f303 	lsl.w	r3, r1, r3
    67f8:	e001      	b.n	67fe <PWM_MatchUpdate+0xc2>
    67fa:	f04f 0300 	mov.w	r3, #0
    67fe:	431a      	orrs	r2, r3
    6800:	68fb      	ldr	r3, [r7, #12]
    6802:	651a      	str	r2, [r3, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    6804:	78fb      	ldrb	r3, [r7, #3]
    6806:	2b00      	cmp	r3, #0
    6808:	d10b      	bne.n	6822 <PWM_MatchUpdate+0xe6>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    680a:	68fb      	ldr	r3, [r7, #12]
    680c:	685b      	ldr	r3, [r3, #4]
    680e:	f043 0202 	orr.w	r2, r3, #2
    6812:	68fb      	ldr	r3, [r7, #12]
    6814:	605a      	str	r2, [r3, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    6816:	68fb      	ldr	r3, [r7, #12]
    6818:	685b      	ldr	r3, [r3, #4]
    681a:	f003 0209 	and.w	r2, r3, #9
    681e:	68fb      	ldr	r3, [r7, #12]
    6820:	605a      	str	r2, [r3, #4]
	}
}
    6822:	f107 0710 	add.w	r7, r7, #16
    6826:	46bd      	mov	sp, r7
    6828:	bd80      	pop	{r7, pc}
    682a:	bf00      	nop
    682c:	40018000 	.word	0x40018000
    6830:	0000a3a8 	.word	0x0000a3a8

00006834 <PWM_MultiMatchUpdate>:
 * 				- PWM_MATCH_UPDATE_NEXT_RST: The update value will be updated for
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MultiMatchUpdate(LPC_PWM_TypeDef *PWMx, PWM_Match_T *MatchStruct , uint8_t UpdateType)
{
    6834:	b580      	push	{r7, lr}
    6836:	b086      	sub	sp, #24
    6838:	af00      	add	r7, sp, #0
    683a:	60f8      	str	r0, [r7, #12]
    683c:	60b9      	str	r1, [r7, #8]
    683e:	4613      	mov	r3, r2
    6840:	71fb      	strb	r3, [r7, #7]
	uint8_t LatchValue = 0;
    6842:	f04f 0300 	mov.w	r3, #0
    6846:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	CHECK_PARAM(PARAM_PWMx(PWMx));
    6848:	68fa      	ldr	r2, [r7, #12]
    684a:	4b34      	ldr	r3, [pc, #208]	; (691c <PWM_MultiMatchUpdate+0xe8>)
    684c:	429a      	cmp	r2, r3
    684e:	d004      	beq.n	685a <PWM_MultiMatchUpdate+0x26>
    6850:	4833      	ldr	r0, [pc, #204]	; (6920 <PWM_MultiMatchUpdate+0xec>)
    6852:	f240 11eb 	movw	r1, #491	; 0x1eb
    6856:	f7fe fe15 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));
    685a:	79fb      	ldrb	r3, [r7, #7]
    685c:	2b00      	cmp	r3, #0
    685e:	d007      	beq.n	6870 <PWM_MultiMatchUpdate+0x3c>
    6860:	79fb      	ldrb	r3, [r7, #7]
    6862:	2b01      	cmp	r3, #1
    6864:	d004      	beq.n	6870 <PWM_MultiMatchUpdate+0x3c>
    6866:	482e      	ldr	r0, [pc, #184]	; (6920 <PWM_MultiMatchUpdate+0xec>)
    6868:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    686c:	f7fe fe0a 	bl	5484 <check_failed>

	//Update match value
	for(i=0;i<7;i++)
    6870:	f04f 0300 	mov.w	r3, #0
    6874:	75bb      	strb	r3, [r7, #22]
    6876:	e038      	b.n	68ea <PWM_MultiMatchUpdate+0xb6>
	{
		if(MatchStruct[i].Status == SET)
    6878:	7dbb      	ldrb	r3, [r7, #22]
    687a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    687e:	68ba      	ldr	r2, [r7, #8]
    6880:	18d3      	adds	r3, r2, r3
    6882:	791b      	ldrb	r3, [r3, #4]
    6884:	2b01      	cmp	r3, #1
    6886:	d12c      	bne.n	68e2 <PWM_MultiMatchUpdate+0xae>
		{
			if(i<4)
    6888:	7dbb      	ldrb	r3, [r7, #22]
    688a:	2b03      	cmp	r3, #3
    688c:	d80e      	bhi.n	68ac <PWM_MultiMatchUpdate+0x78>
				*((volatile unsigned int *)(&(PWMx->MR0) + i)) = MatchStruct[i].Matchvalue;
    688e:	68fb      	ldr	r3, [r7, #12]
    6890:	f103 0218 	add.w	r2, r3, #24
    6894:	7dbb      	ldrb	r3, [r7, #22]
    6896:	ea4f 0383 	mov.w	r3, r3, lsl #2
    689a:	18d3      	adds	r3, r2, r3
    689c:	7dba      	ldrb	r2, [r7, #22]
    689e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    68a2:	68b9      	ldr	r1, [r7, #8]
    68a4:	188a      	adds	r2, r1, r2
    68a6:	6812      	ldr	r2, [r2, #0]
    68a8:	601a      	str	r2, [r3, #0]
    68aa:	e00f      	b.n	68cc <PWM_MultiMatchUpdate+0x98>
			else
			{
				*((volatile unsigned int *)(&(PWMx->MR4) + (i-4))) = MatchStruct[i].Matchvalue;
    68ac:	68fb      	ldr	r3, [r7, #12]
    68ae:	f103 0240 	add.w	r2, r3, #64	; 0x40
    68b2:	7dbb      	ldrb	r3, [r7, #22]
    68b4:	f1a3 0304 	sub.w	r3, r3, #4
    68b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68bc:	18d3      	adds	r3, r2, r3
    68be:	7dba      	ldrb	r2, [r7, #22]
    68c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    68c4:	68b9      	ldr	r1, [r7, #8]
    68c6:	188a      	adds	r2, r1, r2
    68c8:	6812      	ldr	r2, [r2, #0]
    68ca:	601a      	str	r2, [r3, #0]
			}
			LatchValue |=(1<<i);
    68cc:	7dbb      	ldrb	r3, [r7, #22]
    68ce:	f04f 0201 	mov.w	r2, #1
    68d2:	fa02 f303 	lsl.w	r3, r2, r3
    68d6:	b2da      	uxtb	r2, r3
    68d8:	7dfb      	ldrb	r3, [r7, #23]
    68da:	ea42 0303 	orr.w	r3, r2, r3
    68de:	b2db      	uxtb	r3, r3
    68e0:	75fb      	strb	r3, [r7, #23]

	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));

	//Update match value
	for(i=0;i<7;i++)
    68e2:	7dbb      	ldrb	r3, [r7, #22]
    68e4:	f103 0301 	add.w	r3, r3, #1
    68e8:	75bb      	strb	r3, [r7, #22]
    68ea:	7dbb      	ldrb	r3, [r7, #22]
    68ec:	2b06      	cmp	r3, #6
    68ee:	d9c3      	bls.n	6878 <PWM_MultiMatchUpdate+0x44>
			}
			LatchValue |=(1<<i);
		}
	}
	//set update for multi-channel at the same time
	PWMx->LER = LatchValue;
    68f0:	7dfa      	ldrb	r2, [r7, #23]
    68f2:	68fb      	ldr	r3, [r7, #12]
    68f4:	651a      	str	r2, [r3, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    68f6:	79fb      	ldrb	r3, [r7, #7]
    68f8:	2b00      	cmp	r3, #0
    68fa:	d10b      	bne.n	6914 <PWM_MultiMatchUpdate+0xe0>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    68fc:	68fb      	ldr	r3, [r7, #12]
    68fe:	685b      	ldr	r3, [r3, #4]
    6900:	f043 0202 	orr.w	r2, r3, #2
    6904:	68fb      	ldr	r3, [r7, #12]
    6906:	605a      	str	r2, [r3, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    6908:	68fb      	ldr	r3, [r7, #12]
    690a:	685b      	ldr	r3, [r3, #4]
    690c:	f003 0209 	and.w	r2, r3, #9
    6910:	68fb      	ldr	r3, [r7, #12]
    6912:	605a      	str	r2, [r3, #4]
	}
}
    6914:	f107 0718 	add.w	r7, r7, #24
    6918:	46bd      	mov	sp, r7
    691a:	bd80      	pop	{r7, pc}
    691c:	40018000 	.word	0x40018000
    6920:	0000a3a8 	.word	0x0000a3a8

00006924 <PWM_ChannelConfig>:
 * 				- PWM_CHANNEL_DUAL_EDGE: Dual Edge mode
 * @return 		None
 * Note: PWM Channel 1 can not be selected for mode option
 *********************************************************************/
void PWM_ChannelConfig(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, uint8_t ModeOption)
{
    6924:	b580      	push	{r7, lr}
    6926:	b082      	sub	sp, #8
    6928:	af00      	add	r7, sp, #0
    692a:	6078      	str	r0, [r7, #4]
    692c:	4613      	mov	r3, r2
    692e:	460a      	mov	r2, r1
    6930:	70fa      	strb	r2, [r7, #3]
    6932:	70bb      	strb	r3, [r7, #2]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6934:	687a      	ldr	r2, [r7, #4]
    6936:	4b28      	ldr	r3, [pc, #160]	; (69d8 <PWM_ChannelConfig+0xb4>)
    6938:	429a      	cmp	r2, r3
    693a:	d004      	beq.n	6946 <PWM_ChannelConfig+0x22>
    693c:	4827      	ldr	r0, [pc, #156]	; (69dc <PWM_ChannelConfig+0xb8>)
    693e:	f240 2112 	movw	r1, #530	; 0x212
    6942:	f7fe fd9f 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_EDGE_MODE_CHANNEL(PWMChannel));
    6946:	78fb      	ldrb	r3, [r7, #3]
    6948:	2b01      	cmp	r3, #1
    694a:	d902      	bls.n	6952 <PWM_ChannelConfig+0x2e>
    694c:	78fb      	ldrb	r3, [r7, #3]
    694e:	2b06      	cmp	r3, #6
    6950:	d904      	bls.n	695c <PWM_ChannelConfig+0x38>
    6952:	4822      	ldr	r0, [pc, #136]	; (69dc <PWM_ChannelConfig+0xb8>)
    6954:	f240 2113 	movw	r1, #531	; 0x213
    6958:	f7fe fd94 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM_CHANNEL_EDGE(ModeOption));
    695c:	78bb      	ldrb	r3, [r7, #2]
    695e:	2b00      	cmp	r3, #0
    6960:	d007      	beq.n	6972 <PWM_ChannelConfig+0x4e>
    6962:	78bb      	ldrb	r3, [r7, #2]
    6964:	2b01      	cmp	r3, #1
    6966:	d004      	beq.n	6972 <PWM_ChannelConfig+0x4e>
    6968:	481c      	ldr	r0, [pc, #112]	; (69dc <PWM_ChannelConfig+0xb8>)
    696a:	f44f 7105 	mov.w	r1, #532	; 0x214
    696e:	f7fe fd89 	bl	5484 <check_failed>

	// Single edge mode
	if (ModeOption == PWM_CHANNEL_SINGLE_EDGE)
    6972:	78bb      	ldrb	r3, [r7, #2]
    6974:	2b00      	cmp	r3, #0
    6976:	d118      	bne.n	69aa <PWM_ChannelConfig+0x86>
	{
		PWMx->PCR &= (~PWM_PCR_PWMSELn(PWMChannel)) & PWM_PCR_BITMASK;
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    697c:	78fb      	ldrb	r3, [r7, #3]
    697e:	f003 0307 	and.w	r3, r3, #7
    6982:	2b01      	cmp	r3, #1
    6984:	dd0b      	ble.n	699e <PWM_ChannelConfig+0x7a>
    6986:	78fb      	ldrb	r3, [r7, #3]
    6988:	f04f 0101 	mov.w	r1, #1
    698c:	fa01 f303 	lsl.w	r3, r1, r3
    6990:	ea6f 0103 	mvn.w	r1, r3
    6994:	f647 637c 	movw	r3, #32380	; 0x7e7c
    6998:	ea01 0303 	and.w	r3, r1, r3
    699c:	e001      	b.n	69a2 <PWM_ChannelConfig+0x7e>
    699e:	f647 637c 	movw	r3, #32380	; 0x7e7c
    69a2:	401a      	ands	r2, r3
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	64da      	str	r2, [r3, #76]	; 0x4c
    69a8:	e011      	b.n	69ce <PWM_ChannelConfig+0xaa>
	}
	// Double edge mode
	else if (PWM_CHANNEL_DUAL_EDGE)
	{
		PWMx->PCR |= PWM_PCR_PWMSELn(PWMChannel);
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    69ae:	78fb      	ldrb	r3, [r7, #3]
    69b0:	f003 0307 	and.w	r3, r3, #7
    69b4:	2b01      	cmp	r3, #1
    69b6:	dd05      	ble.n	69c4 <PWM_ChannelConfig+0xa0>
    69b8:	78fb      	ldrb	r3, [r7, #3]
    69ba:	f04f 0101 	mov.w	r1, #1
    69be:	fa01 f303 	lsl.w	r3, r1, r3
    69c2:	e001      	b.n	69c8 <PWM_ChannelConfig+0xa4>
    69c4:	f04f 0300 	mov.w	r3, #0
    69c8:	431a      	orrs	r2, r3
    69ca:	687b      	ldr	r3, [r7, #4]
    69cc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
    69ce:	f107 0708 	add.w	r7, r7, #8
    69d2:	46bd      	mov	sp, r7
    69d4:	bd80      	pop	{r7, pc}
    69d6:	bf00      	nop
    69d8:	40018000 	.word	0x40018000
    69dc:	0000a3a8 	.word	0x0000a3a8

000069e0 <PWM_ChannelCmd>:
 * 				- ENABLE: Enable this PWM channel output
 * 				- DISABLE: Disable this PWM channel output
 * @return		None
 *********************************************************************/
void PWM_ChannelCmd(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, FunctionalState NewState)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	b082      	sub	sp, #8
    69e4:	af00      	add	r7, sp, #0
    69e6:	6078      	str	r0, [r7, #4]
    69e8:	4613      	mov	r3, r2
    69ea:	460a      	mov	r2, r1
    69ec:	70fa      	strb	r2, [r7, #3]
    69ee:	70bb      	strb	r3, [r7, #2]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    69f0:	687a      	ldr	r2, [r7, #4]
    69f2:	4b24      	ldr	r3, [pc, #144]	; (6a84 <PWM_ChannelCmd+0xa4>)
    69f4:	429a      	cmp	r2, r3
    69f6:	d004      	beq.n	6a02 <PWM_ChannelCmd+0x22>
    69f8:	4823      	ldr	r0, [pc, #140]	; (6a88 <PWM_ChannelCmd+0xa8>)
    69fa:	f240 212f 	movw	r1, #559	; 0x22f
    69fe:	f7fe fd41 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CHANNEL(PWMChannel));
    6a02:	78fb      	ldrb	r3, [r7, #3]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d002      	beq.n	6a0e <PWM_ChannelCmd+0x2e>
    6a08:	78fb      	ldrb	r3, [r7, #3]
    6a0a:	2b06      	cmp	r3, #6
    6a0c:	d904      	bls.n	6a18 <PWM_ChannelCmd+0x38>
    6a0e:	481e      	ldr	r0, [pc, #120]	; (6a88 <PWM_ChannelCmd+0xa8>)
    6a10:	f44f 710c 	mov.w	r1, #560	; 0x230
    6a14:	f7fe fd36 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    6a18:	78bb      	ldrb	r3, [r7, #2]
    6a1a:	2b01      	cmp	r3, #1
    6a1c:	d114      	bne.n	6a48 <PWM_ChannelCmd+0x68>
	{
		PWMx->PCR |= PWM_PCR_PWMENAn(PWMChannel);
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    6a22:	78fb      	ldrb	r3, [r7, #3]
    6a24:	f003 0307 	and.w	r3, r3, #7
    6a28:	2b00      	cmp	r3, #0
    6a2a:	dd07      	ble.n	6a3c <PWM_ChannelCmd+0x5c>
    6a2c:	78fb      	ldrb	r3, [r7, #3]
    6a2e:	f103 0308 	add.w	r3, r3, #8
    6a32:	f04f 0101 	mov.w	r1, #1
    6a36:	fa01 f303 	lsl.w	r3, r1, r3
    6a3a:	e001      	b.n	6a40 <PWM_ChannelCmd+0x60>
    6a3c:	f04f 0300 	mov.w	r3, #0
    6a40:	431a      	orrs	r2, r3
    6a42:	687b      	ldr	r3, [r7, #4]
    6a44:	64da      	str	r2, [r3, #76]	; 0x4c
    6a46:	e019      	b.n	6a7c <PWM_ChannelCmd+0x9c>
	}
	else
	{
		PWMx->PCR &= (~PWM_PCR_PWMENAn(PWMChannel)) & PWM_PCR_BITMASK;
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    6a4c:	78fb      	ldrb	r3, [r7, #3]
    6a4e:	f003 0307 	and.w	r3, r3, #7
    6a52:	2b00      	cmp	r3, #0
    6a54:	dd0d      	ble.n	6a72 <PWM_ChannelCmd+0x92>
    6a56:	78fb      	ldrb	r3, [r7, #3]
    6a58:	f103 0308 	add.w	r3, r3, #8
    6a5c:	f04f 0101 	mov.w	r1, #1
    6a60:	fa01 f303 	lsl.w	r3, r1, r3
    6a64:	ea6f 0103 	mvn.w	r1, r3
    6a68:	f647 637c 	movw	r3, #32380	; 0x7e7c
    6a6c:	ea01 0303 	and.w	r3, r1, r3
    6a70:	e001      	b.n	6a76 <PWM_ChannelCmd+0x96>
    6a72:	f647 637c 	movw	r3, #32380	; 0x7e7c
    6a76:	401a      	ands	r2, r3
    6a78:	687b      	ldr	r3, [r7, #4]
    6a7a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
    6a7c:	f107 0708 	add.w	r7, r7, #8
    6a80:	46bd      	mov	sp, r7
    6a82:	bd80      	pop	{r7, pc}
    6a84:	40018000 	.word	0x40018000
    6a88:	0000a3a8 	.word	0x0000a3a8

00006a8c <SPI_SetClock>:
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b086      	sub	sp, #24
    6a90:	af00      	add	r7, sp, #0
    6a92:	6078      	str	r0, [r7, #4]
    6a94:	6039      	str	r1, [r7, #0]
	uint32_t spi_pclk;
	uint32_t prescale, temp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    6a96:	687a      	ldr	r2, [r7, #4]
    6a98:	4b19      	ldr	r3, [pc, #100]	; (6b00 <SPI_SetClock+0x74>)
    6a9a:	429a      	cmp	r2, r3
    6a9c:	d004      	beq.n	6aa8 <SPI_SetClock+0x1c>
    6a9e:	4819      	ldr	r0, [pc, #100]	; (6b04 <SPI_SetClock+0x78>)
    6aa0:	f04f 0140 	mov.w	r1, #64	; 0x40
    6aa4:	f7fe fcee 	bl	5484 <check_failed>

	if (SPIx == LPC_SPI){
    6aa8:	687a      	ldr	r2, [r7, #4]
    6aaa:	4b15      	ldr	r3, [pc, #84]	; (6b00 <SPI_SetClock+0x74>)
    6aac:	429a      	cmp	r2, r3
    6aae:	d121      	bne.n	6af4 <SPI_SetClock+0x68>
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
    6ab0:	f04f 0010 	mov.w	r0, #16
    6ab4:	f7fc fda6 	bl	3604 <CLKPWR_GetPCLK>
    6ab8:	6138      	str	r0, [r7, #16]
	} else {
		return;
	}

	prescale = 8;
    6aba:	f04f 0308 	mov.w	r3, #8
    6abe:	617b      	str	r3, [r7, #20]
    6ac0:	e000      	b.n	6ac4 <SPI_SetClock+0x38>
		}
		prescale += 2;
		if(prescale >= 254){
			break;
		}
	}
    6ac2:	bf00      	nop
	}

	prescale = 8;
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
    6ac4:	683b      	ldr	r3, [r7, #0]
    6ac6:	697a      	ldr	r2, [r7, #20]
    6ac8:	fb02 f303 	mul.w	r3, r2, r3
    6acc:	60fb      	str	r3, [r7, #12]
		if (temp >= spi_pclk){
    6ace:	68fa      	ldr	r2, [r7, #12]
    6ad0:	693b      	ldr	r3, [r7, #16]
    6ad2:	429a      	cmp	r2, r3
    6ad4:	d207      	bcs.n	6ae6 <SPI_SetClock+0x5a>
			break;
		}
		prescale += 2;
    6ad6:	697b      	ldr	r3, [r7, #20]
    6ad8:	f103 0302 	add.w	r3, r3, #2
    6adc:	617b      	str	r3, [r7, #20]
		if(prescale >= 254){
    6ade:	697b      	ldr	r3, [r7, #20]
    6ae0:	2bfd      	cmp	r3, #253	; 0xfd
    6ae2:	d9ee      	bls.n	6ac2 <SPI_SetClock+0x36>
			break;
    6ae4:	e000      	b.n	6ae8 <SPI_SetClock+0x5c>
	prescale = 8;
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
		if (temp >= spi_pclk){
			break;
    6ae6:	bf00      	nop
			break;
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
    6ae8:	697b      	ldr	r3, [r7, #20]
    6aea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	60da      	str	r2, [r3, #12]
    6af2:	e000      	b.n	6af6 <SPI_SetClock+0x6a>
	CHECK_PARAM(PARAM_SPIx(SPIx));

	if (SPIx == LPC_SPI){
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
	} else {
		return;
    6af4:	bf00      	nop
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
}
    6af6:	f107 0718 	add.w	r7, r7, #24
    6afa:	46bd      	mov	sp, r7
    6afc:	bd80      	pop	{r7, pc}
    6afe:	bf00      	nop
    6b00:	40020000 	.word	0x40020000
    6b04:	0000a3d4 	.word	0x0000a3d4

00006b08 <SPI_DeInit>:
*                  default reset values.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		None
 **********************************************************************/
void SPI_DeInit(LPC_SPI_TypeDef *SPIx)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	b082      	sub	sp, #8
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6b10:	687a      	ldr	r2, [r7, #4]
    6b12:	4b0b      	ldr	r3, [pc, #44]	; (6b40 <SPI_DeInit+0x38>)
    6b14:	429a      	cmp	r2, r3
    6b16:	d004      	beq.n	6b22 <SPI_DeInit+0x1a>
    6b18:	480a      	ldr	r0, [pc, #40]	; (6b44 <SPI_DeInit+0x3c>)
    6b1a:	f04f 0162 	mov.w	r1, #98	; 0x62
    6b1e:	f7fe fcb1 	bl	5484 <check_failed>

	if (SPIx == LPC_SPI){
    6b22:	687a      	ldr	r2, [r7, #4]
    6b24:	4b06      	ldr	r3, [pc, #24]	; (6b40 <SPI_DeInit+0x38>)
    6b26:	429a      	cmp	r2, r3
    6b28:	d105      	bne.n	6b36 <SPI_DeInit+0x2e>
		/* Set up clock and power for SPI module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, DISABLE);
    6b2a:	f44f 7080 	mov.w	r0, #256	; 0x100
    6b2e:	f04f 0100 	mov.w	r1, #0
    6b32:	f7fc fd9f 	bl	3674 <CLKPWR_ConfigPPWR>
	}
}
    6b36:	f107 0708 	add.w	r7, r7, #8
    6b3a:	46bd      	mov	sp, r7
    6b3c:	bd80      	pop	{r7, pc}
    6b3e:	bf00      	nop
    6b40:	40020000 	.word	0x40020000
    6b44:	0000a3d4 	.word	0x0000a3d4

00006b48 <SPI_GetDataSize>:
 * @brief		Get data bit size per transfer
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		number of bit per transfer, could be 8-16
 **********************************************************************/
uint8_t SPI_GetDataSize (LPC_SPI_TypeDef *SPIx)
{
    6b48:	b580      	push	{r7, lr}
    6b4a:	b082      	sub	sp, #8
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6b50:	687a      	ldr	r2, [r7, #4]
    6b52:	4b0a      	ldr	r3, [pc, #40]	; (6b7c <SPI_GetDataSize+0x34>)
    6b54:	429a      	cmp	r2, r3
    6b56:	d004      	beq.n	6b62 <SPI_GetDataSize+0x1a>
    6b58:	4809      	ldr	r0, [pc, #36]	; (6b80 <SPI_GetDataSize+0x38>)
    6b5a:	f04f 0171 	mov.w	r1, #113	; 0x71
    6b5e:	f7fe fc91 	bl	5484 <check_failed>
	return ((SPIx->SPCR)>>8 & 0xF);
    6b62:	687b      	ldr	r3, [r7, #4]
    6b64:	681b      	ldr	r3, [r3, #0]
    6b66:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6b6a:	b2db      	uxtb	r3, r3
    6b6c:	f003 030f 	and.w	r3, r3, #15
    6b70:	b2db      	uxtb	r3, r3
}
    6b72:	4618      	mov	r0, r3
    6b74:	f107 0708 	add.w	r7, r7, #8
    6b78:	46bd      	mov	sp, r7
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	40020000 	.word	0x40020000
    6b80:	0000a3d4 	.word	0x0000a3d4

00006b84 <SPI_Init>:
*                    that contains the configuration information for the
*                    specified SPI peripheral.
 * @return 		None
 *********************************************************************/
void SPI_Init(LPC_SPI_TypeDef *SPIx, SPI_CFG_Type *SPI_ConfigStruct)
{
    6b84:	b580      	push	{r7, lr}
    6b86:	b084      	sub	sp, #16
    6b88:	af00      	add	r7, sp, #0
    6b8a:	6078      	str	r0, [r7, #4]
    6b8c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    6b8e:	687a      	ldr	r2, [r7, #4]
    6b90:	4b20      	ldr	r3, [pc, #128]	; (6c14 <SPI_Init+0x90>)
    6b92:	429a      	cmp	r2, r3
    6b94:	d004      	beq.n	6ba0 <SPI_Init+0x1c>
    6b96:	4820      	ldr	r0, [pc, #128]	; (6c18 <SPI_Init+0x94>)
    6b98:	f04f 0182 	mov.w	r1, #130	; 0x82
    6b9c:	f7fe fc72 	bl	5484 <check_failed>

	if(SPIx == LPC_SPI){
    6ba0:	687a      	ldr	r2, [r7, #4]
    6ba2:	4b1c      	ldr	r3, [pc, #112]	; (6c14 <SPI_Init+0x90>)
    6ba4:	429a      	cmp	r2, r3
    6ba6:	d12f      	bne.n	6c08 <SPI_Init+0x84>
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
    6ba8:	f44f 7080 	mov.w	r0, #256	; 0x100
    6bac:	f04f 0101 	mov.w	r1, #1
    6bb0:	f7fc fd60 	bl	3674 <CLKPWR_ConfigPPWR>
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    6bb4:	683b      	ldr	r3, [r7, #0]
    6bb6:	685a      	ldr	r2, [r3, #4]
    6bb8:	683b      	ldr	r3, [r7, #0]
    6bba:	689b      	ldr	r3, [r3, #8]
    6bbc:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
    6bbe:	683b      	ldr	r3, [r7, #0]
    6bc0:	691b      	ldr	r3, [r3, #16]
    6bc2:	431a      	orrs	r2, r3
    6bc4:	683b      	ldr	r3, [r7, #0]
    6bc6:	681b      	ldr	r3, [r3, #0]
    6bc8:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
    6bca:	683b      	ldr	r3, [r7, #0]
    6bcc:	68db      	ldr	r3, [r3, #12]
    6bce:	431a      	orrs	r2, r3
    6bd0:	f640 73f8 	movw	r3, #4088	; 0xff8
    6bd4:	ea02 0303 	and.w	r3, r2, r3
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    6bd8:	f043 0304 	orr.w	r3, r3, #4
    6bdc:	60fb      	str	r3, [r7, #12]
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
	// write back to SPI control register
	SPIx->SPCR = tmp;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	68fa      	ldr	r2, [r7, #12]
    6be2:	601a      	str	r2, [r3, #0]

	// Set clock rate for SPI peripheral
	SPI_SetClock(SPIx, SPI_ConfigStruct->ClockRate);
    6be4:	683b      	ldr	r3, [r7, #0]
    6be6:	695b      	ldr	r3, [r3, #20]
    6be8:	6878      	ldr	r0, [r7, #4]
    6bea:	4619      	mov	r1, r3
    6bec:	f7ff ff4e 	bl	6a8c <SPI_SetClock>

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	69db      	ldr	r3, [r3, #28]
    6bf4:	f003 0301 	and.w	r3, r3, #1
    6bf8:	b2db      	uxtb	r3, r3
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	d005      	beq.n	6c0a <SPI_Init+0x86>
		SPIx->SPINT = SPI_SPINT_INTFLAG;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	f04f 0201 	mov.w	r2, #1
    6c04:	61da      	str	r2, [r3, #28]
    6c06:	e000      	b.n	6c0a <SPI_Init+0x86>

	if(SPIx == LPC_SPI){
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
	} else {
		return;
    6c08:	bf00      	nop

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
		SPIx->SPINT = SPI_SPINT_INTFLAG;
	}
}
    6c0a:	f107 0710 	add.w	r7, r7, #16
    6c0e:	46bd      	mov	sp, r7
    6c10:	bd80      	pop	{r7, pc}
    6c12:	bf00      	nop
    6c14:	40020000 	.word	0x40020000
    6c18:	0000a3d4 	.word	0x0000a3d4

00006c1c <SPI_ConfigStructInit>:
* @param[in]	SPI_InitStruct Pointer to a SPI_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SPI_ConfigStructInit(SPI_CFG_Type *SPI_InitStruct)
{
    6c1c:	b480      	push	{r7}
    6c1e:	b083      	sub	sp, #12
    6c20:	af00      	add	r7, sp, #0
    6c22:	6078      	str	r0, [r7, #4]
	SPI_InitStruct->CPHA = SPI_CPHA_FIRST;
    6c24:	687b      	ldr	r3, [r7, #4]
    6c26:	f04f 0200 	mov.w	r2, #0
    6c2a:	605a      	str	r2, [r3, #4]
	SPI_InitStruct->CPOL = SPI_CPOL_HI;
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	f04f 0200 	mov.w	r2, #0
    6c32:	609a      	str	r2, [r3, #8]
	SPI_InitStruct->ClockRate = 1000000;
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	4a09      	ldr	r2, [pc, #36]	; (6c5c <SPI_ConfigStructInit+0x40>)
    6c38:	615a      	str	r2, [r3, #20]
	SPI_InitStruct->DataOrder = SPI_DATA_MSB_FIRST;
    6c3a:	687b      	ldr	r3, [r7, #4]
    6c3c:	f04f 0200 	mov.w	r2, #0
    6c40:	611a      	str	r2, [r3, #16]
	SPI_InitStruct->Databit = SPI_DATABIT_8;
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6c48:	601a      	str	r2, [r3, #0]
	SPI_InitStruct->Mode = SPI_MASTER_MODE;
    6c4a:	687b      	ldr	r3, [r7, #4]
    6c4c:	f04f 0220 	mov.w	r2, #32
    6c50:	60da      	str	r2, [r3, #12]
}
    6c52:	f107 070c 	add.w	r7, r7, #12
    6c56:	46bd      	mov	sp, r7
    6c58:	bc80      	pop	{r7}
    6c5a:	4770      	bx	lr
    6c5c:	000f4240 	.word	0x000f4240

00006c60 <SPI_SendData>:
 * @param[in]	Data	Data to transmit (must be 16 or 8-bit long,
 * 						this depend on SPI data bit number configured)
 * @return 		none
 **********************************************************************/
void SPI_SendData(LPC_SPI_TypeDef* SPIx, uint16_t Data)
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b082      	sub	sp, #8
    6c64:	af00      	add	r7, sp, #0
    6c66:	6078      	str	r0, [r7, #4]
    6c68:	460b      	mov	r3, r1
    6c6a:	807b      	strh	r3, [r7, #2]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6c6c:	687a      	ldr	r2, [r7, #4]
    6c6e:	4b07      	ldr	r3, [pc, #28]	; (6c8c <SPI_SendData+0x2c>)
    6c70:	429a      	cmp	r2, r3
    6c72:	d004      	beq.n	6c7e <SPI_SendData+0x1e>
    6c74:	4806      	ldr	r0, [pc, #24]	; (6c90 <SPI_SendData+0x30>)
    6c76:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    6c7a:	f7fe fc03 	bl	5484 <check_failed>

	SPIx->SPDR = Data & SPI_SPDR_BITMASK;
    6c7e:	887a      	ldrh	r2, [r7, #2]
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	609a      	str	r2, [r3, #8]
}
    6c84:	f107 0708 	add.w	r7, r7, #8
    6c88:	46bd      	mov	sp, r7
    6c8a:	bd80      	pop	{r7, pc}
    6c8c:	40020000 	.word	0x40020000
    6c90:	0000a3d4 	.word	0x0000a3d4

00006c94 <SPI_ReceiveData>:
 * @brief		Receive a single data from SPIx peripheral
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		Data received (16-bit long)
 **********************************************************************/
uint16_t SPI_ReceiveData(LPC_SPI_TypeDef* SPIx)
{
    6c94:	b580      	push	{r7, lr}
    6c96:	b082      	sub	sp, #8
    6c98:	af00      	add	r7, sp, #0
    6c9a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6c9c:	687a      	ldr	r2, [r7, #4]
    6c9e:	4b08      	ldr	r3, [pc, #32]	; (6cc0 <SPI_ReceiveData+0x2c>)
    6ca0:	429a      	cmp	r2, r3
    6ca2:	d004      	beq.n	6cae <SPI_ReceiveData+0x1a>
    6ca4:	4807      	ldr	r0, [pc, #28]	; (6cc4 <SPI_ReceiveData+0x30>)
    6ca6:	f04f 01ca 	mov.w	r1, #202	; 0xca
    6caa:	f7fe fbeb 	bl	5484 <check_failed>

	return ((uint16_t) (SPIx->SPDR & SPI_SPDR_BITMASK));
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	689b      	ldr	r3, [r3, #8]
    6cb2:	b29b      	uxth	r3, r3
}
    6cb4:	4618      	mov	r0, r3
    6cb6:	f107 0708 	add.w	r7, r7, #8
    6cba:	46bd      	mov	sp, r7
    6cbc:	bd80      	pop	{r7, pc}
    6cbe:	bf00      	nop
    6cc0:	40020000 	.word	0x40020000
    6cc4:	0000a3d4 	.word	0x0000a3d4

00006cc8 <SPI_ReadWrite>:
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SPI_ReadWrite (LPC_SPI_TypeDef *SPIx, SPI_DATA_SETUP_Type *dataCfg, \
						SPI_TRANSFER_Type xfType)
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b08c      	sub	sp, #48	; 0x30
    6ccc:	af00      	add	r7, sp, #0
    6cce:	60f8      	str	r0, [r7, #12]
    6cd0:	60b9      	str	r1, [r7, #8]
    6cd2:	4613      	mov	r3, r2
    6cd4:	71fb      	strb	r3, [r7, #7]
    uint32_t stat;
    uint32_t temp;
    uint8_t dataword;

	//read for empty buffer
	temp = SPIx->SPDR;
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	689b      	ldr	r3, [r3, #8]
    6cda:	617b      	str	r3, [r7, #20]
	//dummy to clear status
	temp = SPIx->SPSR;
    6cdc:	68fb      	ldr	r3, [r7, #12]
    6cde:	685b      	ldr	r3, [r3, #4]
    6ce0:	617b      	str	r3, [r7, #20]
	dataCfg->counter = 0;
    6ce2:	68bb      	ldr	r3, [r7, #8]
    6ce4:	f04f 0200 	mov.w	r2, #0
    6ce8:	60da      	str	r2, [r3, #12]
	dataCfg->status = 0;
    6cea:	68bb      	ldr	r3, [r7, #8]
    6cec:	f04f 0200 	mov.w	r2, #0
    6cf0:	611a      	str	r2, [r3, #16]

	if(SPI_GetDataSize (SPIx) == 8)
    6cf2:	68f8      	ldr	r0, [r7, #12]
    6cf4:	f7ff ff28 	bl	6b48 <SPI_GetDataSize>
    6cf8:	4603      	mov	r3, r0
    6cfa:	2b08      	cmp	r3, #8
    6cfc:	d103      	bne.n	6d06 <SPI_ReadWrite+0x3e>
		dataword = 0;
    6cfe:	f04f 0300 	mov.w	r3, #0
    6d02:	76fb      	strb	r3, [r7, #27]
    6d04:	e002      	b.n	6d0c <SPI_ReadWrite+0x44>
	else dataword = 1;
    6d06:	f04f 0301 	mov.w	r3, #1
    6d0a:	76fb      	strb	r3, [r7, #27]
	if (xfType == SPI_TRANSFER_POLLING){
    6d0c:	79fb      	ldrb	r3, [r7, #7]
    6d0e:	2b00      	cmp	r3, #0
    6d10:	f040 808d 	bne.w	6e2e <SPI_ReadWrite+0x166>

		if (dataword == 0){
    6d14:	7efb      	ldrb	r3, [r7, #27]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d106      	bne.n	6d28 <SPI_ReadWrite+0x60>
			rdata8 = (uint8_t *)dataCfg->rx_data;
    6d1a:	68bb      	ldr	r3, [r7, #8]
    6d1c:	685b      	ldr	r3, [r3, #4]
    6d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			wdata8 = (uint8_t *)dataCfg->tx_data;
    6d20:	68bb      	ldr	r3, [r7, #8]
    6d22:	681b      	ldr	r3, [r3, #0]
    6d24:	62bb      	str	r3, [r7, #40]	; 0x28
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    6d26:	e074      	b.n	6e12 <SPI_ReadWrite+0x14a>

		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    6d28:	68bb      	ldr	r3, [r7, #8]
    6d2a:	685b      	ldr	r3, [r3, #4]
    6d2c:	627b      	str	r3, [r7, #36]	; 0x24
			wdata16 = (uint16_t *)dataCfg->tx_data;
    6d2e:	68bb      	ldr	r3, [r7, #8]
    6d30:	681b      	ldr	r3, [r3, #0]
    6d32:	623b      	str	r3, [r7, #32]
		}

		while(dataCfg->counter < dataCfg->length)
    6d34:	e06d      	b.n	6e12 <SPI_ReadWrite+0x14a>
		{
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    6d36:	68bb      	ldr	r3, [r7, #8]
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d10e      	bne.n	6d5c <SPI_ReadWrite+0x94>
				if (dataword == 0){
    6d3e:	7efb      	ldrb	r3, [r7, #27]
    6d40:	2b00      	cmp	r3, #0
    6d42:	d105      	bne.n	6d50 <SPI_ReadWrite+0x88>
					SPI_SendData(SPIx, 0xFF);
    6d44:	68f8      	ldr	r0, [r7, #12]
    6d46:	f04f 01ff 	mov.w	r1, #255	; 0xff
    6d4a:	f7ff ff89 	bl	6c60 <SPI_SendData>
					SPI_SendData(SPIx, *wdata16);
					wdata16++;
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    6d4e:	e01e      	b.n	6d8e <SPI_ReadWrite+0xc6>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
				if (dataword == 0){
					SPI_SendData(SPIx, 0xFF);
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    6d50:	68f8      	ldr	r0, [r7, #12]
    6d52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d56:	f7ff ff83 	bl	6c60 <SPI_SendData>
					SPI_SendData(SPIx, *wdata16);
					wdata16++;
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    6d5a:	e018      	b.n	6d8e <SPI_ReadWrite+0xc6>
					SPI_SendData(SPIx, 0xFF);
				} else {
					SPI_SendData(SPIx, 0xFFFF);
				}
			} else {
				if (dataword == 0){
    6d5c:	7efb      	ldrb	r3, [r7, #27]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d10a      	bne.n	6d78 <SPI_ReadWrite+0xb0>
					SPI_SendData(SPIx, *wdata8);
    6d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6d64:	781b      	ldrb	r3, [r3, #0]
    6d66:	68f8      	ldr	r0, [r7, #12]
    6d68:	4619      	mov	r1, r3
    6d6a:	f7ff ff79 	bl	6c60 <SPI_SendData>
					wdata8++;
    6d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6d70:	f103 0301 	add.w	r3, r3, #1
    6d74:	62bb      	str	r3, [r7, #40]	; 0x28
					SPI_SendData(SPIx, *wdata16);
					wdata16++;
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    6d76:	e00a      	b.n	6d8e <SPI_ReadWrite+0xc6>
			} else {
				if (dataword == 0){
					SPI_SendData(SPIx, *wdata8);
					wdata8++;
				} else {
					SPI_SendData(SPIx, *wdata16);
    6d78:	6a3b      	ldr	r3, [r7, #32]
    6d7a:	881b      	ldrh	r3, [r3, #0]
    6d7c:	68f8      	ldr	r0, [r7, #12]
    6d7e:	4619      	mov	r1, r3
    6d80:	f7ff ff6e 	bl	6c60 <SPI_SendData>
					wdata16++;
    6d84:	6a3b      	ldr	r3, [r7, #32]
    6d86:	f103 0302 	add.w	r3, r3, #2
    6d8a:	623b      	str	r3, [r7, #32]
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    6d8c:	bf00      	nop
    6d8e:	68fb      	ldr	r3, [r7, #12]
    6d90:	685b      	ldr	r3, [r3, #4]
    6d92:	61fb      	str	r3, [r7, #28]
    6d94:	69fb      	ldr	r3, [r7, #28]
    6d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d0f7      	beq.n	6d8e <SPI_ReadWrite+0xc6>
			// Check for error
			if (stat & (SPI_SPSR_ABRT | SPI_SPSR_MODF | SPI_SPSR_ROVR | SPI_SPSR_WCOL)){
    6d9e:	69fb      	ldr	r3, [r7, #28]
    6da0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    6da4:	2b00      	cmp	r3, #0
    6da6:	d007      	beq.n	6db8 <SPI_ReadWrite+0xf0>
				// save status
				dataCfg->status = stat | SPI_STAT_ERROR;
    6da8:	69fb      	ldr	r3, [r7, #28]
    6daa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    6dae:	68bb      	ldr	r3, [r7, #8]
    6db0:	611a      	str	r2, [r3, #16]
				return (dataCfg->counter);
    6db2:	68bb      	ldr	r3, [r7, #8]
    6db4:	68db      	ldr	r3, [r3, #12]
    6db6:	e07c      	b.n	6eb2 <SPI_ReadWrite+0x1ea>
			}
			// Read data from SPI dat
			temp = (uint32_t) SPI_ReceiveData(SPIx);
    6db8:	68f8      	ldr	r0, [r7, #12]
    6dba:	f7ff ff6b 	bl	6c94 <SPI_ReceiveData>
    6dbe:	4603      	mov	r3, r0
    6dc0:	617b      	str	r3, [r7, #20]

			// Store data to destination
			if (dataCfg->rx_data != NULL)
    6dc2:	68bb      	ldr	r3, [r7, #8]
    6dc4:	685b      	ldr	r3, [r3, #4]
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d013      	beq.n	6df2 <SPI_ReadWrite+0x12a>
			{
				if (dataword == 0){
    6dca:	7efb      	ldrb	r3, [r7, #27]
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d108      	bne.n	6de2 <SPI_ReadWrite+0x11a>
					*(rdata8) = (uint8_t) temp;
    6dd0:	697b      	ldr	r3, [r7, #20]
    6dd2:	b2da      	uxtb	r2, r3
    6dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dd6:	701a      	strb	r2, [r3, #0]
					rdata8++;
    6dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dda:	f103 0301 	add.w	r3, r3, #1
    6dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    6de0:	e007      	b.n	6df2 <SPI_ReadWrite+0x12a>
				} else {
					*(rdata16) = (uint16_t) temp;
    6de2:	697b      	ldr	r3, [r7, #20]
    6de4:	b29a      	uxth	r2, r3
    6de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6de8:	801a      	strh	r2, [r3, #0]
					rdata16++;
    6dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6dec:	f103 0302 	add.w	r3, r3, #2
    6df0:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
			// Increase counter
			if (dataword == 0){
    6df2:	7efb      	ldrb	r3, [r7, #27]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d106      	bne.n	6e06 <SPI_ReadWrite+0x13e>
				dataCfg->counter++;
    6df8:	68bb      	ldr	r3, [r7, #8]
    6dfa:	68db      	ldr	r3, [r3, #12]
    6dfc:	f103 0201 	add.w	r2, r3, #1
    6e00:	68bb      	ldr	r3, [r7, #8]
    6e02:	60da      	str	r2, [r3, #12]
    6e04:	e005      	b.n	6e12 <SPI_ReadWrite+0x14a>
			} else {
				dataCfg->counter += 2;
    6e06:	68bb      	ldr	r3, [r7, #8]
    6e08:	68db      	ldr	r3, [r3, #12]
    6e0a:	f103 0202 	add.w	r2, r3, #2
    6e0e:	68bb      	ldr	r3, [r7, #8]
    6e10:	60da      	str	r2, [r3, #12]
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    6e12:	68bb      	ldr	r3, [r7, #8]
    6e14:	68da      	ldr	r2, [r3, #12]
    6e16:	68bb      	ldr	r3, [r7, #8]
    6e18:	689b      	ldr	r3, [r3, #8]
    6e1a:	429a      	cmp	r2, r3
    6e1c:	d38b      	bcc.n	6d36 <SPI_ReadWrite+0x6e>
			}
		}

		// Return length of actual data transferred
		// save status
		dataCfg->status = stat | SPI_STAT_DONE;
    6e1e:	69fb      	ldr	r3, [r7, #28]
    6e20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6e24:	68bb      	ldr	r3, [r7, #8]
    6e26:	611a      	str	r2, [r3, #16]
		return (dataCfg->counter);
    6e28:	68bb      	ldr	r3, [r7, #8]
    6e2a:	68db      	ldr	r3, [r3, #12]
    6e2c:	e041      	b.n	6eb2 <SPI_ReadWrite+0x1ea>
	}
	// Interrupt mode
	else {

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
    6e2e:	68fb      	ldr	r3, [r7, #12]
    6e30:	69db      	ldr	r3, [r3, #28]
    6e32:	f003 0301 	and.w	r3, r3, #1
    6e36:	b2db      	uxtb	r3, r3
    6e38:	2b00      	cmp	r3, #0
    6e3a:	d003      	beq.n	6e44 <SPI_ReadWrite+0x17c>
			SPIx->SPINT = SPI_SPINT_INTFLAG;
    6e3c:	68fb      	ldr	r3, [r7, #12]
    6e3e:	f04f 0201 	mov.w	r2, #1
    6e42:	61da      	str	r2, [r3, #28]
		}
		if (dataCfg->counter < dataCfg->length){
    6e44:	68bb      	ldr	r3, [r7, #8]
    6e46:	68da      	ldr	r2, [r3, #12]
    6e48:	68bb      	ldr	r3, [r7, #8]
    6e4a:	689b      	ldr	r3, [r3, #8]
    6e4c:	429a      	cmp	r2, r3
    6e4e:	d22a      	bcs.n	6ea6 <SPI_ReadWrite+0x1de>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    6e50:	68bb      	ldr	r3, [r7, #8]
    6e52:	681b      	ldr	r3, [r3, #0]
    6e54:	2b00      	cmp	r3, #0
    6e56:	d10e      	bne.n	6e76 <SPI_ReadWrite+0x1ae>
				if (dataword == 0){
    6e58:	7efb      	ldrb	r3, [r7, #27]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d105      	bne.n	6e6a <SPI_ReadWrite+0x1a2>
					SPI_SendData(SPIx, 0xFF);
    6e5e:	68f8      	ldr	r0, [r7, #12]
    6e60:	f04f 01ff 	mov.w	r1, #255	; 0xff
    6e64:	f7ff fefc 	bl	6c60 <SPI_SendData>
    6e68:	e017      	b.n	6e9a <SPI_ReadWrite+0x1d2>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    6e6a:	68f8      	ldr	r0, [r7, #12]
    6e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e70:	f7ff fef6 	bl	6c60 <SPI_SendData>
    6e74:	e011      	b.n	6e9a <SPI_ReadWrite+0x1d2>
				}
			} else {
				if (dataword == 0){
    6e76:	7efb      	ldrb	r3, [r7, #27]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	d107      	bne.n	6e8c <SPI_ReadWrite+0x1c4>
					SPI_SendData(SPIx, (*(uint8_t *)dataCfg->tx_data));
    6e7c:	68bb      	ldr	r3, [r7, #8]
    6e7e:	681b      	ldr	r3, [r3, #0]
    6e80:	781b      	ldrb	r3, [r3, #0]
    6e82:	68f8      	ldr	r0, [r7, #12]
    6e84:	4619      	mov	r1, r3
    6e86:	f7ff feeb 	bl	6c60 <SPI_SendData>
    6e8a:	e006      	b.n	6e9a <SPI_ReadWrite+0x1d2>
				} else {
					SPI_SendData(SPIx, (*(uint16_t *)dataCfg->tx_data));
    6e8c:	68bb      	ldr	r3, [r7, #8]
    6e8e:	681b      	ldr	r3, [r3, #0]
    6e90:	881b      	ldrh	r3, [r3, #0]
    6e92:	68f8      	ldr	r0, [r7, #12]
    6e94:	4619      	mov	r1, r3
    6e96:	f7ff fee3 	bl	6c60 <SPI_SendData>
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
    6e9a:	68f8      	ldr	r0, [r7, #12]
    6e9c:	f04f 0101 	mov.w	r1, #1
    6ea0:	f000 f80c 	bl	6ebc <SPI_IntCmd>
    6ea4:	e003      	b.n	6eae <SPI_ReadWrite+0x1e6>
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
    6ea6:	68bb      	ldr	r3, [r7, #8]
    6ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
    6eac:	611a      	str	r2, [r3, #16]
		}
		return (0);
    6eae:	f04f 0300 	mov.w	r3, #0
	}
}
    6eb2:	4618      	mov	r0, r3
    6eb4:	f107 0730 	add.w	r7, r7, #48	; 0x30
    6eb8:	46bd      	mov	sp, r7
    6eba:	bd80      	pop	{r7, pc}

00006ebc <SPI_IntCmd>:
 * 				- ENALBE: Enable this SPI interrupt.
* 				- DISALBE: Disable this SPI interrupt.
 * @return 		None
 *********************************************************************/
void SPI_IntCmd(LPC_SPI_TypeDef *SPIx, FunctionalState NewState)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b082      	sub	sp, #8
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	6078      	str	r0, [r7, #4]
    6ec4:	460b      	mov	r3, r1
    6ec6:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6ec8:	687a      	ldr	r2, [r7, #4]
    6eca:	4b14      	ldr	r3, [pc, #80]	; (6f1c <SPI_IntCmd+0x60>)
    6ecc:	429a      	cmp	r2, r3
    6ece:	d004      	beq.n	6eda <SPI_IntCmd+0x1e>
    6ed0:	4813      	ldr	r0, [pc, #76]	; (6f20 <SPI_IntCmd+0x64>)
    6ed2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    6ed6:	f7fe fad5 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    6eda:	78fb      	ldrb	r3, [r7, #3]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d007      	beq.n	6ef0 <SPI_IntCmd+0x34>
    6ee0:	78fb      	ldrb	r3, [r7, #3]
    6ee2:	2b01      	cmp	r3, #1
    6ee4:	d004      	beq.n	6ef0 <SPI_IntCmd+0x34>
    6ee6:	480e      	ldr	r0, [pc, #56]	; (6f20 <SPI_IntCmd+0x64>)
    6ee8:	f240 115d 	movw	r1, #349	; 0x15d
    6eec:	f7fe faca 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    6ef0:	78fb      	ldrb	r3, [r7, #3]
    6ef2:	2b01      	cmp	r3, #1
    6ef4:	d106      	bne.n	6f04 <SPI_IntCmd+0x48>
	{
		SPIx->SPCR |= SPI_SPCR_SPIE;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	681b      	ldr	r3, [r3, #0]
    6efa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    6efe:	687b      	ldr	r3, [r7, #4]
    6f00:	601a      	str	r2, [r3, #0]
    6f02:	e007      	b.n	6f14 <SPI_IntCmd+0x58>
	}
	else
	{
		SPIx->SPCR &= (~SPI_SPCR_SPIE) & SPI_SPCR_BITMASK;
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	681a      	ldr	r2, [r3, #0]
    6f08:	f640 737c 	movw	r3, #3964	; 0xf7c
    6f0c:	ea02 0303 	and.w	r3, r2, r3
    6f10:	687a      	ldr	r2, [r7, #4]
    6f12:	6013      	str	r3, [r2, #0]
	}
}
    6f14:	f107 0708 	add.w	r7, r7, #8
    6f18:	46bd      	mov	sp, r7
    6f1a:	bd80      	pop	{r7, pc}
    6f1c:	40020000 	.word	0x40020000
    6f20:	0000a3d4 	.word	0x0000a3d4

00006f24 <SPI_GetIntStatus>:
 * @brief 		Checks whether the SPI interrupt flag is set or not.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		The new state of SPI Interrupt Flag (SET or RESET)
 *********************************************************************/
IntStatus SPI_GetIntStatus (LPC_SPI_TypeDef *SPIx)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b082      	sub	sp, #8
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6f2c:	687a      	ldr	r2, [r7, #4]
    6f2e:	4b09      	ldr	r3, [pc, #36]	; (6f54 <SPI_GetIntStatus+0x30>)
    6f30:	429a      	cmp	r2, r3
    6f32:	d004      	beq.n	6f3e <SPI_GetIntStatus+0x1a>
    6f34:	4808      	ldr	r0, [pc, #32]	; (6f58 <SPI_GetIntStatus+0x34>)
    6f36:	f240 1171 	movw	r1, #369	; 0x171
    6f3a:	f7fe faa3 	bl	5484 <check_failed>

	return ((SPIx->SPINT & SPI_SPINT_INTFLAG) ? SET : RESET);
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	69db      	ldr	r3, [r3, #28]
    6f42:	b2db      	uxtb	r3, r3
    6f44:	f003 0301 	and.w	r3, r3, #1
    6f48:	b2db      	uxtb	r3, r3
}
    6f4a:	4618      	mov	r0, r3
    6f4c:	f107 0708 	add.w	r7, r7, #8
    6f50:	46bd      	mov	sp, r7
    6f52:	bd80      	pop	{r7, pc}
    6f54:	40020000 	.word	0x40020000
    6f58:	0000a3d4 	.word	0x0000a3d4

00006f5c <SPI_ClearIntPending>:
 * @brief 		Clear SPI interrupt flag.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		None
 *********************************************************************/
void SPI_ClearIntPending(LPC_SPI_TypeDef *SPIx)
{
    6f5c:	b580      	push	{r7, lr}
    6f5e:	b082      	sub	sp, #8
    6f60:	af00      	add	r7, sp, #0
    6f62:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6f64:	687a      	ldr	r2, [r7, #4]
    6f66:	4b08      	ldr	r3, [pc, #32]	; (6f88 <SPI_ClearIntPending+0x2c>)
    6f68:	429a      	cmp	r2, r3
    6f6a:	d004      	beq.n	6f76 <SPI_ClearIntPending+0x1a>
    6f6c:	4807      	ldr	r0, [pc, #28]	; (6f8c <SPI_ClearIntPending+0x30>)
    6f6e:	f240 117d 	movw	r1, #381	; 0x17d
    6f72:	f7fe fa87 	bl	5484 <check_failed>

	SPIx->SPINT = SPI_SPINT_INTFLAG;
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	f04f 0201 	mov.w	r2, #1
    6f7c:	61da      	str	r2, [r3, #28]
}
    6f7e:	f107 0708 	add.w	r7, r7, #8
    6f82:	46bd      	mov	sp, r7
    6f84:	bd80      	pop	{r7, pc}
    6f86:	bf00      	nop
    6f88:	40020000 	.word	0x40020000
    6f8c:	0000a3d4 	.word	0x0000a3d4

00006f90 <SPI_GetStatus>:
 * 			SPI Status register could not be correct. So this function used to
 * 			read SPI status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint32_t SPI_GetStatus(LPC_SPI_TypeDef* SPIx)
{
    6f90:	b580      	push	{r7, lr}
    6f92:	b082      	sub	sp, #8
    6f94:	af00      	add	r7, sp, #0
    6f96:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    6f98:	687a      	ldr	r2, [r7, #4]
    6f9a:	4b08      	ldr	r3, [pc, #32]	; (6fbc <SPI_GetStatus+0x2c>)
    6f9c:	429a      	cmp	r2, r3
    6f9e:	d004      	beq.n	6faa <SPI_GetStatus+0x1a>
    6fa0:	4807      	ldr	r0, [pc, #28]	; (6fc0 <SPI_GetStatus+0x30>)
    6fa2:	f44f 71c8 	mov.w	r1, #400	; 0x190
    6fa6:	f7fe fa6d 	bl	5484 <check_failed>

	return (SPIx->SPSR & SPI_SPSR_BITMASK);
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	685b      	ldr	r3, [r3, #4]
    6fae:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    6fb2:	4618      	mov	r0, r3
    6fb4:	f107 0708 	add.w	r7, r7, #8
    6fb8:	46bd      	mov	sp, r7
    6fba:	bd80      	pop	{r7, pc}
    6fbc:	40020000 	.word	0x40020000
    6fc0:	0000a3d4 	.word	0x0000a3d4

00006fc4 <SPI_CheckStatus>:
				- SPI_STAT_WCOL: Write collision.
				- SPI_STAT_SPIF: SPI transfer complete.
 * @return 		The new state of SPIStatus (SET or RESET)
 *********************************************************************/
FlagStatus SPI_CheckStatus (uint32_t inputSPIStatus,  uint8_t SPIStatus)
{
    6fc4:	b580      	push	{r7, lr}
    6fc6:	b082      	sub	sp, #8
    6fc8:	af00      	add	r7, sp, #0
    6fca:	6078      	str	r0, [r7, #4]
    6fcc:	460b      	mov	r3, r1
    6fce:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_SPI_STAT(SPIStatus));
    6fd0:	78fb      	ldrb	r3, [r7, #3]
    6fd2:	2b08      	cmp	r3, #8
    6fd4:	d010      	beq.n	6ff8 <SPI_CheckStatus+0x34>
    6fd6:	78fb      	ldrb	r3, [r7, #3]
    6fd8:	2b10      	cmp	r3, #16
    6fda:	d00d      	beq.n	6ff8 <SPI_CheckStatus+0x34>
    6fdc:	78fb      	ldrb	r3, [r7, #3]
    6fde:	2b20      	cmp	r3, #32
    6fe0:	d00a      	beq.n	6ff8 <SPI_CheckStatus+0x34>
    6fe2:	78fb      	ldrb	r3, [r7, #3]
    6fe4:	2b40      	cmp	r3, #64	; 0x40
    6fe6:	d007      	beq.n	6ff8 <SPI_CheckStatus+0x34>
    6fe8:	78fb      	ldrb	r3, [r7, #3]
    6fea:	2b80      	cmp	r3, #128	; 0x80
    6fec:	d004      	beq.n	6ff8 <SPI_CheckStatus+0x34>
    6fee:	4809      	ldr	r0, [pc, #36]	; (7014 <SPI_CheckStatus+0x50>)
    6ff0:	f240 11a5 	movw	r1, #421	; 0x1a5
    6ff4:	f7fe fa46 	bl	5484 <check_failed>

	return ((inputSPIStatus & SPIStatus) ? SET : RESET);
    6ff8:	78fa      	ldrb	r2, [r7, #3]
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	ea02 0303 	and.w	r3, r2, r3
    7000:	2b00      	cmp	r3, #0
    7002:	bf0c      	ite	eq
    7004:	2300      	moveq	r3, #0
    7006:	2301      	movne	r3, #1
    7008:	b2db      	uxtb	r3, r3
}
    700a:	4618      	mov	r0, r3
    700c:	f107 0708 	add.w	r7, r7, #8
    7010:	46bd      	mov	sp, r7
    7012:	bd80      	pop	{r7, pc}
    7014:	0000a3d4 	.word	0x0000a3d4

00007018 <getPClock>:
 * @brief 		Get peripheral clock of each timer controller
 * @param[in]	timernum Timer number
 * @return 		Peripheral clock of timer
 **********************************************************************/
static uint32_t getPClock (uint32_t timernum)
{
    7018:	b580      	push	{r7, lr}
    701a:	b084      	sub	sp, #16
    701c:	af00      	add	r7, sp, #0
    701e:	6078      	str	r0, [r7, #4]
	uint32_t clkdlycnt;
	switch (timernum)
    7020:	687b      	ldr	r3, [r7, #4]
    7022:	2b03      	cmp	r3, #3
    7024:	d822      	bhi.n	706c <getPClock+0x54>
    7026:	a201      	add	r2, pc, #4	; (adr r2, 702c <getPClock+0x14>)
    7028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    702c:	0000703d 	.word	0x0000703d
    7030:	00007049 	.word	0x00007049
    7034:	00007055 	.word	0x00007055
    7038:	00007061 	.word	0x00007061
	{
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
    703c:	f04f 0002 	mov.w	r0, #2
    7040:	f7fc fae0 	bl	3604 <CLKPWR_GetPCLK>
    7044:	60f8      	str	r0, [r7, #12]
		break;
    7046:	e011      	b.n	706c <getPClock+0x54>

	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
    7048:	f04f 0004 	mov.w	r0, #4
    704c:	f7fc fada 	bl	3604 <CLKPWR_GetPCLK>
    7050:	60f8      	str	r0, [r7, #12]
		break;
    7052:	e00b      	b.n	706c <getPClock+0x54>

	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
    7054:	f04f 002c 	mov.w	r0, #44	; 0x2c
    7058:	f7fc fad4 	bl	3604 <CLKPWR_GetPCLK>
    705c:	60f8      	str	r0, [r7, #12]
		break;
    705e:	e005      	b.n	706c <getPClock+0x54>

	case 3:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER3);
    7060:	f04f 002e 	mov.w	r0, #46	; 0x2e
    7064:	f7fc face 	bl	3604 <CLKPWR_GetPCLK>
    7068:	60f8      	str	r0, [r7, #12]
		break;
    706a:	bf00      	nop
	}
	return clkdlycnt;
    706c:	68fb      	ldr	r3, [r7, #12]
}
    706e:	4618      	mov	r0, r3
    7070:	f107 0710 	add.w	r7, r7, #16
    7074:	46bd      	mov	sp, r7
    7076:	bd80      	pop	{r7, pc}

00007078 <converUSecToVal>:
 * @param[in]	timernum Timer number
 * @param[in]	usec Time in microseconds
 * @return 		The number of required clock ticks to give the time delay
 **********************************************************************/
uint32_t converUSecToVal (uint32_t timernum, uint32_t usec)
{
    7078:	b580      	push	{r7, lr}
    707a:	b084      	sub	sp, #16
    707c:	af00      	add	r7, sp, #0
    707e:	6078      	str	r0, [r7, #4]
    7080:	6039      	str	r1, [r7, #0]
	uint64_t clkdlycnt;

	// Get Pclock of timer
	clkdlycnt = (uint64_t) getPClock(timernum);
    7082:	6878      	ldr	r0, [r7, #4]
    7084:	f7ff ffc8 	bl	7018 <getPClock>
    7088:	4603      	mov	r3, r0
    708a:	461a      	mov	r2, r3
    708c:	f04f 0300 	mov.w	r3, #0
    7090:	e9c7 2302 	strd	r2, r3, [r7, #8]

	clkdlycnt = (clkdlycnt * usec) / 1000000;
    7094:	683b      	ldr	r3, [r7, #0]
    7096:	461a      	mov	r2, r3
    7098:	f04f 0300 	mov.w	r3, #0
    709c:	68b9      	ldr	r1, [r7, #8]
    709e:	fb03 f101 	mul.w	r1, r3, r1
    70a2:	68f8      	ldr	r0, [r7, #12]
    70a4:	fb02 f000 	mul.w	r0, r2, r0
    70a8:	1809      	adds	r1, r1, r0
    70aa:	68b8      	ldr	r0, [r7, #8]
    70ac:	fba0 2302 	umull	r2, r3, r0, r2
    70b0:	18c9      	adds	r1, r1, r3
    70b2:	460b      	mov	r3, r1
    70b4:	4610      	mov	r0, r2
    70b6:	4619      	mov	r1, r3
    70b8:	f44f 2274 	mov.w	r2, #999424	; 0xf4000
    70bc:	f502 7210 	add.w	r2, r2, #576	; 0x240
    70c0:	f04f 0300 	mov.w	r3, #0
    70c4:	f002 fa3e 	bl	9544 <__aeabi_uldivmod>
    70c8:	4602      	mov	r2, r0
    70ca:	460b      	mov	r3, r1
    70cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint32_t) clkdlycnt;
    70d0:	68bb      	ldr	r3, [r7, #8]
}
    70d2:	4618      	mov	r0, r3
    70d4:	f107 0710 	add.w	r7, r7, #16
    70d8:	46bd      	mov	sp, r7
    70da:	bd80      	pop	{r7, pc}

000070dc <converPtrToTimeNum>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		The timer number (0 to 3) or -1 if register pointer is bad
 **********************************************************************/
uint32_t converPtrToTimeNum (LPC_TIM_TypeDef *TIMx)
{
    70dc:	b480      	push	{r7}
    70de:	b085      	sub	sp, #20
    70e0:	af00      	add	r7, sp, #0
    70e2:	6078      	str	r0, [r7, #4]
	uint32_t tnum = -1;
    70e4:	f04f 33ff 	mov.w	r3, #4294967295
    70e8:	60fb      	str	r3, [r7, #12]

	if (TIMx == LPC_TIM0)
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    70f0:	d103      	bne.n	70fa <converPtrToTimeNum+0x1e>
	{
		tnum = 0;
    70f2:	f04f 0300 	mov.w	r3, #0
    70f6:	60fb      	str	r3, [r7, #12]
    70f8:	e016      	b.n	7128 <converPtrToTimeNum+0x4c>
	}
	else if (TIMx == LPC_TIM1)
    70fa:	687a      	ldr	r2, [r7, #4]
    70fc:	4b0e      	ldr	r3, [pc, #56]	; (7138 <converPtrToTimeNum+0x5c>)
    70fe:	429a      	cmp	r2, r3
    7100:	d103      	bne.n	710a <converPtrToTimeNum+0x2e>
	{
		tnum = 1;
    7102:	f04f 0301 	mov.w	r3, #1
    7106:	60fb      	str	r3, [r7, #12]
    7108:	e00e      	b.n	7128 <converPtrToTimeNum+0x4c>
	}
	else if (TIMx == LPC_TIM2)
    710a:	687a      	ldr	r2, [r7, #4]
    710c:	4b0b      	ldr	r3, [pc, #44]	; (713c <converPtrToTimeNum+0x60>)
    710e:	429a      	cmp	r2, r3
    7110:	d103      	bne.n	711a <converPtrToTimeNum+0x3e>
	{
		tnum = 2;
    7112:	f04f 0302 	mov.w	r3, #2
    7116:	60fb      	str	r3, [r7, #12]
    7118:	e006      	b.n	7128 <converPtrToTimeNum+0x4c>
	}
	else if (TIMx == LPC_TIM3)
    711a:	687a      	ldr	r2, [r7, #4]
    711c:	4b08      	ldr	r3, [pc, #32]	; (7140 <converPtrToTimeNum+0x64>)
    711e:	429a      	cmp	r2, r3
    7120:	d102      	bne.n	7128 <converPtrToTimeNum+0x4c>
	{
		tnum = 3;
    7122:	f04f 0303 	mov.w	r3, #3
    7126:	60fb      	str	r3, [r7, #12]
	}

	return tnum;
    7128:	68fb      	ldr	r3, [r7, #12]
}
    712a:	4618      	mov	r0, r3
    712c:	f107 0714 	add.w	r7, r7, #20
    7130:	46bd      	mov	sp, r7
    7132:	bc80      	pop	{r7}
    7134:	4770      	bx	lr
    7136:	bf00      	nop
    7138:	40008000 	.word	0x40008000
    713c:	40090000 	.word	0x40090000
    7140:	40094000 	.word	0x40094000

00007144 <TIM_GetIntStatus>:
 * @return 		FlagStatus
 * 				- SET : interrupt
 * 				- RESET : no interrupt
 **********************************************************************/
FlagStatus TIM_GetIntStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    7144:	b580      	push	{r7, lr}
    7146:	b084      	sub	sp, #16
    7148:	af00      	add	r7, sp, #0
    714a:	6078      	str	r0, [r7, #4]
    714c:	460b      	mov	r3, r1
    714e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	CHECK_PARAM(PARAM_TIMx(TIMx));
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7156:	d010      	beq.n	717a <TIM_GetIntStatus+0x36>
    7158:	687a      	ldr	r2, [r7, #4]
    715a:	4b20      	ldr	r3, [pc, #128]	; (71dc <TIM_GetIntStatus+0x98>)
    715c:	429a      	cmp	r2, r3
    715e:	d00c      	beq.n	717a <TIM_GetIntStatus+0x36>
    7160:	687a      	ldr	r2, [r7, #4]
    7162:	4b1f      	ldr	r3, [pc, #124]	; (71e0 <TIM_GetIntStatus+0x9c>)
    7164:	429a      	cmp	r2, r3
    7166:	d008      	beq.n	717a <TIM_GetIntStatus+0x36>
    7168:	687a      	ldr	r2, [r7, #4]
    716a:	4b1e      	ldr	r3, [pc, #120]	; (71e4 <TIM_GetIntStatus+0xa0>)
    716c:	429a      	cmp	r2, r3
    716e:	d004      	beq.n	717a <TIM_GetIntStatus+0x36>
    7170:	481d      	ldr	r0, [pc, #116]	; (71e8 <TIM_GetIntStatus+0xa4>)
    7172:	f04f 01a6 	mov.w	r1, #166	; 0xa6
    7176:	f7fe f985 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    717a:	78fb      	ldrb	r3, [r7, #3]
    717c:	2b00      	cmp	r3, #0
    717e:	d013      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    7180:	78fb      	ldrb	r3, [r7, #3]
    7182:	2b01      	cmp	r3, #1
    7184:	d010      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    7186:	78fb      	ldrb	r3, [r7, #3]
    7188:	2b02      	cmp	r3, #2
    718a:	d00d      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    718c:	78fb      	ldrb	r3, [r7, #3]
    718e:	2b03      	cmp	r3, #3
    7190:	d00a      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    7192:	78fb      	ldrb	r3, [r7, #3]
    7194:	2b04      	cmp	r3, #4
    7196:	d007      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    7198:	78fb      	ldrb	r3, [r7, #3]
    719a:	2b05      	cmp	r3, #5
    719c:	d004      	beq.n	71a8 <TIM_GetIntStatus+0x64>
    719e:	4812      	ldr	r0, [pc, #72]	; (71e8 <TIM_GetIntStatus+0xa4>)
    71a0:	f04f 01a7 	mov.w	r1, #167	; 0xa7
    71a4:	f7fe f96e 	bl	5484 <check_failed>
	temp = (TIMx->IR)& TIM_IR_CLR(IntFlag);
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	681b      	ldr	r3, [r3, #0]
    71ac:	b2da      	uxtb	r2, r3
    71ae:	78fb      	ldrb	r3, [r7, #3]
    71b0:	f04f 0101 	mov.w	r1, #1
    71b4:	fa01 f303 	lsl.w	r3, r1, r3
    71b8:	b2db      	uxtb	r3, r3
    71ba:	ea02 0303 	and.w	r3, r2, r3
    71be:	73fb      	strb	r3, [r7, #15]
	if (temp)
    71c0:	7bfb      	ldrb	r3, [r7, #15]
    71c2:	2b00      	cmp	r3, #0
    71c4:	d002      	beq.n	71cc <TIM_GetIntStatus+0x88>
		return SET;
    71c6:	f04f 0301 	mov.w	r3, #1
    71ca:	e001      	b.n	71d0 <TIM_GetIntStatus+0x8c>

	return RESET;
    71cc:	f04f 0300 	mov.w	r3, #0

}
    71d0:	4618      	mov	r0, r3
    71d2:	f107 0710 	add.w	r7, r7, #16
    71d6:	46bd      	mov	sp, r7
    71d8:	bd80      	pop	{r7, pc}
    71da:	bf00      	nop
    71dc:	40008000 	.word	0x40008000
    71e0:	40090000 	.word	0x40090000
    71e4:	40094000 	.word	0x40094000
    71e8:	0000a400 	.word	0x0000a400

000071ec <TIM_GetIntCaptureStatus>:
 * @return 		FlagStatus
 * 				- SET : interrupt
 * 				- RESET : no interrupt
 **********************************************************************/
FlagStatus TIM_GetIntCaptureStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    71ec:	b580      	push	{r7, lr}
    71ee:	b084      	sub	sp, #16
    71f0:	af00      	add	r7, sp, #0
    71f2:	6078      	str	r0, [r7, #4]
    71f4:	460b      	mov	r3, r1
    71f6:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	CHECK_PARAM(PARAM_TIMx(TIMx));
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    71fe:	d010      	beq.n	7222 <TIM_GetIntCaptureStatus+0x36>
    7200:	687a      	ldr	r2, [r7, #4]
    7202:	4b21      	ldr	r3, [pc, #132]	; (7288 <TIM_GetIntCaptureStatus+0x9c>)
    7204:	429a      	cmp	r2, r3
    7206:	d00c      	beq.n	7222 <TIM_GetIntCaptureStatus+0x36>
    7208:	687a      	ldr	r2, [r7, #4]
    720a:	4b20      	ldr	r3, [pc, #128]	; (728c <TIM_GetIntCaptureStatus+0xa0>)
    720c:	429a      	cmp	r2, r3
    720e:	d008      	beq.n	7222 <TIM_GetIntCaptureStatus+0x36>
    7210:	687a      	ldr	r2, [r7, #4]
    7212:	4b1f      	ldr	r3, [pc, #124]	; (7290 <TIM_GetIntCaptureStatus+0xa4>)
    7214:	429a      	cmp	r2, r3
    7216:	d004      	beq.n	7222 <TIM_GetIntCaptureStatus+0x36>
    7218:	481e      	ldr	r0, [pc, #120]	; (7294 <TIM_GetIntCaptureStatus+0xa8>)
    721a:	f04f 01c4 	mov.w	r1, #196	; 0xc4
    721e:	f7fe f931 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    7222:	78fb      	ldrb	r3, [r7, #3]
    7224:	2b00      	cmp	r3, #0
    7226:	d013      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    7228:	78fb      	ldrb	r3, [r7, #3]
    722a:	2b01      	cmp	r3, #1
    722c:	d010      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    722e:	78fb      	ldrb	r3, [r7, #3]
    7230:	2b02      	cmp	r3, #2
    7232:	d00d      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    7234:	78fb      	ldrb	r3, [r7, #3]
    7236:	2b03      	cmp	r3, #3
    7238:	d00a      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    723a:	78fb      	ldrb	r3, [r7, #3]
    723c:	2b04      	cmp	r3, #4
    723e:	d007      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    7240:	78fb      	ldrb	r3, [r7, #3]
    7242:	2b05      	cmp	r3, #5
    7244:	d004      	beq.n	7250 <TIM_GetIntCaptureStatus+0x64>
    7246:	4813      	ldr	r0, [pc, #76]	; (7294 <TIM_GetIntCaptureStatus+0xa8>)
    7248:	f04f 01c5 	mov.w	r1, #197	; 0xc5
    724c:	f7fe f91a 	bl	5484 <check_failed>
	temp = (TIMx->IR) & (1<<(4+IntFlag));
    7250:	687b      	ldr	r3, [r7, #4]
    7252:	681b      	ldr	r3, [r3, #0]
    7254:	b2da      	uxtb	r2, r3
    7256:	78fb      	ldrb	r3, [r7, #3]
    7258:	f103 0304 	add.w	r3, r3, #4
    725c:	f04f 0101 	mov.w	r1, #1
    7260:	fa01 f303 	lsl.w	r3, r1, r3
    7264:	b2db      	uxtb	r3, r3
    7266:	ea02 0303 	and.w	r3, r2, r3
    726a:	73fb      	strb	r3, [r7, #15]
	if(temp)
    726c:	7bfb      	ldrb	r3, [r7, #15]
    726e:	2b00      	cmp	r3, #0
    7270:	d002      	beq.n	7278 <TIM_GetIntCaptureStatus+0x8c>
		return SET;
    7272:	f04f 0301 	mov.w	r3, #1
    7276:	e001      	b.n	727c <TIM_GetIntCaptureStatus+0x90>
	return RESET;
    7278:	f04f 0300 	mov.w	r3, #0
}
    727c:	4618      	mov	r0, r3
    727e:	f107 0710 	add.w	r7, r7, #16
    7282:	46bd      	mov	sp, r7
    7284:	bd80      	pop	{r7, pc}
    7286:	bf00      	nop
    7288:	40008000 	.word	0x40008000
    728c:	40090000 	.word	0x40090000
    7290:	40094000 	.word	0x40094000
    7294:	0000a400 	.word	0x0000a400

00007298 <TIM_ClearIntPending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntPending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    7298:	b580      	push	{r7, lr}
    729a:	b082      	sub	sp, #8
    729c:	af00      	add	r7, sp, #0
    729e:	6078      	str	r0, [r7, #4]
    72a0:	460b      	mov	r3, r1
    72a2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    72a4:	687b      	ldr	r3, [r7, #4]
    72a6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    72aa:	d010      	beq.n	72ce <TIM_ClearIntPending+0x36>
    72ac:	687a      	ldr	r2, [r7, #4]
    72ae:	4b19      	ldr	r3, [pc, #100]	; (7314 <TIM_ClearIntPending+0x7c>)
    72b0:	429a      	cmp	r2, r3
    72b2:	d00c      	beq.n	72ce <TIM_ClearIntPending+0x36>
    72b4:	687a      	ldr	r2, [r7, #4]
    72b6:	4b18      	ldr	r3, [pc, #96]	; (7318 <TIM_ClearIntPending+0x80>)
    72b8:	429a      	cmp	r2, r3
    72ba:	d008      	beq.n	72ce <TIM_ClearIntPending+0x36>
    72bc:	687a      	ldr	r2, [r7, #4]
    72be:	4b17      	ldr	r3, [pc, #92]	; (731c <TIM_ClearIntPending+0x84>)
    72c0:	429a      	cmp	r2, r3
    72c2:	d004      	beq.n	72ce <TIM_ClearIntPending+0x36>
    72c4:	4816      	ldr	r0, [pc, #88]	; (7320 <TIM_ClearIntPending+0x88>)
    72c6:	f04f 01dd 	mov.w	r1, #221	; 0xdd
    72ca:	f7fe f8db 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    72ce:	78fb      	ldrb	r3, [r7, #3]
    72d0:	2b00      	cmp	r3, #0
    72d2:	d013      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72d4:	78fb      	ldrb	r3, [r7, #3]
    72d6:	2b01      	cmp	r3, #1
    72d8:	d010      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72da:	78fb      	ldrb	r3, [r7, #3]
    72dc:	2b02      	cmp	r3, #2
    72de:	d00d      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72e0:	78fb      	ldrb	r3, [r7, #3]
    72e2:	2b03      	cmp	r3, #3
    72e4:	d00a      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72e6:	78fb      	ldrb	r3, [r7, #3]
    72e8:	2b04      	cmp	r3, #4
    72ea:	d007      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72ec:	78fb      	ldrb	r3, [r7, #3]
    72ee:	2b05      	cmp	r3, #5
    72f0:	d004      	beq.n	72fc <TIM_ClearIntPending+0x64>
    72f2:	480b      	ldr	r0, [pc, #44]	; (7320 <TIM_ClearIntPending+0x88>)
    72f4:	f04f 01de 	mov.w	r1, #222	; 0xde
    72f8:	f7fe f8c4 	bl	5484 <check_failed>
	TIMx->IR = TIM_IR_CLR(IntFlag);
    72fc:	78fb      	ldrb	r3, [r7, #3]
    72fe:	f04f 0201 	mov.w	r2, #1
    7302:	fa02 f303 	lsl.w	r3, r2, r3
    7306:	461a      	mov	r2, r3
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	601a      	str	r2, [r3, #0]
}
    730c:	f107 0708 	add.w	r7, r7, #8
    7310:	46bd      	mov	sp, r7
    7312:	bd80      	pop	{r7, pc}
    7314:	40008000 	.word	0x40008000
    7318:	40090000 	.word	0x40090000
    731c:	40094000 	.word	0x40094000
    7320:	0000a400 	.word	0x0000a400

00007324 <TIM_ClearIntCapturePending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntCapturePending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    7324:	b580      	push	{r7, lr}
    7326:	b082      	sub	sp, #8
    7328:	af00      	add	r7, sp, #0
    732a:	6078      	str	r0, [r7, #4]
    732c:	460b      	mov	r3, r1
    732e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7336:	d010      	beq.n	735a <TIM_ClearIntCapturePending+0x36>
    7338:	687a      	ldr	r2, [r7, #4]
    733a:	4b1a      	ldr	r3, [pc, #104]	; (73a4 <TIM_ClearIntCapturePending+0x80>)
    733c:	429a      	cmp	r2, r3
    733e:	d00c      	beq.n	735a <TIM_ClearIntCapturePending+0x36>
    7340:	687a      	ldr	r2, [r7, #4]
    7342:	4b19      	ldr	r3, [pc, #100]	; (73a8 <TIM_ClearIntCapturePending+0x84>)
    7344:	429a      	cmp	r2, r3
    7346:	d008      	beq.n	735a <TIM_ClearIntCapturePending+0x36>
    7348:	687a      	ldr	r2, [r7, #4]
    734a:	4b18      	ldr	r3, [pc, #96]	; (73ac <TIM_ClearIntCapturePending+0x88>)
    734c:	429a      	cmp	r2, r3
    734e:	d004      	beq.n	735a <TIM_ClearIntCapturePending+0x36>
    7350:	4817      	ldr	r0, [pc, #92]	; (73b0 <TIM_ClearIntCapturePending+0x8c>)
    7352:	f04f 01f4 	mov.w	r1, #244	; 0xf4
    7356:	f7fe f895 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    735a:	78fb      	ldrb	r3, [r7, #3]
    735c:	2b00      	cmp	r3, #0
    735e:	d013      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    7360:	78fb      	ldrb	r3, [r7, #3]
    7362:	2b01      	cmp	r3, #1
    7364:	d010      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    7366:	78fb      	ldrb	r3, [r7, #3]
    7368:	2b02      	cmp	r3, #2
    736a:	d00d      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    736c:	78fb      	ldrb	r3, [r7, #3]
    736e:	2b03      	cmp	r3, #3
    7370:	d00a      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    7372:	78fb      	ldrb	r3, [r7, #3]
    7374:	2b04      	cmp	r3, #4
    7376:	d007      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    7378:	78fb      	ldrb	r3, [r7, #3]
    737a:	2b05      	cmp	r3, #5
    737c:	d004      	beq.n	7388 <TIM_ClearIntCapturePending+0x64>
    737e:	480c      	ldr	r0, [pc, #48]	; (73b0 <TIM_ClearIntCapturePending+0x8c>)
    7380:	f04f 01f5 	mov.w	r1, #245	; 0xf5
    7384:	f7fe f87e 	bl	5484 <check_failed>
	TIMx->IR = (1<<(4+IntFlag));
    7388:	78fb      	ldrb	r3, [r7, #3]
    738a:	f103 0304 	add.w	r3, r3, #4
    738e:	f04f 0201 	mov.w	r2, #1
    7392:	fa02 f303 	lsl.w	r3, r2, r3
    7396:	461a      	mov	r2, r3
    7398:	687b      	ldr	r3, [r7, #4]
    739a:	601a      	str	r2, [r3, #0]
}
    739c:	f107 0708 	add.w	r7, r7, #8
    73a0:	46bd      	mov	sp, r7
    73a2:	bd80      	pop	{r7, pc}
    73a4:	40008000 	.word	0x40008000
    73a8:	40090000 	.word	0x40090000
    73ac:	40094000 	.word	0x40094000
    73b0:	0000a400 	.word	0x0000a400

000073b4 <TIM_ConfigStructInit>:
 * @param[in] 	TIM_ConfigStruct pointer to TIM_TIMERCFG_Type or
 * 				TIM_COUNTERCFG_Type
 * @return 		None
 **********************************************************************/
void TIM_ConfigStructInit(TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    73b4:	b480      	push	{r7}
    73b6:	b085      	sub	sp, #20
    73b8:	af00      	add	r7, sp, #0
    73ba:	4603      	mov	r3, r0
    73bc:	6039      	str	r1, [r7, #0]
    73be:	71fb      	strb	r3, [r7, #7]
	if (TimerCounterMode == TIM_TIMER_MODE )
    73c0:	79fb      	ldrb	r3, [r7, #7]
    73c2:	2b00      	cmp	r3, #0
    73c4:	d10a      	bne.n	73dc <TIM_ConfigStructInit+0x28>
	{
		TIM_TIMERCFG_Type * pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
    73c6:	683b      	ldr	r3, [r7, #0]
    73c8:	60fb      	str	r3, [r7, #12]
		pTimeCfg->PrescaleOption = TIM_PRESCALE_USVAL;
    73ca:	68fb      	ldr	r3, [r7, #12]
    73cc:	f04f 0201 	mov.w	r2, #1
    73d0:	701a      	strb	r2, [r3, #0]
		pTimeCfg->PrescaleValue = 1;
    73d2:	68fb      	ldr	r3, [r7, #12]
    73d4:	f04f 0201 	mov.w	r2, #1
    73d8:	605a      	str	r2, [r3, #4]
    73da:	e005      	b.n	73e8 <TIM_ConfigStructInit+0x34>
	}
	else
	{
		TIM_COUNTERCFG_Type * pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
    73dc:	683b      	ldr	r3, [r7, #0]
    73de:	60bb      	str	r3, [r7, #8]
		pCounterCfg->CountInputSelect = TIM_COUNTER_INCAP0;
    73e0:	68bb      	ldr	r3, [r7, #8]
    73e2:	f04f 0200 	mov.w	r2, #0
    73e6:	705a      	strb	r2, [r3, #1]
	}
}
    73e8:	f107 0714 	add.w	r7, r7, #20
    73ec:	46bd      	mov	sp, r7
    73ee:	bc80      	pop	{r7}
    73f0:	4770      	bx	lr
    73f2:	bf00      	nop

000073f4 <TIM_Init>:
 * 				that contains the configuration information for the
 *                    specified Timer peripheral.
 * @return 		None
 **********************************************************************/
void TIM_Init(LPC_TIM_TypeDef *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b086      	sub	sp, #24
    73f8:	af00      	add	r7, sp, #0
    73fa:	60f8      	str	r0, [r7, #12]
    73fc:	460b      	mov	r3, r1
    73fe:	607a      	str	r2, [r7, #4]
    7400:	72fb      	strb	r3, [r7, #11]
	TIM_TIMERCFG_Type *pTimeCfg;
	TIM_COUNTERCFG_Type *pCounterCfg;

	CHECK_PARAM(PARAM_TIMx(TIMx));
    7402:	68fb      	ldr	r3, [r7, #12]
    7404:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7408:	d010      	beq.n	742c <TIM_Init+0x38>
    740a:	68fa      	ldr	r2, [r7, #12]
    740c:	4b5f      	ldr	r3, [pc, #380]	; (758c <TIM_Init+0x198>)
    740e:	429a      	cmp	r2, r3
    7410:	d00c      	beq.n	742c <TIM_Init+0x38>
    7412:	68fa      	ldr	r2, [r7, #12]
    7414:	4b5e      	ldr	r3, [pc, #376]	; (7590 <TIM_Init+0x19c>)
    7416:	429a      	cmp	r2, r3
    7418:	d008      	beq.n	742c <TIM_Init+0x38>
    741a:	68fa      	ldr	r2, [r7, #12]
    741c:	4b5d      	ldr	r3, [pc, #372]	; (7594 <TIM_Init+0x1a0>)
    741e:	429a      	cmp	r2, r3
    7420:	d004      	beq.n	742c <TIM_Init+0x38>
    7422:	485d      	ldr	r0, [pc, #372]	; (7598 <TIM_Init+0x1a4>)
    7424:	f240 112b 	movw	r1, #299	; 0x12b
    7428:	f7fe f82c 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
    742c:	7afb      	ldrb	r3, [r7, #11]
    742e:	2b00      	cmp	r3, #0
    7430:	d00d      	beq.n	744e <TIM_Init+0x5a>
    7432:	7afb      	ldrb	r3, [r7, #11]
    7434:	2b01      	cmp	r3, #1
    7436:	d00a      	beq.n	744e <TIM_Init+0x5a>
    7438:	7afb      	ldrb	r3, [r7, #11]
    743a:	2b01      	cmp	r3, #1
    743c:	d007      	beq.n	744e <TIM_Init+0x5a>
    743e:	7afb      	ldrb	r3, [r7, #11]
    7440:	2b01      	cmp	r3, #1
    7442:	d004      	beq.n	744e <TIM_Init+0x5a>
    7444:	4854      	ldr	r0, [pc, #336]	; (7598 <TIM_Init+0x1a4>)
    7446:	f44f 7196 	mov.w	r1, #300	; 0x12c
    744a:	f7fe f81b 	bl	5484 <check_failed>

	//set power

	if (TIMx== LPC_TIM0)
    744e:	68fb      	ldr	r3, [r7, #12]
    7450:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7454:	d10c      	bne.n	7470 <TIM_Init+0x7c>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, ENABLE);
    7456:	f04f 0002 	mov.w	r0, #2
    745a:	f04f 0101 	mov.w	r1, #1
    745e:	f7fc f909 	bl	3674 <CLKPWR_ConfigPPWR>
		//PCLK_Timer0 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_4);
    7462:	f04f 0002 	mov.w	r0, #2
    7466:	f04f 0100 	mov.w	r1, #0
    746a:	f7fc f855 	bl	3518 <CLKPWR_SetPCLKDiv>
    746e:	e031      	b.n	74d4 <TIM_Init+0xe0>
	}
	else if (TIMx== LPC_TIM1)
    7470:	68fa      	ldr	r2, [r7, #12]
    7472:	4b46      	ldr	r3, [pc, #280]	; (758c <TIM_Init+0x198>)
    7474:	429a      	cmp	r2, r3
    7476:	d10c      	bne.n	7492 <TIM_Init+0x9e>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, ENABLE);
    7478:	f04f 0004 	mov.w	r0, #4
    747c:	f04f 0101 	mov.w	r1, #1
    7480:	f7fc f8f8 	bl	3674 <CLKPWR_ConfigPPWR>
		//PCLK_Timer1 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    7484:	f04f 0004 	mov.w	r0, #4
    7488:	f04f 0100 	mov.w	r1, #0
    748c:	f7fc f844 	bl	3518 <CLKPWR_SetPCLKDiv>
    7490:	e020      	b.n	74d4 <TIM_Init+0xe0>

	}

	else if (TIMx== LPC_TIM2)
    7492:	68fa      	ldr	r2, [r7, #12]
    7494:	4b3e      	ldr	r3, [pc, #248]	; (7590 <TIM_Init+0x19c>)
    7496:	429a      	cmp	r2, r3
    7498:	d10c      	bne.n	74b4 <TIM_Init+0xc0>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, ENABLE);
    749a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    749e:	f04f 0101 	mov.w	r1, #1
    74a2:	f7fc f8e7 	bl	3674 <CLKPWR_ConfigPPWR>
		//PCLK_Timer2= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER2, CLKPWR_PCLKSEL_CCLK_DIV_4);
    74a6:	f04f 002c 	mov.w	r0, #44	; 0x2c
    74aa:	f04f 0100 	mov.w	r1, #0
    74ae:	f7fc f833 	bl	3518 <CLKPWR_SetPCLKDiv>
    74b2:	e00f      	b.n	74d4 <TIM_Init+0xe0>
	}
	else if (TIMx== LPC_TIM3)
    74b4:	68fa      	ldr	r2, [r7, #12]
    74b6:	4b37      	ldr	r3, [pc, #220]	; (7594 <TIM_Init+0x1a0>)
    74b8:	429a      	cmp	r2, r3
    74ba:	d10b      	bne.n	74d4 <TIM_Init+0xe0>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM3, ENABLE);
    74bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    74c0:	f04f 0101 	mov.w	r1, #1
    74c4:	f7fc f8d6 	bl	3674 <CLKPWR_ConfigPPWR>
		//PCLK_Timer3= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_4);
    74c8:	f04f 002e 	mov.w	r0, #46	; 0x2e
    74cc:	f04f 0100 	mov.w	r1, #0
    74d0:	f7fc f822 	bl	3518 <CLKPWR_SetPCLKDiv>

	}

	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
    74d4:	68fb      	ldr	r3, [r7, #12]
    74d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74d8:	f023 0203 	bic.w	r2, r3, #3
    74dc:	68fb      	ldr	r3, [r7, #12]
    74de:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->CCR |= TIM_TIMER_MODE;
    74e0:	68fb      	ldr	r3, [r7, #12]
    74e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    74e4:	68fb      	ldr	r3, [r7, #12]
    74e6:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->TC =0;
    74e8:	68fb      	ldr	r3, [r7, #12]
    74ea:	f04f 0200 	mov.w	r2, #0
    74ee:	609a      	str	r2, [r3, #8]
	TIMx->PC =0;
    74f0:	68fb      	ldr	r3, [r7, #12]
    74f2:	f04f 0200 	mov.w	r2, #0
    74f6:	611a      	str	r2, [r3, #16]
	TIMx->PR =0;
    74f8:	68fb      	ldr	r3, [r7, #12]
    74fa:	f04f 0200 	mov.w	r2, #0
    74fe:	60da      	str	r2, [r3, #12]
	TIMx->TCR |= (1<<1); //Reset Counter
    7500:	68fb      	ldr	r3, [r7, #12]
    7502:	685b      	ldr	r3, [r3, #4]
    7504:	f043 0202 	orr.w	r2, r3, #2
    7508:	68fb      	ldr	r3, [r7, #12]
    750a:	605a      	str	r2, [r3, #4]
	TIMx->TCR &= ~(1<<1); //release reset
    750c:	68fb      	ldr	r3, [r7, #12]
    750e:	685b      	ldr	r3, [r3, #4]
    7510:	f023 0202 	bic.w	r2, r3, #2
    7514:	68fb      	ldr	r3, [r7, #12]
    7516:	605a      	str	r2, [r3, #4]
	if (TimerCounterMode == TIM_TIMER_MODE )
    7518:	7afb      	ldrb	r3, [r7, #11]
    751a:	2b00      	cmp	r3, #0
    751c:	d11c      	bne.n	7558 <TIM_Init+0x164>
	{
		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	617b      	str	r3, [r7, #20]
		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
    7522:	697b      	ldr	r3, [r7, #20]
    7524:	781b      	ldrb	r3, [r3, #0]
    7526:	2b00      	cmp	r3, #0
    7528:	d106      	bne.n	7538 <TIM_Init+0x144>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
    752a:	697b      	ldr	r3, [r7, #20]
    752c:	685b      	ldr	r3, [r3, #4]
    752e:	f103 32ff 	add.w	r2, r3, #4294967295
    7532:	68fb      	ldr	r3, [r7, #12]
    7534:	60da      	str	r2, [r3, #12]
    7536:	e021      	b.n	757c <TIM_Init+0x188>
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    7538:	68f8      	ldr	r0, [r7, #12]
    753a:	f7ff fdcf 	bl	70dc <converPtrToTimeNum>
    753e:	4602      	mov	r2, r0
    7540:	697b      	ldr	r3, [r7, #20]
    7542:	685b      	ldr	r3, [r3, #4]
    7544:	4610      	mov	r0, r2
    7546:	4619      	mov	r1, r3
    7548:	f7ff fd96 	bl	7078 <converUSecToVal>
    754c:	4603      	mov	r3, r0
    754e:	f103 32ff 	add.w	r2, r3, #4294967295
    7552:	68fb      	ldr	r3, [r7, #12]
    7554:	60da      	str	r2, [r3, #12]
    7556:	e011      	b.n	757c <TIM_Init+0x188>
		}
	}
	else
	{

		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	613b      	str	r3, [r7, #16]
		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
    755c:	68fb      	ldr	r3, [r7, #12]
    755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7560:	f023 020c 	bic.w	r2, r3, #12
    7564:	68fb      	ldr	r3, [r7, #12]
    7566:	629a      	str	r2, [r3, #40]	; 0x28
		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
    7568:	693b      	ldr	r3, [r7, #16]
    756a:	785b      	ldrb	r3, [r3, #1]
    756c:	2b01      	cmp	r3, #1
    756e:	d105      	bne.n	757c <TIM_Init+0x188>
			TIMx->CCR |= _BIT(2);
    7570:	68fb      	ldr	r3, [r7, #12]
    7572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7574:	f043 0204 	orr.w	r2, r3, #4
    7578:	68fb      	ldr	r3, [r7, #12]
    757a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Clear interrupt pending
	TIMx->IR = 0xFFFFFFFF;
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	f04f 32ff 	mov.w	r2, #4294967295
    7582:	601a      	str	r2, [r3, #0]

}
    7584:	f107 0718 	add.w	r7, r7, #24
    7588:	46bd      	mov	sp, r7
    758a:	bd80      	pop	{r7, pc}
    758c:	40008000 	.word	0x40008000
    7590:	40090000 	.word	0x40090000
    7594:	40094000 	.word	0x40094000
    7598:	0000a400 	.word	0x0000a400

0000759c <TIM_DeInit>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		None
 **********************************************************************/
void TIM_DeInit (LPC_TIM_TypeDef *TIMx)
{
    759c:	b580      	push	{r7, lr}
    759e:	b082      	sub	sp, #8
    75a0:	af00      	add	r7, sp, #0
    75a2:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    75aa:	d010      	beq.n	75ce <TIM_DeInit+0x32>
    75ac:	687a      	ldr	r2, [r7, #4]
    75ae:	4b21      	ldr	r3, [pc, #132]	; (7634 <TIM_DeInit+0x98>)
    75b0:	429a      	cmp	r2, r3
    75b2:	d00c      	beq.n	75ce <TIM_DeInit+0x32>
    75b4:	687a      	ldr	r2, [r7, #4]
    75b6:	4b20      	ldr	r3, [pc, #128]	; (7638 <TIM_DeInit+0x9c>)
    75b8:	429a      	cmp	r2, r3
    75ba:	d008      	beq.n	75ce <TIM_DeInit+0x32>
    75bc:	687a      	ldr	r2, [r7, #4]
    75be:	4b1f      	ldr	r3, [pc, #124]	; (763c <TIM_DeInit+0xa0>)
    75c0:	429a      	cmp	r2, r3
    75c2:	d004      	beq.n	75ce <TIM_DeInit+0x32>
    75c4:	481e      	ldr	r0, [pc, #120]	; (7640 <TIM_DeInit+0xa4>)
    75c6:	f240 1179 	movw	r1, #377	; 0x179
    75ca:	f7fd ff5b 	bl	5484 <check_failed>
	// Disable timer/counter
	TIMx->TCR = 0x00;
    75ce:	687b      	ldr	r3, [r7, #4]
    75d0:	f04f 0200 	mov.w	r2, #0
    75d4:	605a      	str	r2, [r3, #4]

	// Disable power
	if (TIMx== LPC_TIM0)
    75d6:	687b      	ldr	r3, [r7, #4]
    75d8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    75dc:	d106      	bne.n	75ec <TIM_DeInit+0x50>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, DISABLE);
    75de:	f04f 0002 	mov.w	r0, #2
    75e2:	f04f 0100 	mov.w	r1, #0
    75e6:	f7fc f845 	bl	3674 <CLKPWR_ConfigPPWR>
    75ea:	e01f      	b.n	762c <TIM_DeInit+0x90>

	else if (TIMx== LPC_TIM1)
    75ec:	687a      	ldr	r2, [r7, #4]
    75ee:	4b11      	ldr	r3, [pc, #68]	; (7634 <TIM_DeInit+0x98>)
    75f0:	429a      	cmp	r2, r3
    75f2:	d106      	bne.n	7602 <TIM_DeInit+0x66>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, DISABLE);
    75f4:	f04f 0004 	mov.w	r0, #4
    75f8:	f04f 0100 	mov.w	r1, #0
    75fc:	f7fc f83a 	bl	3674 <CLKPWR_ConfigPPWR>
    7600:	e014      	b.n	762c <TIM_DeInit+0x90>

	else if (TIMx== LPC_TIM2)
    7602:	687a      	ldr	r2, [r7, #4]
    7604:	4b0c      	ldr	r3, [pc, #48]	; (7638 <TIM_DeInit+0x9c>)
    7606:	429a      	cmp	r2, r3
    7608:	d106      	bne.n	7618 <TIM_DeInit+0x7c>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
    760a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    760e:	f04f 0100 	mov.w	r1, #0
    7612:	f7fc f82f 	bl	3674 <CLKPWR_ConfigPPWR>
    7616:	e009      	b.n	762c <TIM_DeInit+0x90>

	else if (TIMx== LPC_TIM3)
    7618:	687a      	ldr	r2, [r7, #4]
    761a:	4b08      	ldr	r3, [pc, #32]	; (763c <TIM_DeInit+0xa0>)
    761c:	429a      	cmp	r2, r3
    761e:	d105      	bne.n	762c <TIM_DeInit+0x90>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
    7620:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7624:	f04f 0100 	mov.w	r1, #0
    7628:	f7fc f824 	bl	3674 <CLKPWR_ConfigPPWR>

}
    762c:	f107 0708 	add.w	r7, r7, #8
    7630:	46bd      	mov	sp, r7
    7632:	bd80      	pop	{r7, pc}
    7634:	40008000 	.word	0x40008000
    7638:	40090000 	.word	0x40090000
    763c:	40094000 	.word	0x40094000
    7640:	0000a400 	.word	0x0000a400

00007644 <TIM_Cmd>:
 * 				-	ENABLE  : set timer enable
 * 				-	DISABLE : disable timer
 * @return 		None
 **********************************************************************/
void TIM_Cmd(LPC_TIM_TypeDef *TIMx, FunctionalState NewState)
{
    7644:	b580      	push	{r7, lr}
    7646:	b082      	sub	sp, #8
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
    764c:	460b      	mov	r3, r1
    764e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7656:	d010      	beq.n	767a <TIM_Cmd+0x36>
    7658:	687a      	ldr	r2, [r7, #4]
    765a:	4b12      	ldr	r3, [pc, #72]	; (76a4 <TIM_Cmd+0x60>)
    765c:	429a      	cmp	r2, r3
    765e:	d00c      	beq.n	767a <TIM_Cmd+0x36>
    7660:	687a      	ldr	r2, [r7, #4]
    7662:	4b11      	ldr	r3, [pc, #68]	; (76a8 <TIM_Cmd+0x64>)
    7664:	429a      	cmp	r2, r3
    7666:	d008      	beq.n	767a <TIM_Cmd+0x36>
    7668:	687a      	ldr	r2, [r7, #4]
    766a:	4b10      	ldr	r3, [pc, #64]	; (76ac <TIM_Cmd+0x68>)
    766c:	429a      	cmp	r2, r3
    766e:	d004      	beq.n	767a <TIM_Cmd+0x36>
    7670:	480f      	ldr	r0, [pc, #60]	; (76b0 <TIM_Cmd+0x6c>)
    7672:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    7676:	f7fd ff05 	bl	5484 <check_failed>
	if (NewState == ENABLE)
    767a:	78fb      	ldrb	r3, [r7, #3]
    767c:	2b01      	cmp	r3, #1
    767e:	d106      	bne.n	768e <TIM_Cmd+0x4a>
	{
		TIMx->TCR	|=  TIM_ENABLE;
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	685b      	ldr	r3, [r3, #4]
    7684:	f043 0201 	orr.w	r2, r3, #1
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	605a      	str	r2, [r3, #4]
    768c:	e005      	b.n	769a <TIM_Cmd+0x56>
	}
	else
	{
		TIMx->TCR &= ~TIM_ENABLE;
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	685b      	ldr	r3, [r3, #4]
    7692:	f023 0201 	bic.w	r2, r3, #1
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	605a      	str	r2, [r3, #4]
	}
}
    769a:	f107 0708 	add.w	r7, r7, #8
    769e:	46bd      	mov	sp, r7
    76a0:	bd80      	pop	{r7, pc}
    76a2:	bf00      	nop
    76a4:	40008000 	.word	0x40008000
    76a8:	40090000 	.word	0x40090000
    76ac:	40094000 	.word	0x40094000
    76b0:	0000a400 	.word	0x0000a400

000076b4 <TIM_ResetCounter>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		None
 **********************************************************************/
void TIM_ResetCounter(LPC_TIM_TypeDef *TIMx)
{
    76b4:	b580      	push	{r7, lr}
    76b6:	b082      	sub	sp, #8
    76b8:	af00      	add	r7, sp, #0
    76ba:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    76c2:	d010      	beq.n	76e6 <TIM_ResetCounter+0x32>
    76c4:	687a      	ldr	r2, [r7, #4]
    76c6:	4b10      	ldr	r3, [pc, #64]	; (7708 <TIM_ResetCounter+0x54>)
    76c8:	429a      	cmp	r2, r3
    76ca:	d00c      	beq.n	76e6 <TIM_ResetCounter+0x32>
    76cc:	687a      	ldr	r2, [r7, #4]
    76ce:	4b0f      	ldr	r3, [pc, #60]	; (770c <TIM_ResetCounter+0x58>)
    76d0:	429a      	cmp	r2, r3
    76d2:	d008      	beq.n	76e6 <TIM_ResetCounter+0x32>
    76d4:	687a      	ldr	r2, [r7, #4]
    76d6:	4b0e      	ldr	r3, [pc, #56]	; (7710 <TIM_ResetCounter+0x5c>)
    76d8:	429a      	cmp	r2, r3
    76da:	d004      	beq.n	76e6 <TIM_ResetCounter+0x32>
    76dc:	480d      	ldr	r0, [pc, #52]	; (7714 <TIM_ResetCounter+0x60>)
    76de:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    76e2:	f7fd fecf 	bl	5484 <check_failed>
	TIMx->TCR |= TIM_RESET;
    76e6:	687b      	ldr	r3, [r7, #4]
    76e8:	685b      	ldr	r3, [r3, #4]
    76ea:	f043 0202 	orr.w	r2, r3, #2
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	605a      	str	r2, [r3, #4]
	TIMx->TCR &= ~TIM_RESET;
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	685b      	ldr	r3, [r3, #4]
    76f6:	f023 0202 	bic.w	r2, r3, #2
    76fa:	687b      	ldr	r3, [r7, #4]
    76fc:	605a      	str	r2, [r3, #4]
}
    76fe:	f107 0708 	add.w	r7, r7, #8
    7702:	46bd      	mov	sp, r7
    7704:	bd80      	pop	{r7, pc}
    7706:	bf00      	nop
    7708:	40008000 	.word	0x40008000
    770c:	40090000 	.word	0x40090000
    7710:	40094000 	.word	0x40094000
    7714:	0000a400 	.word	0x0000a400

00007718 <TIM_ConfigMatch>:
 *						 + 	 3: Toggle external output pin if match
 *					MatchValue: Set the value to be compared with TC value
 * @return 		None
 **********************************************************************/
void TIM_ConfigMatch(LPC_TIM_TypeDef *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
{
    7718:	b580      	push	{r7, lr}
    771a:	b082      	sub	sp, #8
    771c:	af00      	add	r7, sp, #0
    771e:	6078      	str	r0, [r7, #4]
    7720:	6039      	str	r1, [r7, #0]

	CHECK_PARAM(PARAM_TIMx(TIMx));
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7728:	d010      	beq.n	774c <TIM_ConfigMatch+0x34>
    772a:	687a      	ldr	r2, [r7, #4]
    772c:	4b62      	ldr	r3, [pc, #392]	; (78b8 <TIM_ConfigMatch+0x1a0>)
    772e:	429a      	cmp	r2, r3
    7730:	d00c      	beq.n	774c <TIM_ConfigMatch+0x34>
    7732:	687a      	ldr	r2, [r7, #4]
    7734:	4b61      	ldr	r3, [pc, #388]	; (78bc <TIM_ConfigMatch+0x1a4>)
    7736:	429a      	cmp	r2, r3
    7738:	d008      	beq.n	774c <TIM_ConfigMatch+0x34>
    773a:	687a      	ldr	r2, [r7, #4]
    773c:	4b60      	ldr	r3, [pc, #384]	; (78c0 <TIM_ConfigMatch+0x1a8>)
    773e:	429a      	cmp	r2, r3
    7740:	d004      	beq.n	774c <TIM_ConfigMatch+0x34>
    7742:	4860      	ldr	r0, [pc, #384]	; (78c4 <TIM_ConfigMatch+0x1ac>)
    7744:	f240 11d1 	movw	r1, #465	; 0x1d1
    7748:	f7fd fe9c 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
    774c:	683b      	ldr	r3, [r7, #0]
    774e:	791b      	ldrb	r3, [r3, #4]
    7750:	2b00      	cmp	r3, #0
    7752:	d010      	beq.n	7776 <TIM_ConfigMatch+0x5e>
    7754:	683b      	ldr	r3, [r7, #0]
    7756:	791b      	ldrb	r3, [r3, #4]
    7758:	2b01      	cmp	r3, #1
    775a:	d00c      	beq.n	7776 <TIM_ConfigMatch+0x5e>
    775c:	683b      	ldr	r3, [r7, #0]
    775e:	791b      	ldrb	r3, [r3, #4]
    7760:	2b02      	cmp	r3, #2
    7762:	d008      	beq.n	7776 <TIM_ConfigMatch+0x5e>
    7764:	683b      	ldr	r3, [r7, #0]
    7766:	791b      	ldrb	r3, [r3, #4]
    7768:	2b03      	cmp	r3, #3
    776a:	d004      	beq.n	7776 <TIM_ConfigMatch+0x5e>
    776c:	4855      	ldr	r0, [pc, #340]	; (78c4 <TIM_ConfigMatch+0x1ac>)
    776e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    7772:	f7fd fe87 	bl	5484 <check_failed>

	switch(TIM_MatchConfigStruct->MatchChannel)
    7776:	683b      	ldr	r3, [r7, #0]
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	2b03      	cmp	r3, #3
    777c:	d81e      	bhi.n	77bc <TIM_ConfigMatch+0xa4>
    777e:	a201      	add	r2, pc, #4	; (adr r2, 7784 <TIM_ConfigMatch+0x6c>)
    7780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7784:	00007795 	.word	0x00007795
    7788:	0000779f 	.word	0x0000779f
    778c:	000077a9 	.word	0x000077a9
    7790:	000077b3 	.word	0x000077b3
	{
	case 0:
		TIMx->MR0 = TIM_MatchConfigStruct->MatchValue;
    7794:	683b      	ldr	r3, [r7, #0]
    7796:	689a      	ldr	r2, [r3, #8]
    7798:	687b      	ldr	r3, [r7, #4]
    779a:	619a      	str	r2, [r3, #24]
		break;
    779c:	e00f      	b.n	77be <TIM_ConfigMatch+0xa6>
	case 1:
		TIMx->MR1 = TIM_MatchConfigStruct->MatchValue;
    779e:	683b      	ldr	r3, [r7, #0]
    77a0:	689a      	ldr	r2, [r3, #8]
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	61da      	str	r2, [r3, #28]
		break;
    77a6:	e00a      	b.n	77be <TIM_ConfigMatch+0xa6>
	case 2:
		TIMx->MR2 = TIM_MatchConfigStruct->MatchValue;
    77a8:	683b      	ldr	r3, [r7, #0]
    77aa:	689a      	ldr	r2, [r3, #8]
    77ac:	687b      	ldr	r3, [r7, #4]
    77ae:	621a      	str	r2, [r3, #32]
		break;
    77b0:	e005      	b.n	77be <TIM_ConfigMatch+0xa6>
	case 3:
		TIMx->MR3 = TIM_MatchConfigStruct->MatchValue;
    77b2:	683b      	ldr	r3, [r7, #0]
    77b4:	689a      	ldr	r2, [r3, #8]
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    77ba:	e000      	b.n	77be <TIM_ConfigMatch+0xa6>
	default:
		//Error match value
		//Error loop
		while(1);
    77bc:	e7fe      	b.n	77bc <TIM_ConfigMatch+0xa4>
	}
	//interrupt on MRn
	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	6959      	ldr	r1, [r3, #20]
    77c2:	683b      	ldr	r3, [r7, #0]
    77c4:	781b      	ldrb	r3, [r3, #0]
    77c6:	461a      	mov	r2, r3
    77c8:	4613      	mov	r3, r2
    77ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    77ce:	189b      	adds	r3, r3, r2
    77d0:	f04f 0207 	mov.w	r2, #7
    77d4:	fa02 f303 	lsl.w	r3, r2, r3
    77d8:	ea6f 0303 	mvn.w	r3, r3
    77dc:	ea01 0203 	and.w	r2, r1, r3
    77e0:	687b      	ldr	r3, [r7, #4]
    77e2:	615a      	str	r2, [r3, #20]

	if (TIM_MatchConfigStruct->IntOnMatch)
    77e4:	683b      	ldr	r3, [r7, #0]
    77e6:	785b      	ldrb	r3, [r3, #1]
    77e8:	2b00      	cmp	r3, #0
    77ea:	d010      	beq.n	780e <TIM_ConfigMatch+0xf6>
		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	6959      	ldr	r1, [r3, #20]
    77f0:	683b      	ldr	r3, [r7, #0]
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	461a      	mov	r2, r3
    77f6:	4613      	mov	r3, r2
    77f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    77fc:	189b      	adds	r3, r3, r2
    77fe:	f04f 0201 	mov.w	r2, #1
    7802:	fa02 f303 	lsl.w	r3, r2, r3
    7806:	ea41 0203 	orr.w	r2, r1, r3
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	615a      	str	r2, [r3, #20]

	//reset on MRn
	if (TIM_MatchConfigStruct->ResetOnMatch)
    780e:	683b      	ldr	r3, [r7, #0]
    7810:	78db      	ldrb	r3, [r3, #3]
    7812:	2b00      	cmp	r3, #0
    7814:	d012      	beq.n	783c <TIM_ConfigMatch+0x124>
		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    7816:	687b      	ldr	r3, [r7, #4]
    7818:	6959      	ldr	r1, [r3, #20]
    781a:	683b      	ldr	r3, [r7, #0]
    781c:	781b      	ldrb	r3, [r3, #0]
    781e:	461a      	mov	r2, r3
    7820:	4613      	mov	r3, r2
    7822:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7826:	189b      	adds	r3, r3, r2
    7828:	f103 0301 	add.w	r3, r3, #1
    782c:	f04f 0201 	mov.w	r2, #1
    7830:	fa02 f303 	lsl.w	r3, r2, r3
    7834:	ea41 0203 	orr.w	r2, r1, r3
    7838:	687b      	ldr	r3, [r7, #4]
    783a:	615a      	str	r2, [r3, #20]

	//stop on MRn
	if (TIM_MatchConfigStruct->StopOnMatch)
    783c:	683b      	ldr	r3, [r7, #0]
    783e:	789b      	ldrb	r3, [r3, #2]
    7840:	2b00      	cmp	r3, #0
    7842:	d012      	beq.n	786a <TIM_ConfigMatch+0x152>
		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	6959      	ldr	r1, [r3, #20]
    7848:	683b      	ldr	r3, [r7, #0]
    784a:	781b      	ldrb	r3, [r3, #0]
    784c:	461a      	mov	r2, r3
    784e:	4613      	mov	r3, r2
    7850:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7854:	189b      	adds	r3, r3, r2
    7856:	f103 0302 	add.w	r3, r3, #2
    785a:	f04f 0201 	mov.w	r2, #1
    785e:	fa02 f303 	lsl.w	r3, r2, r3
    7862:	ea41 0203 	orr.w	r2, r1, r3
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	615a      	str	r2, [r3, #20]

	// match output type

	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	781b      	ldrb	r3, [r3, #0]
    7872:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7876:	f103 0304 	add.w	r3, r3, #4
    787a:	f04f 0103 	mov.w	r1, #3
    787e:	fa01 f303 	lsl.w	r3, r1, r3
    7882:	ea6f 0303 	mvn.w	r3, r3
    7886:	401a      	ands	r2, r3
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
    788c:	687b      	ldr	r3, [r7, #4]
    788e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7890:	683b      	ldr	r3, [r7, #0]
    7892:	791b      	ldrb	r3, [r3, #4]
    7894:	f003 0103 	and.w	r1, r3, #3
    7898:	683b      	ldr	r3, [r7, #0]
    789a:	781b      	ldrb	r3, [r3, #0]
    789c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    78a0:	f103 0304 	add.w	r3, r3, #4
    78a4:	fa01 f303 	lsl.w	r3, r1, r3
    78a8:	431a      	orrs	r2, r3
    78aa:	687b      	ldr	r3, [r7, #4]
    78ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
    78ae:	f107 0708 	add.w	r7, r7, #8
    78b2:	46bd      	mov	sp, r7
    78b4:	bd80      	pop	{r7, pc}
    78b6:	bf00      	nop
    78b8:	40008000 	.word	0x40008000
    78bc:	40090000 	.word	0x40090000
    78c0:	40094000 	.word	0x40094000
    78c4:	0000a400 	.word	0x0000a400

000078c8 <TIM_UpdateMatchValue>:
 * @param[in]	MatchChannel	Match channel, should be: 0..3
 * @param[in]	MatchValue		updated match value
 * @return 		None
 **********************************************************************/
void TIM_UpdateMatchValue(LPC_TIM_TypeDef *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
{
    78c8:	b580      	push	{r7, lr}
    78ca:	b084      	sub	sp, #16
    78cc:	af00      	add	r7, sp, #0
    78ce:	60f8      	str	r0, [r7, #12]
    78d0:	460b      	mov	r3, r1
    78d2:	607a      	str	r2, [r7, #4]
    78d4:	72fb      	strb	r3, [r7, #11]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    78d6:	68fb      	ldr	r3, [r7, #12]
    78d8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    78dc:	d010      	beq.n	7900 <TIM_UpdateMatchValue+0x38>
    78de:	68fa      	ldr	r2, [r7, #12]
    78e0:	4b19      	ldr	r3, [pc, #100]	; (7948 <TIM_UpdateMatchValue+0x80>)
    78e2:	429a      	cmp	r2, r3
    78e4:	d00c      	beq.n	7900 <TIM_UpdateMatchValue+0x38>
    78e6:	68fa      	ldr	r2, [r7, #12]
    78e8:	4b18      	ldr	r3, [pc, #96]	; (794c <TIM_UpdateMatchValue+0x84>)
    78ea:	429a      	cmp	r2, r3
    78ec:	d008      	beq.n	7900 <TIM_UpdateMatchValue+0x38>
    78ee:	68fa      	ldr	r2, [r7, #12]
    78f0:	4b17      	ldr	r3, [pc, #92]	; (7950 <TIM_UpdateMatchValue+0x88>)
    78f2:	429a      	cmp	r2, r3
    78f4:	d004      	beq.n	7900 <TIM_UpdateMatchValue+0x38>
    78f6:	4817      	ldr	r0, [pc, #92]	; (7954 <TIM_UpdateMatchValue+0x8c>)
    78f8:	f240 2107 	movw	r1, #519	; 0x207
    78fc:	f7fd fdc2 	bl	5484 <check_failed>
	switch(MatchChannel)
    7900:	7afb      	ldrb	r3, [r7, #11]
    7902:	2b03      	cmp	r3, #3
    7904:	d81b      	bhi.n	793e <TIM_UpdateMatchValue+0x76>
    7906:	a201      	add	r2, pc, #4	; (adr r2, 790c <TIM_UpdateMatchValue+0x44>)
    7908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    790c:	0000791d 	.word	0x0000791d
    7910:	00007925 	.word	0x00007925
    7914:	0000792d 	.word	0x0000792d
    7918:	00007935 	.word	0x00007935
	{
	case 0:
		TIMx->MR0 = MatchValue;
    791c:	68fb      	ldr	r3, [r7, #12]
    791e:	687a      	ldr	r2, [r7, #4]
    7920:	619a      	str	r2, [r3, #24]
		break;
    7922:	e00d      	b.n	7940 <TIM_UpdateMatchValue+0x78>
	case 1:
		TIMx->MR1 = MatchValue;
    7924:	68fb      	ldr	r3, [r7, #12]
    7926:	687a      	ldr	r2, [r7, #4]
    7928:	61da      	str	r2, [r3, #28]
		break;
    792a:	e009      	b.n	7940 <TIM_UpdateMatchValue+0x78>
	case 2:
		TIMx->MR2 = MatchValue;
    792c:	68fb      	ldr	r3, [r7, #12]
    792e:	687a      	ldr	r2, [r7, #4]
    7930:	621a      	str	r2, [r3, #32]
		break;
    7932:	e005      	b.n	7940 <TIM_UpdateMatchValue+0x78>
	case 3:
		TIMx->MR3 = MatchValue;
    7934:	68fb      	ldr	r3, [r7, #12]
    7936:	687a      	ldr	r2, [r7, #4]
    7938:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    793a:	bf00      	nop
    793c:	e000      	b.n	7940 <TIM_UpdateMatchValue+0x78>
	default:
		//Error Loop
		while(1);
    793e:	e7fe      	b.n	793e <TIM_UpdateMatchValue+0x76>
	}

}
    7940:	f107 0710 	add.w	r7, r7, #16
    7944:	46bd      	mov	sp, r7
    7946:	bd80      	pop	{r7, pc}
    7948:	40008000 	.word	0x40008000
    794c:	40090000 	.word	0x40090000
    7950:	40094000 	.word	0x40094000
    7954:	0000a400 	.word	0x0000a400

00007958 <TIM_ConfigCapture>:
 * 					- IntOnCaption  : if SET, Capture generate interrupt
 * @param[in]   TIM_CaptureConfigStruct	Pointer to TIM_CAPTURECFG_Type
 * @return 		None
 **********************************************************************/
void TIM_ConfigCapture(LPC_TIM_TypeDef *TIMx, TIM_CAPTURECFG_Type *TIM_CaptureConfigStruct)
{
    7958:	b580      	push	{r7, lr}
    795a:	b082      	sub	sp, #8
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]
    7960:	6039      	str	r1, [r7, #0]

	CHECK_PARAM(PARAM_TIMx(TIMx));
    7962:	687b      	ldr	r3, [r7, #4]
    7964:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7968:	d010      	beq.n	798c <TIM_ConfigCapture+0x34>
    796a:	687a      	ldr	r2, [r7, #4]
    796c:	4b34      	ldr	r3, [pc, #208]	; (7a40 <TIM_ConfigCapture+0xe8>)
    796e:	429a      	cmp	r2, r3
    7970:	d00c      	beq.n	798c <TIM_ConfigCapture+0x34>
    7972:	687a      	ldr	r2, [r7, #4]
    7974:	4b33      	ldr	r3, [pc, #204]	; (7a44 <TIM_ConfigCapture+0xec>)
    7976:	429a      	cmp	r2, r3
    7978:	d008      	beq.n	798c <TIM_ConfigCapture+0x34>
    797a:	687a      	ldr	r2, [r7, #4]
    797c:	4b32      	ldr	r3, [pc, #200]	; (7a48 <TIM_ConfigCapture+0xf0>)
    797e:	429a      	cmp	r2, r3
    7980:	d004      	beq.n	798c <TIM_ConfigCapture+0x34>
    7982:	4832      	ldr	r0, [pc, #200]	; (7a4c <TIM_ConfigCapture+0xf4>)
    7984:	f240 212d 	movw	r1, #557	; 0x22d
    7988:	f7fd fd7c 	bl	5484 <check_failed>
	TIMx->CCR &= ~TIM_CCR_CHANNEL_MASKBIT(TIM_CaptureConfigStruct->CaptureChannel);
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7990:	683b      	ldr	r3, [r7, #0]
    7992:	781b      	ldrb	r3, [r3, #0]
    7994:	461a      	mov	r2, r3
    7996:	4613      	mov	r3, r2
    7998:	ea4f 0343 	mov.w	r3, r3, lsl #1
    799c:	189b      	adds	r3, r3, r2
    799e:	f04f 0207 	mov.w	r2, #7
    79a2:	fa02 f303 	lsl.w	r3, r2, r3
    79a6:	ea6f 0303 	mvn.w	r3, r3
    79aa:	ea01 0203 	and.w	r2, r1, r3
    79ae:	687b      	ldr	r3, [r7, #4]
    79b0:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->RisingEdge)
    79b2:	683b      	ldr	r3, [r7, #0]
    79b4:	785b      	ldrb	r3, [r3, #1]
    79b6:	2b00      	cmp	r3, #0
    79b8:	d010      	beq.n	79dc <TIM_ConfigCapture+0x84>
		TIMx->CCR |= TIM_CAP_RISING(TIM_CaptureConfigStruct->CaptureChannel);
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    79be:	683b      	ldr	r3, [r7, #0]
    79c0:	781b      	ldrb	r3, [r3, #0]
    79c2:	461a      	mov	r2, r3
    79c4:	4613      	mov	r3, r2
    79c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    79ca:	189b      	adds	r3, r3, r2
    79cc:	f04f 0201 	mov.w	r2, #1
    79d0:	fa02 f303 	lsl.w	r3, r2, r3
    79d4:	ea41 0203 	orr.w	r2, r1, r3
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->FallingEdge)
    79dc:	683b      	ldr	r3, [r7, #0]
    79de:	789b      	ldrb	r3, [r3, #2]
    79e0:	2b00      	cmp	r3, #0
    79e2:	d012      	beq.n	7a0a <TIM_ConfigCapture+0xb2>
		TIMx->CCR |= TIM_CAP_FALLING(TIM_CaptureConfigStruct->CaptureChannel);
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    79e8:	683b      	ldr	r3, [r7, #0]
    79ea:	781b      	ldrb	r3, [r3, #0]
    79ec:	461a      	mov	r2, r3
    79ee:	4613      	mov	r3, r2
    79f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    79f4:	189b      	adds	r3, r3, r2
    79f6:	f103 0301 	add.w	r3, r3, #1
    79fa:	f04f 0201 	mov.w	r2, #1
    79fe:	fa02 f303 	lsl.w	r3, r2, r3
    7a02:	ea41 0203 	orr.w	r2, r1, r3
    7a06:	687b      	ldr	r3, [r7, #4]
    7a08:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->IntOnCaption)
    7a0a:	683b      	ldr	r3, [r7, #0]
    7a0c:	78db      	ldrb	r3, [r3, #3]
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d012      	beq.n	7a38 <TIM_ConfigCapture+0xe0>
		TIMx->CCR |= TIM_INT_ON_CAP(TIM_CaptureConfigStruct->CaptureChannel);
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7a16:	683b      	ldr	r3, [r7, #0]
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	461a      	mov	r2, r3
    7a1c:	4613      	mov	r3, r2
    7a1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7a22:	189b      	adds	r3, r3, r2
    7a24:	f103 0302 	add.w	r3, r3, #2
    7a28:	f04f 0201 	mov.w	r2, #1
    7a2c:	fa02 f303 	lsl.w	r3, r2, r3
    7a30:	ea41 0203 	orr.w	r2, r1, r3
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	629a      	str	r2, [r3, #40]	; 0x28
}
    7a38:	f107 0708 	add.w	r7, r7, #8
    7a3c:	46bd      	mov	sp, r7
    7a3e:	bd80      	pop	{r7, pc}
    7a40:	40008000 	.word	0x40008000
    7a44:	40090000 	.word	0x40090000
    7a48:	40094000 	.word	0x40094000
    7a4c:	0000a400 	.word	0x0000a400

00007a50 <TIM_GetCaptureValue>:
 * 				- TIM_COUNTER_INCAP0: CAPn.0 input pin for TIMERn
 * 				- TIM_COUNTER_INCAP1: CAPn.1 input pin for TIMERn
 * @return 		Value of capture register
 **********************************************************************/
uint32_t TIM_GetCaptureValue(LPC_TIM_TypeDef *TIMx, TIM_COUNTER_INPUT_OPT CaptureChannel)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	b082      	sub	sp, #8
    7a54:	af00      	add	r7, sp, #0
    7a56:	6078      	str	r0, [r7, #4]
    7a58:	460b      	mov	r3, r1
    7a5a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    7a62:	d010      	beq.n	7a86 <TIM_GetCaptureValue+0x36>
    7a64:	687a      	ldr	r2, [r7, #4]
    7a66:	4b14      	ldr	r3, [pc, #80]	; (7ab8 <TIM_GetCaptureValue+0x68>)
    7a68:	429a      	cmp	r2, r3
    7a6a:	d00c      	beq.n	7a86 <TIM_GetCaptureValue+0x36>
    7a6c:	687a      	ldr	r2, [r7, #4]
    7a6e:	4b13      	ldr	r3, [pc, #76]	; (7abc <TIM_GetCaptureValue+0x6c>)
    7a70:	429a      	cmp	r2, r3
    7a72:	d008      	beq.n	7a86 <TIM_GetCaptureValue+0x36>
    7a74:	687a      	ldr	r2, [r7, #4]
    7a76:	4b12      	ldr	r3, [pc, #72]	; (7ac0 <TIM_GetCaptureValue+0x70>)
    7a78:	429a      	cmp	r2, r3
    7a7a:	d004      	beq.n	7a86 <TIM_GetCaptureValue+0x36>
    7a7c:	4811      	ldr	r0, [pc, #68]	; (7ac4 <TIM_GetCaptureValue+0x74>)
    7a7e:	f44f 7112 	mov.w	r1, #584	; 0x248
    7a82:	f7fd fcff 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_TIM_COUNTER_INPUT_OPT(CaptureChannel));
    7a86:	78fb      	ldrb	r3, [r7, #3]
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d007      	beq.n	7a9c <TIM_GetCaptureValue+0x4c>
    7a8c:	78fb      	ldrb	r3, [r7, #3]
    7a8e:	2b01      	cmp	r3, #1
    7a90:	d004      	beq.n	7a9c <TIM_GetCaptureValue+0x4c>
    7a92:	480c      	ldr	r0, [pc, #48]	; (7ac4 <TIM_GetCaptureValue+0x74>)
    7a94:	f240 2149 	movw	r1, #585	; 0x249
    7a98:	f7fd fcf4 	bl	5484 <check_failed>

	if(CaptureChannel==0)
    7a9c:	78fb      	ldrb	r3, [r7, #3]
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	d102      	bne.n	7aa8 <TIM_GetCaptureValue+0x58>
		return TIMx->CR0;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7aa6:	e001      	b.n	7aac <TIM_GetCaptureValue+0x5c>
	else
		return TIMx->CR1;
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    7aac:	4618      	mov	r0, r3
    7aae:	f107 0708 	add.w	r7, r7, #8
    7ab2:	46bd      	mov	sp, r7
    7ab4:	bd80      	pop	{r7, pc}
    7ab6:	bf00      	nop
    7ab8:	40008000 	.word	0x40008000
    7abc:	40090000 	.word	0x40090000
    7ac0:	40094000 	.word	0x40094000
    7ac4:	0000a400 	.word	0x0000a400

00007ac8 <uart_set_divisors>:
 * @return 		Error status, could be:
 * 				- SUCCESS
 * 				- ERROR
 **********************************************************************/
static Status uart_set_divisors(LPC_UART_TypeDef *UARTx, uint32_t baudrate)
{
    7ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    7acc:	b098      	sub	sp, #96	; 0x60
    7ace:	af00      	add	r7, sp, #0
    7ad0:	61f8      	str	r0, [r7, #28]
    7ad2:	61b9      	str	r1, [r7, #24]
	Status errorStatus = ERROR;
    7ad4:	f04f 0300 	mov.w	r3, #0
    7ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == LPC_UART0)
    7adc:	69fa      	ldr	r2, [r7, #28]
    7ade:	4b98      	ldr	r3, [pc, #608]	; (7d40 <uart_set_divisors+0x278>)
    7ae0:	429a      	cmp	r2, r3
    7ae2:	d105      	bne.n	7af0 <uart_set_divisors+0x28>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    7ae4:	f04f 0006 	mov.w	r0, #6
    7ae8:	f7fb fd8c 	bl	3604 <CLKPWR_GetPCLK>
    7aec:	65b8      	str	r0, [r7, #88]	; 0x58
    7aee:	e01c      	b.n	7b2a <uart_set_divisors+0x62>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    7af0:	69fa      	ldr	r2, [r7, #28]
    7af2:	4b94      	ldr	r3, [pc, #592]	; (7d44 <uart_set_divisors+0x27c>)
    7af4:	429a      	cmp	r2, r3
    7af6:	d105      	bne.n	7b04 <uart_set_divisors+0x3c>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    7af8:	f04f 0008 	mov.w	r0, #8
    7afc:	f7fb fd82 	bl	3604 <CLKPWR_GetPCLK>
    7b00:	65b8      	str	r0, [r7, #88]	; 0x58
    7b02:	e012      	b.n	7b2a <uart_set_divisors+0x62>
	}
	else if (UARTx == LPC_UART2)
    7b04:	69fa      	ldr	r2, [r7, #28]
    7b06:	4b90      	ldr	r3, [pc, #576]	; (7d48 <uart_set_divisors+0x280>)
    7b08:	429a      	cmp	r2, r3
    7b0a:	d105      	bne.n	7b18 <uart_set_divisors+0x50>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    7b0c:	f04f 0030 	mov.w	r0, #48	; 0x30
    7b10:	f7fb fd78 	bl	3604 <CLKPWR_GetPCLK>
    7b14:	65b8      	str	r0, [r7, #88]	; 0x58
    7b16:	e008      	b.n	7b2a <uart_set_divisors+0x62>
	}
	else if (UARTx == LPC_UART3)
    7b18:	69fa      	ldr	r2, [r7, #28]
    7b1a:	4b8c      	ldr	r3, [pc, #560]	; (7d4c <uart_set_divisors+0x284>)
    7b1c:	429a      	cmp	r2, r3
    7b1e:	d104      	bne.n	7b2a <uart_set_divisors+0x62>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    7b20:	f04f 0032 	mov.w	r0, #50	; 0x32
    7b24:	f7fb fd6e 	bl	3604 <CLKPWR_GetPCLK>
    7b28:	65b8      	str	r0, [r7, #88]	; 0x58
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    7b2a:	f04f 33ff 	mov.w	r3, #4294967295
    7b2e:	633b      	str	r3, [r7, #48]	; 0x30
	bestd = 0;
    7b30:	f04f 0300 	mov.w	r3, #0
    7b34:	64fb      	str	r3, [r7, #76]	; 0x4c
	bestm = 0;
    7b36:	f04f 0300 	mov.w	r3, #0
    7b3a:	64bb      	str	r3, [r7, #72]	; 0x48
	best_divisor = 0;
    7b3c:	f04f 0200 	mov.w	r2, #0
    7b40:	f04f 0300 	mov.w	r3, #0
    7b44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	for (m = 1 ; m <= 15 ;m++)
    7b48:	f04f 0301 	mov.w	r3, #1
    7b4c:	653b      	str	r3, [r7, #80]	; 0x50
    7b4e:	e078      	b.n	7c42 <uart_set_divisors+0x17a>
	{
		for (d = 0 ; d < m ; d++)
    7b50:	f04f 0300 	mov.w	r3, #0
    7b54:	657b      	str	r3, [r7, #84]	; 0x54
    7b56:	e067      	b.n	7c28 <uart_set_divisors+0x160>
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    7b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7b5a:	461a      	mov	r2, r3
    7b5c:	f04f 0300 	mov.w	r3, #0
    7b60:	ea4f 1112 	mov.w	r1, r2, lsr #4
    7b64:	ea4f 7503 	mov.w	r5, r3, lsl #28
    7b68:	ea41 0505 	orr.w	r5, r1, r5
    7b6c:	ea4f 7402 	mov.w	r4, r2, lsl #28
    7b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7b72:	461a      	mov	r2, r3
    7b74:	f04f 0300 	mov.w	r3, #0
    7b78:	fb02 f105 	mul.w	r1, r2, r5
    7b7c:	fb04 f003 	mul.w	r0, r4, r3
    7b80:	1809      	adds	r1, r1, r0
    7b82:	fba4 2302 	umull	r2, r3, r4, r2
    7b86:	18c9      	adds	r1, r1, r3
    7b88:	460b      	mov	r3, r1
    7b8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    7b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
    7b8e:	1841      	adds	r1, r0, r1
    7b90:	69b8      	ldr	r0, [r7, #24]
    7b92:	fb00 f001 	mul.w	r0, r0, r1
    7b96:	6078      	str	r0, [r7, #4]
    7b98:	6879      	ldr	r1, [r7, #4]
    7b9a:	4608      	mov	r0, r1
    7b9c:	f04f 0100 	mov.w	r1, #0
    7ba0:	e9c7 0104 	strd	r0, r1, [r7, #16]
    7ba4:	4610      	mov	r0, r2
    7ba6:	4619      	mov	r1, r3
    7ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    7bac:	f001 fcca 	bl	9544 <__aeabi_uldivmod>
    7bb0:	4602      	mov	r2, r0
    7bb2:	460b      	mov	r3, r1
    7bb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  current_error = divisor & 0xFFFFFFFF;
    7bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7bba:	637b      	str	r3, [r7, #52]	; 0x34

		  tmp = divisor>>32;
    7bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bbe:	461b      	mov	r3, r3
    7bc0:	60bb      	str	r3, [r7, #8]
    7bc2:	f04f 0300 	mov.w	r3, #0
    7bc6:	60fb      	str	r3, [r7, #12]
    7bc8:	68bb      	ldr	r3, [r7, #8]
    7bca:	647b      	str	r3, [r7, #68]	; 0x44

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    7bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7bd2:	d907      	bls.n	7be4 <uart_set_divisors+0x11c>
			current_error = -current_error;
    7bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bd6:	f1c3 0300 	rsb	r3, r3, #0
    7bda:	637b      	str	r3, [r7, #52]	; 0x34
			tmp++;
    7bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7bde:	f103 0301 	add.w	r3, r3, #1
    7be2:	647b      	str	r3, [r7, #68]	; 0x44
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    7be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7be6:	2b00      	cmp	r3, #0
    7be8:	d017      	beq.n	7c1a <uart_set_divisors+0x152>
    7bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7bf0:	d815      	bhi.n	7c1e <uart_set_divisors+0x156>
		  continue;

		  if( current_error < best_error){
    7bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7bf6:	429a      	cmp	r2, r3
    7bf8:	d212      	bcs.n	7c20 <uart_set_divisors+0x158>
			best_error = current_error;
    7bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bfc:	633b      	str	r3, [r7, #48]	; 0x30
			best_divisor = tmp;
    7bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7c00:	461a      	mov	r2, r3
    7c02:	f04f 0300 	mov.w	r3, #0
    7c06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			bestd = d;
    7c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
			bestm = m;
    7c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c10:	64bb      	str	r3, [r7, #72]	; 0x48
			if(best_error == 0) break;
    7c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7c14:	2b00      	cmp	r3, #0
    7c16:	d00c      	beq.n	7c32 <uart_set_divisors+0x16a>
    7c18:	e002      	b.n	7c20 <uart_set_divisors+0x158>
			current_error = -current_error;
			tmp++;
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
		  continue;
    7c1a:	bf00      	nop
    7c1c:	e000      	b.n	7c20 <uart_set_divisors+0x158>
    7c1e:	bf00      	nop
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    7c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7c22:	f103 0301 	add.w	r3, r3, #1
    7c26:	657b      	str	r3, [r7, #84]	; 0x54
    7c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c2c:	429a      	cmp	r2, r3
    7c2e:	d393      	bcc.n	7b58 <uart_set_divisors+0x90>
    7c30:	e000      	b.n	7c34 <uart_set_divisors+0x16c>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    7c32:	bf00      	nop
			}
		} /* end of inner for loop */

		if (best_error == 0)
    7c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7c36:	2b00      	cmp	r3, #0
    7c38:	d007      	beq.n	7c4a <uart_set_divisors+0x182>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    7c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c3c:	f103 0301 	add.w	r3, r3, #1
    7c40:	653b      	str	r3, [r7, #80]	; 0x50
    7c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c44:	2b0f      	cmp	r3, #15
    7c46:	d983      	bls.n	7b50 <uart_set_divisors+0x88>
    7c48:	e000      	b.n	7c4c <uart_set_divisors+0x184>
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
		  break;
    7c4a:	bf00      	nop
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    7c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    7c50:	ea52 0003 	orrs.w	r0, r2, r3
    7c54:	d102      	bne.n	7c5c <uart_set_divisors+0x194>
    7c56:	f04f 0300 	mov.w	r3, #0
    7c5a:	e0b2      	b.n	7dc2 <uart_set_divisors+0x2fa>

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    7c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7c5e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    7c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
    7c64:	fb02 f303 	mul.w	r3, r2, r3
    7c68:	461c      	mov	r4, r3
    7c6a:	f04f 0500 	mov.w	r5, #0
    7c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    7c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7c72:	18d3      	adds	r3, r2, r3
    7c74:	461a      	mov	r2, r3
    7c76:	f04f 0300 	mov.w	r3, #0
    7c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    7c7c:	fb03 f101 	mul.w	r1, r3, r1
    7c80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    7c82:	fb02 f000 	mul.w	r0, r2, r0
    7c86:	1809      	adds	r1, r1, r0
    7c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    7c8a:	fba0 2302 	umull	r2, r3, r0, r2
    7c8e:	18c9      	adds	r1, r1, r3
    7c90:	460b      	mov	r3, r1
    7c92:	4620      	mov	r0, r4
    7c94:	4629      	mov	r1, r5
    7c96:	f001 fc55 	bl	9544 <__aeabi_uldivmod>
    7c9a:	4602      	mov	r2, r0
    7c9c:	460b      	mov	r3, r1
    7c9e:	4613      	mov	r3, r2
    7ca0:	627b      	str	r3, [r7, #36]	; 0x24

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    7ca2:	69ba      	ldr	r2, [r7, #24]
    7ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ca6:	429a      	cmp	r2, r3
    7ca8:	d904      	bls.n	7cb4 <uart_set_divisors+0x1ec>
    7caa:	69ba      	ldr	r2, [r7, #24]
    7cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cae:	1ad3      	subs	r3, r2, r3
    7cb0:	633b      	str	r3, [r7, #48]	; 0x30
    7cb2:	e003      	b.n	7cbc <uart_set_divisors+0x1f4>
	else best_error = recalcbaud -baudrate;
    7cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7cb6:	69bb      	ldr	r3, [r7, #24]
    7cb8:	1ad3      	subs	r3, r2, r3
    7cba:	633b      	str	r3, [r7, #48]	; 0x30

	best_error = best_error * 100 / baudrate;
    7cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7cbe:	f04f 0264 	mov.w	r2, #100	; 0x64
    7cc2:	fb02 f203 	mul.w	r2, r2, r3
    7cc6:	69bb      	ldr	r3, [r7, #24]
    7cc8:	fbb2 f3f3 	udiv	r3, r2, r3
    7ccc:	633b      	str	r3, [r7, #48]	; 0x30

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    7cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7cd0:	2b02      	cmp	r3, #2
    7cd2:	d874      	bhi.n	7dbe <uart_set_divisors+0x2f6>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    7cd4:	69fa      	ldr	r2, [r7, #28]
    7cd6:	4b1b      	ldr	r3, [pc, #108]	; (7d44 <uart_set_divisors+0x27c>)
    7cd8:	429a      	cmp	r2, r3
    7cda:	d139      	bne.n	7d50 <uart_set_divisors+0x288>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    7cdc:	69fb      	ldr	r3, [r7, #28]
    7cde:	69fa      	ldr	r2, [r7, #28]
    7ce0:	7b12      	ldrb	r2, [r2, #12]
    7ce2:	b2d2      	uxtb	r2, r2
    7ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7ce8:	b2d2      	uxtb	r2, r2
    7cea:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    7cec:	69fb      	ldr	r3, [r7, #28]
    7cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7cf0:	ea4f 6202 	mov.w	r2, r2, lsl #24
    7cf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    7cf6:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    7cfa:	ea42 0a0a 	orr.w	sl, r2, sl
    7cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7d00:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    7d04:	fa5f f28a 	uxtb.w	r2, sl
    7d08:	711a      	strb	r2, [r3, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    7d0a:	69fb      	ldr	r3, [r7, #28]
    7d0c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    7d10:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    7d12:	69fb      	ldr	r3, [r7, #28]
    7d14:	69fa      	ldr	r2, [r7, #28]
    7d16:	7b12      	ldrb	r2, [r2, #12]
    7d18:	b2d2      	uxtb	r2, r2
    7d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7d1e:	b2d2      	uxtb	r2, r2
    7d20:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    7d22:	69fb      	ldr	r3, [r7, #28]
    7d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
    7d26:	ea4f 1202 	mov.w	r2, r2, lsl #4
    7d2a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    7d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    7d30:	f002 020f 	and.w	r2, r2, #15
    7d34:	ea41 0202 	orr.w	r2, r1, r2
    7d38:	f002 02ff 	and.w	r2, r2, #255	; 0xff
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    7d3c:	629a      	str	r2, [r3, #40]	; 0x28
    7d3e:	e03a      	b.n	7db6 <uart_set_divisors+0x2ee>
    7d40:	4000c000 	.word	0x4000c000
    7d44:	40010000 	.word	0x40010000
    7d48:	40098000 	.word	0x40098000
    7d4c:	4009c000 	.word	0x4009c000
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
    7d50:	69fb      	ldr	r3, [r7, #28]
    7d52:	7b1b      	ldrb	r3, [r3, #12]
    7d54:	b2db      	uxtb	r3, r3
    7d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d5a:	b2da      	uxtb	r2, r3
    7d5c:	69fb      	ldr	r3, [r7, #28]
    7d5e:	731a      	strb	r2, [r3, #12]
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    7d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7d62:	ea4f 6303 	mov.w	r3, r3, lsl #24
    7d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
    7d68:	ea4f 2812 	mov.w	r8, r2, lsr #8
    7d6c:	ea43 0808 	orr.w	r8, r3, r8
    7d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7d72:	ea4f 2913 	mov.w	r9, r3, lsr #8
    7d76:	fa5f f288 	uxtb.w	r2, r8
    7d7a:	69fb      	ldr	r3, [r7, #28]
    7d7c:	711a      	strb	r2, [r3, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    7d7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    7d82:	69fb      	ldr	r3, [r7, #28]
    7d84:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    7d86:	69fb      	ldr	r3, [r7, #28]
    7d88:	7b1b      	ldrb	r3, [r3, #12]
    7d8a:	b2db      	uxtb	r3, r3
    7d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d90:	b2da      	uxtb	r2, r3
    7d92:	69fb      	ldr	r3, [r7, #28]
    7d94:	731a      	strb	r2, [r3, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    7d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    7d98:	b2db      	uxtb	r3, r3
    7d9a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    7d9e:	b2da      	uxtb	r2, r3
    7da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7da2:	b2db      	uxtb	r3, r3
    7da4:	f003 030f 	and.w	r3, r3, #15
    7da8:	b2db      	uxtb	r3, r3
    7daa:	ea42 0303 	orr.w	r3, r2, r3
    7dae:	b2da      	uxtb	r2, r3
    7db0:	69fb      	ldr	r3, [r7, #28]
    7db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			errorStatus = SUCCESS;
    7db6:	f04f 0301 	mov.w	r3, #1
    7dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		return errorStatus;
    7dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
    7dc2:	4618      	mov	r0, r3
    7dc4:	f107 0760 	add.w	r7, r7, #96	; 0x60
    7dc8:	46bd      	mov	sp, r7
    7dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    7dce:	bf00      	nop

00007dd0 <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b084      	sub	sp, #16
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
    7dd8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    7dda:	687a      	ldr	r2, [r7, #4]
    7ddc:	4b8d      	ldr	r3, [pc, #564]	; (8014 <UART_Init+0x244>)
    7dde:	429a      	cmp	r2, r3
    7de0:	d010      	beq.n	7e04 <UART_Init+0x34>
    7de2:	687a      	ldr	r2, [r7, #4]
    7de4:	4b8c      	ldr	r3, [pc, #560]	; (8018 <UART_Init+0x248>)
    7de6:	429a      	cmp	r2, r3
    7de8:	d00c      	beq.n	7e04 <UART_Init+0x34>
    7dea:	687a      	ldr	r2, [r7, #4]
    7dec:	4b8b      	ldr	r3, [pc, #556]	; (801c <UART_Init+0x24c>)
    7dee:	429a      	cmp	r2, r3
    7df0:	d008      	beq.n	7e04 <UART_Init+0x34>
    7df2:	687a      	ldr	r2, [r7, #4]
    7df4:	4b8a      	ldr	r3, [pc, #552]	; (8020 <UART_Init+0x250>)
    7df6:	429a      	cmp	r2, r3
    7df8:	d004      	beq.n	7e04 <UART_Init+0x34>
    7dfa:	488a      	ldr	r0, [pc, #552]	; (8024 <UART_Init+0x254>)
    7dfc:	f04f 01c9 	mov.w	r1, #201	; 0xc9
    7e00:	f7fd fb40 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
    7e04:	683b      	ldr	r3, [r7, #0]
    7e06:	795b      	ldrb	r3, [r3, #5]
    7e08:	2b00      	cmp	r3, #0
    7e0a:	d010      	beq.n	7e2e <UART_Init+0x5e>
    7e0c:	683b      	ldr	r3, [r7, #0]
    7e0e:	795b      	ldrb	r3, [r3, #5]
    7e10:	2b01      	cmp	r3, #1
    7e12:	d00c      	beq.n	7e2e <UART_Init+0x5e>
    7e14:	683b      	ldr	r3, [r7, #0]
    7e16:	795b      	ldrb	r3, [r3, #5]
    7e18:	2b02      	cmp	r3, #2
    7e1a:	d008      	beq.n	7e2e <UART_Init+0x5e>
    7e1c:	683b      	ldr	r3, [r7, #0]
    7e1e:	795b      	ldrb	r3, [r3, #5]
    7e20:	2b03      	cmp	r3, #3
    7e22:	d004      	beq.n	7e2e <UART_Init+0x5e>
    7e24:	487f      	ldr	r0, [pc, #508]	; (8024 <UART_Init+0x254>)
    7e26:	f04f 01ca 	mov.w	r1, #202	; 0xca
    7e2a:	f7fd fb2b 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
    7e2e:	683b      	ldr	r3, [r7, #0]
    7e30:	799b      	ldrb	r3, [r3, #6]
    7e32:	2b00      	cmp	r3, #0
    7e34:	d008      	beq.n	7e48 <UART_Init+0x78>
    7e36:	683b      	ldr	r3, [r7, #0]
    7e38:	799b      	ldrb	r3, [r3, #6]
    7e3a:	2b01      	cmp	r3, #1
    7e3c:	d004      	beq.n	7e48 <UART_Init+0x78>
    7e3e:	4879      	ldr	r0, [pc, #484]	; (8024 <UART_Init+0x254>)
    7e40:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    7e44:	f7fd fb1e 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
    7e48:	683b      	ldr	r3, [r7, #0]
    7e4a:	791b      	ldrb	r3, [r3, #4]
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d014      	beq.n	7e7a <UART_Init+0xaa>
    7e50:	683b      	ldr	r3, [r7, #0]
    7e52:	791b      	ldrb	r3, [r3, #4]
    7e54:	2b01      	cmp	r3, #1
    7e56:	d010      	beq.n	7e7a <UART_Init+0xaa>
    7e58:	683b      	ldr	r3, [r7, #0]
    7e5a:	791b      	ldrb	r3, [r3, #4]
    7e5c:	2b02      	cmp	r3, #2
    7e5e:	d00c      	beq.n	7e7a <UART_Init+0xaa>
    7e60:	683b      	ldr	r3, [r7, #0]
    7e62:	791b      	ldrb	r3, [r3, #4]
    7e64:	2b03      	cmp	r3, #3
    7e66:	d008      	beq.n	7e7a <UART_Init+0xaa>
    7e68:	683b      	ldr	r3, [r7, #0]
    7e6a:	791b      	ldrb	r3, [r3, #4]
    7e6c:	2b04      	cmp	r3, #4
    7e6e:	d004      	beq.n	7e7a <UART_Init+0xaa>
    7e70:	486c      	ldr	r0, [pc, #432]	; (8024 <UART_Init+0x254>)
    7e72:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    7e76:	f7fd fb05 	bl	5484 <check_failed>

#ifdef _UART0
	if(UARTx == LPC_UART0)
    7e7a:	687a      	ldr	r2, [r7, #4]
    7e7c:	4b65      	ldr	r3, [pc, #404]	; (8014 <UART_Init+0x244>)
    7e7e:	429a      	cmp	r2, r3
    7e80:	d105      	bne.n	7e8e <UART_Init+0xbe>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    7e82:	f04f 0008 	mov.w	r0, #8
    7e86:	f04f 0101 	mov.w	r1, #1
    7e8a:	f7fb fbf3 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    7e8e:	687a      	ldr	r2, [r7, #4]
    7e90:	4b61      	ldr	r3, [pc, #388]	; (8018 <UART_Init+0x248>)
    7e92:	429a      	cmp	r2, r3
    7e94:	d105      	bne.n	7ea2 <UART_Init+0xd2>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    7e96:	f04f 0010 	mov.w	r0, #16
    7e9a:	f04f 0101 	mov.w	r1, #1
    7e9e:	f7fb fbe9 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART2
	if(UARTx == LPC_UART2)
    7ea2:	687a      	ldr	r2, [r7, #4]
    7ea4:	4b5d      	ldr	r3, [pc, #372]	; (801c <UART_Init+0x24c>)
    7ea6:	429a      	cmp	r2, r3
    7ea8:	d105      	bne.n	7eb6 <UART_Init+0xe6>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    7eaa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    7eae:	f04f 0101 	mov.w	r1, #1
    7eb2:	f7fb fbdf 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART3
	if(UARTx == LPC_UART3)
    7eb6:	687a      	ldr	r2, [r7, #4]
    7eb8:	4b59      	ldr	r3, [pc, #356]	; (8020 <UART_Init+0x250>)
    7eba:	429a      	cmp	r2, r3
    7ebc:	d105      	bne.n	7eca <UART_Init+0xfa>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    7ebe:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    7ec2:	f04f 0101 	mov.w	r1, #1
    7ec6:	f7fb fbd5 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    7eca:	687a      	ldr	r2, [r7, #4]
    7ecc:	4b52      	ldr	r3, [pc, #328]	; (8018 <UART_Init+0x248>)
    7ece:	429a      	cmp	r2, r3
    7ed0:	d14e      	bne.n	7f70 <UART_Init+0x1a0>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    7ed2:	687b      	ldr	r3, [r7, #4]
    7ed4:	f04f 0207 	mov.w	r2, #7
    7ed8:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	f04f 0200 	mov.w	r2, #0
    7ee0:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    7ee2:	e003      	b.n	7eec <UART_Init+0x11c>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	781b      	ldrb	r3, [r3, #0]
    7ee8:	b2db      	uxtb	r3, r3
    7eea:	60fb      	str	r3, [r7, #12]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	7d1b      	ldrb	r3, [r3, #20]
    7ef0:	b2db      	uxtb	r3, r3
    7ef2:	f003 0301 	and.w	r3, r3, #1
    7ef6:	b2db      	uxtb	r3, r3
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d1f3      	bne.n	7ee4 <UART_Init+0x114>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    7efc:	687b      	ldr	r3, [r7, #4]
    7efe:	f04f 0280 	mov.w	r2, #128	; 0x80
    7f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    7f06:	bf00      	nop
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	7d1b      	ldrb	r3, [r3, #20]
    7f0c:	b2db      	uxtb	r3, r3
    7f0e:	f003 0320 	and.w	r3, r3, #32
    7f12:	2b00      	cmp	r3, #0
    7f14:	d0f8      	beq.n	7f08 <UART_Init+0x138>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    7f16:	687b      	ldr	r3, [r7, #4]
    7f18:	f04f 0200 	mov.w	r2, #0
    7f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	f04f 0200 	mov.w	r2, #0
    7f26:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    7f28:	687b      	ldr	r3, [r7, #4]
    7f2a:	f04f 0200 	mov.w	r2, #0
    7f2e:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	f04f 0200 	mov.w	r2, #0
    7f36:	621a      	str	r2, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    7f38:	687b      	ldr	r3, [r7, #4]
    7f3a:	f04f 0200 	mov.w	r2, #0
    7f3e:	741a      	strb	r2, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	f04f 0200 	mov.w	r2, #0
    7f46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	f04f 0200 	mov.w	r2, #0
    7f50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	f04f 0200 	mov.w	r2, #0
    7f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	7e1b      	ldrb	r3, [r3, #24]
    7f62:	b2db      	uxtb	r3, r3
    7f64:	60fb      	str	r3, [r7, #12]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	7d1b      	ldrb	r3, [r3, #20]
    7f6a:	b2db      	uxtb	r3, r3
    7f6c:	60fb      	str	r3, [r7, #12]
    7f6e:	e036      	b.n	7fde <UART_Init+0x20e>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	f04f 0207 	mov.w	r2, #7
    7f76:	721a      	strb	r2, [r3, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	f04f 0200 	mov.w	r2, #0
    7f7e:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    7f80:	e003      	b.n	7f8a <UART_Init+0x1ba>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    7f82:	687b      	ldr	r3, [r7, #4]
    7f84:	781b      	ldrb	r3, [r3, #0]
    7f86:	b2db      	uxtb	r3, r3
    7f88:	60fb      	str	r3, [r7, #12]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	7d1b      	ldrb	r3, [r3, #20]
    7f8e:	b2db      	uxtb	r3, r3
    7f90:	f003 0301 	and.w	r3, r3, #1
    7f94:	b2db      	uxtb	r3, r3
    7f96:	2b00      	cmp	r3, #0
    7f98:	d1f3      	bne.n	7f82 <UART_Init+0x1b2>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	f04f 0280 	mov.w	r2, #128	; 0x80
    7fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    7fa4:	bf00      	nop
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	7d1b      	ldrb	r3, [r3, #20]
    7faa:	b2db      	uxtb	r3, r3
    7fac:	f003 0320 	and.w	r3, r3, #32
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d0f8      	beq.n	7fa6 <UART_Init+0x1d6>
		// Disable Tx
		UARTx->TER = 0;
    7fb4:	687b      	ldr	r3, [r7, #4]
    7fb6:	f04f 0200 	mov.w	r2, #0
    7fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	f04f 0200 	mov.w	r2, #0
    7fc4:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	f04f 0200 	mov.w	r2, #0
    7fcc:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	f04f 0200 	mov.w	r2, #0
    7fd4:	621a      	str	r2, [r3, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	7d1b      	ldrb	r3, [r3, #20]
    7fda:	b2db      	uxtb	r3, r3
    7fdc:	60fb      	str	r3, [r7, #12]
	}

	if (UARTx == LPC_UART3)
    7fde:	687a      	ldr	r2, [r7, #4]
    7fe0:	4b0f      	ldr	r3, [pc, #60]	; (8020 <UART_Init+0x250>)
    7fe2:	429a      	cmp	r2, r3
    7fe4:	d104      	bne.n	7ff0 <UART_Init+0x220>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    7fe6:	687b      	ldr	r3, [r7, #4]
    7fe8:	f04f 0200 	mov.w	r2, #0
    7fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    7ff0:	683b      	ldr	r3, [r7, #0]
    7ff2:	681b      	ldr	r3, [r3, #0]
    7ff4:	6878      	ldr	r0, [r7, #4]
    7ff6:	4619      	mov	r1, r3
    7ff8:	f7ff fd66 	bl	7ac8 <uart_set_divisors>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    7ffc:	687a      	ldr	r2, [r7, #4]
    7ffe:	4b06      	ldr	r3, [pc, #24]	; (8018 <UART_Init+0x248>)
    8000:	429a      	cmp	r2, r3
    8002:	d111      	bne.n	8028 <UART_Init+0x258>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	7b1b      	ldrb	r3, [r3, #12]
    8008:	b2db      	uxtb	r3, r3
    800a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    800e:	60fb      	str	r3, [r7, #12]
    8010:	e010      	b.n	8034 <UART_Init+0x264>
    8012:	bf00      	nop
    8014:	4000c000 	.word	0x4000c000
    8018:	40010000 	.word	0x40010000
    801c:	40098000 	.word	0x40098000
    8020:	4009c000 	.word	0x4009c000
    8024:	0000a42c 	.word	0x0000a42c
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    8028:	687b      	ldr	r3, [r7, #4]
    802a:	7b1b      	ldrb	r3, [r3, #12]
    802c:	b2db      	uxtb	r3, r3
    802e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8032:	60fb      	str	r3, [r7, #12]
	}

	switch (UART_ConfigStruct->Databits){
    8034:	683b      	ldr	r3, [r7, #0]
    8036:	795b      	ldrb	r3, [r3, #5]
    8038:	2b01      	cmp	r3, #1
    803a:	d004      	beq.n	8046 <UART_Init+0x276>
    803c:	2b02      	cmp	r3, #2
    803e:	d007      	beq.n	8050 <UART_Init+0x280>
    8040:	2b00      	cmp	r3, #0
    8042:	d00f      	beq.n	8064 <UART_Init+0x294>
    8044:	e009      	b.n	805a <UART_Init+0x28a>
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    8046:	68fb      	ldr	r3, [r7, #12]
    8048:	f043 0301 	orr.w	r3, r3, #1
    804c:	60fb      	str	r3, [r7, #12]
		break;
    804e:	e00a      	b.n	8066 <UART_Init+0x296>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    8050:	68fb      	ldr	r3, [r7, #12]
    8052:	f043 0302 	orr.w	r3, r3, #2
    8056:	60fb      	str	r3, [r7, #12]
		break;
    8058:	e005      	b.n	8066 <UART_Init+0x296>
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    805a:	68fb      	ldr	r3, [r7, #12]
    805c:	f043 0303 	orr.w	r3, r3, #3
    8060:	60fb      	str	r3, [r7, #12]
		break;
    8062:	e000      	b.n	8066 <UART_Init+0x296>
	}

	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
    8064:	bf00      	nop
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    8066:	683b      	ldr	r3, [r7, #0]
    8068:	791b      	ldrb	r3, [r3, #4]
    806a:	2b00      	cmp	r3, #0
    806c:	d024      	beq.n	80b8 <UART_Init+0x2e8>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    806e:	68fb      	ldr	r3, [r7, #12]
    8070:	f043 0308 	orr.w	r3, r3, #8
    8074:	60fb      	str	r3, [r7, #12]
		switch (UART_ConfigStruct->Parity)
    8076:	683b      	ldr	r3, [r7, #0]
    8078:	791b      	ldrb	r3, [r3, #4]
    807a:	f103 33ff 	add.w	r3, r3, #4294967295
    807e:	2b03      	cmp	r3, #3
    8080:	d819      	bhi.n	80b6 <UART_Init+0x2e6>
    8082:	a201      	add	r2, pc, #4	; (adr r2, 8088 <UART_Init+0x2b8>)
    8084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8088:	000080b7 	.word	0x000080b7
    808c:	00008099 	.word	0x00008099
    8090:	000080a3 	.word	0x000080a3
    8094:	000080ad 	.word	0x000080ad
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    8098:	68fb      	ldr	r3, [r7, #12]
    809a:	f043 0310 	orr.w	r3, r3, #16
    809e:	60fb      	str	r3, [r7, #12]
			break;
    80a0:	e00a      	b.n	80b8 <UART_Init+0x2e8>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    80a2:	68fb      	ldr	r3, [r7, #12]
    80a4:	f043 0320 	orr.w	r3, r3, #32
    80a8:	60fb      	str	r3, [r7, #12]
			break;
    80aa:	e005      	b.n	80b8 <UART_Init+0x2e8>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    80ac:	68fb      	ldr	r3, [r7, #12]
    80ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    80b2:	60fb      	str	r3, [r7, #12]
			break;
    80b4:	e000      	b.n	80b8 <UART_Init+0x2e8>
		default:
			break;
    80b6:	bf00      	nop
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    80b8:	683b      	ldr	r3, [r7, #0]
    80ba:	799b      	ldrb	r3, [r3, #6]
    80bc:	2b01      	cmp	r3, #1
    80be:	d104      	bne.n	80ca <UART_Init+0x2fa>
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    80c0:	68fb      	ldr	r3, [r7, #12]
    80c2:	f043 0304 	orr.w	r3, r3, #4
    80c6:	60fb      	str	r3, [r7, #12]
		break;
    80c8:	e000      	b.n	80cc <UART_Init+0x2fc>
	case UART_STOPBIT_1:
	default:
		// Do no thing
		break;
    80ca:	bf00      	nop
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
    80cc:	687a      	ldr	r2, [r7, #4]
    80ce:	4b08      	ldr	r3, [pc, #32]	; (80f0 <UART_Init+0x320>)
    80d0:	429a      	cmp	r2, r3
    80d2:	d104      	bne.n	80de <UART_Init+0x30e>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    80d4:	687b      	ldr	r3, [r7, #4]
    80d6:	68fa      	ldr	r2, [r7, #12]
    80d8:	b2d2      	uxtb	r2, r2
    80da:	731a      	strb	r2, [r3, #12]
    80dc:	e003      	b.n	80e6 <UART_Init+0x316>
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    80de:	68fb      	ldr	r3, [r7, #12]
    80e0:	b2da      	uxtb	r2, r3
    80e2:	687b      	ldr	r3, [r7, #4]
    80e4:	731a      	strb	r2, [r3, #12]
	}
}
    80e6:	f107 0710 	add.w	r7, r7, #16
    80ea:	46bd      	mov	sp, r7
    80ec:	bd80      	pop	{r7, pc}
    80ee:	bf00      	nop
    80f0:	40010000 	.word	0x40010000

000080f4 <UART_DeInit>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
    80f4:	b580      	push	{r7, lr}
    80f6:	b082      	sub	sp, #8
    80f8:	af00      	add	r7, sp, #0
    80fa:	6078      	str	r0, [r7, #4]
	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    80fc:	687a      	ldr	r2, [r7, #4]
    80fe:	4b22      	ldr	r3, [pc, #136]	; (8188 <UART_DeInit+0x94>)
    8100:	429a      	cmp	r2, r3
    8102:	d010      	beq.n	8126 <UART_DeInit+0x32>
    8104:	687a      	ldr	r2, [r7, #4]
    8106:	4b21      	ldr	r3, [pc, #132]	; (818c <UART_DeInit+0x98>)
    8108:	429a      	cmp	r2, r3
    810a:	d00c      	beq.n	8126 <UART_DeInit+0x32>
    810c:	687a      	ldr	r2, [r7, #4]
    810e:	4b20      	ldr	r3, [pc, #128]	; (8190 <UART_DeInit+0x9c>)
    8110:	429a      	cmp	r2, r3
    8112:	d008      	beq.n	8126 <UART_DeInit+0x32>
    8114:	687a      	ldr	r2, [r7, #4]
    8116:	4b1f      	ldr	r3, [pc, #124]	; (8194 <UART_DeInit+0xa0>)
    8118:	429a      	cmp	r2, r3
    811a:	d004      	beq.n	8126 <UART_DeInit+0x32>
    811c:	481e      	ldr	r0, [pc, #120]	; (8198 <UART_DeInit+0xa4>)
    811e:	f240 1195 	movw	r1, #405	; 0x195
    8122:	f7fd f9af 	bl	5484 <check_failed>

	UART_TxCmd(UARTx, DISABLE);
    8126:	6878      	ldr	r0, [r7, #4]
    8128:	f04f 0100 	mov.w	r1, #0
    812c:	f000 fcd0 	bl	8ad0 <UART_TxCmd>

#ifdef _UART0
	if (UARTx == LPC_UART0)
    8130:	687a      	ldr	r2, [r7, #4]
    8132:	4b15      	ldr	r3, [pc, #84]	; (8188 <UART_DeInit+0x94>)
    8134:	429a      	cmp	r2, r3
    8136:	d105      	bne.n	8144 <UART_DeInit+0x50>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, DISABLE);
    8138:	f04f 0008 	mov.w	r0, #8
    813c:	f04f 0100 	mov.w	r1, #0
    8140:	f7fb fa98 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8144:	687a      	ldr	r2, [r7, #4]
    8146:	4b11      	ldr	r3, [pc, #68]	; (818c <UART_DeInit+0x98>)
    8148:	429a      	cmp	r2, r3
    814a:	d105      	bne.n	8158 <UART_DeInit+0x64>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, DISABLE);
    814c:	f04f 0010 	mov.w	r0, #16
    8150:	f04f 0100 	mov.w	r1, #0
    8154:	f7fb fa8e 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART2
	if (UARTx == LPC_UART2)
    8158:	687a      	ldr	r2, [r7, #4]
    815a:	4b0d      	ldr	r3, [pc, #52]	; (8190 <UART_DeInit+0x9c>)
    815c:	429a      	cmp	r2, r3
    815e:	d105      	bne.n	816c <UART_DeInit+0x78>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, DISABLE);
    8160:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    8164:	f04f 0100 	mov.w	r1, #0
    8168:	f7fb fa84 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART3
	if (UARTx == LPC_UART3)
    816c:	687a      	ldr	r2, [r7, #4]
    816e:	4b09      	ldr	r3, [pc, #36]	; (8194 <UART_DeInit+0xa0>)
    8170:	429a      	cmp	r2, r3
    8172:	d105      	bne.n	8180 <UART_DeInit+0x8c>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
    8174:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    8178:	f04f 0100 	mov.w	r1, #0
    817c:	f7fb fa7a 	bl	3674 <CLKPWR_ConfigPPWR>
	}
#endif
}
    8180:	f107 0708 	add.w	r7, r7, #8
    8184:	46bd      	mov	sp, r7
    8186:	bd80      	pop	{r7, pc}
    8188:	4000c000 	.word	0x4000c000
    818c:	40010000 	.word	0x40010000
    8190:	40098000 	.word	0x40098000
    8194:	4009c000 	.word	0x4009c000
    8198:	0000a42c 	.word	0x0000a42c

0000819c <UART_ConfigStructInit>:
* @param[in]	UART_InitStruct Pointer to a UART_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
    819c:	b480      	push	{r7}
    819e:	b083      	sub	sp, #12
    81a0:	af00      	add	r7, sp, #0
    81a2:	6078      	str	r0, [r7, #4]
	UART_InitStruct->Baud_rate = 9600;
    81a4:	687b      	ldr	r3, [r7, #4]
    81a6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    81aa:	601a      	str	r2, [r3, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	f04f 0203 	mov.w	r2, #3
    81b2:	715a      	strb	r2, [r3, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    81b4:	687b      	ldr	r3, [r7, #4]
    81b6:	f04f 0200 	mov.w	r2, #0
    81ba:	711a      	strb	r2, [r3, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	f04f 0200 	mov.w	r2, #0
    81c2:	719a      	strb	r2, [r3, #6]
}
    81c4:	f107 070c 	add.w	r7, r7, #12
    81c8:	46bd      	mov	sp, r7
    81ca:	bc80      	pop	{r7}
    81cc:	4770      	bx	lr
    81ce:	bf00      	nop

000081d0 <UART_SendByte>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return 		None
 **********************************************************************/
void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b082      	sub	sp, #8
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
    81d8:	460b      	mov	r3, r1
    81da:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    81dc:	687a      	ldr	r2, [r7, #4]
    81de:	4b11      	ldr	r3, [pc, #68]	; (8224 <UART_SendByte+0x54>)
    81e0:	429a      	cmp	r2, r3
    81e2:	d010      	beq.n	8206 <UART_SendByte+0x36>
    81e4:	687a      	ldr	r2, [r7, #4]
    81e6:	4b10      	ldr	r3, [pc, #64]	; (8228 <UART_SendByte+0x58>)
    81e8:	429a      	cmp	r2, r3
    81ea:	d00c      	beq.n	8206 <UART_SendByte+0x36>
    81ec:	687a      	ldr	r2, [r7, #4]
    81ee:	4b0f      	ldr	r3, [pc, #60]	; (822c <UART_SendByte+0x5c>)
    81f0:	429a      	cmp	r2, r3
    81f2:	d008      	beq.n	8206 <UART_SendByte+0x36>
    81f4:	687a      	ldr	r2, [r7, #4]
    81f6:	4b0e      	ldr	r3, [pc, #56]	; (8230 <UART_SendByte+0x60>)
    81f8:	429a      	cmp	r2, r3
    81fa:	d004      	beq.n	8206 <UART_SendByte+0x36>
    81fc:	480d      	ldr	r0, [pc, #52]	; (8234 <UART_SendByte+0x64>)
    81fe:	f240 11d9 	movw	r1, #473	; 0x1d9
    8202:	f7fd f93f 	bl	5484 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8206:	687a      	ldr	r2, [r7, #4]
    8208:	4b07      	ldr	r3, [pc, #28]	; (8228 <UART_SendByte+0x58>)
    820a:	429a      	cmp	r2, r3
    820c:	d103      	bne.n	8216 <UART_SendByte+0x46>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	78fa      	ldrb	r2, [r7, #3]
    8212:	701a      	strb	r2, [r3, #0]
    8214:	e002      	b.n	821c <UART_SendByte+0x4c>
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    8216:	687b      	ldr	r3, [r7, #4]
    8218:	78fa      	ldrb	r2, [r7, #3]
    821a:	701a      	strb	r2, [r3, #0]
	}

}
    821c:	f107 0708 	add.w	r7, r7, #8
    8220:	46bd      	mov	sp, r7
    8222:	bd80      	pop	{r7, pc}
    8224:	4000c000 	.word	0x4000c000
    8228:	40010000 	.word	0x40010000
    822c:	40098000 	.word	0x40098000
    8230:	4009c000 	.word	0x4009c000
    8234:	0000a42c 	.word	0x0000a42c

00008238 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    8238:	b580      	push	{r7, lr}
    823a:	b082      	sub	sp, #8
    823c:	af00      	add	r7, sp, #0
    823e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    8240:	687a      	ldr	r2, [r7, #4]
    8242:	4b12      	ldr	r3, [pc, #72]	; (828c <UART_ReceiveByte+0x54>)
    8244:	429a      	cmp	r2, r3
    8246:	d010      	beq.n	826a <UART_ReceiveByte+0x32>
    8248:	687a      	ldr	r2, [r7, #4]
    824a:	4b11      	ldr	r3, [pc, #68]	; (8290 <UART_ReceiveByte+0x58>)
    824c:	429a      	cmp	r2, r3
    824e:	d00c      	beq.n	826a <UART_ReceiveByte+0x32>
    8250:	687a      	ldr	r2, [r7, #4]
    8252:	4b10      	ldr	r3, [pc, #64]	; (8294 <UART_ReceiveByte+0x5c>)
    8254:	429a      	cmp	r2, r3
    8256:	d008      	beq.n	826a <UART_ReceiveByte+0x32>
    8258:	687a      	ldr	r2, [r7, #4]
    825a:	4b0f      	ldr	r3, [pc, #60]	; (8298 <UART_ReceiveByte+0x60>)
    825c:	429a      	cmp	r2, r3
    825e:	d004      	beq.n	826a <UART_ReceiveByte+0x32>
    8260:	480e      	ldr	r0, [pc, #56]	; (829c <UART_ReceiveByte+0x64>)
    8262:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    8266:	f7fd f90d 	bl	5484 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    826a:	687a      	ldr	r2, [r7, #4]
    826c:	4b08      	ldr	r3, [pc, #32]	; (8290 <UART_ReceiveByte+0x58>)
    826e:	429a      	cmp	r2, r3
    8270:	d103      	bne.n	827a <UART_ReceiveByte+0x42>
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    8272:	687b      	ldr	r3, [r7, #4]
    8274:	781b      	ldrb	r3, [r3, #0]
    8276:	b2db      	uxtb	r3, r3
    8278:	e002      	b.n	8280 <UART_ReceiveByte+0x48>
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	781b      	ldrb	r3, [r3, #0]
    827e:	b2db      	uxtb	r3, r3
	}
}
    8280:	4618      	mov	r0, r3
    8282:	f107 0708 	add.w	r7, r7, #8
    8286:	46bd      	mov	sp, r7
    8288:	bd80      	pop	{r7, pc}
    828a:	bf00      	nop
    828c:	4000c000 	.word	0x4000c000
    8290:	40010000 	.word	0x40010000
    8294:	40098000 	.word	0x40098000
    8298:	4009c000 	.word	0x4009c000
    829c:	0000a42c 	.word	0x0000a42c

000082a0 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	b08a      	sub	sp, #40	; 0x28
    82a4:	af00      	add	r7, sp, #0
    82a6:	60f8      	str	r0, [r7, #12]
    82a8:	60b9      	str	r1, [r7, #8]
    82aa:	607a      	str	r2, [r7, #4]
    82ac:	70fb      	strb	r3, [r7, #3]
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar = txbuf;
    82ae:	68bb      	ldr	r3, [r7, #8]
    82b0:	617b      	str	r3, [r7, #20]

	bToSend = buflen;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	627b      	str	r3, [r7, #36]	; 0x24

	// blocking mode
	if (flag == BLOCKING) {
    82b6:	78fb      	ldrb	r3, [r7, #3]
    82b8:	2b01      	cmp	r3, #1
    82ba:	d13e      	bne.n	833a <UART_Send+0x9a>
		bSent = 0;
    82bc:	f04f 0300 	mov.w	r3, #0
    82c0:	623b      	str	r3, [r7, #32]
		while (bToSend){
    82c2:	e036      	b.n	8332 <UART_Send+0x92>
			timeOut = UART_BLOCKING_TIMEOUT;
    82c4:	f04f 33ff 	mov.w	r3, #4294967295
    82c8:	61fb      	str	r3, [r7, #28]
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    82ca:	e006      	b.n	82da <UART_Send+0x3a>
				if (timeOut == 0) break;
    82cc:	69fb      	ldr	r3, [r7, #28]
    82ce:	2b00      	cmp	r3, #0
    82d0:	d00b      	beq.n	82ea <UART_Send+0x4a>
				timeOut--;
    82d2:	69fb      	ldr	r3, [r7, #28]
    82d4:	f103 33ff 	add.w	r3, r3, #4294967295
    82d8:	61fb      	str	r3, [r7, #28]
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    82da:	68fb      	ldr	r3, [r7, #12]
    82dc:	7d1b      	ldrb	r3, [r3, #20]
    82de:	b2db      	uxtb	r3, r3
    82e0:	f003 0320 	and.w	r3, r3, #32
    82e4:	2b00      	cmp	r3, #0
    82e6:	d0f1      	beq.n	82cc <UART_Send+0x2c>
    82e8:	e000      	b.n	82ec <UART_Send+0x4c>
				if (timeOut == 0) break;
    82ea:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    82ec:	69fb      	ldr	r3, [r7, #28]
    82ee:	2b00      	cmp	r3, #0
    82f0:	d052      	beq.n	8398 <UART_Send+0xf8>
			fifo_cnt = UART_TX_FIFO_SIZE;
    82f2:	f04f 0310 	mov.w	r3, #16
    82f6:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend){
    82f8:	e015      	b.n	8326 <UART_Send+0x86>
				UART_SendByte(UARTx, (*pChar++));
    82fa:	697b      	ldr	r3, [r7, #20]
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	697a      	ldr	r2, [r7, #20]
    8300:	f102 0201 	add.w	r2, r2, #1
    8304:	617a      	str	r2, [r7, #20]
    8306:	68f8      	ldr	r0, [r7, #12]
    8308:	4619      	mov	r1, r3
    830a:	f7ff ff61 	bl	81d0 <UART_SendByte>
				fifo_cnt--;
    830e:	69bb      	ldr	r3, [r7, #24]
    8310:	f103 33ff 	add.w	r3, r3, #4294967295
    8314:	61bb      	str	r3, [r7, #24]
				bToSend--;
    8316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8318:	f103 33ff 	add.w	r3, r3, #4294967295
    831c:	627b      	str	r3, [r7, #36]	; 0x24
				bSent++;
    831e:	6a3b      	ldr	r3, [r7, #32]
    8320:	f103 0301 	add.w	r3, r3, #1
    8324:	623b      	str	r3, [r7, #32]
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    8326:	69bb      	ldr	r3, [r7, #24]
    8328:	2b00      	cmp	r3, #0
    832a:	d002      	beq.n	8332 <UART_Send+0x92>
    832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    832e:	2b00      	cmp	r3, #0
    8330:	d1e3      	bne.n	82fa <UART_Send+0x5a>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
    8332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8334:	2b00      	cmp	r3, #0
    8336:	d1c5      	bne.n	82c4 <UART_Send+0x24>
    8338:	e031      	b.n	839e <UART_Send+0xfe>
			}
		}
	}
	// None blocking mode
	else {
		bSent = 0;
    833a:	f04f 0300 	mov.w	r3, #0
    833e:	623b      	str	r3, [r7, #32]
		while (bToSend) {
    8340:	e026      	b.n	8390 <UART_Send+0xf0>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    8342:	68fb      	ldr	r3, [r7, #12]
    8344:	7d1b      	ldrb	r3, [r3, #20]
    8346:	b2db      	uxtb	r3, r3
    8348:	f003 0320 	and.w	r3, r3, #32
    834c:	2b00      	cmp	r3, #0
    834e:	d025      	beq.n	839c <UART_Send+0xfc>
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
    8350:	f04f 0310 	mov.w	r3, #16
    8354:	61bb      	str	r3, [r7, #24]
			while (fifo_cnt && bToSend) {
    8356:	e015      	b.n	8384 <UART_Send+0xe4>
				UART_SendByte(UARTx, (*pChar++));
    8358:	697b      	ldr	r3, [r7, #20]
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	697a      	ldr	r2, [r7, #20]
    835e:	f102 0201 	add.w	r2, r2, #1
    8362:	617a      	str	r2, [r7, #20]
    8364:	68f8      	ldr	r0, [r7, #12]
    8366:	4619      	mov	r1, r3
    8368:	f7ff ff32 	bl	81d0 <UART_SendByte>
				bToSend--;
    836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    836e:	f103 33ff 	add.w	r3, r3, #4294967295
    8372:	627b      	str	r3, [r7, #36]	; 0x24
				fifo_cnt--;
    8374:	69bb      	ldr	r3, [r7, #24]
    8376:	f103 33ff 	add.w	r3, r3, #4294967295
    837a:	61bb      	str	r3, [r7, #24]
				bSent++;
    837c:	6a3b      	ldr	r3, [r7, #32]
    837e:	f103 0301 	add.w	r3, r3, #1
    8382:	623b      	str	r3, [r7, #32]
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
    8384:	69bb      	ldr	r3, [r7, #24]
    8386:	2b00      	cmp	r3, #0
    8388:	d002      	beq.n	8390 <UART_Send+0xf0>
    838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    838c:	2b00      	cmp	r3, #0
    838e:	d1e3      	bne.n	8358 <UART_Send+0xb8>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
    8390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8392:	2b00      	cmp	r3, #0
    8394:	d1d5      	bne.n	8342 <UART_Send+0xa2>
    8396:	e002      	b.n	839e <UART_Send+0xfe>
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    8398:	bf00      	nop
    839a:	e000      	b.n	839e <UART_Send+0xfe>
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
    839c:	bf00      	nop
				fifo_cnt--;
				bSent++;
			}
		}
	}
	return bSent;
    839e:	6a3b      	ldr	r3, [r7, #32]
}
    83a0:	4618      	mov	r0, r3
    83a2:	f107 0728 	add.w	r7, r7, #40	; 0x28
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop

000083ac <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    83ac:	b580      	push	{r7, lr}
    83ae:	b088      	sub	sp, #32
    83b0:	af00      	add	r7, sp, #0
    83b2:	60f8      	str	r0, [r7, #12]
    83b4:	60b9      	str	r1, [r7, #8]
    83b6:	607a      	str	r2, [r7, #4]
    83b8:	70fb      	strb	r3, [r7, #3]
	uint32_t bToRecv, bRecv, timeOut;
	uint8_t *pChar = rxbuf;
    83ba:	68bb      	ldr	r3, [r7, #8]
    83bc:	613b      	str	r3, [r7, #16]

	bToRecv = buflen;
    83be:	687b      	ldr	r3, [r7, #4]
    83c0:	61fb      	str	r3, [r7, #28]

	// Blocking mode
	if (flag == BLOCKING) {
    83c2:	78fb      	ldrb	r3, [r7, #3]
    83c4:	2b01      	cmp	r3, #1
    83c6:	d131      	bne.n	842c <UART_Receive+0x80>
		bRecv = 0;
    83c8:	f04f 0300 	mov.w	r3, #0
    83cc:	61bb      	str	r3, [r7, #24]
		while (bToRecv){
    83ce:	e029      	b.n	8424 <UART_Receive+0x78>
			timeOut = UART_BLOCKING_TIMEOUT;
    83d0:	f04f 33ff 	mov.w	r3, #4294967295
    83d4:	617b      	str	r3, [r7, #20]
			while (!(UARTx->LSR & UART_LSR_RDR)){
    83d6:	e006      	b.n	83e6 <UART_Receive+0x3a>
				if (timeOut == 0) break;
    83d8:	697b      	ldr	r3, [r7, #20]
    83da:	2b00      	cmp	r3, #0
    83dc:	d00b      	beq.n	83f6 <UART_Receive+0x4a>
				timeOut--;
    83de:	697b      	ldr	r3, [r7, #20]
    83e0:	f103 33ff 	add.w	r3, r3, #4294967295
    83e4:	617b      	str	r3, [r7, #20]
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    83e6:	68fb      	ldr	r3, [r7, #12]
    83e8:	7d1b      	ldrb	r3, [r3, #20]
    83ea:	b2db      	uxtb	r3, r3
    83ec:	f003 0301 	and.w	r3, r3, #1
    83f0:	2b00      	cmp	r3, #0
    83f2:	d0f1      	beq.n	83d8 <UART_Receive+0x2c>
    83f4:	e000      	b.n	83f8 <UART_Receive+0x4c>
				if (timeOut == 0) break;
    83f6:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    83f8:	697b      	ldr	r3, [r7, #20]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d038      	beq.n	8470 <UART_Receive+0xc4>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveByte(UARTx);
    83fe:	68f8      	ldr	r0, [r7, #12]
    8400:	f7ff ff1a 	bl	8238 <UART_ReceiveByte>
    8404:	4603      	mov	r3, r0
    8406:	461a      	mov	r2, r3
    8408:	693b      	ldr	r3, [r7, #16]
    840a:	701a      	strb	r2, [r3, #0]
    840c:	693b      	ldr	r3, [r7, #16]
    840e:	f103 0301 	add.w	r3, r3, #1
    8412:	613b      	str	r3, [r7, #16]
			bToRecv--;
    8414:	69fb      	ldr	r3, [r7, #28]
    8416:	f103 33ff 	add.w	r3, r3, #4294967295
    841a:	61fb      	str	r3, [r7, #28]
			bRecv++;
    841c:	69bb      	ldr	r3, [r7, #24]
    841e:	f103 0301 	add.w	r3, r3, #1
    8422:	61bb      	str	r3, [r7, #24]
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    8424:	69fb      	ldr	r3, [r7, #28]
    8426:	2b00      	cmp	r3, #0
    8428:	d1d2      	bne.n	83d0 <UART_Receive+0x24>
    842a:	e024      	b.n	8476 <UART_Receive+0xca>
			bRecv++;
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
    842c:	f04f 0300 	mov.w	r3, #0
    8430:	61bb      	str	r3, [r7, #24]
		while (bToRecv) {
    8432:	e019      	b.n	8468 <UART_Receive+0xbc>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    8434:	68fb      	ldr	r3, [r7, #12]
    8436:	7d1b      	ldrb	r3, [r3, #20]
    8438:	b2db      	uxtb	r3, r3
    843a:	f003 0301 	and.w	r3, r3, #1
    843e:	2b00      	cmp	r3, #0
    8440:	d018      	beq.n	8474 <UART_Receive+0xc8>
				break;
			} else {
				(*pChar++) = UART_ReceiveByte(UARTx);
    8442:	68f8      	ldr	r0, [r7, #12]
    8444:	f7ff fef8 	bl	8238 <UART_ReceiveByte>
    8448:	4603      	mov	r3, r0
    844a:	461a      	mov	r2, r3
    844c:	693b      	ldr	r3, [r7, #16]
    844e:	701a      	strb	r2, [r3, #0]
    8450:	693b      	ldr	r3, [r7, #16]
    8452:	f103 0301 	add.w	r3, r3, #1
    8456:	613b      	str	r3, [r7, #16]
				bRecv++;
    8458:	69bb      	ldr	r3, [r7, #24]
    845a:	f103 0301 	add.w	r3, r3, #1
    845e:	61bb      	str	r3, [r7, #24]
				bToRecv--;
    8460:	69fb      	ldr	r3, [r7, #28]
    8462:	f103 33ff 	add.w	r3, r3, #4294967295
    8466:	61fb      	str	r3, [r7, #28]
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    8468:	69fb      	ldr	r3, [r7, #28]
    846a:	2b00      	cmp	r3, #0
    846c:	d1e2      	bne.n	8434 <UART_Receive+0x88>
    846e:	e002      	b.n	8476 <UART_Receive+0xca>
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    8470:	bf00      	nop
    8472:	e000      	b.n	8476 <UART_Receive+0xca>
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
				break;
    8474:	bf00      	nop
				bRecv++;
				bToRecv--;
			}
		}
	}
	return bRecv;
    8476:	69bb      	ldr	r3, [r7, #24]
}
    8478:	4618      	mov	r0, r3
    847a:	f107 0720 	add.w	r7, r7, #32
    847e:	46bd      	mov	sp, r7
    8480:	bd80      	pop	{r7, pc}
    8482:	bf00      	nop

00008484 <UART_ForceBreak>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_ForceBreak(LPC_UART_TypeDef* UARTx)
{
    8484:	b580      	push	{r7, lr}
    8486:	b082      	sub	sp, #8
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    848c:	687a      	ldr	r2, [r7, #4]
    848e:	4b16      	ldr	r3, [pc, #88]	; (84e8 <UART_ForceBreak+0x64>)
    8490:	429a      	cmp	r2, r3
    8492:	d010      	beq.n	84b6 <UART_ForceBreak+0x32>
    8494:	687a      	ldr	r2, [r7, #4]
    8496:	4b15      	ldr	r3, [pc, #84]	; (84ec <UART_ForceBreak+0x68>)
    8498:	429a      	cmp	r2, r3
    849a:	d00c      	beq.n	84b6 <UART_ForceBreak+0x32>
    849c:	687a      	ldr	r2, [r7, #4]
    849e:	4b14      	ldr	r3, [pc, #80]	; (84f0 <UART_ForceBreak+0x6c>)
    84a0:	429a      	cmp	r2, r3
    84a2:	d008      	beq.n	84b6 <UART_ForceBreak+0x32>
    84a4:	687a      	ldr	r2, [r7, #4]
    84a6:	4b13      	ldr	r3, [pc, #76]	; (84f4 <UART_ForceBreak+0x70>)
    84a8:	429a      	cmp	r2, r3
    84aa:	d004      	beq.n	84b6 <UART_ForceBreak+0x32>
    84ac:	4812      	ldr	r0, [pc, #72]	; (84f8 <UART_ForceBreak+0x74>)
    84ae:	f44f 7121 	mov.w	r1, #644	; 0x284
    84b2:	f7fc ffe7 	bl	5484 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    84b6:	687a      	ldr	r2, [r7, #4]
    84b8:	4b0c      	ldr	r3, [pc, #48]	; (84ec <UART_ForceBreak+0x68>)
    84ba:	429a      	cmp	r2, r3
    84bc:	d108      	bne.n	84d0 <UART_ForceBreak+0x4c>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    84be:	687b      	ldr	r3, [r7, #4]
    84c0:	687a      	ldr	r2, [r7, #4]
    84c2:	7b12      	ldrb	r2, [r2, #12]
    84c4:	b2d2      	uxtb	r2, r2
    84c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    84ca:	b2d2      	uxtb	r2, r2
    84cc:	731a      	strb	r2, [r3, #12]
    84ce:	e007      	b.n	84e0 <UART_ForceBreak+0x5c>
	}
	else
	{
		UARTx->LCR |= UART_LCR_BREAK_EN;
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	7b1b      	ldrb	r3, [r3, #12]
    84d4:	b2db      	uxtb	r3, r3
    84d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    84da:	b2da      	uxtb	r2, r3
    84dc:	687b      	ldr	r3, [r7, #4]
    84de:	731a      	strb	r2, [r3, #12]
	}
}
    84e0:	f107 0708 	add.w	r7, r7, #8
    84e4:	46bd      	mov	sp, r7
    84e6:	bd80      	pop	{r7, pc}
    84e8:	4000c000 	.word	0x4000c000
    84ec:	40010000 	.word	0x40010000
    84f0:	40098000 	.word	0x40098000
    84f4:	4009c000 	.word	0x4009c000
    84f8:	0000a42c 	.word	0x0000a42c

000084fc <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    84fc:	b580      	push	{r7, lr}
    84fe:	b084      	sub	sp, #16
    8500:	af00      	add	r7, sp, #0
    8502:	6078      	str	r0, [r7, #4]
    8504:	4613      	mov	r3, r2
    8506:	460a      	mov	r2, r1
    8508:	70fa      	strb	r2, [r7, #3]
    850a:	70bb      	strb	r3, [r7, #2]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    850c:	687a      	ldr	r2, [r7, #4]
    850e:	4b5c      	ldr	r3, [pc, #368]	; (8680 <UART_IntConfig+0x184>)
    8510:	429a      	cmp	r2, r3
    8512:	d010      	beq.n	8536 <UART_IntConfig+0x3a>
    8514:	687a      	ldr	r2, [r7, #4]
    8516:	4b5b      	ldr	r3, [pc, #364]	; (8684 <UART_IntConfig+0x188>)
    8518:	429a      	cmp	r2, r3
    851a:	d00c      	beq.n	8536 <UART_IntConfig+0x3a>
    851c:	687a      	ldr	r2, [r7, #4]
    851e:	4b5a      	ldr	r3, [pc, #360]	; (8688 <UART_IntConfig+0x18c>)
    8520:	429a      	cmp	r2, r3
    8522:	d008      	beq.n	8536 <UART_IntConfig+0x3a>
    8524:	687a      	ldr	r2, [r7, #4]
    8526:	4b59      	ldr	r3, [pc, #356]	; (868c <UART_IntConfig+0x190>)
    8528:	429a      	cmp	r2, r3
    852a:	d004      	beq.n	8536 <UART_IntConfig+0x3a>
    852c:	4858      	ldr	r0, [pc, #352]	; (8690 <UART_IntConfig+0x194>)
    852e:	f240 21ab 	movw	r1, #683	; 0x2ab
    8532:	f7fc ffa7 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    8536:	78bb      	ldrb	r3, [r7, #2]
    8538:	2b00      	cmp	r3, #0
    853a:	d007      	beq.n	854c <UART_IntConfig+0x50>
    853c:	78bb      	ldrb	r3, [r7, #2]
    853e:	2b01      	cmp	r3, #1
    8540:	d004      	beq.n	854c <UART_IntConfig+0x50>
    8542:	4853      	ldr	r0, [pc, #332]	; (8690 <UART_IntConfig+0x194>)
    8544:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    8548:	f7fc ff9c 	bl	5484 <check_failed>

	switch(UARTIntCfg){
    854c:	78fb      	ldrb	r3, [r7, #3]
    854e:	2b06      	cmp	r3, #6
    8550:	d82c      	bhi.n	85ac <UART_IntConfig+0xb0>
    8552:	a201      	add	r2, pc, #4	; (adr r2, 8558 <UART_IntConfig+0x5c>)
    8554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8558:	00008575 	.word	0x00008575
    855c:	0000857d 	.word	0x0000857d
    8560:	00008585 	.word	0x00008585
    8564:	0000858d 	.word	0x0000858d
    8568:	00008595 	.word	0x00008595
    856c:	0000859d 	.word	0x0000859d
    8570:	000085a5 	.word	0x000085a5
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    8574:	f04f 0301 	mov.w	r3, #1
    8578:	60fb      	str	r3, [r7, #12]
			break;
    857a:	e017      	b.n	85ac <UART_IntConfig+0xb0>
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    857c:	f04f 0302 	mov.w	r3, #2
    8580:	60fb      	str	r3, [r7, #12]
			break;
    8582:	e013      	b.n	85ac <UART_IntConfig+0xb0>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    8584:	f04f 0304 	mov.w	r3, #4
    8588:	60fb      	str	r3, [r7, #12]
			break;
    858a:	e00f      	b.n	85ac <UART_IntConfig+0xb0>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    858c:	f04f 0308 	mov.w	r3, #8
    8590:	60fb      	str	r3, [r7, #12]
			break;
    8592:	e00b      	b.n	85ac <UART_IntConfig+0xb0>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    8594:	f04f 0380 	mov.w	r3, #128	; 0x80
    8598:	60fb      	str	r3, [r7, #12]
			break;
    859a:	e007      	b.n	85ac <UART_IntConfig+0xb0>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    859c:	f44f 7380 	mov.w	r3, #256	; 0x100
    85a0:	60fb      	str	r3, [r7, #12]
			break;
    85a2:	e003      	b.n	85ac <UART_IntConfig+0xb0>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    85a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    85a8:	60fb      	str	r3, [r7, #12]
			break;
    85aa:	bf00      	nop
	}

	if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    85ac:	687a      	ldr	r2, [r7, #4]
    85ae:	4b35      	ldr	r3, [pc, #212]	; (8684 <UART_IntConfig+0x188>)
    85b0:	429a      	cmp	r2, r3
    85b2:	d11a      	bne.n	85ea <UART_IntConfig+0xee>
	{
		CHECK_PARAM((PARAM_UART_INTCFG(UARTIntCfg)) || (PARAM_UART1_INTCFG(UARTIntCfg)));
    85b4:	78fb      	ldrb	r3, [r7, #3]
    85b6:	2b00      	cmp	r3, #0
    85b8:	d02b      	beq.n	8612 <UART_IntConfig+0x116>
    85ba:	78fb      	ldrb	r3, [r7, #3]
    85bc:	2b01      	cmp	r3, #1
    85be:	d028      	beq.n	8612 <UART_IntConfig+0x116>
    85c0:	78fb      	ldrb	r3, [r7, #3]
    85c2:	2b02      	cmp	r3, #2
    85c4:	d025      	beq.n	8612 <UART_IntConfig+0x116>
    85c6:	78fb      	ldrb	r3, [r7, #3]
    85c8:	2b05      	cmp	r3, #5
    85ca:	d022      	beq.n	8612 <UART_IntConfig+0x116>
    85cc:	78fb      	ldrb	r3, [r7, #3]
    85ce:	2b06      	cmp	r3, #6
    85d0:	d01f      	beq.n	8612 <UART_IntConfig+0x116>
    85d2:	78fb      	ldrb	r3, [r7, #3]
    85d4:	2b03      	cmp	r3, #3
    85d6:	d01c      	beq.n	8612 <UART_IntConfig+0x116>
    85d8:	78fb      	ldrb	r3, [r7, #3]
    85da:	2b04      	cmp	r3, #4
    85dc:	d019      	beq.n	8612 <UART_IntConfig+0x116>
    85de:	482c      	ldr	r0, [pc, #176]	; (8690 <UART_IntConfig+0x194>)
    85e0:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    85e4:	f7fc ff4e 	bl	5484 <check_failed>
    85e8:	e013      	b.n	8612 <UART_IntConfig+0x116>
	}
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
    85ea:	78fb      	ldrb	r3, [r7, #3]
    85ec:	2b00      	cmp	r3, #0
    85ee:	d010      	beq.n	8612 <UART_IntConfig+0x116>
    85f0:	78fb      	ldrb	r3, [r7, #3]
    85f2:	2b01      	cmp	r3, #1
    85f4:	d00d      	beq.n	8612 <UART_IntConfig+0x116>
    85f6:	78fb      	ldrb	r3, [r7, #3]
    85f8:	2b02      	cmp	r3, #2
    85fa:	d00a      	beq.n	8612 <UART_IntConfig+0x116>
    85fc:	78fb      	ldrb	r3, [r7, #3]
    85fe:	2b05      	cmp	r3, #5
    8600:	d007      	beq.n	8612 <UART_IntConfig+0x116>
    8602:	78fb      	ldrb	r3, [r7, #3]
    8604:	2b06      	cmp	r3, #6
    8606:	d004      	beq.n	8612 <UART_IntConfig+0x116>
    8608:	4821      	ldr	r0, [pc, #132]	; (8690 <UART_IntConfig+0x194>)
    860a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    860e:	f7fc ff39 	bl	5484 <check_failed>
	}

	if (NewState == ENABLE)
    8612:	78bb      	ldrb	r3, [r7, #2]
    8614:	2b01      	cmp	r3, #1
    8616:	d112      	bne.n	863e <UART_IntConfig+0x142>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    8618:	687a      	ldr	r2, [r7, #4]
    861a:	4b1a      	ldr	r3, [pc, #104]	; (8684 <UART_IntConfig+0x188>)
    861c:	429a      	cmp	r2, r3
    861e:	d107      	bne.n	8630 <UART_IntConfig+0x134>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	687a      	ldr	r2, [r7, #4]
    8624:	6851      	ldr	r1, [r2, #4]
    8626:	68fa      	ldr	r2, [r7, #12]
    8628:	ea41 0202 	orr.w	r2, r1, r2
    862c:	605a      	str	r2, [r3, #4]
    862e:	e023      	b.n	8678 <UART_IntConfig+0x17c>
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	685a      	ldr	r2, [r3, #4]
    8634:	68fb      	ldr	r3, [r7, #12]
    8636:	431a      	orrs	r2, r3
    8638:	687b      	ldr	r3, [r7, #4]
    863a:	605a      	str	r2, [r3, #4]
    863c:	e01c      	b.n	8678 <UART_IntConfig+0x17c>
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    863e:	687a      	ldr	r2, [r7, #4]
    8640:	4b10      	ldr	r3, [pc, #64]	; (8684 <UART_IntConfig+0x188>)
    8642:	429a      	cmp	r2, r3
    8644:	d10c      	bne.n	8660 <UART_IntConfig+0x164>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    8646:	687a      	ldr	r2, [r7, #4]
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	6859      	ldr	r1, [r3, #4]
    864c:	68fb      	ldr	r3, [r7, #12]
    864e:	ea6f 0303 	mvn.w	r3, r3
    8652:	4019      	ands	r1, r3
    8654:	f240 338f 	movw	r3, #911	; 0x38f
    8658:	ea01 0303 	and.w	r3, r1, r3
    865c:	6053      	str	r3, [r2, #4]
    865e:	e00b      	b.n	8678 <UART_IntConfig+0x17c>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	685a      	ldr	r2, [r3, #4]
    8664:	68fb      	ldr	r3, [r7, #12]
    8666:	ea6f 0303 	mvn.w	r3, r3
    866a:	401a      	ands	r2, r3
    866c:	f240 3307 	movw	r3, #775	; 0x307
    8670:	ea02 0303 	and.w	r3, r2, r3
    8674:	687a      	ldr	r2, [r7, #4]
    8676:	6053      	str	r3, [r2, #4]
		}
	}
}
    8678:	f107 0710 	add.w	r7, r7, #16
    867c:	46bd      	mov	sp, r7
    867e:	bd80      	pop	{r7, pc}
    8680:	4000c000 	.word	0x4000c000
    8684:	40010000 	.word	0x40010000
    8688:	40098000 	.word	0x40098000
    868c:	4009c000 	.word	0x4009c000
    8690:	0000a42c 	.word	0x0000a42c

00008694 <UART_GetLineStatus>:
 * 			Line Status register could not be correct. So this function used to
 * 			read Line status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
{
    8694:	b580      	push	{r7, lr}
    8696:	b082      	sub	sp, #8
    8698:	af00      	add	r7, sp, #0
    869a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    869c:	687a      	ldr	r2, [r7, #4]
    869e:	4b12      	ldr	r3, [pc, #72]	; (86e8 <UART_GetLineStatus+0x54>)
    86a0:	429a      	cmp	r2, r3
    86a2:	d010      	beq.n	86c6 <UART_GetLineStatus+0x32>
    86a4:	687a      	ldr	r2, [r7, #4]
    86a6:	4b11      	ldr	r3, [pc, #68]	; (86ec <UART_GetLineStatus+0x58>)
    86a8:	429a      	cmp	r2, r3
    86aa:	d00c      	beq.n	86c6 <UART_GetLineStatus+0x32>
    86ac:	687a      	ldr	r2, [r7, #4]
    86ae:	4b10      	ldr	r3, [pc, #64]	; (86f0 <UART_GetLineStatus+0x5c>)
    86b0:	429a      	cmp	r2, r3
    86b2:	d008      	beq.n	86c6 <UART_GetLineStatus+0x32>
    86b4:	687a      	ldr	r2, [r7, #4]
    86b6:	4b0f      	ldr	r3, [pc, #60]	; (86f4 <UART_GetLineStatus+0x60>)
    86b8:	429a      	cmp	r2, r3
    86ba:	d004      	beq.n	86c6 <UART_GetLineStatus+0x32>
    86bc:	480e      	ldr	r0, [pc, #56]	; (86f8 <UART_GetLineStatus+0x64>)
    86be:	f240 21fa 	movw	r1, #762	; 0x2fa
    86c2:	f7fc fedf 	bl	5484 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    86c6:	687a      	ldr	r2, [r7, #4]
    86c8:	4b08      	ldr	r3, [pc, #32]	; (86ec <UART_GetLineStatus+0x58>)
    86ca:	429a      	cmp	r2, r3
    86cc:	d103      	bne.n	86d6 <UART_GetLineStatus+0x42>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    86ce:	4b07      	ldr	r3, [pc, #28]	; (86ec <UART_GetLineStatus+0x58>)
    86d0:	7d1b      	ldrb	r3, [r3, #20]
    86d2:	b2db      	uxtb	r3, r3
    86d4:	e002      	b.n	86dc <UART_GetLineStatus+0x48>
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    86d6:	687b      	ldr	r3, [r7, #4]
    86d8:	7d1b      	ldrb	r3, [r3, #20]
    86da:	b2db      	uxtb	r3, r3
	}
}
    86dc:	4618      	mov	r0, r3
    86de:	f107 0708 	add.w	r7, r7, #8
    86e2:	46bd      	mov	sp, r7
    86e4:	bd80      	pop	{r7, pc}
    86e6:	bf00      	nop
    86e8:	4000c000 	.word	0x4000c000
    86ec:	40010000 	.word	0x40010000
    86f0:	40098000 	.word	0x40098000
    86f4:	4009c000 	.word	0x4009c000
    86f8:	0000a42c 	.word	0x0000a42c

000086fc <UART_GetIntId>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
    86fc:	b580      	push	{r7, lr}
    86fe:	b082      	sub	sp, #8
    8700:	af00      	add	r7, sp, #0
    8702:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    8704:	687a      	ldr	r2, [r7, #4]
    8706:	4b0f      	ldr	r3, [pc, #60]	; (8744 <UART_GetIntId+0x48>)
    8708:	429a      	cmp	r2, r3
    870a:	d010      	beq.n	872e <UART_GetIntId+0x32>
    870c:	687a      	ldr	r2, [r7, #4]
    870e:	4b0e      	ldr	r3, [pc, #56]	; (8748 <UART_GetIntId+0x4c>)
    8710:	429a      	cmp	r2, r3
    8712:	d00c      	beq.n	872e <UART_GetIntId+0x32>
    8714:	687a      	ldr	r2, [r7, #4]
    8716:	4b0d      	ldr	r3, [pc, #52]	; (874c <UART_GetIntId+0x50>)
    8718:	429a      	cmp	r2, r3
    871a:	d008      	beq.n	872e <UART_GetIntId+0x32>
    871c:	687a      	ldr	r2, [r7, #4]
    871e:	4b0c      	ldr	r3, [pc, #48]	; (8750 <UART_GetIntId+0x54>)
    8720:	429a      	cmp	r2, r3
    8722:	d004      	beq.n	872e <UART_GetIntId+0x32>
    8724:	480b      	ldr	r0, [pc, #44]	; (8754 <UART_GetIntId+0x58>)
    8726:	f240 3111 	movw	r1, #785	; 0x311
    872a:	f7fc feab 	bl	5484 <check_failed>
	return (UARTx->IIR & 0x03CF);
    872e:	687b      	ldr	r3, [r7, #4]
    8730:	689a      	ldr	r2, [r3, #8]
    8732:	f240 33cf 	movw	r3, #975	; 0x3cf
    8736:	ea02 0303 	and.w	r3, r2, r3
}
    873a:	4618      	mov	r0, r3
    873c:	f107 0708 	add.w	r7, r7, #8
    8740:	46bd      	mov	sp, r7
    8742:	bd80      	pop	{r7, pc}
    8744:	4000c000 	.word	0x4000c000
    8748:	40010000 	.word	0x40010000
    874c:	40098000 	.word	0x40098000
    8750:	4009c000 	.word	0x4009c000
    8754:	0000a42c 	.word	0x0000a42c

00008758 <UART_CheckBusy>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
    8758:	b480      	push	{r7}
    875a:	b083      	sub	sp, #12
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
	if (UARTx->LSR & UART_LSR_TEMT){
    8760:	687b      	ldr	r3, [r7, #4]
    8762:	7d1b      	ldrb	r3, [r3, #20]
    8764:	b2db      	uxtb	r3, r3
    8766:	f003 0340 	and.w	r3, r3, #64	; 0x40
    876a:	2b00      	cmp	r3, #0
    876c:	d002      	beq.n	8774 <UART_CheckBusy+0x1c>
		return RESET;
    876e:	f04f 0300 	mov.w	r3, #0
    8772:	e001      	b.n	8778 <UART_CheckBusy+0x20>
	} else {
		return SET;
    8774:	f04f 0301 	mov.w	r3, #1
	}
}
    8778:	4618      	mov	r0, r3
    877a:	f107 070c 	add.w	r7, r7, #12
    877e:	46bd      	mov	sp, r7
    8780:	bc80      	pop	{r7}
    8782:	4770      	bx	lr

00008784 <UART_FIFOConfig>:
 * @param[in]	FIFOCfg	Pointer to a UART_FIFO_CFG_Type Structure that
 * 						contains specified information about FIFO configuration
 * @return 		none
 **********************************************************************/
void UART_FIFOConfig(LPC_UART_TypeDef *UARTx, UART_FIFO_CFG_Type *FIFOCfg)
{
    8784:	b580      	push	{r7, lr}
    8786:	b084      	sub	sp, #16
    8788:	af00      	add	r7, sp, #0
    878a:	6078      	str	r0, [r7, #4]
    878c:	6039      	str	r1, [r7, #0]
	uint8_t tmp = 0;
    878e:	f04f 0300 	mov.w	r3, #0
    8792:	73fb      	strb	r3, [r7, #15]

	CHECK_PARAM(PARAM_UARTx(UARTx));
    8794:	687a      	ldr	r2, [r7, #4]
    8796:	4b4d      	ldr	r3, [pc, #308]	; (88cc <UART_FIFOConfig+0x148>)
    8798:	429a      	cmp	r2, r3
    879a:	d010      	beq.n	87be <UART_FIFOConfig+0x3a>
    879c:	687a      	ldr	r2, [r7, #4]
    879e:	4b4c      	ldr	r3, [pc, #304]	; (88d0 <UART_FIFOConfig+0x14c>)
    87a0:	429a      	cmp	r2, r3
    87a2:	d00c      	beq.n	87be <UART_FIFOConfig+0x3a>
    87a4:	687a      	ldr	r2, [r7, #4]
    87a6:	4b4b      	ldr	r3, [pc, #300]	; (88d4 <UART_FIFOConfig+0x150>)
    87a8:	429a      	cmp	r2, r3
    87aa:	d008      	beq.n	87be <UART_FIFOConfig+0x3a>
    87ac:	687a      	ldr	r2, [r7, #4]
    87ae:	4b4a      	ldr	r3, [pc, #296]	; (88d8 <UART_FIFOConfig+0x154>)
    87b0:	429a      	cmp	r2, r3
    87b2:	d004      	beq.n	87be <UART_FIFOConfig+0x3a>
    87b4:	4849      	ldr	r0, [pc, #292]	; (88dc <UART_FIFOConfig+0x158>)
    87b6:	f240 3137 	movw	r1, #823	; 0x337
    87ba:	f7fc fe63 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_FIFO_LEVEL(FIFOCfg->FIFO_Level));
    87be:	683b      	ldr	r3, [r7, #0]
    87c0:	78db      	ldrb	r3, [r3, #3]
    87c2:	2b00      	cmp	r3, #0
    87c4:	d010      	beq.n	87e8 <UART_FIFOConfig+0x64>
    87c6:	683b      	ldr	r3, [r7, #0]
    87c8:	78db      	ldrb	r3, [r3, #3]
    87ca:	2b01      	cmp	r3, #1
    87cc:	d00c      	beq.n	87e8 <UART_FIFOConfig+0x64>
    87ce:	683b      	ldr	r3, [r7, #0]
    87d0:	78db      	ldrb	r3, [r3, #3]
    87d2:	2b02      	cmp	r3, #2
    87d4:	d008      	beq.n	87e8 <UART_FIFOConfig+0x64>
    87d6:	683b      	ldr	r3, [r7, #0]
    87d8:	78db      	ldrb	r3, [r3, #3]
    87da:	2b03      	cmp	r3, #3
    87dc:	d004      	beq.n	87e8 <UART_FIFOConfig+0x64>
    87de:	483f      	ldr	r0, [pc, #252]	; (88dc <UART_FIFOConfig+0x158>)
    87e0:	f44f 714e 	mov.w	r1, #824	; 0x338
    87e4:	f7fc fe4e 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
    87e8:	683b      	ldr	r3, [r7, #0]
    87ea:	789b      	ldrb	r3, [r3, #2]
    87ec:	2b00      	cmp	r3, #0
    87ee:	d008      	beq.n	8802 <UART_FIFOConfig+0x7e>
    87f0:	683b      	ldr	r3, [r7, #0]
    87f2:	789b      	ldrb	r3, [r3, #2]
    87f4:	2b01      	cmp	r3, #1
    87f6:	d004      	beq.n	8802 <UART_FIFOConfig+0x7e>
    87f8:	4838      	ldr	r0, [pc, #224]	; (88dc <UART_FIFOConfig+0x158>)
    87fa:	f240 3139 	movw	r1, #825	; 0x339
    87fe:	f7fc fe41 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
    8802:	683b      	ldr	r3, [r7, #0]
    8804:	781b      	ldrb	r3, [r3, #0]
    8806:	2b00      	cmp	r3, #0
    8808:	d008      	beq.n	881c <UART_FIFOConfig+0x98>
    880a:	683b      	ldr	r3, [r7, #0]
    880c:	781b      	ldrb	r3, [r3, #0]
    880e:	2b01      	cmp	r3, #1
    8810:	d004      	beq.n	881c <UART_FIFOConfig+0x98>
    8812:	4832      	ldr	r0, [pc, #200]	; (88dc <UART_FIFOConfig+0x158>)
    8814:	f240 313a 	movw	r1, #826	; 0x33a
    8818:	f7fc fe34 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));
    881c:	683b      	ldr	r3, [r7, #0]
    881e:	785b      	ldrb	r3, [r3, #1]
    8820:	2b00      	cmp	r3, #0
    8822:	d008      	beq.n	8836 <UART_FIFOConfig+0xb2>
    8824:	683b      	ldr	r3, [r7, #0]
    8826:	785b      	ldrb	r3, [r3, #1]
    8828:	2b01      	cmp	r3, #1
    882a:	d004      	beq.n	8836 <UART_FIFOConfig+0xb2>
    882c:	482b      	ldr	r0, [pc, #172]	; (88dc <UART_FIFOConfig+0x158>)
    882e:	f240 313b 	movw	r1, #827	; 0x33b
    8832:	f7fc fe27 	bl	5484 <check_failed>

	tmp |= UART_FCR_FIFO_EN;
    8836:	7bfb      	ldrb	r3, [r7, #15]
    8838:	f043 0301 	orr.w	r3, r3, #1
    883c:	73fb      	strb	r3, [r7, #15]
	switch (FIFOCfg->FIFO_Level){
    883e:	683b      	ldr	r3, [r7, #0]
    8840:	78db      	ldrb	r3, [r3, #3]
    8842:	2b01      	cmp	r3, #1
    8844:	d004      	beq.n	8850 <UART_FIFOConfig+0xcc>
    8846:	2b02      	cmp	r3, #2
    8848:	d007      	beq.n	885a <UART_FIFOConfig+0xd6>
    884a:	2b00      	cmp	r3, #0
    884c:	d00f      	beq.n	886e <UART_FIFOConfig+0xea>
    884e:	e009      	b.n	8864 <UART_FIFOConfig+0xe0>
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
	case UART_FIFO_TRGLEV1:
		tmp |= UART_FCR_TRG_LEV1;
    8850:	7bfb      	ldrb	r3, [r7, #15]
    8852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8856:	73fb      	strb	r3, [r7, #15]
		break;
    8858:	e00a      	b.n	8870 <UART_FIFOConfig+0xec>
	case UART_FIFO_TRGLEV2:
		tmp |= UART_FCR_TRG_LEV2;
    885a:	7bfb      	ldrb	r3, [r7, #15]
    885c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8860:	73fb      	strb	r3, [r7, #15]
		break;
    8862:	e005      	b.n	8870 <UART_FIFOConfig+0xec>
	case UART_FIFO_TRGLEV3:
	default:
		tmp |= UART_FCR_TRG_LEV3;
    8864:	7bfb      	ldrb	r3, [r7, #15]
    8866:	f063 033f 	orn	r3, r3, #63	; 0x3f
    886a:	73fb      	strb	r3, [r7, #15]
		break;
    886c:	e000      	b.n	8870 <UART_FIFOConfig+0xec>

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
    886e:	bf00      	nop
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    8870:	683b      	ldr	r3, [r7, #0]
    8872:	785b      	ldrb	r3, [r3, #1]
    8874:	2b01      	cmp	r3, #1
    8876:	d103      	bne.n	8880 <UART_FIFOConfig+0xfc>
	{
		tmp |= UART_FCR_TX_RS;
    8878:	7bfb      	ldrb	r3, [r7, #15]
    887a:	f043 0304 	orr.w	r3, r3, #4
    887e:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    8880:	683b      	ldr	r3, [r7, #0]
    8882:	781b      	ldrb	r3, [r3, #0]
    8884:	2b01      	cmp	r3, #1
    8886:	d103      	bne.n	8890 <UART_FIFOConfig+0x10c>
	{
		tmp |= UART_FCR_RX_RS;
    8888:	7bfb      	ldrb	r3, [r7, #15]
    888a:	f043 0302 	orr.w	r3, r3, #2
    888e:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    8890:	683b      	ldr	r3, [r7, #0]
    8892:	789b      	ldrb	r3, [r3, #2]
    8894:	2b01      	cmp	r3, #1
    8896:	d103      	bne.n	88a0 <UART_FIFOConfig+0x11c>
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    8898:	7bfb      	ldrb	r3, [r7, #15]
    889a:	f043 0308 	orr.w	r3, r3, #8
    889e:	73fb      	strb	r3, [r7, #15]
	}


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    88a0:	687a      	ldr	r2, [r7, #4]
    88a2:	4b0b      	ldr	r3, [pc, #44]	; (88d0 <UART_FIFOConfig+0x14c>)
    88a4:	429a      	cmp	r2, r3
    88a6:	d106      	bne.n	88b6 <UART_FIFOConfig+0x132>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    88a8:	687b      	ldr	r3, [r7, #4]
    88aa:	7bfa      	ldrb	r2, [r7, #15]
    88ac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    88b0:	b2d2      	uxtb	r2, r2
    88b2:	721a      	strb	r2, [r3, #8]
    88b4:	e005      	b.n	88c2 <UART_FIFOConfig+0x13e>
	}
	else
	{
		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    88b6:	7bfb      	ldrb	r3, [r7, #15]
    88b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    88bc:	b2da      	uxtb	r2, r3
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	721a      	strb	r2, [r3, #8]
	}
}
    88c2:	f107 0710 	add.w	r7, r7, #16
    88c6:	46bd      	mov	sp, r7
    88c8:	bd80      	pop	{r7, pc}
    88ca:	bf00      	nop
    88cc:	4000c000 	.word	0x4000c000
    88d0:	40010000 	.word	0x40010000
    88d4:	40098000 	.word	0x40098000
    88d8:	4009c000 	.word	0x4009c000
    88dc:	0000a42c 	.word	0x0000a42c

000088e0 <UART_FIFOConfigStructInit>:
* @param[in]	UART_FIFOInitStruct Pointer to a UART_FIFO_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
    88e0:	b480      	push	{r7}
    88e2:	b083      	sub	sp, #12
    88e4:	af00      	add	r7, sp, #0
    88e6:	6078      	str	r0, [r7, #4]
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	f04f 0200 	mov.w	r2, #0
    88ee:	709a      	strb	r2, [r3, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	f04f 0200 	mov.w	r2, #0
    88f6:	70da      	strb	r2, [r3, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    88f8:	687b      	ldr	r3, [r7, #4]
    88fa:	f04f 0201 	mov.w	r2, #1
    88fe:	701a      	strb	r2, [r3, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	f04f 0201 	mov.w	r2, #1
    8906:	705a      	strb	r2, [r3, #1]
}
    8908:	f107 070c 	add.w	r7, r7, #12
    890c:	46bd      	mov	sp, r7
    890e:	bc80      	pop	{r7}
    8910:	4770      	bx	lr
    8912:	bf00      	nop

00008914 <UART_ABCmd>:
 * 				completed.
 * @return 		none
 **********************************************************************/
void UART_ABCmd(LPC_UART_TypeDef *UARTx, UART_AB_CFG_Type *ABConfigStruct, \
				FunctionalState NewState)
{
    8914:	b580      	push	{r7, lr}
    8916:	b086      	sub	sp, #24
    8918:	af00      	add	r7, sp, #0
    891a:	60f8      	str	r0, [r7, #12]
    891c:	60b9      	str	r1, [r7, #8]
    891e:	4613      	mov	r3, r2
    8920:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    8922:	68fa      	ldr	r2, [r7, #12]
    8924:	4b48      	ldr	r3, [pc, #288]	; (8a48 <UART_ABCmd+0x134>)
    8926:	429a      	cmp	r2, r3
    8928:	d010      	beq.n	894c <UART_ABCmd+0x38>
    892a:	68fa      	ldr	r2, [r7, #12]
    892c:	4b47      	ldr	r3, [pc, #284]	; (8a4c <UART_ABCmd+0x138>)
    892e:	429a      	cmp	r2, r3
    8930:	d00c      	beq.n	894c <UART_ABCmd+0x38>
    8932:	68fa      	ldr	r2, [r7, #12]
    8934:	4b46      	ldr	r3, [pc, #280]	; (8a50 <UART_ABCmd+0x13c>)
    8936:	429a      	cmp	r2, r3
    8938:	d008      	beq.n	894c <UART_ABCmd+0x38>
    893a:	68fa      	ldr	r2, [r7, #12]
    893c:	4b45      	ldr	r3, [pc, #276]	; (8a54 <UART_ABCmd+0x140>)
    893e:	429a      	cmp	r2, r3
    8940:	d004      	beq.n	894c <UART_ABCmd+0x38>
    8942:	4845      	ldr	r0, [pc, #276]	; (8a58 <UART_ABCmd+0x144>)
    8944:	f240 3192 	movw	r1, #914	; 0x392
    8948:	f7fc fd9c 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    894c:	79fb      	ldrb	r3, [r7, #7]
    894e:	2b00      	cmp	r3, #0
    8950:	d007      	beq.n	8962 <UART_ABCmd+0x4e>
    8952:	79fb      	ldrb	r3, [r7, #7]
    8954:	2b01      	cmp	r3, #1
    8956:	d004      	beq.n	8962 <UART_ABCmd+0x4e>
    8958:	483f      	ldr	r0, [pc, #252]	; (8a58 <UART_ABCmd+0x144>)
    895a:	f240 3193 	movw	r1, #915	; 0x393
    895e:	f7fc fd91 	bl	5484 <check_failed>

	tmp = 0;
    8962:	f04f 0300 	mov.w	r3, #0
    8966:	617b      	str	r3, [r7, #20]
	if (NewState == ENABLE) {
    8968:	79fb      	ldrb	r3, [r7, #7]
    896a:	2b01      	cmp	r3, #1
    896c:	d10f      	bne.n	898e <UART_ABCmd+0x7a>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    896e:	68bb      	ldr	r3, [r7, #8]
    8970:	781b      	ldrb	r3, [r3, #0]
    8972:	2b01      	cmp	r3, #1
    8974:	d103      	bne.n	897e <UART_ABCmd+0x6a>
			tmp |= UART_ACR_MODE;
    8976:	697b      	ldr	r3, [r7, #20]
    8978:	f043 0302 	orr.w	r3, r3, #2
    897c:	617b      	str	r3, [r7, #20]
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    897e:	68bb      	ldr	r3, [r7, #8]
    8980:	785b      	ldrb	r3, [r3, #1]
    8982:	2b01      	cmp	r3, #1
    8984:	d103      	bne.n	898e <UART_ABCmd+0x7a>
			tmp |= UART_ACR_AUTO_RESTART;
    8986:	697b      	ldr	r3, [r7, #20]
    8988:	f043 0304 	orr.w	r3, r3, #4
    898c:	617b      	str	r3, [r7, #20]
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    898e:	68fa      	ldr	r2, [r7, #12]
    8990:	4b2e      	ldr	r3, [pc, #184]	; (8a4c <UART_ABCmd+0x138>)
    8992:	429a      	cmp	r2, r3
    8994:	d129      	bne.n	89ea <UART_ABCmd+0xd6>
	{
		if (NewState == ENABLE)
    8996:	79fb      	ldrb	r3, [r7, #7]
    8998:	2b01      	cmp	r3, #1
    899a:	d121      	bne.n	89e0 <UART_ABCmd+0xcc>
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    899c:	68fb      	ldr	r3, [r7, #12]
    899e:	68fa      	ldr	r2, [r7, #12]
    89a0:	7b12      	ldrb	r2, [r2, #12]
    89a2:	b2d2      	uxtb	r2, r2
    89a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    89a8:	b2d2      	uxtb	r2, r2
    89aa:	731a      	strb	r2, [r3, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    89ac:	68fb      	ldr	r3, [r7, #12]
    89ae:	f04f 0200 	mov.w	r2, #0
    89b2:	701a      	strb	r2, [r3, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	f04f 0200 	mov.w	r2, #0
    89ba:	711a      	strb	r2, [r3, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    89bc:	68fb      	ldr	r3, [r7, #12]
    89be:	68fa      	ldr	r2, [r7, #12]
    89c0:	7b12      	ldrb	r2, [r2, #12]
    89c2:	b2d2      	uxtb	r2, r2
    89c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    89c8:	b2d2      	uxtb	r2, r2
    89ca:	731a      	strb	r2, [r3, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    89cc:	68fb      	ldr	r3, [r7, #12]
    89ce:	f04f 0210 	mov.w	r2, #16
    89d2:	629a      	str	r2, [r3, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
    89d4:	68fb      	ldr	r3, [r7, #12]
    89d6:	697a      	ldr	r2, [r7, #20]
    89d8:	f042 0201 	orr.w	r2, r2, #1
    89dc:	621a      	str	r2, [r3, #32]
    89de:	e02e      	b.n	8a3e <UART_ABCmd+0x12a>
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    89e0:	68fb      	ldr	r3, [r7, #12]
    89e2:	f04f 0200 	mov.w	r2, #0
    89e6:	621a      	str	r2, [r3, #32]
    89e8:	e029      	b.n	8a3e <UART_ABCmd+0x12a>
		}
	}
	else
	{
		if (NewState == ENABLE)
    89ea:	79fb      	ldrb	r3, [r7, #7]
    89ec:	2b01      	cmp	r3, #1
    89ee:	d122      	bne.n	8a36 <UART_ABCmd+0x122>
		{
			// Clear DLL and DLM value
			UARTx->LCR |= UART_LCR_DLAB_EN;
    89f0:	68fb      	ldr	r3, [r7, #12]
    89f2:	7b1b      	ldrb	r3, [r3, #12]
    89f4:	b2db      	uxtb	r3, r3
    89f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    89fa:	b2da      	uxtb	r2, r3
    89fc:	68fb      	ldr	r3, [r7, #12]
    89fe:	731a      	strb	r2, [r3, #12]
			UARTx->DLL = 0;
    8a00:	68fb      	ldr	r3, [r7, #12]
    8a02:	f04f 0200 	mov.w	r2, #0
    8a06:	701a      	strb	r2, [r3, #0]
			UARTx->DLM = 0;
    8a08:	68fb      	ldr	r3, [r7, #12]
    8a0a:	f04f 0200 	mov.w	r2, #0
    8a0e:	711a      	strb	r2, [r3, #4]
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
    8a10:	68fb      	ldr	r3, [r7, #12]
    8a12:	7b1b      	ldrb	r3, [r3, #12]
    8a14:	b2db      	uxtb	r3, r3
    8a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8a1a:	b2da      	uxtb	r2, r3
    8a1c:	68fb      	ldr	r3, [r7, #12]
    8a1e:	731a      	strb	r2, [r3, #12]
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
    8a20:	68fb      	ldr	r3, [r7, #12]
    8a22:	f04f 0210 	mov.w	r2, #16
    8a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			UARTx->ACR = UART_ACR_START | tmp;
    8a2a:	697b      	ldr	r3, [r7, #20]
    8a2c:	f043 0201 	orr.w	r2, r3, #1
    8a30:	68fb      	ldr	r3, [r7, #12]
    8a32:	621a      	str	r2, [r3, #32]
    8a34:	e003      	b.n	8a3e <UART_ABCmd+0x12a>
		}
		else
		{
			UARTx->ACR = 0;
    8a36:	68fb      	ldr	r3, [r7, #12]
    8a38:	f04f 0200 	mov.w	r2, #0
    8a3c:	621a      	str	r2, [r3, #32]
		}
	}
}
    8a3e:	f107 0718 	add.w	r7, r7, #24
    8a42:	46bd      	mov	sp, r7
    8a44:	bd80      	pop	{r7, pc}
    8a46:	bf00      	nop
    8a48:	4000c000 	.word	0x4000c000
    8a4c:	40010000 	.word	0x40010000
    8a50:	40098000 	.word	0x40098000
    8a54:	4009c000 	.word	0x4009c000
    8a58:	0000a42c 	.word	0x0000a42c

00008a5c <UART_ABClearIntPending>:
 * 				- UART_AUTOBAUD_INTSTAT_ABEO: End of Auto-baud interrupt
 * 				- UART_AUTOBAUD_INTSTAT_ABTO: Auto-baud time out interrupt
 * @return 		none
 **********************************************************************/
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
    8a5c:	b580      	push	{r7, lr}
    8a5e:	b082      	sub	sp, #8
    8a60:	af00      	add	r7, sp, #0
    8a62:	6078      	str	r0, [r7, #4]
    8a64:	460b      	mov	r3, r1
    8a66:	807b      	strh	r3, [r7, #2]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    8a68:	687a      	ldr	r2, [r7, #4]
    8a6a:	4b14      	ldr	r3, [pc, #80]	; (8abc <UART_ABClearIntPending+0x60>)
    8a6c:	429a      	cmp	r2, r3
    8a6e:	d010      	beq.n	8a92 <UART_ABClearIntPending+0x36>
    8a70:	687a      	ldr	r2, [r7, #4]
    8a72:	4b13      	ldr	r3, [pc, #76]	; (8ac0 <UART_ABClearIntPending+0x64>)
    8a74:	429a      	cmp	r2, r3
    8a76:	d00c      	beq.n	8a92 <UART_ABClearIntPending+0x36>
    8a78:	687a      	ldr	r2, [r7, #4]
    8a7a:	4b12      	ldr	r3, [pc, #72]	; (8ac4 <UART_ABClearIntPending+0x68>)
    8a7c:	429a      	cmp	r2, r3
    8a7e:	d008      	beq.n	8a92 <UART_ABClearIntPending+0x36>
    8a80:	687a      	ldr	r2, [r7, #4]
    8a82:	4b11      	ldr	r3, [pc, #68]	; (8ac8 <UART_ABClearIntPending+0x6c>)
    8a84:	429a      	cmp	r2, r3
    8a86:	d004      	beq.n	8a92 <UART_ABClearIntPending+0x36>
    8a88:	4810      	ldr	r0, [pc, #64]	; (8acc <UART_ABClearIntPending+0x70>)
    8a8a:	f240 31d3 	movw	r1, #979	; 0x3d3
    8a8e:	f7fc fcf9 	bl	5484 <check_failed>
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8a92:	687a      	ldr	r2, [r7, #4]
    8a94:	4b0a      	ldr	r3, [pc, #40]	; (8ac0 <UART_ABClearIntPending+0x64>)
    8a96:	429a      	cmp	r2, r3
    8a98:	d106      	bne.n	8aa8 <UART_ABClearIntPending+0x4c>
	{
		UARTx->ACR |= ABIntType;
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	6a1a      	ldr	r2, [r3, #32]
    8a9e:	887b      	ldrh	r3, [r7, #2]
    8aa0:	431a      	orrs	r2, r3
    8aa2:	687b      	ldr	r3, [r7, #4]
    8aa4:	621a      	str	r2, [r3, #32]
    8aa6:	e005      	b.n	8ab4 <UART_ABClearIntPending+0x58>
	}
	else
		UARTx->ACR |= ABIntType;
    8aa8:	687b      	ldr	r3, [r7, #4]
    8aaa:	6a1a      	ldr	r2, [r3, #32]
    8aac:	887b      	ldrh	r3, [r7, #2]
    8aae:	431a      	orrs	r2, r3
    8ab0:	687b      	ldr	r3, [r7, #4]
    8ab2:	621a      	str	r2, [r3, #32]
}
    8ab4:	f107 0708 	add.w	r7, r7, #8
    8ab8:	46bd      	mov	sp, r7
    8aba:	bd80      	pop	{r7, pc}
    8abc:	4000c000 	.word	0x4000c000
    8ac0:	40010000 	.word	0x40010000
    8ac4:	40098000 	.word	0x40098000
    8ac8:	4009c000 	.word	0x4009c000
    8acc:	0000a42c 	.word	0x0000a42c

00008ad0 <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b082      	sub	sp, #8
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
    8ad8:	460b      	mov	r3, r1
    8ada:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    8adc:	687a      	ldr	r2, [r7, #4]
    8ade:	4b2a      	ldr	r3, [pc, #168]	; (8b88 <UART_TxCmd+0xb8>)
    8ae0:	429a      	cmp	r2, r3
    8ae2:	d010      	beq.n	8b06 <UART_TxCmd+0x36>
    8ae4:	687a      	ldr	r2, [r7, #4]
    8ae6:	4b29      	ldr	r3, [pc, #164]	; (8b8c <UART_TxCmd+0xbc>)
    8ae8:	429a      	cmp	r2, r3
    8aea:	d00c      	beq.n	8b06 <UART_TxCmd+0x36>
    8aec:	687a      	ldr	r2, [r7, #4]
    8aee:	4b28      	ldr	r3, [pc, #160]	; (8b90 <UART_TxCmd+0xc0>)
    8af0:	429a      	cmp	r2, r3
    8af2:	d008      	beq.n	8b06 <UART_TxCmd+0x36>
    8af4:	687a      	ldr	r2, [r7, #4]
    8af6:	4b27      	ldr	r3, [pc, #156]	; (8b94 <UART_TxCmd+0xc4>)
    8af8:	429a      	cmp	r2, r3
    8afa:	d004      	beq.n	8b06 <UART_TxCmd+0x36>
    8afc:	4826      	ldr	r0, [pc, #152]	; (8b98 <UART_TxCmd+0xc8>)
    8afe:	f240 31ea 	movw	r1, #1002	; 0x3ea
    8b02:	f7fc fcbf 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    8b06:	78fb      	ldrb	r3, [r7, #3]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d007      	beq.n	8b1c <UART_TxCmd+0x4c>
    8b0c:	78fb      	ldrb	r3, [r7, #3]
    8b0e:	2b01      	cmp	r3, #1
    8b10:	d004      	beq.n	8b1c <UART_TxCmd+0x4c>
    8b12:	4821      	ldr	r0, [pc, #132]	; (8b98 <UART_TxCmd+0xc8>)
    8b14:	f240 31eb 	movw	r1, #1003	; 0x3eb
    8b18:	f7fc fcb4 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    8b1c:	78fb      	ldrb	r3, [r7, #3]
    8b1e:	2b01      	cmp	r3, #1
    8b20:	d119      	bne.n	8b56 <UART_TxCmd+0x86>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8b22:	687a      	ldr	r2, [r7, #4]
    8b24:	4b19      	ldr	r3, [pc, #100]	; (8b8c <UART_TxCmd+0xbc>)
    8b26:	429a      	cmp	r2, r3
    8b28:	d10a      	bne.n	8b40 <UART_TxCmd+0x70>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	687a      	ldr	r2, [r7, #4]
    8b2e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    8b32:	b2d2      	uxtb	r2, r2
    8b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8b38:	b2d2      	uxtb	r2, r2
    8b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    8b3e:	e01f      	b.n	8b80 <UART_TxCmd+0xb0>
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
    8b40:	687b      	ldr	r3, [r7, #4]
    8b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8b46:	b2db      	uxtb	r3, r3
    8b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b4c:	b2da      	uxtb	r2, r3
    8b4e:	687b      	ldr	r3, [r7, #4]
    8b50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    8b54:	e014      	b.n	8b80 <UART_TxCmd+0xb0>
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8b56:	687a      	ldr	r2, [r7, #4]
    8b58:	4b0c      	ldr	r3, [pc, #48]	; (8b8c <UART_TxCmd+0xbc>)
    8b5a:	429a      	cmp	r2, r3
    8b5c:	d108      	bne.n	8b70 <UART_TxCmd+0xa0>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	f04f 0200 	mov.w	r2, #0
    8b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    8b6e:	e007      	b.n	8b80 <UART_TxCmd+0xb0>
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	f04f 0200 	mov.w	r2, #0
    8b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
    8b80:	f107 0708 	add.w	r7, r7, #8
    8b84:	46bd      	mov	sp, r7
    8b86:	bd80      	pop	{r7, pc}
    8b88:	4000c000 	.word	0x4000c000
    8b8c:	40010000 	.word	0x40010000
    8b90:	40098000 	.word	0x40098000
    8b94:	4009c000 	.word	0x4009c000
    8b98:	0000a42c 	.word	0x0000a42c

00008b9c <UART_IrDAInvtInputCmd>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return none
 **********************************************************************/
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
    8b9c:	b580      	push	{r7, lr}
    8b9e:	b082      	sub	sp, #8
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	6078      	str	r0, [r7, #4]
    8ba4:	460b      	mov	r3, r1
    8ba6:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    8ba8:	687a      	ldr	r2, [r7, #4]
    8baa:	4b19      	ldr	r3, [pc, #100]	; (8c10 <UART_IrDAInvtInputCmd+0x74>)
    8bac:	429a      	cmp	r2, r3
    8bae:	d004      	beq.n	8bba <UART_IrDAInvtInputCmd+0x1e>
    8bb0:	4818      	ldr	r0, [pc, #96]	; (8c14 <UART_IrDAInvtInputCmd+0x78>)
    8bb2:	f240 4114 	movw	r1, #1044	; 0x414
    8bb6:	f7fc fc65 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    8bba:	78fb      	ldrb	r3, [r7, #3]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d007      	beq.n	8bd0 <UART_IrDAInvtInputCmd+0x34>
    8bc0:	78fb      	ldrb	r3, [r7, #3]
    8bc2:	2b01      	cmp	r3, #1
    8bc4:	d004      	beq.n	8bd0 <UART_IrDAInvtInputCmd+0x34>
    8bc6:	4813      	ldr	r0, [pc, #76]	; (8c14 <UART_IrDAInvtInputCmd+0x78>)
    8bc8:	f240 4115 	movw	r1, #1045	; 0x415
    8bcc:	f7fc fc5a 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    8bd0:	78fb      	ldrb	r3, [r7, #3]
    8bd2:	2b01      	cmp	r3, #1
    8bd4:	d10a      	bne.n	8bec <UART_IrDAInvtInputCmd+0x50>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8bdc:	b2db      	uxtb	r3, r3
    8bde:	f043 0302 	orr.w	r3, r3, #2
    8be2:	b2da      	uxtb	r2, r3
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    8bea:	e00c      	b.n	8c06 <UART_IrDAInvtInputCmd+0x6a>
	}
	else if (NewState == DISABLE)
    8bec:	78fb      	ldrb	r3, [r7, #3]
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d109      	bne.n	8c06 <UART_IrDAInvtInputCmd+0x6a>
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8bf8:	b2db      	uxtb	r3, r3
    8bfa:	f003 033d 	and.w	r3, r3, #61	; 0x3d
    8bfe:	b2da      	uxtb	r2, r3
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
    8c06:	f107 0708 	add.w	r7, r7, #8
    8c0a:	46bd      	mov	sp, r7
    8c0c:	bd80      	pop	{r7, pc}
    8c0e:	bf00      	nop
    8c10:	4009c000 	.word	0x4009c000
    8c14:	0000a42c 	.word	0x0000a42c

00008c18 <UART_IrDACmd>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return none
 **********************************************************************/
void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
    8c18:	b580      	push	{r7, lr}
    8c1a:	b082      	sub	sp, #8
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
    8c20:	460b      	mov	r3, r1
    8c22:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    8c24:	687a      	ldr	r2, [r7, #4]
    8c26:	4b17      	ldr	r3, [pc, #92]	; (8c84 <UART_IrDACmd+0x6c>)
    8c28:	429a      	cmp	r2, r3
    8c2a:	d004      	beq.n	8c36 <UART_IrDACmd+0x1e>
    8c2c:	4816      	ldr	r0, [pc, #88]	; (8c88 <UART_IrDACmd+0x70>)
    8c2e:	f240 412c 	movw	r1, #1068	; 0x42c
    8c32:	f7fc fc27 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    8c36:	78fb      	ldrb	r3, [r7, #3]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d007      	beq.n	8c4c <UART_IrDACmd+0x34>
    8c3c:	78fb      	ldrb	r3, [r7, #3]
    8c3e:	2b01      	cmp	r3, #1
    8c40:	d004      	beq.n	8c4c <UART_IrDACmd+0x34>
    8c42:	4811      	ldr	r0, [pc, #68]	; (8c88 <UART_IrDACmd+0x70>)
    8c44:	f240 412d 	movw	r1, #1069	; 0x42d
    8c48:	f7fc fc1c 	bl	5484 <check_failed>

	if (NewState == ENABLE)
    8c4c:	78fb      	ldrb	r3, [r7, #3]
    8c4e:	2b01      	cmp	r3, #1
    8c50:	d10a      	bne.n	8c68 <UART_IrDACmd+0x50>
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8c58:	b2db      	uxtb	r3, r3
    8c5a:	f043 0301 	orr.w	r3, r3, #1
    8c5e:	b2da      	uxtb	r2, r3
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    8c66:	e009      	b.n	8c7c <UART_IrDACmd+0x64>
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    8c68:	687b      	ldr	r3, [r7, #4]
    8c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8c6e:	b2db      	uxtb	r3, r3
    8c70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    8c74:	b2da      	uxtb	r2, r3
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
    8c7c:	f107 0708 	add.w	r7, r7, #8
    8c80:	46bd      	mov	sp, r7
    8c82:	bd80      	pop	{r7, pc}
    8c84:	4009c000 	.word	0x4009c000
    8c88:	0000a42c 	.word	0x0000a42c

00008c8c <UART_IrDAPulseDivConfig>:
				- UART_IrDA_PULSEDIV256 : Pulse width = 256 * Tpclk

 * @return none
 **********************************************************************/
void UART_IrDAPulseDivConfig(LPC_UART_TypeDef *UARTx, UART_IrDA_PULSE_Type PulseDiv)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b084      	sub	sp, #16
    8c90:	af00      	add	r7, sp, #0
    8c92:	6078      	str	r0, [r7, #4]
    8c94:	460b      	mov	r3, r1
    8c96:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    8c98:	687a      	ldr	r2, [r7, #4]
    8c9a:	4b22      	ldr	r3, [pc, #136]	; (8d24 <UART_IrDAPulseDivConfig+0x98>)
    8c9c:	429a      	cmp	r2, r3
    8c9e:	d004      	beq.n	8caa <UART_IrDAPulseDivConfig+0x1e>
    8ca0:	4821      	ldr	r0, [pc, #132]	; (8d28 <UART_IrDAPulseDivConfig+0x9c>)
    8ca2:	f240 414d 	movw	r1, #1101	; 0x44d
    8ca6:	f7fc fbed 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));
    8caa:	78fb      	ldrb	r3, [r7, #3]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d019      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cb0:	78fb      	ldrb	r3, [r7, #3]
    8cb2:	2b01      	cmp	r3, #1
    8cb4:	d016      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cb6:	78fb      	ldrb	r3, [r7, #3]
    8cb8:	2b02      	cmp	r3, #2
    8cba:	d013      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cbc:	78fb      	ldrb	r3, [r7, #3]
    8cbe:	2b03      	cmp	r3, #3
    8cc0:	d010      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cc2:	78fb      	ldrb	r3, [r7, #3]
    8cc4:	2b04      	cmp	r3, #4
    8cc6:	d00d      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cc8:	78fb      	ldrb	r3, [r7, #3]
    8cca:	2b05      	cmp	r3, #5
    8ccc:	d00a      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cce:	78fb      	ldrb	r3, [r7, #3]
    8cd0:	2b06      	cmp	r3, #6
    8cd2:	d007      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cd4:	78fb      	ldrb	r3, [r7, #3]
    8cd6:	2b07      	cmp	r3, #7
    8cd8:	d004      	beq.n	8ce4 <UART_IrDAPulseDivConfig+0x58>
    8cda:	4813      	ldr	r0, [pc, #76]	; (8d28 <UART_IrDAPulseDivConfig+0x9c>)
    8cdc:	f240 414e 	movw	r1, #1102	; 0x44e
    8ce0:	f7fc fbd0 	bl	5484 <check_failed>

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    8ce4:	78fb      	ldrb	r3, [r7, #3]
    8ce6:	f003 0307 	and.w	r3, r3, #7
    8cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8cee:	60fb      	str	r3, [r7, #12]
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    8cf0:	687b      	ldr	r3, [r7, #4]
    8cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8cf6:	b2db      	uxtb	r3, r3
    8cf8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    8cfc:	60bb      	str	r3, [r7, #8]
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    8cfe:	68fa      	ldr	r2, [r7, #12]
    8d00:	68bb      	ldr	r3, [r7, #8]
    8d02:	ea42 0303 	orr.w	r3, r2, r3
    8d06:	f043 0304 	orr.w	r3, r3, #4
    8d0a:	60bb      	str	r3, [r7, #8]
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    8d0c:	68bb      	ldr	r3, [r7, #8]
    8d0e:	b2db      	uxtb	r3, r3
    8d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8d14:	b2da      	uxtb	r2, r3
    8d16:	687b      	ldr	r3, [r7, #4]
    8d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
    8d1c:	f107 0710 	add.w	r7, r7, #16
    8d20:	46bd      	mov	sp, r7
    8d22:	bd80      	pop	{r7, pc}
    8d24:	4009c000 	.word	0x4009c000
    8d28:	0000a42c 	.word	0x0000a42c

00008d2c <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
    8d2c:	b580      	push	{r7, lr}
    8d2e:	b084      	sub	sp, #16
    8d30:	af00      	add	r7, sp, #0
    8d32:	6078      	str	r0, [r7, #4]
    8d34:	4613      	mov	r3, r2
    8d36:	460a      	mov	r2, r1
    8d38:	70fa      	strb	r2, [r7, #3]
    8d3a:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = 0;
    8d3c:	f04f 0300 	mov.w	r3, #0
    8d40:	73fb      	strb	r3, [r7, #15]

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    8d42:	687a      	ldr	r2, [r7, #4]
    8d44:	4b26      	ldr	r3, [pc, #152]	; (8de0 <UART_FullModemForcePinState+0xb4>)
    8d46:	429a      	cmp	r2, r3
    8d48:	d004      	beq.n	8d54 <UART_FullModemForcePinState+0x28>
    8d4a:	4826      	ldr	r0, [pc, #152]	; (8de4 <UART_FullModemForcePinState+0xb8>)
    8d4c:	f240 416d 	movw	r1, #1133	; 0x46d
    8d50:	f7fc fb98 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
    8d54:	78fb      	ldrb	r3, [r7, #3]
    8d56:	2b00      	cmp	r3, #0
    8d58:	d007      	beq.n	8d6a <UART_FullModemForcePinState+0x3e>
    8d5a:	78fb      	ldrb	r3, [r7, #3]
    8d5c:	2b01      	cmp	r3, #1
    8d5e:	d004      	beq.n	8d6a <UART_FullModemForcePinState+0x3e>
    8d60:	4820      	ldr	r0, [pc, #128]	; (8de4 <UART_FullModemForcePinState+0xb8>)
    8d62:	f240 416e 	movw	r1, #1134	; 0x46e
    8d66:	f7fc fb8d 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));
    8d6a:	78bb      	ldrb	r3, [r7, #2]
    8d6c:	2b00      	cmp	r3, #0
    8d6e:	d007      	beq.n	8d80 <UART_FullModemForcePinState+0x54>
    8d70:	78bb      	ldrb	r3, [r7, #2]
    8d72:	2b01      	cmp	r3, #1
    8d74:	d004      	beq.n	8d80 <UART_FullModemForcePinState+0x54>
    8d76:	481b      	ldr	r0, [pc, #108]	; (8de4 <UART_FullModemForcePinState+0xb8>)
    8d78:	f240 416f 	movw	r1, #1135	; 0x46f
    8d7c:	f7fc fb82 	bl	5484 <check_failed>

	switch (Pin){
    8d80:	78fb      	ldrb	r3, [r7, #3]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d002      	beq.n	8d8c <UART_FullModemForcePinState+0x60>
    8d86:	2b01      	cmp	r3, #1
    8d88:	d004      	beq.n	8d94 <UART_FullModemForcePinState+0x68>
		break;
	case UART1_MODEM_PIN_RTS:
		tmp = UART1_MCR_RTS_CTRL;
		break;
	default:
		break;
    8d8a:	e007      	b.n	8d9c <UART_FullModemForcePinState+0x70>
	CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
	CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));

	switch (Pin){
	case UART1_MODEM_PIN_DTR:
		tmp = UART1_MCR_DTR_CTRL;
    8d8c:	f04f 0301 	mov.w	r3, #1
    8d90:	73fb      	strb	r3, [r7, #15]
		break;
    8d92:	e003      	b.n	8d9c <UART_FullModemForcePinState+0x70>
	case UART1_MODEM_PIN_RTS:
		tmp = UART1_MCR_RTS_CTRL;
    8d94:	f04f 0302 	mov.w	r3, #2
    8d98:	73fb      	strb	r3, [r7, #15]
		break;
    8d9a:	bf00      	nop
	default:
		break;
	}

	if (NewState == ACTIVE){
    8d9c:	78bb      	ldrb	r3, [r7, #2]
    8d9e:	2b01      	cmp	r3, #1
    8da0:	d109      	bne.n	8db6 <UART_FullModemForcePinState+0x8a>
		UARTx->MCR |= tmp;
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	7c1b      	ldrb	r3, [r3, #16]
    8da6:	b2da      	uxtb	r2, r3
    8da8:	7bfb      	ldrb	r3, [r7, #15]
    8daa:	ea42 0303 	orr.w	r3, r2, r3
    8dae:	b2da      	uxtb	r2, r3
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	741a      	strb	r2, [r3, #16]
    8db4:	e010      	b.n	8dd8 <UART_FullModemForcePinState+0xac>
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    8db6:	687b      	ldr	r3, [r7, #4]
    8db8:	7c1b      	ldrb	r3, [r3, #16]
    8dba:	b2db      	uxtb	r3, r3
    8dbc:	b2da      	uxtb	r2, r3
    8dbe:	7bfb      	ldrb	r3, [r7, #15]
    8dc0:	ea6f 0303 	mvn.w	r3, r3
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	f023 030c 	bic.w	r3, r3, #12
    8dca:	b2db      	uxtb	r3, r3
    8dcc:	ea02 0303 	and.w	r3, r2, r3
    8dd0:	b2db      	uxtb	r3, r3
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	741a      	strb	r2, [r3, #16]
	}
}
    8dd8:	f107 0710 	add.w	r7, r7, #16
    8ddc:	46bd      	mov	sp, r7
    8dde:	bd80      	pop	{r7, pc}
    8de0:	40010000 	.word	0x40010000
    8de4:	0000a42c 	.word	0x0000a42c

00008de8 <UART_FullModemConfigMode>:
				- DISABLE: Disable this mode.
 * @return none
 **********************************************************************/
void UART_FullModemConfigMode(LPC_UART1_TypeDef *UARTx, UART_MODEM_MODE_Type Mode, \
							FunctionalState NewState)
{
    8de8:	b580      	push	{r7, lr}
    8dea:	b084      	sub	sp, #16
    8dec:	af00      	add	r7, sp, #0
    8dee:	6078      	str	r0, [r7, #4]
    8df0:	4613      	mov	r3, r2
    8df2:	460a      	mov	r2, r1
    8df4:	70fa      	strb	r2, [r7, #3]
    8df6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    8df8:	687a      	ldr	r2, [r7, #4]
    8dfa:	4b2b      	ldr	r3, [pc, #172]	; (8ea8 <UART_FullModemConfigMode+0xc0>)
    8dfc:	429a      	cmp	r2, r3
    8dfe:	d004      	beq.n	8e0a <UART_FullModemConfigMode+0x22>
    8e00:	482a      	ldr	r0, [pc, #168]	; (8eac <UART_FullModemConfigMode+0xc4>)
    8e02:	f240 4195 	movw	r1, #1173	; 0x495
    8e06:	f7fc fb3d 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
    8e0a:	78fb      	ldrb	r3, [r7, #3]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d00a      	beq.n	8e26 <UART_FullModemConfigMode+0x3e>
    8e10:	78fb      	ldrb	r3, [r7, #3]
    8e12:	2b01      	cmp	r3, #1
    8e14:	d007      	beq.n	8e26 <UART_FullModemConfigMode+0x3e>
    8e16:	78fb      	ldrb	r3, [r7, #3]
    8e18:	2b02      	cmp	r3, #2
    8e1a:	d004      	beq.n	8e26 <UART_FullModemConfigMode+0x3e>
    8e1c:	4823      	ldr	r0, [pc, #140]	; (8eac <UART_FullModemConfigMode+0xc4>)
    8e1e:	f240 4196 	movw	r1, #1174	; 0x496
    8e22:	f7fc fb2f 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    8e26:	78bb      	ldrb	r3, [r7, #2]
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d007      	beq.n	8e3c <UART_FullModemConfigMode+0x54>
    8e2c:	78bb      	ldrb	r3, [r7, #2]
    8e2e:	2b01      	cmp	r3, #1
    8e30:	d004      	beq.n	8e3c <UART_FullModemConfigMode+0x54>
    8e32:	481e      	ldr	r0, [pc, #120]	; (8eac <UART_FullModemConfigMode+0xc4>)
    8e34:	f240 4197 	movw	r1, #1175	; 0x497
    8e38:	f7fc fb24 	bl	5484 <check_failed>

	switch(Mode){
    8e3c:	78fb      	ldrb	r3, [r7, #3]
    8e3e:	2b01      	cmp	r3, #1
    8e40:	d007      	beq.n	8e52 <UART_FullModemConfigMode+0x6a>
    8e42:	2b02      	cmp	r3, #2
    8e44:	d009      	beq.n	8e5a <UART_FullModemConfigMode+0x72>
    8e46:	2b00      	cmp	r3, #0
    8e48:	d10b      	bne.n	8e62 <UART_FullModemConfigMode+0x7a>
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
    8e4a:	f04f 0310 	mov.w	r3, #16
    8e4e:	73fb      	strb	r3, [r7, #15]
		break;
    8e50:	e008      	b.n	8e64 <UART_FullModemConfigMode+0x7c>
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
    8e52:	f04f 0340 	mov.w	r3, #64	; 0x40
    8e56:	73fb      	strb	r3, [r7, #15]
		break;
    8e58:	e004      	b.n	8e64 <UART_FullModemConfigMode+0x7c>
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
    8e5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    8e5e:	73fb      	strb	r3, [r7, #15]
		break;
    8e60:	e000      	b.n	8e64 <UART_FullModemConfigMode+0x7c>
	default:
		break;
    8e62:	bf00      	nop
	}

	if (NewState == ENABLE)
    8e64:	78bb      	ldrb	r3, [r7, #2]
    8e66:	2b01      	cmp	r3, #1
    8e68:	d109      	bne.n	8e7e <UART_FullModemConfigMode+0x96>
	{
		UARTx->MCR |= tmp;
    8e6a:	687b      	ldr	r3, [r7, #4]
    8e6c:	7c1b      	ldrb	r3, [r3, #16]
    8e6e:	b2da      	uxtb	r2, r3
    8e70:	7bfb      	ldrb	r3, [r7, #15]
    8e72:	ea42 0303 	orr.w	r3, r2, r3
    8e76:	b2da      	uxtb	r2, r3
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	741a      	strb	r2, [r3, #16]
    8e7c:	e010      	b.n	8ea0 <UART_FullModemConfigMode+0xb8>
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	7c1b      	ldrb	r3, [r3, #16]
    8e82:	b2db      	uxtb	r3, r3
    8e84:	b2da      	uxtb	r2, r3
    8e86:	7bfb      	ldrb	r3, [r7, #15]
    8e88:	ea6f 0303 	mvn.w	r3, r3
    8e8c:	b2db      	uxtb	r3, r3
    8e8e:	f023 030c 	bic.w	r3, r3, #12
    8e92:	b2db      	uxtb	r3, r3
    8e94:	ea02 0303 	and.w	r3, r2, r3
    8e98:	b2db      	uxtb	r3, r3
    8e9a:	b2da      	uxtb	r2, r3
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	741a      	strb	r2, [r3, #16]
	}
}
    8ea0:	f107 0710 	add.w	r7, r7, #16
    8ea4:	46bd      	mov	sp, r7
    8ea6:	bd80      	pop	{r7, pc}
    8ea8:	40010000 	.word	0x40010000
    8eac:	0000a42c 	.word	0x0000a42c

00008eb0 <UART_FullModemGetStatus>:
 * 			modem register could not be correct. So this function used to
 * 			read modem status register in one time only, then the return value
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b082      	sub	sp, #8
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    8eb8:	687a      	ldr	r2, [r7, #4]
    8eba:	4b08      	ldr	r3, [pc, #32]	; (8edc <UART_FullModemGetStatus+0x2c>)
    8ebc:	429a      	cmp	r2, r3
    8ebe:	d004      	beq.n	8eca <UART_FullModemGetStatus+0x1a>
    8ec0:	4807      	ldr	r0, [pc, #28]	; (8ee0 <UART_FullModemGetStatus+0x30>)
    8ec2:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8ec6:	f7fc fadd 	bl	5484 <check_failed>
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    8eca:	687b      	ldr	r3, [r7, #4]
    8ecc:	7e1b      	ldrb	r3, [r3, #24]
    8ece:	b2db      	uxtb	r3, r3
}
    8ed0:	4618      	mov	r0, r3
    8ed2:	f107 0708 	add.w	r7, r7, #8
    8ed6:	46bd      	mov	sp, r7
    8ed8:	bd80      	pop	{r7, pc}
    8eda:	bf00      	nop
    8edc:	40010000 	.word	0x40010000
    8ee0:	0000a42c 	.word	0x0000a42c

00008ee4 <UART_RS485Config>:
*                    that contains the configuration information for specified UART
*                    in RS485 mode.
 * @return		None
 **********************************************************************/
void UART_RS485Config(LPC_UART1_TypeDef *UARTx, UART1_RS485_CTRLCFG_Type *RS485ConfigStruct)
{
    8ee4:	b580      	push	{r7, lr}
    8ee6:	b084      	sub	sp, #16
    8ee8:	af00      	add	r7, sp, #0
    8eea:	6078      	str	r0, [r7, #4]
    8eec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    8eee:	687a      	ldr	r2, [r7, #4]
    8ef0:	4b5c      	ldr	r3, [pc, #368]	; (9064 <UART_RS485Config+0x180>)
    8ef2:	429a      	cmp	r2, r3
    8ef4:	d004      	beq.n	8f00 <UART_RS485Config+0x1c>
    8ef6:	485c      	ldr	r0, [pc, #368]	; (9068 <UART_RS485Config+0x184>)
    8ef8:	f240 41d4 	movw	r1, #1236	; 0x4d4
    8efc:	f7fc fac2 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoAddrDetect_State));
    8f00:	683b      	ldr	r3, [r7, #0]
    8f02:	789b      	ldrb	r3, [r3, #2]
    8f04:	2b00      	cmp	r3, #0
    8f06:	d008      	beq.n	8f1a <UART_RS485Config+0x36>
    8f08:	683b      	ldr	r3, [r7, #0]
    8f0a:	789b      	ldrb	r3, [r3, #2]
    8f0c:	2b01      	cmp	r3, #1
    8f0e:	d004      	beq.n	8f1a <UART_RS485Config+0x36>
    8f10:	4855      	ldr	r0, [pc, #340]	; (9068 <UART_RS485Config+0x184>)
    8f12:	f240 41d5 	movw	r1, #1237	; 0x4d5
    8f16:	f7fc fab5 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoDirCtrl_State));
    8f1a:	683b      	ldr	r3, [r7, #0]
    8f1c:	78db      	ldrb	r3, [r3, #3]
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d008      	beq.n	8f34 <UART_RS485Config+0x50>
    8f22:	683b      	ldr	r3, [r7, #0]
    8f24:	78db      	ldrb	r3, [r3, #3]
    8f26:	2b01      	cmp	r3, #1
    8f28:	d004      	beq.n	8f34 <UART_RS485Config+0x50>
    8f2a:	484f      	ldr	r0, [pc, #316]	; (9068 <UART_RS485Config+0x184>)
    8f2c:	f240 41d6 	movw	r1, #1238	; 0x4d6
    8f30:	f7fc faa8 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART1_RS485_CFG_DELAYVALUE(RS485ConfigStruct->DelayValue));
    8f34:	683b      	ldr	r3, [r7, #0]
    8f36:	79db      	ldrb	r3, [r3, #7]
    8f38:	2bff      	cmp	r3, #255	; 0xff
    8f3a:	d104      	bne.n	8f46 <UART_RS485Config+0x62>
    8f3c:	484a      	ldr	r0, [pc, #296]	; (9068 <UART_RS485Config+0x184>)
    8f3e:	f240 41d7 	movw	r1, #1239	; 0x4d7
    8f42:	f7fc fa9f 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_SETSTATE(RS485ConfigStruct->DirCtrlPol_Level));
    8f46:	683b      	ldr	r3, [r7, #0]
    8f48:	795b      	ldrb	r3, [r3, #5]
    8f4a:	2b00      	cmp	r3, #0
    8f4c:	d008      	beq.n	8f60 <UART_RS485Config+0x7c>
    8f4e:	683b      	ldr	r3, [r7, #0]
    8f50:	795b      	ldrb	r3, [r3, #5]
    8f52:	2b01      	cmp	r3, #1
    8f54:	d004      	beq.n	8f60 <UART_RS485Config+0x7c>
    8f56:	4844      	ldr	r0, [pc, #272]	; (9068 <UART_RS485Config+0x184>)
    8f58:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
    8f5c:	f7fc fa92 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
    8f60:	683b      	ldr	r3, [r7, #0]
    8f62:	791b      	ldrb	r3, [r3, #4]
    8f64:	2b00      	cmp	r3, #0
    8f66:	d008      	beq.n	8f7a <UART_RS485Config+0x96>
    8f68:	683b      	ldr	r3, [r7, #0]
    8f6a:	791b      	ldrb	r3, [r3, #4]
    8f6c:	2b01      	cmp	r3, #1
    8f6e:	d004      	beq.n	8f7a <UART_RS485Config+0x96>
    8f70:	483d      	ldr	r0, [pc, #244]	; (9068 <UART_RS485Config+0x184>)
    8f72:	f240 41d9 	movw	r1, #1241	; 0x4d9
    8f76:	f7fc fa85 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
    8f7a:	683b      	ldr	r3, [r7, #0]
    8f7c:	799b      	ldrb	r3, [r3, #6]
    8f7e:	2bff      	cmp	r3, #255	; 0xff
    8f80:	d104      	bne.n	8f8c <UART_RS485Config+0xa8>
    8f82:	4839      	ldr	r0, [pc, #228]	; (9068 <UART_RS485Config+0x184>)
    8f84:	f240 41da 	movw	r1, #1242	; 0x4da
    8f88:	f7fc fa7c 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
    8f8c:	683b      	ldr	r3, [r7, #0]
    8f8e:	781b      	ldrb	r3, [r3, #0]
    8f90:	2b00      	cmp	r3, #0
    8f92:	d008      	beq.n	8fa6 <UART_RS485Config+0xc2>
    8f94:	683b      	ldr	r3, [r7, #0]
    8f96:	781b      	ldrb	r3, [r3, #0]
    8f98:	2b01      	cmp	r3, #1
    8f9a:	d004      	beq.n	8fa6 <UART_RS485Config+0xc2>
    8f9c:	4832      	ldr	r0, [pc, #200]	; (9068 <UART_RS485Config+0x184>)
    8f9e:	f240 41db 	movw	r1, #1243	; 0x4db
    8fa2:	f7fc fa6f 	bl	5484 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));
    8fa6:	683b      	ldr	r3, [r7, #0]
    8fa8:	785b      	ldrb	r3, [r3, #1]
    8faa:	2b00      	cmp	r3, #0
    8fac:	d008      	beq.n	8fc0 <UART_RS485Config+0xdc>
    8fae:	683b      	ldr	r3, [r7, #0]
    8fb0:	785b      	ldrb	r3, [r3, #1]
    8fb2:	2b01      	cmp	r3, #1
    8fb4:	d004      	beq.n	8fc0 <UART_RS485Config+0xdc>
    8fb6:	482c      	ldr	r0, [pc, #176]	; (9068 <UART_RS485Config+0x184>)
    8fb8:	f240 41dc 	movw	r1, #1244	; 0x4dc
    8fbc:	f7fc fa62 	bl	5484 <check_failed>

	tmp = 0;
    8fc0:	f04f 0300 	mov.w	r3, #0
    8fc4:	60fb      	str	r3, [r7, #12]
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    8fc6:	683b      	ldr	r3, [r7, #0]
    8fc8:	78db      	ldrb	r3, [r3, #3]
    8fca:	2b01      	cmp	r3, #1
    8fcc:	d118      	bne.n	9000 <UART_RS485Config+0x11c>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
    8fce:	68fb      	ldr	r3, [r7, #12]
    8fd0:	f043 0310 	orr.w	r3, r3, #16
    8fd4:	60fb      	str	r3, [r7, #12]

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    8fd6:	683b      	ldr	r3, [r7, #0]
    8fd8:	795b      	ldrb	r3, [r3, #5]
    8fda:	2b01      	cmp	r3, #1
    8fdc:	d103      	bne.n	8fe6 <UART_RS485Config+0x102>
		{
			tmp |= UART1_RS485CTRL_OINV_1;
    8fde:	68fb      	ldr	r3, [r7, #12]
    8fe0:	f043 0320 	orr.w	r3, r3, #32
    8fe4:	60fb      	str	r3, [r7, #12]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    8fe6:	683b      	ldr	r3, [r7, #0]
    8fe8:	791b      	ldrb	r3, [r3, #4]
    8fea:	2b01      	cmp	r3, #1
    8fec:	d103      	bne.n	8ff6 <UART_RS485Config+0x112>
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
    8fee:	68fb      	ldr	r3, [r7, #12]
    8ff0:	f043 0308 	orr.w	r3, r3, #8
    8ff4:	60fb      	str	r3, [r7, #12]
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    8ff6:	683b      	ldr	r3, [r7, #0]
    8ff8:	79da      	ldrb	r2, [r3, #7]
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    9000:	683b      	ldr	r3, [r7, #0]
    9002:	781b      	ldrb	r3, [r3, #0]
    9004:	2b01      	cmp	r3, #1
    9006:	d103      	bne.n	9010 <UART_RS485Config+0x12c>
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
    9008:	68fb      	ldr	r3, [r7, #12]
    900a:	f043 0301 	orr.w	r3, r3, #1
    900e:	60fb      	str	r3, [r7, #12]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    9010:	683b      	ldr	r3, [r7, #0]
    9012:	789b      	ldrb	r3, [r3, #2]
    9014:	2b01      	cmp	r3, #1
    9016:	d108      	bne.n	902a <UART_RS485Config+0x146>
	{
		tmp |= UART1_RS485CTRL_AADEN;
    9018:	68fb      	ldr	r3, [r7, #12]
    901a:	f043 0304 	orr.w	r3, r3, #4
    901e:	60fb      	str	r3, [r7, #12]
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    9020:	683b      	ldr	r3, [r7, #0]
    9022:	799a      	ldrb	r2, [r3, #6]
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    902a:	683b      	ldr	r3, [r7, #0]
    902c:	785b      	ldrb	r3, [r3, #1]
    902e:	2b00      	cmp	r3, #0
    9030:	d103      	bne.n	903a <UART_RS485Config+0x156>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    9032:	68fb      	ldr	r3, [r7, #12]
    9034:	f043 0302 	orr.w	r3, r3, #2
    9038:	60fb      	str	r3, [r7, #12]
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    903a:	68fb      	ldr	r3, [r7, #12]
    903c:	b2db      	uxtb	r3, r3
    903e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9042:	b2da      	uxtb	r2, r3
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	7b1b      	ldrb	r3, [r3, #12]
    904e:	b2db      	uxtb	r3, r3
    9050:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    9054:	b2da      	uxtb	r2, r3
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	731a      	strb	r2, [r3, #12]
}
    905a:	f107 0710 	add.w	r7, r7, #16
    905e:	46bd      	mov	sp, r7
    9060:	bd80      	pop	{r7, pc}
    9062:	bf00      	nop
    9064:	40010000 	.word	0x40010000
    9068:	0000a42c 	.word	0x0000a42c

0000906c <UART_RS485ReceiverCmd>:
 * 							- ENABLE: Enable this function.
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
    906c:	b480      	push	{r7}
    906e:	b083      	sub	sp, #12
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
    9074:	460b      	mov	r3, r1
    9076:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE){
    9078:	78fb      	ldrb	r3, [r7, #3]
    907a:	2b01      	cmp	r3, #1
    907c:	d10a      	bne.n	9094 <UART_RS485ReceiverCmd+0x28>
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    907e:	687b      	ldr	r3, [r7, #4]
    9080:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9084:	b2db      	uxtb	r3, r3
    9086:	f023 0302 	bic.w	r3, r3, #2
    908a:	b2da      	uxtb	r2, r3
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    9092:	e009      	b.n	90a8 <UART_RS485ReceiverCmd+0x3c>
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    909a:	b2db      	uxtb	r3, r3
    909c:	f043 0302 	orr.w	r3, r3, #2
    90a0:	b2da      	uxtb	r2, r3
    90a2:	687b      	ldr	r3, [r7, #4]
    90a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
}
    90a8:	f107 070c 	add.w	r7, r7, #12
    90ac:	46bd      	mov	sp, r7
    90ae:	bc80      	pop	{r7}
    90b0:	4770      	bx	lr
    90b2:	bf00      	nop

000090b4 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    90b4:	b580      	push	{r7, lr}
    90b6:	b086      	sub	sp, #24
    90b8:	af00      	add	r7, sp, #0
    90ba:	60f8      	str	r0, [r7, #12]
    90bc:	60b9      	str	r1, [r7, #8]
    90be:	607a      	str	r2, [r7, #4]
    90c0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    90c2:	78fb      	ldrb	r3, [r7, #3]
    90c4:	2b00      	cmp	r3, #0
    90c6:	d020      	beq.n	910a <UART_RS485Send+0x56>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    90c8:	68fb      	ldr	r3, [r7, #12]
    90ca:	7b1b      	ldrb	r3, [r3, #12]
    90cc:	74fb      	strb	r3, [r7, #19]
    90ce:	7cfb      	ldrb	r3, [r7, #19]
    90d0:	74bb      	strb	r3, [r7, #18]
		tmp &= ~(UART_LCR_PARITY_EVEN);
    90d2:	7cfb      	ldrb	r3, [r7, #19]
    90d4:	f023 0310 	bic.w	r3, r3, #16
    90d8:	74fb      	strb	r3, [r7, #19]
		UARTx->LCR = tmp;
    90da:	68fb      	ldr	r3, [r7, #12]
    90dc:	7cfa      	ldrb	r2, [r7, #19]
    90de:	731a      	strb	r2, [r3, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    90e0:	68fb      	ldr	r3, [r7, #12]
    90e2:	4618      	mov	r0, r3
    90e4:	68b9      	ldr	r1, [r7, #8]
    90e6:	687a      	ldr	r2, [r7, #4]
    90e8:	f04f 0301 	mov.w	r3, #1
    90ec:	f7ff f8d8 	bl	82a0 <UART_Send>
    90f0:	6178      	str	r0, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
    90f2:	bf00      	nop
    90f4:	68fb      	ldr	r3, [r7, #12]
    90f6:	7d1b      	ldrb	r3, [r3, #20]
    90f8:	b2db      	uxtb	r3, r3
    90fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90fe:	2b00      	cmp	r3, #0
    9100:	d0f8      	beq.n	90f4 <UART_RS485Send+0x40>
		UARTx->LCR = save;
    9102:	68fb      	ldr	r3, [r7, #12]
    9104:	7cba      	ldrb	r2, [r7, #18]
    9106:	731a      	strb	r2, [r3, #12]
    9108:	e010      	b.n	912c <UART_RS485Send+0x78>
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    910a:	68fb      	ldr	r3, [r7, #12]
    910c:	4618      	mov	r0, r3
    910e:	68b9      	ldr	r1, [r7, #8]
    9110:	687a      	ldr	r2, [r7, #4]
    9112:	f04f 0301 	mov.w	r3, #1
    9116:	f7ff f8c3 	bl	82a0 <UART_Send>
    911a:	6178      	str	r0, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
    911c:	bf00      	nop
    911e:	68fb      	ldr	r3, [r7, #12]
    9120:	7d1b      	ldrb	r3, [r3, #20]
    9122:	b2db      	uxtb	r3, r3
    9124:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9128:	2b00      	cmp	r3, #0
    912a:	d0f8      	beq.n	911e <UART_RS485Send+0x6a>
	}
	return cnt;
    912c:	697b      	ldr	r3, [r7, #20]
}
    912e:	4618      	mov	r0, r3
    9130:	f107 0718 	add.w	r7, r7, #24
    9134:	46bd      	mov	sp, r7
    9136:	bd80      	pop	{r7, pc}

00009138 <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    9138:	b580      	push	{r7, lr}
    913a:	b082      	sub	sp, #8
    913c:	af00      	add	r7, sp, #0
    913e:	6078      	str	r0, [r7, #4]
    9140:	460b      	mov	r3, r1
    9142:	70fb      	strb	r3, [r7, #3]
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
    9144:	f107 0303 	add.w	r3, r7, #3
    9148:	6878      	ldr	r0, [r7, #4]
    914a:	4619      	mov	r1, r3
    914c:	f04f 0201 	mov.w	r2, #1
    9150:	f04f 0301 	mov.w	r3, #1
    9154:	f7ff ffae 	bl	90b4 <UART_RS485Send>
}
    9158:	f107 0708 	add.w	r7, r7, #8
    915c:	46bd      	mov	sp, r7
    915e:	bd80      	pop	{r7, pc}

00009160 <UART_RS485SendData>:
 * @param[in]	pData Pointer to data to be sent.
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
    9160:	b580      	push	{r7, lr}
    9162:	b084      	sub	sp, #16
    9164:	af00      	add	r7, sp, #0
    9166:	60f8      	str	r0, [r7, #12]
    9168:	60b9      	str	r1, [r7, #8]
    916a:	607a      	str	r2, [r7, #4]
	return (UART_RS485Send(UARTx, pData, size, 0));
    916c:	68f8      	ldr	r0, [r7, #12]
    916e:	68b9      	ldr	r1, [r7, #8]
    9170:	687a      	ldr	r2, [r7, #4]
    9172:	f04f 0300 	mov.w	r3, #0
    9176:	f7ff ff9d 	bl	90b4 <UART_RS485Send>
    917a:	4603      	mov	r3, r0
}
    917c:	4618      	mov	r0, r3
    917e:	f107 0710 	add.w	r7, r7, #16
    9182:	46bd      	mov	sp, r7
    9184:	bd80      	pop	{r7, pc}
    9186:	bf00      	nop

00009188 <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void
ResetISR(void) {
    9188:	b580      	push	{r7, lr}
    918a:	b082      	sub	sp, #8
    918c:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    918e:	4b10      	ldr	r3, [pc, #64]	; (91d0 <zero_loop+0x10>)
    9190:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
    9192:	4b10      	ldr	r3, [pc, #64]	; (91d4 <zero_loop+0x14>)
    9194:	603b      	str	r3, [r7, #0]
    9196:	e00b      	b.n	91b0 <ResetISR+0x28>
    {
        *pulDest++ = *pulSrc++;
    9198:	687b      	ldr	r3, [r7, #4]
    919a:	681a      	ldr	r2, [r3, #0]
    919c:	683b      	ldr	r3, [r7, #0]
    919e:	601a      	str	r2, [r3, #0]
    91a0:	683b      	ldr	r3, [r7, #0]
    91a2:	f103 0304 	add.w	r3, r3, #4
    91a6:	603b      	str	r3, [r7, #0]
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	f103 0304 	add.w	r3, r3, #4
    91ae:	607b      	str	r3, [r7, #4]

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
    91b0:	683a      	ldr	r2, [r7, #0]
    91b2:	4b09      	ldr	r3, [pc, #36]	; (91d8 <zero_loop+0x18>)
    91b4:	429a      	cmp	r2, r3
    91b6:	d3ef      	bcc.n	9198 <ResetISR+0x10>

    //
    // Zero fill the bss segment.  This is done with inline assembly since this
    // will clear the value of pulDest if it is not kept in a register.
    //
    __asm("    ldr     r0, =_bss\n"
    91b8:	4816      	ldr	r0, [pc, #88]	; (9214 <ADC_IRQHandler+0x8>)
    91ba:	4917      	ldr	r1, [pc, #92]	; (9218 <ADC_IRQHandler+0xc>)
    91bc:	f04f 0200 	mov.w	r2, #0

000091c0 <zero_loop>:
    91c0:	4288      	cmp	r0, r1
    91c2:	bfb8      	it	lt
    91c4:	f840 2b04 	strlt.w	r2, [r0], #4
    91c8:	dbfa      	blt.n	91c0 <zero_loop>

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main() ;
#else
	main();
    91ca:	f7f7 f8b9 	bl	340 <main>
	//
	// main() shouldn't return, but if it does, we'll just enter an infinite loop 
	//
	while (1) {
		;
	}
    91ce:	e7fe      	b.n	91ce <zero_loop+0xe>
    91d0:	0000a460 	.word	0x0000a460
    91d4:	10000000 	.word	0x10000000
    91d8:	10000010 	.word	0x10000010

000091dc <NMI_Handler>:
// simply enters an infinite loop, preserving the system state for examination
// by a debugger.
//
//*****************************************************************************
void NMI_Handler(void)
{
    91dc:	b480      	push	{r7}
    91de:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    91e0:	e7fe      	b.n	91e0 <NMI_Handler+0x4>
    91e2:	bf00      	nop

000091e4 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
    91e4:	b480      	push	{r7}
    91e6:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    91e8:	e7fe      	b.n	91e8 <HardFault_Handler+0x4>
    91ea:	bf00      	nop

000091ec <MemManage_Handler>:
}

void MemManage_Handler(void)
{
    91ec:	b480      	push	{r7}
    91ee:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    91f0:	e7fe      	b.n	91f0 <MemManage_Handler+0x4>
    91f2:	bf00      	nop

000091f4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
    91f4:	b480      	push	{r7}
    91f6:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    91f8:	e7fe      	b.n	91f8 <BusFault_Handler+0x4>
    91fa:	bf00      	nop

000091fc <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
    91fc:	b480      	push	{r7}
    91fe:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    9200:	e7fe      	b.n	9200 <UsageFault_Handler+0x4>
    9202:	bf00      	nop

00009204 <DebugMon_Handler>:
}


void DebugMon_Handler(void)
{
    9204:	b480      	push	{r7}
    9206:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    9208:	e7fe      	b.n	9208 <DebugMon_Handler+0x4>
    920a:	bf00      	nop

0000920c <ADC_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a handler
// is not present in the application code.
//
//*****************************************************************************
void IntDefaultHandler(void)
{
    920c:	b480      	push	{r7}
    920e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    9210:	e7fe      	b.n	9210 <ADC_IRQHandler+0x4>
    9212:	0000      	.short	0x0000
    9214:	10000010 	.word	0x10000010
    9218:	10004e5c 	.word	0x10004e5c

0000921c <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/


void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    921c:	b480      	push	{r7}
    921e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    9220:	4b62      	ldr	r3, [pc, #392]	; (93ac <SystemCoreClockUpdate+0x190>)
    9222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    9226:	ea4f 6313 	mov.w	r3, r3, lsr #24
    922a:	f003 0303 	and.w	r3, r3, #3
    922e:	2b03      	cmp	r3, #3
    9230:	d17b      	bne.n	932a <SystemCoreClockUpdate+0x10e>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    9232:	4b5e      	ldr	r3, [pc, #376]	; (93ac <SystemCoreClockUpdate+0x190>)
    9234:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    9238:	f003 0303 	and.w	r3, r3, #3
    923c:	2b03      	cmp	r3, #3
    923e:	f200 80b0 	bhi.w	93a2 <SystemCoreClockUpdate+0x186>
    9242:	a201      	add	r2, pc, #4	; (adr r2, 9248 <SystemCoreClockUpdate+0x2c>)
    9244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9248:	00009259 	.word	0x00009259
    924c:	0000929f 	.word	0x0000929f
    9250:	000092e7 	.word	0x000092e7
    9254:	00009259 	.word	0x00009259
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    9258:	4b54      	ldr	r3, [pc, #336]	; (93ac <SystemCoreClockUpdate+0x190>)
    925a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    925e:	ea4f 4343 	mov.w	r3, r3, lsl #17
    9262:	ea4f 4353 	mov.w	r3, r3, lsr #17
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    9266:	f103 0301 	add.w	r3, r3, #1
    926a:	4a51      	ldr	r2, [pc, #324]	; (93b0 <SystemCoreClockUpdate+0x194>)
    926c:	fb02 f203 	mul.w	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    9270:	4b4e      	ldr	r3, [pc, #312]	; (93ac <SystemCoreClockUpdate+0x190>)
    9272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    9276:	ea4f 4313 	mov.w	r3, r3, lsr #16
    927a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    927e:	f103 0301 	add.w	r3, r3, #1
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    9282:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    9286:	4b49      	ldr	r3, [pc, #292]	; (93ac <SystemCoreClockUpdate+0x190>)
    9288:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    928c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    9290:	f103 0301 	add.w	r3, r3, #1
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    9294:	fbb2 f2f3 	udiv	r2, r2, r3
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    9298:	4b46      	ldr	r3, [pc, #280]	; (93b4 <SystemCoreClockUpdate+0x198>)
    929a:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    929c:	e082      	b.n	93a4 <SystemCoreClockUpdate+0x188>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    929e:	4b43      	ldr	r3, [pc, #268]	; (93ac <SystemCoreClockUpdate+0x190>)
    92a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    92a4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    92a8:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    92ac:	f103 0301 	add.w	r3, r3, #1
    92b0:	4a41      	ldr	r2, [pc, #260]	; (93b8 <SystemCoreClockUpdate+0x19c>)
    92b2:	fb02 f203 	mul.w	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    92b6:	4b3d      	ldr	r3, [pc, #244]	; (93ac <SystemCoreClockUpdate+0x190>)
    92b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    92bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    92c0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    92c4:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    92c8:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    92cc:	4b37      	ldr	r3, [pc, #220]	; (93ac <SystemCoreClockUpdate+0x190>)
    92ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    92d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    92d6:	f103 0301 	add.w	r3, r3, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    92da:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    92de:	4b35      	ldr	r3, [pc, #212]	; (93b4 <SystemCoreClockUpdate+0x198>)
    92e0:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    92e2:	bf00      	nop
    92e4:	e05e      	b.n	93a4 <SystemCoreClockUpdate+0x188>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    92e6:	4b31      	ldr	r3, [pc, #196]	; (93ac <SystemCoreClockUpdate+0x190>)
    92e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    92ec:	ea4f 4343 	mov.w	r3, r3, lsl #17
    92f0:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    92f4:	f103 0301 	add.w	r3, r3, #1
    92f8:	ea4f 4203 	mov.w	r2, r3, lsl #16
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    92fc:	4b2b      	ldr	r3, [pc, #172]	; (93ac <SystemCoreClockUpdate+0x190>)
    92fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    9302:	ea4f 4313 	mov.w	r3, r3, lsr #16
    9306:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    930a:	f103 0301 	add.w	r3, r3, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    930e:	fbb2 f2f3 	udiv	r2, r2, r3
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    9312:	4b26      	ldr	r3, [pc, #152]	; (93ac <SystemCoreClockUpdate+0x190>)
    9314:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    9318:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    931c:	f103 0301 	add.w	r3, r3, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    9320:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    9324:	4b23      	ldr	r3, [pc, #140]	; (93b4 <SystemCoreClockUpdate+0x198>)
    9326:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    9328:	e03c      	b.n	93a4 <SystemCoreClockUpdate+0x188>
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    932a:	4b20      	ldr	r3, [pc, #128]	; (93ac <SystemCoreClockUpdate+0x190>)
    932c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    9330:	f003 0303 	and.w	r3, r3, #3
    9334:	2b03      	cmp	r3, #3
    9336:	d835      	bhi.n	93a4 <SystemCoreClockUpdate+0x188>
    9338:	a201      	add	r2, pc, #4	; (adr r2, 9340 <SystemCoreClockUpdate+0x124>)
    933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    933e:	bf00      	nop
    9340:	00009351 	.word	0x00009351
    9344:	0000936b 	.word	0x0000936b
    9348:	00009385 	.word	0x00009385
    934c:	00009351 	.word	0x00009351
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    9350:	4b16      	ldr	r3, [pc, #88]	; (93ac <SystemCoreClockUpdate+0x190>)
    9352:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    9356:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    935a:	f103 0301 	add.w	r3, r3, #1
    935e:	4a17      	ldr	r2, [pc, #92]	; (93bc <SystemCoreClockUpdate+0x1a0>)
    9360:	fbb2 f2f3 	udiv	r2, r2, r3
    9364:	4b13      	ldr	r3, [pc, #76]	; (93b4 <SystemCoreClockUpdate+0x198>)
    9366:	601a      	str	r2, [r3, #0]
        break;
    9368:	e01c      	b.n	93a4 <SystemCoreClockUpdate+0x188>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    936a:	4b10      	ldr	r3, [pc, #64]	; (93ac <SystemCoreClockUpdate+0x190>)
    936c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    9370:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    9374:	f103 0301 	add.w	r3, r3, #1
    9378:	4a11      	ldr	r2, [pc, #68]	; (93c0 <SystemCoreClockUpdate+0x1a4>)
    937a:	fbb2 f2f3 	udiv	r2, r2, r3
    937e:	4b0d      	ldr	r3, [pc, #52]	; (93b4 <SystemCoreClockUpdate+0x198>)
    9380:	601a      	str	r2, [r3, #0]
        break;
    9382:	e00f      	b.n	93a4 <SystemCoreClockUpdate+0x188>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    9384:	4b09      	ldr	r3, [pc, #36]	; (93ac <SystemCoreClockUpdate+0x190>)
    9386:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    938a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    938e:	f103 0301 	add.w	r3, r3, #1
    9392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    9396:	fbb2 f2f3 	udiv	r2, r2, r3
    939a:	4b06      	ldr	r3, [pc, #24]	; (93b4 <SystemCoreClockUpdate+0x198>)
    939c:	601a      	str	r2, [r3, #0]
        break;
    939e:	bf00      	nop
    93a0:	e000      	b.n	93a4 <SystemCoreClockUpdate+0x188>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    93a2:	bf00      	nop
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
    }
  }

}
    93a4:	46bd      	mov	sp, r7
    93a6:	bc80      	pop	{r7}
    93a8:	4770      	bx	lr
    93aa:	bf00      	nop
    93ac:	400fc000 	.word	0x400fc000
    93b0:	007a1200 	.word	0x007a1200
    93b4:	1000000c 	.word	0x1000000c
    93b8:	016e3600 	.word	0x016e3600
    93bc:	003d0900 	.word	0x003d0900
    93c0:	00b71b00 	.word	0x00b71b00

000093c4 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
    93c4:	b480      	push	{r7}
    93c6:	af00      	add	r7, sp, #0
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    93c8:	4b5a      	ldr	r3, [pc, #360]	; (9534 <SystemInit+0x170>)
    93ca:	f04f 0220 	mov.w	r2, #32
    93ce:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
    93d2:	4b58      	ldr	r3, [pc, #352]	; (9534 <SystemInit+0x170>)
    93d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    93d8:	f003 0320 	and.w	r3, r3, #32
    93dc:	2b00      	cmp	r3, #0
    93de:	d007      	beq.n	93f0 <SystemInit+0x2c>
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    93e0:	bf00      	nop
    93e2:	4b54      	ldr	r3, [pc, #336]	; (9534 <SystemInit+0x170>)
    93e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    93e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    93ec:	2b00      	cmp	r3, #0
    93ee:	d0f8      	beq.n	93e2 <SystemInit+0x1e>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    93f0:	4b50      	ldr	r3, [pc, #320]	; (9534 <SystemInit+0x170>)
    93f2:	f04f 0203 	mov.w	r2, #3
    93f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Periphral clock must be selected before PLL0 enabling and connecting
   * - according errata.lpc1768-16.March.2010 -
   */
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    93fa:	4b4e      	ldr	r3, [pc, #312]	; (9534 <SystemInit+0x170>)
    93fc:	f04f 0200 	mov.w	r2, #0
    9400:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    9404:	4b4b      	ldr	r3, [pc, #300]	; (9534 <SystemInit+0x170>)
    9406:	f04f 0200 	mov.w	r2, #0
    940a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    940e:	4b49      	ldr	r3, [pc, #292]	; (9534 <SystemInit+0x170>)
    9410:	f04f 0201 	mov.w	r2, #1
    9414:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    9418:	4b46      	ldr	r3, [pc, #280]	; (9534 <SystemInit+0x170>)
    941a:	4a47      	ldr	r2, [pc, #284]	; (9538 <SystemInit+0x174>)
    941c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    9420:	4b44      	ldr	r3, [pc, #272]	; (9534 <SystemInit+0x170>)
    9422:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    9426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    942a:	4b42      	ldr	r3, [pc, #264]	; (9534 <SystemInit+0x170>)
    942c:	f04f 0255 	mov.w	r2, #85	; 0x55
    9430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    9434:	4b3f      	ldr	r3, [pc, #252]	; (9534 <SystemInit+0x170>)
    9436:	f04f 0201 	mov.w	r2, #1
    943a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    943e:	4b3d      	ldr	r3, [pc, #244]	; (9534 <SystemInit+0x170>)
    9440:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    9444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    9448:	4b3a      	ldr	r3, [pc, #232]	; (9534 <SystemInit+0x170>)
    944a:	f04f 0255 	mov.w	r2, #85	; 0x55
    944e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    9452:	bf00      	nop
    9454:	4b37      	ldr	r3, [pc, #220]	; (9534 <SystemInit+0x170>)
    9456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    945a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    945e:	2b00      	cmp	r3, #0
    9460:	d0f8      	beq.n	9454 <SystemInit+0x90>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    9462:	4b34      	ldr	r3, [pc, #208]	; (9534 <SystemInit+0x170>)
    9464:	f04f 0203 	mov.w	r2, #3
    9468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    946c:	4b31      	ldr	r3, [pc, #196]	; (9534 <SystemInit+0x170>)
    946e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    9472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    9476:	4b2f      	ldr	r3, [pc, #188]	; (9534 <SystemInit+0x170>)
    9478:	f04f 0255 	mov.w	r2, #85	; 0x55
    947c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    9480:	bf00      	nop
    9482:	4b2c      	ldr	r3, [pc, #176]	; (9534 <SystemInit+0x170>)
    9484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    9488:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    948c:	2b00      	cmp	r3, #0
    948e:	d0f8      	beq.n	9482 <SystemInit+0xbe>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    9490:	4b28      	ldr	r3, [pc, #160]	; (9534 <SystemInit+0x170>)
    9492:	f04f 0223 	mov.w	r2, #35	; 0x23
    9496:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    949a:	4b26      	ldr	r3, [pc, #152]	; (9534 <SystemInit+0x170>)
    949c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    94a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    94a4:	4b23      	ldr	r3, [pc, #140]	; (9534 <SystemInit+0x170>)
    94a6:	f04f 0255 	mov.w	r2, #85	; 0x55
    94aa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    94ae:	4b21      	ldr	r3, [pc, #132]	; (9534 <SystemInit+0x170>)
    94b0:	f04f 0201 	mov.w	r2, #1
    94b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    94b8:	4b1e      	ldr	r3, [pc, #120]	; (9534 <SystemInit+0x170>)
    94ba:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    94be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    94c2:	4b1c      	ldr	r3, [pc, #112]	; (9534 <SystemInit+0x170>)
    94c4:	f04f 0255 	mov.w	r2, #85	; 0x55
    94c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    94cc:	bf00      	nop
    94ce:	4b19      	ldr	r3, [pc, #100]	; (9534 <SystemInit+0x170>)
    94d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    94d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    94d8:	2b00      	cmp	r3, #0
    94da:	d0f8      	beq.n	94ce <SystemInit+0x10a>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    94dc:	4b15      	ldr	r3, [pc, #84]	; (9534 <SystemInit+0x170>)
    94de:	f04f 0203 	mov.w	r2, #3
    94e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    94e6:	4b13      	ldr	r3, [pc, #76]	; (9534 <SystemInit+0x170>)
    94e8:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    94ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    94f0:	4b10      	ldr	r3, [pc, #64]	; (9534 <SystemInit+0x170>)
    94f2:	f04f 0255 	mov.w	r2, #85	; 0x55
    94f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    94fa:	bf00      	nop
    94fc:	4b0d      	ldr	r3, [pc, #52]	; (9534 <SystemInit+0x170>)
    94fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    9502:	f403 7340 	and.w	r3, r3, #768	; 0x300
    9506:	2b00      	cmp	r3, #0
    9508:	d0f8      	beq.n	94fc <SystemInit+0x138>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    950a:	4b0a      	ldr	r3, [pc, #40]	; (9534 <SystemInit+0x170>)
    950c:	4a0b      	ldr	r2, [pc, #44]	; (953c <SystemInit+0x178>)
    950e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    9512:	4b08      	ldr	r3, [pc, #32]	; (9534 <SystemInit+0x170>)
    9514:	f04f 0200 	mov.w	r2, #0
    9518:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    951c:	4b05      	ldr	r3, [pc, #20]	; (9534 <SystemInit+0x170>)
    951e:	f243 023a 	movw	r2, #12346	; 0x303a
    9522:	601a      	str	r2, [r3, #0]

//  Set Vector table offset value
#if (__RAM_MODE__==1)
  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
#else
  SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
    9524:	4b06      	ldr	r3, [pc, #24]	; (9540 <SystemInit+0x17c>)
    9526:	f04f 0200 	mov.w	r2, #0
    952a:	609a      	str	r2, [r3, #8]
#endif
}
    952c:	46bd      	mov	sp, r7
    952e:	bc80      	pop	{r7}
    9530:	4770      	bx	lr
    9532:	bf00      	nop
    9534:	400fc000 	.word	0x400fc000
    9538:	00050063 	.word	0x00050063
    953c:	042887de 	.word	0x042887de
    9540:	e000ed00 	.word	0xe000ed00

00009544 <__aeabi_uldivmod>:
    9544:	b94b      	cbnz	r3, 955a <__aeabi_uldivmod+0x16>
    9546:	b942      	cbnz	r2, 955a <__aeabi_uldivmod+0x16>
    9548:	2900      	cmp	r1, #0
    954a:	bf08      	it	eq
    954c:	2800      	cmpeq	r0, #0
    954e:	d002      	beq.n	9556 <__aeabi_uldivmod+0x12>
    9550:	f04f 31ff 	mov.w	r1, #4294967295
    9554:	4608      	mov	r0, r1
    9556:	f000 b83b 	b.w	95d0 <__aeabi_idiv0>
    955a:	b082      	sub	sp, #8
    955c:	46ec      	mov	ip, sp
    955e:	e92d 5000 	stmdb	sp!, {ip, lr}
    9562:	f000 f81d 	bl	95a0 <__gnu_uldivmod_helper>
    9566:	f8dd e004 	ldr.w	lr, [sp, #4]
    956a:	b002      	add	sp, #8
    956c:	bc0c      	pop	{r2, r3}
    956e:	4770      	bx	lr

00009570 <__gnu_ldivmod_helper>:
    9570:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    9574:	4616      	mov	r6, r2
    9576:	4680      	mov	r8, r0
    9578:	4689      	mov	r9, r1
    957a:	461d      	mov	r5, r3
    957c:	f000 f82a 	bl	95d4 <__divdi3>
    9580:	fb00 f305 	mul.w	r3, r0, r5
    9584:	fba0 4506 	umull	r4, r5, r0, r6
    9588:	fb06 3601 	mla	r6, r6, r1, r3
    958c:	9b06      	ldr	r3, [sp, #24]
    958e:	1975      	adds	r5, r6, r5
    9590:	ebb8 0404 	subs.w	r4, r8, r4
    9594:	eb69 0505 	sbc.w	r5, r9, r5
    9598:	e9c3 4500 	strd	r4, r5, [r3]
    959c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000095a0 <__gnu_uldivmod_helper>:
    95a0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    95a4:	4616      	mov	r6, r2
    95a6:	4680      	mov	r8, r0
    95a8:	4689      	mov	r9, r1
    95aa:	461d      	mov	r5, r3
    95ac:	f000 f9c2 	bl	9934 <__udivdi3>
    95b0:	fb00 f305 	mul.w	r3, r0, r5
    95b4:	fba0 4506 	umull	r4, r5, r0, r6
    95b8:	fb06 3601 	mla	r6, r6, r1, r3
    95bc:	9b06      	ldr	r3, [sp, #24]
    95be:	1975      	adds	r5, r6, r5
    95c0:	ebb8 0404 	subs.w	r4, r8, r4
    95c4:	eb69 0505 	sbc.w	r5, r9, r5
    95c8:	e9c3 4500 	strd	r4, r5, [r3]
    95cc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000095d0 <__aeabi_idiv0>:
    95d0:	4770      	bx	lr
    95d2:	bf00      	nop

000095d4 <__divdi3>:
    95d4:	2900      	cmp	r1, #0
    95d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95da:	461c      	mov	r4, r3
    95dc:	b085      	sub	sp, #20
    95de:	f2c0 80cb 	blt.w	9778 <__divdi3+0x1a4>
    95e2:	2600      	movs	r6, #0
    95e4:	2c00      	cmp	r4, #0
    95e6:	f2c0 80c2 	blt.w	976e <__divdi3+0x19a>
    95ea:	468c      	mov	ip, r1
    95ec:	4617      	mov	r7, r2
    95ee:	4614      	mov	r4, r2
    95f0:	4605      	mov	r5, r0
    95f2:	4688      	mov	r8, r1
    95f4:	469a      	mov	sl, r3
    95f6:	2b00      	cmp	r3, #0
    95f8:	d14a      	bne.n	9690 <__divdi3+0xbc>
    95fa:	428a      	cmp	r2, r1
    95fc:	d96e      	bls.n	96dc <__divdi3+0x108>
    95fe:	fab2 f382 	clz	r3, r2
    9602:	b15b      	cbz	r3, 961c <__divdi3+0x48>
    9604:	f1c3 0420 	rsb	r4, r3, #32
    9608:	fa01 f803 	lsl.w	r8, r1, r3
    960c:	fa30 f204 	lsrs.w	r2, r0, r4
    9610:	fa10 f503 	lsls.w	r5, r0, r3
    9614:	fa17 f403 	lsls.w	r4, r7, r3
    9618:	ea42 0808 	orr.w	r8, r2, r8
    961c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    9620:	4640      	mov	r0, r8
    9622:	4651      	mov	r1, sl
    9624:	fa1f fb84 	uxth.w	fp, r4
    9628:	f000 fb0a 	bl	9c40 <__aeabi_uidiv>
    962c:	4651      	mov	r1, sl
    962e:	4681      	mov	r9, r0
    9630:	4640      	mov	r0, r8
    9632:	f000 fc33 	bl	9e9c <__aeabi_uidivmod>
    9636:	0c28      	lsrs	r0, r5, #16
    9638:	fb0b f309 	mul.w	r3, fp, r9
    963c:	ea40 4801 	orr.w	r8, r0, r1, lsl #16
    9640:	4543      	cmp	r3, r8
    9642:	d909      	bls.n	9658 <__divdi3+0x84>
    9644:	eb18 0804 	adds.w	r8, r8, r4
    9648:	f109 39ff 	add.w	r9, r9, #4294967295
    964c:	d204      	bcs.n	9658 <__divdi3+0x84>
    964e:	4543      	cmp	r3, r8
    9650:	bf84      	itt	hi
    9652:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9656:	44a0      	addhi	r8, r4
    9658:	ebc3 0808 	rsb	r8, r3, r8
    965c:	4651      	mov	r1, sl
    965e:	4640      	mov	r0, r8
    9660:	b2ad      	uxth	r5, r5
    9662:	f000 faed 	bl	9c40 <__aeabi_uidiv>
    9666:	4651      	mov	r1, sl
    9668:	4607      	mov	r7, r0
    966a:	4640      	mov	r0, r8
    966c:	f000 fc16 	bl	9e9c <__aeabi_uidivmod>
    9670:	fb0b fb07 	mul.w	fp, fp, r7
    9674:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    9678:	45ab      	cmp	fp, r5
    967a:	d905      	bls.n	9688 <__divdi3+0xb4>
    967c:	3f01      	subs	r7, #1
    967e:	192d      	adds	r5, r5, r4
    9680:	d202      	bcs.n	9688 <__divdi3+0xb4>
    9682:	45ab      	cmp	fp, r5
    9684:	bf88      	it	hi
    9686:	3f01      	subhi	r7, #1
    9688:	ea47 4909 	orr.w	r9, r7, r9, lsl #16
    968c:	2400      	movs	r4, #0
    968e:	e003      	b.n	9698 <__divdi3+0xc4>
    9690:	428b      	cmp	r3, r1
    9692:	d90c      	bls.n	96ae <__divdi3+0xda>
    9694:	2400      	movs	r4, #0
    9696:	46a1      	mov	r9, r4
    9698:	464a      	mov	r2, r9
    969a:	4623      	mov	r3, r4
    969c:	b116      	cbz	r6, 96a4 <__divdi3+0xd0>
    969e:	4252      	negs	r2, r2
    96a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    96a4:	4610      	mov	r0, r2
    96a6:	4619      	mov	r1, r3
    96a8:	b005      	add	sp, #20
    96aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ae:	fab3 f483 	clz	r4, r3
    96b2:	2c00      	cmp	r4, #0
    96b4:	f040 80b3 	bne.w	981e <__divdi3+0x24a>
    96b8:	428b      	cmp	r3, r1
    96ba:	f04f 0901 	mov.w	r9, #1
    96be:	bf2c      	ite	cs
    96c0:	f04f 0c00 	movcs.w	ip, #0
    96c4:	f04f 0c01 	movcc.w	ip, #1
    96c8:	4282      	cmp	r2, r0
    96ca:	bf8c      	ite	hi
    96cc:	4667      	movhi	r7, ip
    96ce:	f04c 0701 	orrls.w	r7, ip, #1
    96d2:	2f00      	cmp	r7, #0
    96d4:	d1e0      	bne.n	9698 <__divdi3+0xc4>
    96d6:	463c      	mov	r4, r7
    96d8:	46b9      	mov	r9, r7
    96da:	e7dd      	b.n	9698 <__divdi3+0xc4>
    96dc:	b922      	cbnz	r2, 96e8 <__divdi3+0x114>
    96de:	2001      	movs	r0, #1
    96e0:	4611      	mov	r1, r2
    96e2:	f000 faad 	bl	9c40 <__aeabi_uidiv>
    96e6:	4604      	mov	r4, r0
    96e8:	fab4 f384 	clz	r3, r4
    96ec:	2b00      	cmp	r3, #0
    96ee:	d149      	bne.n	9784 <__divdi3+0x1b0>
    96f0:	ebc4 0808 	rsb	r8, r4, r8
    96f4:	0c27      	lsrs	r7, r4, #16
    96f6:	fa1f fa84 	uxth.w	sl, r4
    96fa:	2101      	movs	r1, #1
    96fc:	9102      	str	r1, [sp, #8]
    96fe:	4639      	mov	r1, r7
    9700:	4640      	mov	r0, r8
    9702:	f000 fa9d 	bl	9c40 <__aeabi_uidiv>
    9706:	4639      	mov	r1, r7
    9708:	4681      	mov	r9, r0
    970a:	4640      	mov	r0, r8
    970c:	f000 fbc6 	bl	9e9c <__aeabi_uidivmod>
    9710:	0c2a      	lsrs	r2, r5, #16
    9712:	fb0a f309 	mul.w	r3, sl, r9
    9716:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
    971a:	455b      	cmp	r3, fp
    971c:	d909      	bls.n	9732 <__divdi3+0x15e>
    971e:	eb1b 0b04 	adds.w	fp, fp, r4
    9722:	f109 39ff 	add.w	r9, r9, #4294967295
    9726:	d204      	bcs.n	9732 <__divdi3+0x15e>
    9728:	455b      	cmp	r3, fp
    972a:	bf84      	itt	hi
    972c:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9730:	44a3      	addhi	fp, r4
    9732:	ebc3 0b0b 	rsb	fp, r3, fp
    9736:	4639      	mov	r1, r7
    9738:	4658      	mov	r0, fp
    973a:	b2ad      	uxth	r5, r5
    973c:	f000 fa80 	bl	9c40 <__aeabi_uidiv>
    9740:	4639      	mov	r1, r7
    9742:	4680      	mov	r8, r0
    9744:	4658      	mov	r0, fp
    9746:	f000 fba9 	bl	9e9c <__aeabi_uidivmod>
    974a:	fb0a fa08 	mul.w	sl, sl, r8
    974e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    9752:	45aa      	cmp	sl, r5
    9754:	d907      	bls.n	9766 <__divdi3+0x192>
    9756:	192d      	adds	r5, r5, r4
    9758:	f108 38ff 	add.w	r8, r8, #4294967295
    975c:	d203      	bcs.n	9766 <__divdi3+0x192>
    975e:	45aa      	cmp	sl, r5
    9760:	bf88      	it	hi
    9762:	f108 38ff 	addhi.w	r8, r8, #4294967295
    9766:	ea48 4909 	orr.w	r9, r8, r9, lsl #16
    976a:	9c02      	ldr	r4, [sp, #8]
    976c:	e794      	b.n	9698 <__divdi3+0xc4>
    976e:	43f6      	mvns	r6, r6
    9770:	4252      	negs	r2, r2
    9772:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9776:	e738      	b.n	95ea <__divdi3+0x16>
    9778:	4240      	negs	r0, r0
    977a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    977e:	f04f 36ff 	mov.w	r6, #4294967295
    9782:	e72f      	b.n	95e4 <__divdi3+0x10>
    9784:	409c      	lsls	r4, r3
    9786:	f1c3 0720 	rsb	r7, r3, #32
    978a:	fa28 fa07 	lsr.w	sl, r8, r7
    978e:	fa35 f207 	lsrs.w	r2, r5, r7
    9792:	0c27      	lsrs	r7, r4, #16
    9794:	fa08 fb03 	lsl.w	fp, r8, r3
    9798:	4639      	mov	r1, r7
    979a:	4650      	mov	r0, sl
    979c:	ea42 020b 	orr.w	r2, r2, fp
    97a0:	409d      	lsls	r5, r3
    97a2:	9202      	str	r2, [sp, #8]
    97a4:	f000 fa4c 	bl	9c40 <__aeabi_uidiv>
    97a8:	4639      	mov	r1, r7
    97aa:	4683      	mov	fp, r0
    97ac:	4650      	mov	r0, sl
    97ae:	f000 fb75 	bl	9e9c <__aeabi_uidivmod>
    97b2:	9b02      	ldr	r3, [sp, #8]
    97b4:	fa1f fa84 	uxth.w	sl, r4
    97b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
    97bc:	fb0a f30b 	mul.w	r3, sl, fp
    97c0:	ea49 4801 	orr.w	r8, r9, r1, lsl #16
    97c4:	4543      	cmp	r3, r8
    97c6:	d905      	bls.n	97d4 <__divdi3+0x200>
    97c8:	eb18 0804 	adds.w	r8, r8, r4
    97cc:	f10b 3bff 	add.w	fp, fp, #4294967295
    97d0:	f0c0 80aa 	bcc.w	9928 <__divdi3+0x354>
    97d4:	ebc3 0808 	rsb	r8, r3, r8
    97d8:	4639      	mov	r1, r7
    97da:	4640      	mov	r0, r8
    97dc:	f000 fa30 	bl	9c40 <__aeabi_uidiv>
    97e0:	4639      	mov	r1, r7
    97e2:	4681      	mov	r9, r0
    97e4:	4640      	mov	r0, r8
    97e6:	f000 fb59 	bl	9e9c <__aeabi_uidivmod>
    97ea:	9802      	ldr	r0, [sp, #8]
    97ec:	fb0a f309 	mul.w	r3, sl, r9
    97f0:	fa1f fc80 	uxth.w	ip, r0
    97f4:	ea4c 4801 	orr.w	r8, ip, r1, lsl #16
    97f8:	4543      	cmp	r3, r8
    97fa:	d909      	bls.n	9810 <__divdi3+0x23c>
    97fc:	eb18 0804 	adds.w	r8, r8, r4
    9800:	f109 39ff 	add.w	r9, r9, #4294967295
    9804:	d204      	bcs.n	9810 <__divdi3+0x23c>
    9806:	4543      	cmp	r3, r8
    9808:	bf84      	itt	hi
    980a:	f109 39ff 	addhi.w	r9, r9, #4294967295
    980e:	44a0      	addhi	r8, r4
    9810:	ea49 4e0b 	orr.w	lr, r9, fp, lsl #16
    9814:	ebc3 0808 	rsb	r8, r3, r8
    9818:	f8cd e008 	str.w	lr, [sp, #8]
    981c:	e76f      	b.n	96fe <__divdi3+0x12a>
    981e:	f1c4 0320 	rsb	r3, r4, #32
    9822:	fa0a fa04 	lsl.w	sl, sl, r4
    9826:	40da      	lsrs	r2, r3
    9828:	fa21 f803 	lsr.w	r8, r1, r3
    982c:	ea42 0a0a 	orr.w	sl, r2, sl
    9830:	fa01 f904 	lsl.w	r9, r1, r4
    9834:	fa30 f203 	lsrs.w	r2, r0, r3
    9838:	4640      	mov	r0, r8
    983a:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
    983e:	ea42 0109 	orr.w	r1, r2, r9
    9842:	9103      	str	r1, [sp, #12]
    9844:	4659      	mov	r1, fp
    9846:	fa17 f304 	lsls.w	r3, r7, r4
    984a:	9302      	str	r3, [sp, #8]
    984c:	f000 f9f8 	bl	9c40 <__aeabi_uidiv>
    9850:	4659      	mov	r1, fp
    9852:	4681      	mov	r9, r0
    9854:	4640      	mov	r0, r8
    9856:	f000 fb21 	bl	9e9c <__aeabi_uidivmod>
    985a:	fa1f f38a 	uxth.w	r3, sl
    985e:	9803      	ldr	r0, [sp, #12]
    9860:	fb03 f209 	mul.w	r2, r3, r9
    9864:	0c07      	lsrs	r7, r0, #16
    9866:	ea47 4801 	orr.w	r8, r7, r1, lsl #16
    986a:	4542      	cmp	r2, r8
    986c:	d904      	bls.n	9878 <__divdi3+0x2a4>
    986e:	eb18 080a 	adds.w	r8, r8, sl
    9872:	f109 39ff 	add.w	r9, r9, #4294967295
    9876:	d351      	bcc.n	991c <__divdi3+0x348>
    9878:	ebc2 0808 	rsb	r8, r2, r8
    987c:	4659      	mov	r1, fp
    987e:	4640      	mov	r0, r8
    9880:	9301      	str	r3, [sp, #4]
    9882:	f000 f9dd 	bl	9c40 <__aeabi_uidiv>
    9886:	4659      	mov	r1, fp
    9888:	4607      	mov	r7, r0
    988a:	4640      	mov	r0, r8
    988c:	f000 fb06 	bl	9e9c <__aeabi_uidivmod>
    9890:	9b01      	ldr	r3, [sp, #4]
    9892:	9803      	ldr	r0, [sp, #12]
    9894:	fb03 f307 	mul.w	r3, r3, r7
    9898:	fa1f fc80 	uxth.w	ip, r0
    989c:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
    98a0:	4563      	cmp	r3, ip
    98a2:	d907      	bls.n	98b4 <__divdi3+0x2e0>
    98a4:	3f01      	subs	r7, #1
    98a6:	eb1c 0c0a 	adds.w	ip, ip, sl
    98aa:	d203      	bcs.n	98b4 <__divdi3+0x2e0>
    98ac:	4563      	cmp	r3, ip
    98ae:	d901      	bls.n	98b4 <__divdi3+0x2e0>
    98b0:	3f01      	subs	r7, #1
    98b2:	44d4      	add	ip, sl
    98b4:	ea47 4909 	orr.w	r9, r7, r9, lsl #16
    98b8:	9f02      	ldr	r7, [sp, #8]
    98ba:	ebc3 0c0c 	rsb	ip, r3, ip
    98be:	fa1f fe89 	uxth.w	lr, r9
    98c2:	ea4f 4319 	mov.w	r3, r9, lsr #16
    98c6:	b2b8      	uxth	r0, r7
    98c8:	0c3f      	lsrs	r7, r7, #16
    98ca:	fb00 f80e 	mul.w	r8, r0, lr
    98ce:	fb00 f103 	mul.w	r1, r0, r3
    98d2:	fb07 120e 	mla	r2, r7, lr, r1
    98d6:	fb07 f003 	mul.w	r0, r7, r3
    98da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    98de:	4291      	cmp	r1, r2
    98e0:	bf88      	it	hi
    98e2:	f500 3080 	addhi.w	r0, r0, #65536	; 0x10000
    98e6:	eb00 4e12 	add.w	lr, r0, r2, lsr #16
    98ea:	45f4      	cmp	ip, lr
    98ec:	d312      	bcc.n	9914 <__divdi3+0x340>
    98ee:	ea4f 4202 	mov.w	r2, r2, lsl #16
    98f2:	fa1f f888 	uxth.w	r8, r8
    98f6:	bf14      	ite	ne
    98f8:	2100      	movne	r1, #0
    98fa:	2101      	moveq	r1, #1
    98fc:	eb02 0c08 	add.w	ip, r2, r8
    9900:	fa15 f404 	lsls.w	r4, r5, r4
    9904:	4564      	cmp	r4, ip
    9906:	bf2c      	ite	cs
    9908:	2400      	movcs	r4, #0
    990a:	f001 0401 	andcc.w	r4, r1, #1
    990e:	2c00      	cmp	r4, #0
    9910:	f43f aec2 	beq.w	9698 <__divdi3+0xc4>
    9914:	f109 39ff 	add.w	r9, r9, #4294967295
    9918:	2400      	movs	r4, #0
    991a:	e6bd      	b.n	9698 <__divdi3+0xc4>
    991c:	4542      	cmp	r2, r8
    991e:	bf84      	itt	hi
    9920:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9924:	44d0      	addhi	r8, sl
    9926:	e7a7      	b.n	9878 <__divdi3+0x2a4>
    9928:	4543      	cmp	r3, r8
    992a:	bf84      	itt	hi
    992c:	f10b 3bff 	addhi.w	fp, fp, #4294967295
    9930:	44a0      	addhi	r8, r4
    9932:	e74f      	b.n	97d4 <__divdi3+0x200>

00009934 <__udivdi3>:
    9934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9938:	4605      	mov	r5, r0
    993a:	b083      	sub	sp, #12
    993c:	460c      	mov	r4, r1
    993e:	4617      	mov	r7, r2
    9940:	4680      	mov	r8, r0
    9942:	460e      	mov	r6, r1
    9944:	2b00      	cmp	r3, #0
    9946:	d14d      	bne.n	99e4 <__udivdi3+0xb0>
    9948:	428a      	cmp	r2, r1
    994a:	d961      	bls.n	9a10 <__udivdi3+0xdc>
    994c:	fab2 f382 	clz	r3, r2
    9950:	b153      	cbz	r3, 9968 <__udivdi3+0x34>
    9952:	f1c3 0420 	rsb	r4, r3, #32
    9956:	fa11 f603 	lsls.w	r6, r1, r3
    995a:	fa30 f204 	lsrs.w	r2, r0, r4
    995e:	409f      	lsls	r7, r3
    9960:	ea42 0606 	orr.w	r6, r2, r6
    9964:	fa00 f803 	lsl.w	r8, r0, r3
    9968:	0c3c      	lsrs	r4, r7, #16
    996a:	4630      	mov	r0, r6
    996c:	4621      	mov	r1, r4
    996e:	fa1f fa87 	uxth.w	sl, r7
    9972:	f000 f965 	bl	9c40 <__aeabi_uidiv>
    9976:	4621      	mov	r1, r4
    9978:	4681      	mov	r9, r0
    997a:	4630      	mov	r0, r6
    997c:	f000 fa8e 	bl	9e9c <__aeabi_uidivmod>
    9980:	ea4f 4018 	mov.w	r0, r8, lsr #16
    9984:	fb0a f309 	mul.w	r3, sl, r9
    9988:	ea40 4601 	orr.w	r6, r0, r1, lsl #16
    998c:	42b3      	cmp	r3, r6
    998e:	d908      	bls.n	99a2 <__udivdi3+0x6e>
    9990:	19f6      	adds	r6, r6, r7
    9992:	f109 39ff 	add.w	r9, r9, #4294967295
    9996:	d204      	bcs.n	99a2 <__udivdi3+0x6e>
    9998:	42b3      	cmp	r3, r6
    999a:	bf84      	itt	hi
    999c:	f109 39ff 	addhi.w	r9, r9, #4294967295
    99a0:	19f6      	addhi	r6, r6, r7
    99a2:	1af6      	subs	r6, r6, r3
    99a4:	4621      	mov	r1, r4
    99a6:	4630      	mov	r0, r6
    99a8:	fa1f f888 	uxth.w	r8, r8
    99ac:	f000 f948 	bl	9c40 <__aeabi_uidiv>
    99b0:	4621      	mov	r1, r4
    99b2:	4605      	mov	r5, r0
    99b4:	4630      	mov	r0, r6
    99b6:	f000 fa71 	bl	9e9c <__aeabi_uidivmod>
    99ba:	fb0a fa05 	mul.w	sl, sl, r5
    99be:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    99c2:	45c2      	cmp	sl, r8
    99c4:	d906      	bls.n	99d4 <__udivdi3+0xa0>
    99c6:	3d01      	subs	r5, #1
    99c8:	eb18 0807 	adds.w	r8, r8, r7
    99cc:	d202      	bcs.n	99d4 <__udivdi3+0xa0>
    99ce:	45c2      	cmp	sl, r8
    99d0:	bf88      	it	hi
    99d2:	3d01      	subhi	r5, #1
    99d4:	ea45 4a09 	orr.w	sl, r5, r9, lsl #16
    99d8:	2600      	movs	r6, #0
    99da:	4631      	mov	r1, r6
    99dc:	4650      	mov	r0, sl
    99de:	b003      	add	sp, #12
    99e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e4:	428b      	cmp	r3, r1
    99e6:	d85b      	bhi.n	9aa0 <__udivdi3+0x16c>
    99e8:	fab3 f683 	clz	r6, r3
    99ec:	2e00      	cmp	r6, #0
    99ee:	d15a      	bne.n	9aa6 <__udivdi3+0x172>
    99f0:	428b      	cmp	r3, r1
    99f2:	f04f 0a01 	mov.w	sl, #1
    99f6:	bf2c      	ite	cs
    99f8:	2400      	movcs	r4, #0
    99fa:	2401      	movcc	r4, #1
    99fc:	4282      	cmp	r2, r0
    99fe:	bf8c      	ite	hi
    9a00:	4625      	movhi	r5, r4
    9a02:	f044 0501 	orrls.w	r5, r4, #1
    9a06:	2d00      	cmp	r5, #0
    9a08:	d1e7      	bne.n	99da <__udivdi3+0xa6>
    9a0a:	462e      	mov	r6, r5
    9a0c:	46aa      	mov	sl, r5
    9a0e:	e7e4      	b.n	99da <__udivdi3+0xa6>
    9a10:	b922      	cbnz	r2, 9a1c <__udivdi3+0xe8>
    9a12:	2001      	movs	r0, #1
    9a14:	4611      	mov	r1, r2
    9a16:	f000 f913 	bl	9c40 <__aeabi_uidiv>
    9a1a:	4607      	mov	r7, r0
    9a1c:	fab7 f387 	clz	r3, r7
    9a20:	2b00      	cmp	r3, #0
    9a22:	f040 80b6 	bne.w	9b92 <__udivdi3+0x25e>
    9a26:	1be4      	subs	r4, r4, r7
    9a28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
    9a2c:	b2bd      	uxth	r5, r7
    9a2e:	2601      	movs	r6, #1
    9a30:	4659      	mov	r1, fp
    9a32:	4620      	mov	r0, r4
    9a34:	f000 f904 	bl	9c40 <__aeabi_uidiv>
    9a38:	4659      	mov	r1, fp
    9a3a:	ea4f 4918 	mov.w	r9, r8, lsr #16
    9a3e:	4682      	mov	sl, r0
    9a40:	4620      	mov	r0, r4
    9a42:	f000 fa2b 	bl	9e9c <__aeabi_uidivmod>
    9a46:	fb05 f30a 	mul.w	r3, r5, sl
    9a4a:	ea49 4401 	orr.w	r4, r9, r1, lsl #16
    9a4e:	42a3      	cmp	r3, r4
    9a50:	d908      	bls.n	9a64 <__udivdi3+0x130>
    9a52:	19e4      	adds	r4, r4, r7
    9a54:	f10a 3aff 	add.w	sl, sl, #4294967295
    9a58:	d204      	bcs.n	9a64 <__udivdi3+0x130>
    9a5a:	42a3      	cmp	r3, r4
    9a5c:	bf84      	itt	hi
    9a5e:	f10a 3aff 	addhi.w	sl, sl, #4294967295
    9a62:	19e4      	addhi	r4, r4, r7
    9a64:	1ae4      	subs	r4, r4, r3
    9a66:	4659      	mov	r1, fp
    9a68:	4620      	mov	r0, r4
    9a6a:	f000 f8e9 	bl	9c40 <__aeabi_uidiv>
    9a6e:	4659      	mov	r1, fp
    9a70:	4681      	mov	r9, r0
    9a72:	4620      	mov	r0, r4
    9a74:	f000 fa12 	bl	9e9c <__aeabi_uidivmod>
    9a78:	fa1f f388 	uxth.w	r3, r8
    9a7c:	fb05 f509 	mul.w	r5, r5, r9
    9a80:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
    9a84:	4545      	cmp	r5, r8
    9a86:	d908      	bls.n	9a9a <__udivdi3+0x166>
    9a88:	eb18 0807 	adds.w	r8, r8, r7
    9a8c:	f109 39ff 	add.w	r9, r9, #4294967295
    9a90:	d203      	bcs.n	9a9a <__udivdi3+0x166>
    9a92:	4545      	cmp	r5, r8
    9a94:	bf88      	it	hi
    9a96:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9a9a:	ea49 4a0a 	orr.w	sl, r9, sl, lsl #16
    9a9e:	e79c      	b.n	99da <__udivdi3+0xa6>
    9aa0:	2600      	movs	r6, #0
    9aa2:	46b2      	mov	sl, r6
    9aa4:	e799      	b.n	99da <__udivdi3+0xa6>
    9aa6:	f1c6 0120 	rsb	r1, r6, #32
    9aaa:	40b3      	lsls	r3, r6
    9aac:	fa32 f701 	lsrs.w	r7, r2, r1
    9ab0:	fa24 f901 	lsr.w	r9, r4, r1
    9ab4:	431f      	orrs	r7, r3
    9ab6:	40b4      	lsls	r4, r6
    9ab8:	fa30 f301 	lsrs.w	r3, r0, r1
    9abc:	4648      	mov	r0, r9
    9abe:	ea4f 4817 	mov.w	r8, r7, lsr #16
    9ac2:	ea43 0104 	orr.w	r1, r3, r4
    9ac6:	9101      	str	r1, [sp, #4]
    9ac8:	4641      	mov	r1, r8
    9aca:	40b2      	lsls	r2, r6
    9acc:	9200      	str	r2, [sp, #0]
    9ace:	f000 f8b7 	bl	9c40 <__aeabi_uidiv>
    9ad2:	4641      	mov	r1, r8
    9ad4:	b2bc      	uxth	r4, r7
    9ad6:	4682      	mov	sl, r0
    9ad8:	4648      	mov	r0, r9
    9ada:	f000 f9df 	bl	9e9c <__aeabi_uidivmod>
    9ade:	9801      	ldr	r0, [sp, #4]
    9ae0:	fb04 f30a 	mul.w	r3, r4, sl
    9ae4:	ea4f 4b10 	mov.w	fp, r0, lsr #16
    9ae8:	ea4b 4b01 	orr.w	fp, fp, r1, lsl #16
    9aec:	455b      	cmp	r3, fp
    9aee:	d905      	bls.n	9afc <__udivdi3+0x1c8>
    9af0:	eb1b 0b07 	adds.w	fp, fp, r7
    9af4:	f10a 3aff 	add.w	sl, sl, #4294967295
    9af8:	f0c0 8093 	bcc.w	9c22 <__udivdi3+0x2ee>
    9afc:	ebc3 0b0b 	rsb	fp, r3, fp
    9b00:	4641      	mov	r1, r8
    9b02:	4658      	mov	r0, fp
    9b04:	f000 f89c 	bl	9c40 <__aeabi_uidiv>
    9b08:	4641      	mov	r1, r8
    9b0a:	4681      	mov	r9, r0
    9b0c:	4658      	mov	r0, fp
    9b0e:	f000 f9c5 	bl	9e9c <__aeabi_uidivmod>
    9b12:	9801      	ldr	r0, [sp, #4]
    9b14:	fb04 f409 	mul.w	r4, r4, r9
    9b18:	fa1f fc80 	uxth.w	ip, r0
    9b1c:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
    9b20:	429c      	cmp	r4, r3
    9b22:	d903      	bls.n	9b2c <__udivdi3+0x1f8>
    9b24:	19db      	adds	r3, r3, r7
    9b26:	f109 39ff 	add.w	r9, r9, #4294967295
    9b2a:	d374      	bcc.n	9c16 <__udivdi3+0x2e2>
    9b2c:	9f00      	ldr	r7, [sp, #0]
    9b2e:	ea49 4a0a 	orr.w	sl, r9, sl, lsl #16
    9b32:	1b1c      	subs	r4, r3, r4
    9b34:	fa1f fe8a 	uxth.w	lr, sl
    9b38:	b2b8      	uxth	r0, r7
    9b3a:	0c3a      	lsrs	r2, r7, #16
    9b3c:	ea4f 471a 	mov.w	r7, sl, lsr #16
    9b40:	fb00 fc0e 	mul.w	ip, r0, lr
    9b44:	fb00 f307 	mul.w	r3, r0, r7
    9b48:	fb02 310e 	mla	r1, r2, lr, r3
    9b4c:	fb02 f207 	mul.w	r2, r2, r7
    9b50:	eb01 411c 	add.w	r1, r1, ip, lsr #16
    9b54:	428b      	cmp	r3, r1
    9b56:	bf88      	it	hi
    9b58:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    9b5c:	eb02 4e11 	add.w	lr, r2, r1, lsr #16
    9b60:	4574      	cmp	r4, lr
    9b62:	d312      	bcc.n	9b8a <__udivdi3+0x256>
    9b64:	ea4f 4101 	mov.w	r1, r1, lsl #16
    9b68:	fa1f f28c 	uxth.w	r2, ip
    9b6c:	bf14      	ite	ne
    9b6e:	2300      	movne	r3, #0
    9b70:	2301      	moveq	r3, #1
    9b72:	eb01 0c02 	add.w	ip, r1, r2
    9b76:	fa15 f606 	lsls.w	r6, r5, r6
    9b7a:	4566      	cmp	r6, ip
    9b7c:	bf2c      	ite	cs
    9b7e:	2600      	movcs	r6, #0
    9b80:	f003 0601 	andcc.w	r6, r3, #1
    9b84:	2e00      	cmp	r6, #0
    9b86:	f43f af28 	beq.w	99da <__udivdi3+0xa6>
    9b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    9b8e:	2600      	movs	r6, #0
    9b90:	e723      	b.n	99da <__udivdi3+0xa6>
    9b92:	409f      	lsls	r7, r3
    9b94:	f1c3 0120 	rsb	r1, r3, #32
    9b98:	fa34 f601 	lsrs.w	r6, r4, r1
    9b9c:	fa14 f203 	lsls.w	r2, r4, r3
    9ba0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
    9ba4:	fa25 fa01 	lsr.w	sl, r5, r1
    9ba8:	4630      	mov	r0, r6
    9baa:	4659      	mov	r1, fp
    9bac:	fa05 f803 	lsl.w	r8, r5, r3
    9bb0:	ea4a 0a02 	orr.w	sl, sl, r2
    9bb4:	f000 f844 	bl	9c40 <__aeabi_uidiv>
    9bb8:	4659      	mov	r1, fp
    9bba:	b2bd      	uxth	r5, r7
    9bbc:	4681      	mov	r9, r0
    9bbe:	4630      	mov	r0, r6
    9bc0:	f000 f96c 	bl	9e9c <__aeabi_uidivmod>
    9bc4:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
    9bc8:	fb05 f309 	mul.w	r3, r5, r9
    9bcc:	ea4c 4401 	orr.w	r4, ip, r1, lsl #16
    9bd0:	42a3      	cmp	r3, r4
    9bd2:	d903      	bls.n	9bdc <__udivdi3+0x2a8>
    9bd4:	19e4      	adds	r4, r4, r7
    9bd6:	f109 39ff 	add.w	r9, r9, #4294967295
    9bda:	d328      	bcc.n	9c2e <__udivdi3+0x2fa>
    9bdc:	1ae4      	subs	r4, r4, r3
    9bde:	4659      	mov	r1, fp
    9be0:	4620      	mov	r0, r4
    9be2:	f000 f82d 	bl	9c40 <__aeabi_uidiv>
    9be6:	4659      	mov	r1, fp
    9be8:	4606      	mov	r6, r0
    9bea:	4620      	mov	r0, r4
    9bec:	f000 f956 	bl	9e9c <__aeabi_uidivmod>
    9bf0:	fa1f f48a 	uxth.w	r4, sl
    9bf4:	fb05 f306 	mul.w	r3, r5, r6
    9bf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    9bfc:	42a3      	cmp	r3, r4
    9bfe:	d906      	bls.n	9c0e <__udivdi3+0x2da>
    9c00:	3e01      	subs	r6, #1
    9c02:	19e4      	adds	r4, r4, r7
    9c04:	d203      	bcs.n	9c0e <__udivdi3+0x2da>
    9c06:	42a3      	cmp	r3, r4
    9c08:	d901      	bls.n	9c0e <__udivdi3+0x2da>
    9c0a:	3e01      	subs	r6, #1
    9c0c:	19e4      	adds	r4, r4, r7
    9c0e:	1ae4      	subs	r4, r4, r3
    9c10:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
    9c14:	e70c      	b.n	9a30 <__udivdi3+0xfc>
    9c16:	429c      	cmp	r4, r3
    9c18:	bf84      	itt	hi
    9c1a:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9c1e:	19db      	addhi	r3, r3, r7
    9c20:	e784      	b.n	9b2c <__udivdi3+0x1f8>
    9c22:	455b      	cmp	r3, fp
    9c24:	bf84      	itt	hi
    9c26:	f10a 3aff 	addhi.w	sl, sl, #4294967295
    9c2a:	44bb      	addhi	fp, r7
    9c2c:	e766      	b.n	9afc <__udivdi3+0x1c8>
    9c2e:	42a3      	cmp	r3, r4
    9c30:	bf84      	itt	hi
    9c32:	f109 39ff 	addhi.w	r9, r9, #4294967295
    9c36:	19e4      	addhi	r4, r4, r7
    9c38:	e7d0      	b.n	9bdc <__udivdi3+0x2a8>
    9c3a:	bf00      	nop
    9c3c:	0000      	movs	r0, r0
	...

00009c40 <__aeabi_uidiv>:
    9c40:	1e4a      	subs	r2, r1, #1
    9c42:	bf08      	it	eq
    9c44:	4770      	bxeq	lr
    9c46:	f0c0 8124 	bcc.w	9e92 <__aeabi_uidiv+0x252>
    9c4a:	4288      	cmp	r0, r1
    9c4c:	f240 8116 	bls.w	9e7c <__aeabi_uidiv+0x23c>
    9c50:	4211      	tst	r1, r2
    9c52:	f000 8117 	beq.w	9e84 <__aeabi_uidiv+0x244>
    9c56:	fab0 f380 	clz	r3, r0
    9c5a:	fab1 f281 	clz	r2, r1
    9c5e:	eba2 0303 	sub.w	r3, r2, r3
    9c62:	f1c3 031f 	rsb	r3, r3, #31
    9c66:	a204      	add	r2, pc, #16	; (adr r2, 9c78 <__aeabi_uidiv+0x38>)
    9c68:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    9c6c:	f04f 0200 	mov.w	r2, #0
    9c70:	469f      	mov	pc, r3
    9c72:	bf00      	nop
    9c74:	f3af 8000 	nop.w
    9c78:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
    9c7c:	bf00      	nop
    9c7e:	eb42 0202 	adc.w	r2, r2, r2
    9c82:	bf28      	it	cs
    9c84:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
    9c88:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
    9c8c:	bf00      	nop
    9c8e:	eb42 0202 	adc.w	r2, r2, r2
    9c92:	bf28      	it	cs
    9c94:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
    9c98:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
    9c9c:	bf00      	nop
    9c9e:	eb42 0202 	adc.w	r2, r2, r2
    9ca2:	bf28      	it	cs
    9ca4:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
    9ca8:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
    9cac:	bf00      	nop
    9cae:	eb42 0202 	adc.w	r2, r2, r2
    9cb2:	bf28      	it	cs
    9cb4:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
    9cb8:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
    9cbc:	bf00      	nop
    9cbe:	eb42 0202 	adc.w	r2, r2, r2
    9cc2:	bf28      	it	cs
    9cc4:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
    9cc8:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
    9ccc:	bf00      	nop
    9cce:	eb42 0202 	adc.w	r2, r2, r2
    9cd2:	bf28      	it	cs
    9cd4:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
    9cd8:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
    9cdc:	bf00      	nop
    9cde:	eb42 0202 	adc.w	r2, r2, r2
    9ce2:	bf28      	it	cs
    9ce4:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
    9ce8:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
    9cec:	bf00      	nop
    9cee:	eb42 0202 	adc.w	r2, r2, r2
    9cf2:	bf28      	it	cs
    9cf4:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
    9cf8:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
    9cfc:	bf00      	nop
    9cfe:	eb42 0202 	adc.w	r2, r2, r2
    9d02:	bf28      	it	cs
    9d04:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
    9d08:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
    9d0c:	bf00      	nop
    9d0e:	eb42 0202 	adc.w	r2, r2, r2
    9d12:	bf28      	it	cs
    9d14:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
    9d18:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
    9d1c:	bf00      	nop
    9d1e:	eb42 0202 	adc.w	r2, r2, r2
    9d22:	bf28      	it	cs
    9d24:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
    9d28:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
    9d2c:	bf00      	nop
    9d2e:	eb42 0202 	adc.w	r2, r2, r2
    9d32:	bf28      	it	cs
    9d34:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
    9d38:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
    9d3c:	bf00      	nop
    9d3e:	eb42 0202 	adc.w	r2, r2, r2
    9d42:	bf28      	it	cs
    9d44:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
    9d48:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
    9d4c:	bf00      	nop
    9d4e:	eb42 0202 	adc.w	r2, r2, r2
    9d52:	bf28      	it	cs
    9d54:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
    9d58:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
    9d5c:	bf00      	nop
    9d5e:	eb42 0202 	adc.w	r2, r2, r2
    9d62:	bf28      	it	cs
    9d64:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
    9d68:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
    9d6c:	bf00      	nop
    9d6e:	eb42 0202 	adc.w	r2, r2, r2
    9d72:	bf28      	it	cs
    9d74:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
    9d78:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
    9d7c:	bf00      	nop
    9d7e:	eb42 0202 	adc.w	r2, r2, r2
    9d82:	bf28      	it	cs
    9d84:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
    9d88:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
    9d8c:	bf00      	nop
    9d8e:	eb42 0202 	adc.w	r2, r2, r2
    9d92:	bf28      	it	cs
    9d94:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
    9d98:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
    9d9c:	bf00      	nop
    9d9e:	eb42 0202 	adc.w	r2, r2, r2
    9da2:	bf28      	it	cs
    9da4:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
    9da8:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
    9dac:	bf00      	nop
    9dae:	eb42 0202 	adc.w	r2, r2, r2
    9db2:	bf28      	it	cs
    9db4:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
    9db8:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
    9dbc:	bf00      	nop
    9dbe:	eb42 0202 	adc.w	r2, r2, r2
    9dc2:	bf28      	it	cs
    9dc4:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
    9dc8:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
    9dcc:	bf00      	nop
    9dce:	eb42 0202 	adc.w	r2, r2, r2
    9dd2:	bf28      	it	cs
    9dd4:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
    9dd8:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
    9ddc:	bf00      	nop
    9dde:	eb42 0202 	adc.w	r2, r2, r2
    9de2:	bf28      	it	cs
    9de4:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
    9de8:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
    9dec:	bf00      	nop
    9dee:	eb42 0202 	adc.w	r2, r2, r2
    9df2:	bf28      	it	cs
    9df4:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
    9df8:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
    9dfc:	bf00      	nop
    9dfe:	eb42 0202 	adc.w	r2, r2, r2
    9e02:	bf28      	it	cs
    9e04:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
    9e08:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
    9e0c:	bf00      	nop
    9e0e:	eb42 0202 	adc.w	r2, r2, r2
    9e12:	bf28      	it	cs
    9e14:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
    9e18:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
    9e1c:	bf00      	nop
    9e1e:	eb42 0202 	adc.w	r2, r2, r2
    9e22:	bf28      	it	cs
    9e24:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
    9e28:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
    9e2c:	bf00      	nop
    9e2e:	eb42 0202 	adc.w	r2, r2, r2
    9e32:	bf28      	it	cs
    9e34:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
    9e38:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
    9e3c:	bf00      	nop
    9e3e:	eb42 0202 	adc.w	r2, r2, r2
    9e42:	bf28      	it	cs
    9e44:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
    9e48:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
    9e4c:	bf00      	nop
    9e4e:	eb42 0202 	adc.w	r2, r2, r2
    9e52:	bf28      	it	cs
    9e54:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
    9e58:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    9e5c:	bf00      	nop
    9e5e:	eb42 0202 	adc.w	r2, r2, r2
    9e62:	bf28      	it	cs
    9e64:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
    9e68:	ebb0 0f01 	cmp.w	r0, r1
    9e6c:	bf00      	nop
    9e6e:	eb42 0202 	adc.w	r2, r2, r2
    9e72:	bf28      	it	cs
    9e74:	eba0 0001 	subcs.w	r0, r0, r1
    9e78:	4610      	mov	r0, r2
    9e7a:	4770      	bx	lr
    9e7c:	bf0c      	ite	eq
    9e7e:	2001      	moveq	r0, #1
    9e80:	2000      	movne	r0, #0
    9e82:	4770      	bx	lr
    9e84:	fab1 f281 	clz	r2, r1
    9e88:	f1c2 021f 	rsb	r2, r2, #31
    9e8c:	fa20 f002 	lsr.w	r0, r0, r2
    9e90:	4770      	bx	lr
    9e92:	b108      	cbz	r0, 9e98 <__aeabi_uidiv+0x258>
    9e94:	f04f 30ff 	mov.w	r0, #4294967295
    9e98:	f7ff bb9a 	b.w	95d0 <__aeabi_idiv0>

00009e9c <__aeabi_uidivmod>:
    9e9c:	2900      	cmp	r1, #0
    9e9e:	d0f8      	beq.n	9e92 <__aeabi_uidiv+0x252>
    9ea0:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
    9ea4:	f7ff fecc 	bl	9c40 <__aeabi_uidiv>
    9ea8:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
    9eac:	fb02 f300 	mul.w	r3, r2, r0
    9eb0:	eba1 0103 	sub.w	r1, r1, r3
    9eb4:	4770      	bx	lr
    9eb6:	bf00      	nop

00009eb8 <memcmp>:
    9eb8:	2a03      	cmp	r2, #3
    9eba:	b470      	push	{r4, r5, r6}
    9ebc:	4604      	mov	r4, r0
    9ebe:	460d      	mov	r5, r1
    9ec0:	d926      	bls.n	9f10 <memcmp+0x58>
    9ec2:	ea41 0300 	orr.w	r3, r1, r0
    9ec6:	f013 0f03 	tst.w	r3, #3
    9eca:	d013      	beq.n	9ef4 <memcmp+0x3c>
    9ecc:	7820      	ldrb	r0, [r4, #0]
    9ece:	782b      	ldrb	r3, [r5, #0]
    9ed0:	4298      	cmp	r0, r3
    9ed2:	bf08      	it	eq
    9ed4:	4629      	moveq	r1, r5
    9ed6:	d006      	beq.n	9ee6 <memcmp+0x2e>
    9ed8:	e01e      	b.n	9f18 <memcmp+0x60>
    9eda:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    9ede:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    9ee2:	4298      	cmp	r0, r3
    9ee4:	d118      	bne.n	9f18 <memcmp+0x60>
    9ee6:	2a01      	cmp	r2, #1
    9ee8:	f102 32ff 	add.w	r2, r2, #4294967295
    9eec:	d1f5      	bne.n	9eda <memcmp+0x22>
    9eee:	2000      	movs	r0, #0
    9ef0:	bc70      	pop	{r4, r5, r6}
    9ef2:	4770      	bx	lr
    9ef4:	460b      	mov	r3, r1
    9ef6:	4604      	mov	r4, r0
    9ef8:	f851 5b04 	ldr.w	r5, [r1], #4
    9efc:	f850 6b04 	ldr.w	r6, [r0], #4
    9f00:	42ae      	cmp	r6, r5
    9f02:	d104      	bne.n	9f0e <memcmp+0x56>
    9f04:	3a04      	subs	r2, #4
    9f06:	4604      	mov	r4, r0
    9f08:	2a03      	cmp	r2, #3
    9f0a:	460b      	mov	r3, r1
    9f0c:	d8f2      	bhi.n	9ef4 <memcmp+0x3c>
    9f0e:	461d      	mov	r5, r3
    9f10:	4610      	mov	r0, r2
    9f12:	2a00      	cmp	r2, #0
    9f14:	d1da      	bne.n	9ecc <memcmp+0x14>
    9f16:	e7eb      	b.n	9ef0 <memcmp+0x38>
    9f18:	1ac0      	subs	r0, r0, r3
    9f1a:	e7e9      	b.n	9ef0 <memcmp+0x38>

00009f1c <memcpy>:
    9f1c:	2a03      	cmp	r2, #3
    9f1e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    9f22:	d809      	bhi.n	9f38 <memcpy+0x1c>
    9f24:	b12a      	cbz	r2, 9f32 <memcpy+0x16>
    9f26:	2300      	movs	r3, #0
    9f28:	5ccc      	ldrb	r4, [r1, r3]
    9f2a:	54c4      	strb	r4, [r0, r3]
    9f2c:	3301      	adds	r3, #1
    9f2e:	4293      	cmp	r3, r2
    9f30:	d1fa      	bne.n	9f28 <memcpy+0xc>
    9f32:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    9f36:	4770      	bx	lr
    9f38:	460b      	mov	r3, r1
    9f3a:	1882      	adds	r2, r0, r2
    9f3c:	4601      	mov	r1, r0
    9f3e:	e003      	b.n	9f48 <memcpy+0x2c>
    9f40:	7824      	ldrb	r4, [r4, #0]
    9f42:	3301      	adds	r3, #1
    9f44:	f801 4b01 	strb.w	r4, [r1], #1
    9f48:	f011 0f03 	tst.w	r1, #3
    9f4c:	461c      	mov	r4, r3
    9f4e:	d1f7      	bne.n	9f40 <memcpy+0x24>
    9f50:	f013 0503 	ands.w	r5, r3, #3
    9f54:	d05d      	beq.n	a012 <memcpy+0xf6>
    9f56:	426e      	negs	r6, r5
    9f58:	f1c5 0c04 	rsb	ip, r5, #4
    9f5c:	00ed      	lsls	r5, r5, #3
    9f5e:	599b      	ldr	r3, [r3, r6]
    9f60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    9f64:	e008      	b.n	9f78 <memcpy+0x5c>
    9f66:	3404      	adds	r4, #4
    9f68:	59a7      	ldr	r7, [r4, r6]
    9f6a:	463b      	mov	r3, r7
    9f6c:	fa07 f70c 	lsl.w	r7, r7, ip
    9f70:	ea48 0707 	orr.w	r7, r8, r7
    9f74:	f841 7b04 	str.w	r7, [r1], #4
    9f78:	1a57      	subs	r7, r2, r1
    9f7a:	fa23 f805 	lsr.w	r8, r3, r5
    9f7e:	2f03      	cmp	r7, #3
    9f80:	dcf1      	bgt.n	9f66 <memcpy+0x4a>
    9f82:	e003      	b.n	9f8c <memcpy+0x70>
    9f84:	f814 3b01 	ldrb.w	r3, [r4], #1
    9f88:	f801 3b01 	strb.w	r3, [r1], #1
    9f8c:	428a      	cmp	r2, r1
    9f8e:	d8f9      	bhi.n	9f84 <memcpy+0x68>
    9f90:	e7cf      	b.n	9f32 <memcpy+0x16>
    9f92:	f853 4c40 	ldr.w	r4, [r3, #-64]
    9f96:	f841 4c40 	str.w	r4, [r1, #-64]
    9f9a:	f853 4c3c 	ldr.w	r4, [r3, #-60]
    9f9e:	f841 4c3c 	str.w	r4, [r1, #-60]
    9fa2:	f853 4c38 	ldr.w	r4, [r3, #-56]
    9fa6:	f841 4c38 	str.w	r4, [r1, #-56]
    9faa:	f853 4c34 	ldr.w	r4, [r3, #-52]
    9fae:	f841 4c34 	str.w	r4, [r1, #-52]
    9fb2:	f853 4c30 	ldr.w	r4, [r3, #-48]
    9fb6:	f841 4c30 	str.w	r4, [r1, #-48]
    9fba:	f853 4c2c 	ldr.w	r4, [r3, #-44]
    9fbe:	f841 4c2c 	str.w	r4, [r1, #-44]
    9fc2:	f853 4c28 	ldr.w	r4, [r3, #-40]
    9fc6:	f841 4c28 	str.w	r4, [r1, #-40]
    9fca:	f853 4c24 	ldr.w	r4, [r3, #-36]
    9fce:	f841 4c24 	str.w	r4, [r1, #-36]
    9fd2:	f853 4c20 	ldr.w	r4, [r3, #-32]
    9fd6:	f841 4c20 	str.w	r4, [r1, #-32]
    9fda:	f853 4c1c 	ldr.w	r4, [r3, #-28]
    9fde:	f841 4c1c 	str.w	r4, [r1, #-28]
    9fe2:	f853 4c18 	ldr.w	r4, [r3, #-24]
    9fe6:	f841 4c18 	str.w	r4, [r1, #-24]
    9fea:	f853 4c14 	ldr.w	r4, [r3, #-20]
    9fee:	f841 4c14 	str.w	r4, [r1, #-20]
    9ff2:	f853 4c10 	ldr.w	r4, [r3, #-16]
    9ff6:	f841 4c10 	str.w	r4, [r1, #-16]
    9ffa:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    9ffe:	f841 4c0c 	str.w	r4, [r1, #-12]
    a002:	f853 4c08 	ldr.w	r4, [r3, #-8]
    a006:	f841 4c08 	str.w	r4, [r1, #-8]
    a00a:	f853 4c04 	ldr.w	r4, [r3, #-4]
    a00e:	f841 4c04 	str.w	r4, [r1, #-4]
    a012:	1a56      	subs	r6, r2, r1
    a014:	461d      	mov	r5, r3
    a016:	460c      	mov	r4, r1
    a018:	3340      	adds	r3, #64	; 0x40
    a01a:	3140      	adds	r1, #64	; 0x40
    a01c:	2e3f      	cmp	r6, #63	; 0x3f
    a01e:	dcb8      	bgt.n	9f92 <memcpy+0x76>
    a020:	462b      	mov	r3, r5
    a022:	e00f      	b.n	a044 <memcpy+0x128>
    a024:	f853 1c10 	ldr.w	r1, [r3, #-16]
    a028:	f844 1c10 	str.w	r1, [r4, #-16]
    a02c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    a030:	f844 1c0c 	str.w	r1, [r4, #-12]
    a034:	f853 1c08 	ldr.w	r1, [r3, #-8]
    a038:	f844 1c08 	str.w	r1, [r4, #-8]
    a03c:	f853 1c04 	ldr.w	r1, [r3, #-4]
    a040:	f844 1c04 	str.w	r1, [r4, #-4]
    a044:	1b16      	subs	r6, r2, r4
    a046:	4621      	mov	r1, r4
    a048:	461d      	mov	r5, r3
    a04a:	3410      	adds	r4, #16
    a04c:	3310      	adds	r3, #16
    a04e:	2e0f      	cmp	r6, #15
    a050:	dce8      	bgt.n	a024 <memcpy+0x108>
    a052:	462b      	mov	r3, r5
    a054:	e002      	b.n	a05c <memcpy+0x140>
    a056:	6824      	ldr	r4, [r4, #0]
    a058:	f841 4b04 	str.w	r4, [r1], #4
    a05c:	1a55      	subs	r5, r2, r1
    a05e:	461c      	mov	r4, r3
    a060:	2d03      	cmp	r5, #3
    a062:	f103 0304 	add.w	r3, r3, #4
    a066:	dcf6      	bgt.n	a056 <memcpy+0x13a>
    a068:	e790      	b.n	9f8c <memcpy+0x70>
    a06a:	bf00      	nop

0000a06c <memset>:
    a06c:	2a03      	cmp	r2, #3
    a06e:	b2c9      	uxtb	r1, r1
    a070:	b470      	push	{r4, r5, r6}
    a072:	d808      	bhi.n	a086 <memset+0x1a>
    a074:	b12a      	cbz	r2, a082 <memset+0x16>
    a076:	4603      	mov	r3, r0
    a078:	1812      	adds	r2, r2, r0
    a07a:	f803 1b01 	strb.w	r1, [r3], #1
    a07e:	4293      	cmp	r3, r2
    a080:	d1fb      	bne.n	a07a <memset+0xe>
    a082:	bc70      	pop	{r4, r5, r6}
    a084:	4770      	bx	lr
    a086:	1882      	adds	r2, r0, r2
    a088:	4604      	mov	r4, r0
    a08a:	e001      	b.n	a090 <memset+0x24>
    a08c:	f804 1b01 	strb.w	r1, [r4], #1
    a090:	f014 0f03 	tst.w	r4, #3
    a094:	d1fa      	bne.n	a08c <memset+0x20>
    a096:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    a09a:	fb03 f301 	mul.w	r3, r3, r1
    a09e:	e01f      	b.n	a0e0 <memset+0x74>
    a0a0:	f844 3c40 	str.w	r3, [r4, #-64]
    a0a4:	f844 3c3c 	str.w	r3, [r4, #-60]
    a0a8:	f844 3c38 	str.w	r3, [r4, #-56]
    a0ac:	f844 3c34 	str.w	r3, [r4, #-52]
    a0b0:	f844 3c30 	str.w	r3, [r4, #-48]
    a0b4:	f844 3c2c 	str.w	r3, [r4, #-44]
    a0b8:	f844 3c28 	str.w	r3, [r4, #-40]
    a0bc:	f844 3c24 	str.w	r3, [r4, #-36]
    a0c0:	f844 3c20 	str.w	r3, [r4, #-32]
    a0c4:	f844 3c1c 	str.w	r3, [r4, #-28]
    a0c8:	f844 3c18 	str.w	r3, [r4, #-24]
    a0cc:	f844 3c14 	str.w	r3, [r4, #-20]
    a0d0:	f844 3c10 	str.w	r3, [r4, #-16]
    a0d4:	f844 3c0c 	str.w	r3, [r4, #-12]
    a0d8:	f844 3c08 	str.w	r3, [r4, #-8]
    a0dc:	f844 3c04 	str.w	r3, [r4, #-4]
    a0e0:	1b16      	subs	r6, r2, r4
    a0e2:	4625      	mov	r5, r4
    a0e4:	3440      	adds	r4, #64	; 0x40
    a0e6:	2e3f      	cmp	r6, #63	; 0x3f
    a0e8:	dcda      	bgt.n	a0a0 <memset+0x34>
    a0ea:	462c      	mov	r4, r5
    a0ec:	e007      	b.n	a0fe <memset+0x92>
    a0ee:	f844 3c10 	str.w	r3, [r4, #-16]
    a0f2:	f844 3c0c 	str.w	r3, [r4, #-12]
    a0f6:	f844 3c08 	str.w	r3, [r4, #-8]
    a0fa:	f844 3c04 	str.w	r3, [r4, #-4]
    a0fe:	1b16      	subs	r6, r2, r4
    a100:	4625      	mov	r5, r4
    a102:	3410      	adds	r4, #16
    a104:	2e0f      	cmp	r6, #15
    a106:	dcf2      	bgt.n	a0ee <memset+0x82>
    a108:	e001      	b.n	a10e <memset+0xa2>
    a10a:	f845 3b04 	str.w	r3, [r5], #4
    a10e:	1b54      	subs	r4, r2, r5
    a110:	2c03      	cmp	r4, #3
    a112:	dcfa      	bgt.n	a10a <memset+0x9e>
    a114:	e001      	b.n	a11a <memset+0xae>
    a116:	f805 1b01 	strb.w	r1, [r5], #1
    a11a:	4295      	cmp	r5, r2
    a11c:	d3fb      	bcc.n	a116 <memset+0xaa>
    a11e:	e7b0      	b.n	a082 <memset+0x16>

0000a120 <strcat>:
    a120:	f010 0f03 	tst.w	r0, #3
    a124:	b538      	push	{r3, r4, r5, lr}
    a126:	4604      	mov	r4, r0
    a128:	d112      	bne.n	a150 <strcat+0x30>
    a12a:	6803      	ldr	r3, [r0, #0]
    a12c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a130:	ea22 0303 	bic.w	r3, r2, r3
    a134:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    a138:	d10a      	bne.n	a150 <strcat+0x30>
    a13a:	1d03      	adds	r3, r0, #4
    a13c:	4618      	mov	r0, r3
    a13e:	f853 2b04 	ldr.w	r2, [r3], #4
    a142:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    a146:	ea25 0202 	bic.w	r2, r5, r2
    a14a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a14e:	d0f5      	beq.n	a13c <strcat+0x1c>
    a150:	7803      	ldrb	r3, [r0, #0]
    a152:	b12b      	cbz	r3, a160 <strcat+0x40>
    a154:	1c43      	adds	r3, r0, #1
    a156:	4618      	mov	r0, r3
    a158:	f813 2b01 	ldrb.w	r2, [r3], #1
    a15c:	2a00      	cmp	r2, #0
    a15e:	d1fa      	bne.n	a156 <strcat+0x36>
    a160:	f000 f802 	bl	a168 <strcpy>
    a164:	4620      	mov	r0, r4
    a166:	bd38      	pop	{r3, r4, r5, pc}

0000a168 <strcpy>:
    a168:	ea80 0201 	eor.w	r2, r0, r1
    a16c:	4684      	mov	ip, r0
    a16e:	f012 0f03 	tst.w	r2, #3
    a172:	d14f      	bne.n	a214 <strcpy+0xac>
    a174:	f011 0f03 	tst.w	r1, #3
    a178:	d132      	bne.n	a1e0 <strcpy+0x78>
    a17a:	f84d 4d04 	str.w	r4, [sp, #-4]!
    a17e:	f011 0f04 	tst.w	r1, #4
    a182:	f851 3b04 	ldr.w	r3, [r1], #4
    a186:	d00b      	beq.n	a1a0 <strcpy+0x38>
    a188:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a18c:	439a      	bics	r2, r3
    a18e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a192:	bf04      	itt	eq
    a194:	f84c 3b04 	streq.w	r3, [ip], #4
    a198:	f851 3b04 	ldreq.w	r3, [r1], #4
    a19c:	d116      	bne.n	a1cc <strcpy+0x64>
    a19e:	bf00      	nop
    a1a0:	f851 4b04 	ldr.w	r4, [r1], #4
    a1a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a1a8:	439a      	bics	r2, r3
    a1aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a1ae:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    a1b2:	d10b      	bne.n	a1cc <strcpy+0x64>
    a1b4:	f84c 3b04 	str.w	r3, [ip], #4
    a1b8:	43a2      	bics	r2, r4
    a1ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a1be:	bf04      	itt	eq
    a1c0:	f851 3b04 	ldreq.w	r3, [r1], #4
    a1c4:	f84c 4b04 	streq.w	r4, [ip], #4
    a1c8:	d0ea      	beq.n	a1a0 <strcpy+0x38>
    a1ca:	4623      	mov	r3, r4
    a1cc:	f80c 3b01 	strb.w	r3, [ip], #1
    a1d0:	f013 0fff 	tst.w	r3, #255	; 0xff
    a1d4:	ea4f 2333 	mov.w	r3, r3, ror #8
    a1d8:	d1f8      	bne.n	a1cc <strcpy+0x64>
    a1da:	f85d 4b04 	ldr.w	r4, [sp], #4
    a1de:	4770      	bx	lr
    a1e0:	f011 0f01 	tst.w	r1, #1
    a1e4:	d006      	beq.n	a1f4 <strcpy+0x8c>
    a1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
    a1ea:	f80c 2b01 	strb.w	r2, [ip], #1
    a1ee:	2a00      	cmp	r2, #0
    a1f0:	bf08      	it	eq
    a1f2:	4770      	bxeq	lr
    a1f4:	f011 0f02 	tst.w	r1, #2
    a1f8:	d0bf      	beq.n	a17a <strcpy+0x12>
    a1fa:	f831 2b02 	ldrh.w	r2, [r1], #2
    a1fe:	f012 0fff 	tst.w	r2, #255	; 0xff
    a202:	bf16      	itet	ne
    a204:	f82c 2b02 	strhne.w	r2, [ip], #2
    a208:	f88c 2000 	strbeq.w	r2, [ip]
    a20c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    a210:	d1b3      	bne.n	a17a <strcpy+0x12>
    a212:	4770      	bx	lr
    a214:	f811 2b01 	ldrb.w	r2, [r1], #1
    a218:	f80c 2b01 	strb.w	r2, [ip], #1
    a21c:	2a00      	cmp	r2, #0
    a21e:	d1f9      	bne.n	a214 <strcpy+0xac>
    a220:	4770      	bx	lr
    a222:	bf00      	nop

0000a224 <strlen>:
    a224:	f020 0103 	bic.w	r1, r0, #3
    a228:	f010 0003 	ands.w	r0, r0, #3
    a22c:	f1c0 0000 	rsb	r0, r0, #0
    a230:	f851 3b04 	ldr.w	r3, [r1], #4
    a234:	f100 0c04 	add.w	ip, r0, #4
    a238:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a23c:	f06f 0200 	mvn.w	r2, #0
    a240:	bf1c      	itt	ne
    a242:	fa22 f20c 	lsrne.w	r2, r2, ip
    a246:	4313      	orrne	r3, r2
    a248:	f04f 0c01 	mov.w	ip, #1
    a24c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    a250:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    a254:	eba3 020c 	sub.w	r2, r3, ip
    a258:	ea22 0203 	bic.w	r2, r2, r3
    a25c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    a260:	bf04      	itt	eq
    a262:	f851 3b04 	ldreq.w	r3, [r1], #4
    a266:	3004      	addeq	r0, #4
    a268:	d0f4      	beq.n	a254 <strlen+0x30>
    a26a:	f013 0fff 	tst.w	r3, #255	; 0xff
    a26e:	bf1f      	itttt	ne
    a270:	3001      	addne	r0, #1
    a272:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    a276:	3001      	addne	r0, #1
    a278:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    a27c:	bf18      	it	ne
    a27e:	3001      	addne	r0, #1
    a280:	4770      	bx	lr
    a282:	bf00      	nop

0000a284 <strncpy>:
    a284:	ea41 0300 	orr.w	r3, r1, r0
    a288:	f013 0f03 	tst.w	r3, #3
    a28c:	460b      	mov	r3, r1
    a28e:	b470      	push	{r4, r5, r6}
    a290:	bf14      	ite	ne
    a292:	2400      	movne	r4, #0
    a294:	2401      	moveq	r4, #1
    a296:	2a03      	cmp	r2, #3
    a298:	bf94      	ite	ls
    a29a:	2400      	movls	r4, #0
    a29c:	f004 0401 	andhi.w	r4, r4, #1
    a2a0:	4605      	mov	r5, r0
    a2a2:	b9d4      	cbnz	r4, a2da <strncpy+0x56>
    a2a4:	b1ba      	cbz	r2, a2d6 <strncpy+0x52>
    a2a6:	780e      	ldrb	r6, [r1, #0]
    a2a8:	462b      	mov	r3, r5
    a2aa:	3a01      	subs	r2, #1
    a2ac:	f803 6b01 	strb.w	r6, [r3], #1
    a2b0:	b156      	cbz	r6, a2c8 <strncpy+0x44>
    a2b2:	1cac      	adds	r4, r5, #2
    a2b4:	b17a      	cbz	r2, a2d6 <strncpy+0x52>
    a2b6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    a2ba:	4623      	mov	r3, r4
    a2bc:	3a01      	subs	r2, #1
    a2be:	f804 5c01 	strb.w	r5, [r4, #-1]
    a2c2:	3401      	adds	r4, #1
    a2c4:	2d00      	cmp	r5, #0
    a2c6:	d1f5      	bne.n	a2b4 <strncpy+0x30>
    a2c8:	b12a      	cbz	r2, a2d6 <strncpy+0x52>
    a2ca:	189a      	adds	r2, r3, r2
    a2cc:	2100      	movs	r1, #0
    a2ce:	f803 1b01 	strb.w	r1, [r3], #1
    a2d2:	4293      	cmp	r3, r2
    a2d4:	d1fb      	bne.n	a2ce <strncpy+0x4a>
    a2d6:	bc70      	pop	{r4, r5, r6}
    a2d8:	4770      	bx	lr
    a2da:	4619      	mov	r1, r3
    a2dc:	f853 4b04 	ldr.w	r4, [r3], #4
    a2e0:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    a2e4:	ea26 0604 	bic.w	r6, r6, r4
    a2e8:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    a2ec:	d1da      	bne.n	a2a4 <strncpy+0x20>
    a2ee:	3a04      	subs	r2, #4
    a2f0:	f845 4b04 	str.w	r4, [r5], #4
    a2f4:	2a03      	cmp	r2, #3
    a2f6:	4619      	mov	r1, r3
    a2f8:	d8ef      	bhi.n	a2da <strncpy+0x56>
    a2fa:	e7d3      	b.n	a2a4 <strncpy+0x20>
    a2fc:	0044454c 	.word	0x0044454c
    a300:	6c756e28 	.word	0x6c756e28
    a304:	0000296c 	.word	0x0000296c

0000a308 <heapSTRUCT_SIZE>:
    a308:	00000010                                ....

0000a30c <ulKernelPriority>:
    a30c:	000000f8 454c4449 00000000 00000a0d     ....IDLE........
    a31c:	09097325 25096325 75250975 0d752509     %s..%c.%u.%u.%u.
    a32c:	0000000a 09097325 30090930 0a0d2525     ....%s..0..0%%..
    a33c:	00000000 09097325 09097525 25257525     ....%s..%u..%u%%
    a34c:	00000a0d 09097325 09097525 2525313c     ....%s..%u..<1%%
    a35c:	00000a0d                                ....

0000a360 <ucExpectedStackBytes.6911>:
    a360:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
    a370:	a5a5a5a5 00000d0a 00007830 332f2e2e     ........0x..../3
    a380:	61506472 2f797472 76697244 2f737265     rdParty/Drivers/
    a390:	72756f73 6c2f6563 37316370 695f7878     source/lpc17xx_i
    a3a0:	632e6332 00000000 332f2e2e 61506472     2c.c....../3rdPa
    a3b0:	2f797472 76697244 2f737265 72756f73     rty/Drivers/sour
    a3c0:	6c2f6563 37316370 705f7878 632e6d77     ce/lpc17xx_pwm.c
    a3d0:	00000000 332f2e2e 61506472 2f797472     ....../3rdParty/
    a3e0:	76697244 2f737265 72756f73 6c2f6563     Drivers/source/l
    a3f0:	37316370 735f7878 632e6970 00000000     pc17xx_spi.c....
    a400:	332f2e2e 61506472 2f797472 76697244     ../3rdParty/Driv
    a410:	2f737265 72756f73 6c2f6563 37316370     ers/source/lpc17
    a420:	745f7878 72656d69 0000632e 332f2e2e     xx_timer.c..../3
    a430:	61506472 2f797472 76697244 2f737265     rdParty/Drivers/
    a440:	72756f73 6c2f6563 37316370 755f7878     source/lpc17xx_u
    a450:	2e747261 00000063                       art.c...
