
ee542.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  10000000  000032b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004df0  10000010  000032c4  0001000c  2**3
                  ALLOC
  3 .debug_abbrev 00000b68  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003b20  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000252c  00000000  00000000  00014694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 00058653  00000000  00000000  00016bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00001618  00000000  00000000  0006f213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000089d  00000000  00000000  0007082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000493  00000000  00000000  000710c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000140  00000000  00000000  0007155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000174f  00000000  00000000  0007169b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  00072dea  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000031  00000000  00000000  00072e14  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000ebc  00000000  00000000  00072e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	f0 7f 00 10 bd 08 00 00 11 09 00 00 19 09 00 00     ................
      10:	21 09 00 00 29 09 00 00 31 09 00 00 00 00 00 00     !...)...1.......
	...
      2c:	a9 0b 00 00 39 09 00 00 00 00 00 00 89 0c 00 00     ....9...........
      3c:	c5 0c 00 00 41 09 00 00 41 09 00 00 41 09 00 00     ....A...A...A...
      4c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      5c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      6c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      7c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      8c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      9c:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      ac:	41 09 00 00 41 09 00 00 41 09 00 00 41 09 00 00     A...A...A...A...
      bc:	41 09 00 00 41 09 00 00 41 09 00 00                 A...A...A...

000000c8 <setSystem>:

#include "LPC17xx.h"
#include "hwConfig.h"

void setSystem(void)
{
      c8:	b580      	push	{r7, lr}
      ca:	af00      	add	r7, sp, #0
	/* Disable peripherals power. */
	LPC_SC->PCONP = 0;
      cc:	4b7a      	ldr	r3, [pc, #488]	; (2b8 <setSystem+0x1f0>)
      ce:	f04f 0200 	mov.w	r2, #0
      d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/* Enable GPIO power. */
	LPC_SC->PCONP = PCONP_PCGPIO;
      d6:	4b78      	ldr	r3, [pc, #480]	; (2b8 <setSystem+0x1f0>)
      d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
      dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	/* Disable TPIU. */
	LPC_PINCON->PINSEL10 = 0;
      e0:	4b76      	ldr	r3, [pc, #472]	; (2bc <setSystem+0x1f4>)
      e2:	f04f 0200 	mov.w	r2, #0
      e6:	629a      	str	r2, [r3, #40]	; 0x28

	if ( LPC_SC->PLL0STAT & ( 1 << 25 ) )
      e8:	4b73      	ldr	r3, [pc, #460]	; (2b8 <setSystem+0x1f0>)
      ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
      ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      f2:	2b00      	cmp	r3, #0
      f4:	d00e      	beq.n	114 <setSystem+0x4c>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL0CON = 1;
      f6:	4b70      	ldr	r3, [pc, #448]	; (2b8 <setSystem+0x1f0>)
      f8:	f04f 0201 	mov.w	r2, #1
      fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		LPC_SC->PLL0FEED = PLLFEED_FEED1;
     100:	4b6d      	ldr	r3, [pc, #436]	; (2b8 <setSystem+0x1f0>)
     102:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		LPC_SC->PLL0FEED = PLLFEED_FEED2;
     10a:	4b6b      	ldr	r3, [pc, #428]	; (2b8 <setSystem+0x1f0>)
     10c:	f04f 0255 	mov.w	r2, #85	; 0x55
     110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL0CON = 0;
     114:	4b68      	ldr	r3, [pc, #416]	; (2b8 <setSystem+0x1f0>)
     116:	f04f 0200 	mov.w	r2, #0
     11a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     11e:	4b66      	ldr	r3, [pc, #408]	; (2b8 <setSystem+0x1f0>)
     120:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     128:	4b63      	ldr	r3, [pc, #396]	; (2b8 <setSystem+0x1f0>)
     12a:	f04f 0255 	mov.w	r2, #85	; 0x55
     12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable main OSC. */
	LPC_SC->SCS |= 0x20;
     132:	4b61      	ldr	r3, [pc, #388]	; (2b8 <setSystem+0x1f0>)
     134:	4a60      	ldr	r2, [pc, #384]	; (2b8 <setSystem+0x1f0>)
     136:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
     13a:	f042 0220 	orr.w	r2, r2, #32
     13e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	while( !( LPC_SC->SCS & 0x40 ) );
     142:	bf00      	nop
     144:	4b5c      	ldr	r3, [pc, #368]	; (2b8 <setSystem+0x1f0>)
     146:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
     14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
     14e:	2b00      	cmp	r3, #0
     150:	d0f8      	beq.n	144 <setSystem+0x7c>

	/* select main OSC, 12MHz, as the PLL clock source. */
	LPC_SC->CLKSRCSEL = 0x1;
     152:	4b59      	ldr	r3, [pc, #356]	; (2b8 <setSystem+0x1f0>)
     154:	f04f 0201 	mov.w	r2, #1
     158:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	LPC_SC->PLL0CFG = 0x20031;
     15c:	4b56      	ldr	r3, [pc, #344]	; (2b8 <setSystem+0x1f0>)
     15e:	4a58      	ldr	r2, [pc, #352]	; (2c0 <setSystem+0x1f8>)
     160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     164:	4b54      	ldr	r3, [pc, #336]	; (2b8 <setSystem+0x1f0>)
     166:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     16e:	4b52      	ldr	r3, [pc, #328]	; (2b8 <setSystem+0x1f0>)
     170:	f04f 0255 	mov.w	r2, #85	; 0x55
     174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable PLL, disconnected. */
	LPC_SC->PLL0CON = 1;
     178:	4b4f      	ldr	r3, [pc, #316]	; (2b8 <setSystem+0x1f0>)
     17a:	f04f 0201 	mov.w	r2, #1
     17e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     182:	4b4d      	ldr	r3, [pc, #308]	; (2b8 <setSystem+0x1f0>)
     184:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     18c:	4b4a      	ldr	r3, [pc, #296]	; (2b8 <setSystem+0x1f0>)
     18e:	f04f 0255 	mov.w	r2, #85	; 0x55
     192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Set clock divider. */
	LPC_SC->CCLKCFG = 0x03;
     196:	4b48      	ldr	r3, [pc, #288]	; (2b8 <setSystem+0x1f0>)
     198:	f04f 0203 	mov.w	r2, #3
     19c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	/* Configure flash accelerator. */
	LPC_SC->FLASHCFG = 0x403a;
     1a0:	4b45      	ldr	r3, [pc, #276]	; (2b8 <setSystem+0x1f0>)
     1a2:	f244 023a 	movw	r2, #16442	; 0x403a
     1a6:	601a      	str	r2, [r3, #0]

	/* Check lock bit status. */
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 26 ) ) == 0 ) );
     1a8:	bf00      	nop
     1aa:	4b43      	ldr	r3, [pc, #268]	; (2b8 <setSystem+0x1f0>)
     1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     1b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     1b4:	2b00      	cmp	r3, #0
     1b6:	d0f8      	beq.n	1aa <setSystem+0xe2>

	/* Enable and connect. */
	LPC_SC->PLL0CON = 3;
     1b8:	4b3f      	ldr	r3, [pc, #252]	; (2b8 <setSystem+0x1f0>)
     1ba:	f04f 0203 	mov.w	r2, #3
     1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     1c2:	4b3d      	ldr	r3, [pc, #244]	; (2b8 <setSystem+0x1f0>)
     1c4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     1cc:	4b3a      	ldr	r3, [pc, #232]	; (2b8 <setSystem+0x1f0>)
     1ce:	f04f 0255 	mov.w	r2, #85	; 0x55
     1d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 25 ) ) == 0 ) );
     1d6:	bf00      	nop
     1d8:	4b37      	ldr	r3, [pc, #220]	; (2b8 <setSystem+0x1f0>)
     1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     1e2:	2b00      	cmp	r3, #0
     1e4:	d0f8      	beq.n	1d8 <setSystem+0x110>



	/* Configure the clock for the USB. */

	if( LPC_SC->PLL1STAT & ( 1 << 9 ) )
     1e6:	4b34      	ldr	r3, [pc, #208]	; (2b8 <setSystem+0x1f0>)
     1e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     1ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
     1f0:	2b00      	cmp	r3, #0
     1f2:	d00e      	beq.n	212 <setSystem+0x14a>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL1CON = 1;
     1f4:	4b30      	ldr	r3, [pc, #192]	; (2b8 <setSystem+0x1f0>)
     1f6:	f04f 0201 	mov.w	r2, #1
     1fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		LPC_SC->PLL1FEED = PLLFEED_FEED1;
     1fe:	4b2e      	ldr	r3, [pc, #184]	; (2b8 <setSystem+0x1f0>)
     200:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     204:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		LPC_SC->PLL1FEED = PLLFEED_FEED2;
     208:	4b2b      	ldr	r3, [pc, #172]	; (2b8 <setSystem+0x1f0>)
     20a:	f04f 0255 	mov.w	r2, #85	; 0x55
     20e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL1CON = 0;
     212:	4b29      	ldr	r3, [pc, #164]	; (2b8 <setSystem+0x1f0>)
     214:	f04f 0200 	mov.w	r2, #0
     218:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     21c:	4b26      	ldr	r3, [pc, #152]	; (2b8 <setSystem+0x1f0>)
     21e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     222:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     226:	4b24      	ldr	r3, [pc, #144]	; (2b8 <setSystem+0x1f0>)
     228:	f04f 0255 	mov.w	r2, #85	; 0x55
     22c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	LPC_SC->PLL1CFG = 0x23;
     230:	4b21      	ldr	r3, [pc, #132]	; (2b8 <setSystem+0x1f0>)
     232:	f04f 0223 	mov.w	r2, #35	; 0x23
     236:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     23a:	4b1f      	ldr	r3, [pc, #124]	; (2b8 <setSystem+0x1f0>)
     23c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     240:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     244:	4b1c      	ldr	r3, [pc, #112]	; (2b8 <setSystem+0x1f0>)
     246:	f04f 0255 	mov.w	r2, #85	; 0x55
     24a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	/* Enable PLL, disconnected. */
	LPC_SC->PLL1CON = 1;
     24e:	4b1a      	ldr	r3, [pc, #104]	; (2b8 <setSystem+0x1f0>)
     250:	f04f 0201 	mov.w	r2, #1
     254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     258:	4b17      	ldr	r3, [pc, #92]	; (2b8 <setSystem+0x1f0>)
     25a:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     25e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     262:	4b15      	ldr	r3, [pc, #84]	; (2b8 <setSystem+0x1f0>)
     264:	f04f 0255 	mov.w	r2, #85	; 0x55
     268:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 10 ) ) == 0 ) );
     26c:	bf00      	nop
     26e:	4b12      	ldr	r3, [pc, #72]	; (2b8 <setSystem+0x1f0>)
     270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     278:	2b00      	cmp	r3, #0
     27a:	d0f8      	beq.n	26e <setSystem+0x1a6>

	/* Enable and connect. */
	LPC_SC->PLL1CON = 3;
     27c:	4b0e      	ldr	r3, [pc, #56]	; (2b8 <setSystem+0x1f0>)
     27e:	f04f 0203 	mov.w	r2, #3
     282:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     286:	4b0c      	ldr	r3, [pc, #48]	; (2b8 <setSystem+0x1f0>)
     288:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     28c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     290:	4b09      	ldr	r3, [pc, #36]	; (2b8 <setSystem+0x1f0>)
     292:	f04f 0255 	mov.w	r2, #85	; 0x55
     296:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 9 ) ) == 0 ) );
     29a:	bf00      	nop
     29c:	4b06      	ldr	r3, [pc, #24]	; (2b8 <setSystem+0x1f0>)
     29e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
     2a6:	2b00      	cmp	r3, #0
     2a8:	d0f8      	beq.n	29c <setSystem+0x1d4>

	/*  Setup the peripheral bus to be the same as the PLL output (64 MHz). */
	LPC_SC->PCLKSEL0 = 0x05555555;
     2aa:	4b03      	ldr	r3, [pc, #12]	; (2b8 <setSystem+0x1f0>)
     2ac:	4a05      	ldr	r2, [pc, #20]	; (2c4 <setSystem+0x1fc>)
     2ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	// configure the RED_LED
	configRedLed();
     2b2:	f000 f809 	bl	2c8 <configRedLed>
}
     2b6:	bd80      	pop	{r7, pc}
     2b8:	400fc000 	.word	0x400fc000
     2bc:	4002c000 	.word	0x4002c000
     2c0:	00020031 	.word	0x00020031
     2c4:	05555555 	.word	0x05555555

000002c8 <configRedLed>:

void configRedLed(void)
{
     2c8:	b480      	push	{r7}
     2ca:	af00      	add	r7, sp, #0
	/* LEDs on port 1. */
	LPC_GPIO3->FIODIR  = RED_LED;
     2cc:	4b05      	ldr	r3, [pc, #20]	; (2e4 <configRedLed+0x1c>)
     2ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     2d2:	601a      	str	r2, [r3, #0]

	/* Start will all LEDs off. */
	LPC_GPIO3->FIOCLR = RED_LED;
     2d4:	4b03      	ldr	r3, [pc, #12]	; (2e4 <configRedLed+0x1c>)
     2d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     2da:	61da      	str	r2, [r3, #28]
}
     2dc:	46bd      	mov	sp, r7
     2de:	bc80      	pop	{r7}
     2e0:	4770      	bx	lr
     2e2:	bf00      	nop
     2e4:	2009c060 	.word	0x2009c060

000002e8 <main>:
// contains the handles for all tasks
// define one more taskHandle than you need, zero the last entry
xTaskHandle taskHandles[5];  //TODO: need to know how many there will be

int main( void )
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b084      	sub	sp, #16
     2ec:	af04      	add	r7, sp, #16
	// configure the system
    setSystem();
     2ee:	f7ff feeb 	bl	c8 <setSystem>

    // create the LED task
    if(xTaskCreate(vLedTask, (signed portCHAR*) "LED",128,NULL, 1, &taskHandles[0]) != pdPASS)
     2f2:	4b0f      	ldr	r3, [pc, #60]	; (330 <main+0x48>)
     2f4:	f04f 0201 	mov.w	r2, #1
     2f8:	9200      	str	r2, [sp, #0]
     2fa:	4a0e      	ldr	r2, [pc, #56]	; (334 <main+0x4c>)
     2fc:	9201      	str	r2, [sp, #4]
     2fe:	f04f 0200 	mov.w	r2, #0
     302:	9202      	str	r2, [sp, #8]
     304:	f04f 0200 	mov.w	r2, #0
     308:	9203      	str	r2, [sp, #12]
     30a:	480b      	ldr	r0, [pc, #44]	; (338 <main+0x50>)
     30c:	4619      	mov	r1, r3
     30e:	f04f 0280 	mov.w	r2, #128	; 0x80
     312:	f04f 0300 	mov.w	r3, #0
     316:	f001 fa9f 	bl	1858 <xTaskGenericCreate>
    {
    	//TODO: the task was not created, do something
    }

    taskHandles[4] = 0; //TODO: will need to change when we know how many tasks there will be
     31a:	4b06      	ldr	r3, [pc, #24]	; (334 <main+0x4c>)
     31c:	f04f 0200 	mov.w	r2, #0
     320:	611a      	str	r2, [r3, #16]

    // enable the interrupts
    portENABLE_INTERRUPTS();
     322:	f04f 0000 	mov.w	r0, #0
     326:	f380 8811 	msr	BASEPRI, r0

    // start the scheduler
	vTaskStartScheduler();
     32a:	f001 fde5 	bl	1ef8 <vTaskStartScheduler>

    // will only get here if there was insufficient memory to create the idle
    // task.  The idle task is created within vTaskStartScheduler().
	for( ;; );
     32e:	e7fe      	b.n	32e <main+0x46>
     330:	0000323c 	.word	0x0000323c
     334:	10004d9c 	.word	0x10004d9c
     338:	000003c1 	.word	0x000003c1

0000033c <vApplicationTickHook>:
	return 0; // never gets here
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
     33c:	b480      	push	{r7}
     33e:	af00      	add	r7, sp, #0
	    {
	    	pcStatusMessage = "An error has been detected in the Mutex test/demo.";
	    }
	}
	*/
}
     340:	46bd      	mov	sp, r7
     342:	bc80      	pop	{r7}
     344:	4770      	bx	lr
     346:	bf00      	nop

00000348 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
     348:	b480      	push	{r7}
     34a:	b083      	sub	sp, #12
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
     350:	6039      	str	r1, [r7, #0]
	/* This function will get called if a task overflows its stack. */

	( void ) pxTask;
	( void ) pcTaskName;

	for( ;; );
     352:	e7fe      	b.n	352 <vApplicationStackOverflowHook+0xa>

00000354 <vConfigureTimerForRunTimeStats>:
}
/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
     354:	b480      	push	{r7}
     356:	b085      	sub	sp, #20
     358:	af00      	add	r7, sp, #0
const unsigned long TCR_COUNT_RESET = 2, CTCR_CTM_TIMER = 0x00, TCR_COUNT_ENABLE = 0x01;
     35a:	f04f 0302 	mov.w	r3, #2
     35e:	60fb      	str	r3, [r7, #12]
     360:	f04f 0300 	mov.w	r3, #0
     364:	60bb      	str	r3, [r7, #8]
     366:	f04f 0301 	mov.w	r3, #1
     36a:	607b      	str	r3, [r7, #4]
	of CPU time that each task is utilising.  It is called automatically when
	the scheduler is started (assuming configGENERATE_RUN_TIME_STATS is set
	to 1). */

	/* Power up and feed the timer. */
	LPC_SC->PCONP |= 0x02UL;
     36c:	4b13      	ldr	r3, [pc, #76]	; (3bc <vConfigureTimerForRunTimeStats+0x68>)
     36e:	4a13      	ldr	r2, [pc, #76]	; (3bc <vConfigureTimerForRunTimeStats+0x68>)
     370:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
     374:	f042 0202 	orr.w	r2, r2, #2
     378:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
     37c:	4b0f      	ldr	r3, [pc, #60]	; (3bc <vConfigureTimerForRunTimeStats+0x68>)
     37e:	4a0f      	ldr	r2, [pc, #60]	; (3bc <vConfigureTimerForRunTimeStats+0x68>)
     380:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
     384:	f022 020c 	bic.w	r2, r2, #12
     388:	f042 0204 	orr.w	r2, r2, #4
     38c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	/* Reset Timer 0 */
	LPC_TIM0->TCR = TCR_COUNT_RESET;
     390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     394:	68fa      	ldr	r2, [r7, #12]
     396:	605a      	str	r2, [r3, #4]

	/* Just count up. */
	LPC_TIM0->CTCR = CTCR_CTM_TIMER;
     398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     39c:	68ba      	ldr	r2, [r7, #8]
     39e:	671a      	str	r2, [r3, #112]	; 0x70

	/* Prescale to a frequency that is good enough to get a decent resolution,
	but not too fast so as to overflow all the time. */
	LPC_TIM0->PR =  ( configCPU_CLOCK_HZ / 10000UL ) - 1UL;
     3a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     3a4:	f242 62ab 	movw	r2, #9899	; 0x26ab
     3a8:	60da      	str	r2, [r3, #12]

	/* Start the counter. */
	LPC_TIM0->TCR = TCR_COUNT_ENABLE;
     3aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     3ae:	687a      	ldr	r2, [r7, #4]
     3b0:	605a      	str	r2, [r3, #4]
}
     3b2:	f107 0714 	add.w	r7, r7, #20
     3b6:	46bd      	mov	sp, r7
     3b8:	bc80      	pop	{r7}
     3ba:	4770      	bx	lr
     3bc:	400fc000 	.word	0x400fc000

000003c0 <vLedTask>:

#include "hwConfig.h"
#include "taskLed.h"

void vLedTask( void *pvParameters )
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b084      	sub	sp, #16
     3c4:	af00      	add	r7, sp, #0
     3c6:	6078      	str	r0, [r7, #4]
	portTickType xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
     3c8:	f001 fe76 	bl	20b8 <xTaskGetTickCount>
     3cc:	4603      	mov	r3, r0
     3ce:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     3d0:	f107 030c 	add.w	r3, r7, #12
     3d4:	4618      	mov	r0, r3
     3d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     3da:	f001 fb43 	bl	1a64 <vTaskDelayUntil>

		// Turn the LED on
		LPC_GPIO3->FIOCLR = RED_LED;
     3de:	4b08      	ldr	r3, [pc, #32]	; (400 <vLedTask+0x40>)
     3e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     3e4:	61da      	str	r2, [r3, #28]

		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     3e6:	f107 030c 	add.w	r3, r7, #12
     3ea:	4618      	mov	r0, r3
     3ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     3f0:	f001 fb38 	bl	1a64 <vTaskDelayUntil>

		// Turn the LED off
		LPC_GPIO3->FIOSET = RED_LED;
     3f4:	4b02      	ldr	r3, [pc, #8]	; (400 <vLedTask+0x40>)
     3f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     3fa:	619a      	str	r2, [r3, #24]
	}
     3fc:	e7e8      	b.n	3d0 <vLedTask+0x10>
     3fe:	bf00      	nop
     400:	2009c060 	.word	0x2009c060

00000404 <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
     404:	b480      	push	{r7}
     406:	b083      	sub	sp, #12
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
     40c:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
     40e:	687b      	ldr	r3, [r7, #4]
     410:	2b00      	cmp	r3, #0
     412:	d00a      	beq.n	42a <printchar+0x26>
		**str = (char)c;
     414:	687b      	ldr	r3, [r7, #4]
     416:	681b      	ldr	r3, [r3, #0]
     418:	683a      	ldr	r2, [r7, #0]
     41a:	b2d2      	uxtb	r2, r2
     41c:	701a      	strb	r2, [r3, #0]
		++(*str);
     41e:	687b      	ldr	r3, [r7, #4]
     420:	681b      	ldr	r3, [r3, #0]
     422:	f103 0201 	add.w	r2, r3, #1
     426:	687b      	ldr	r3, [r7, #4]
     428:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
     42a:	f107 070c 	add.w	r7, r7, #12
     42e:	46bd      	mov	sp, r7
     430:	bc80      	pop	{r7}
     432:	4770      	bx	lr

00000434 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
     434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     438:	b084      	sub	sp, #16
     43a:	af00      	add	r7, sp, #0
     43c:	60f8      	str	r0, [r7, #12]
     43e:	60b9      	str	r1, [r7, #8]
     440:	607a      	str	r2, [r7, #4]
     442:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
     444:	f04f 0400 	mov.w	r4, #0
     448:	f04f 0620 	mov.w	r6, #32

	if (width > 0) {
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	2b00      	cmp	r3, #0
     450:	dd1d      	ble.n	48e <prints+0x5a>
		register int len = 0;
     452:	f04f 0500 	mov.w	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
     456:	f8d7 8008 	ldr.w	r8, [r7, #8]
     45a:	e003      	b.n	464 <prints+0x30>
     45c:	f105 0501 	add.w	r5, r5, #1
     460:	f108 0801 	add.w	r8, r8, #1
     464:	f898 3000 	ldrb.w	r3, [r8]
     468:	2b00      	cmp	r3, #0
     46a:	d1f7      	bne.n	45c <prints+0x28>
		if (len >= width) width = 0;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	429d      	cmp	r5, r3
     470:	db03      	blt.n	47a <prints+0x46>
     472:	f04f 0300 	mov.w	r3, #0
     476:	607b      	str	r3, [r7, #4]
     478:	e002      	b.n	480 <prints+0x4c>
		else width -= len;
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	1b5b      	subs	r3, r3, r5
     47e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
     480:	683b      	ldr	r3, [r7, #0]
     482:	f003 0302 	and.w	r3, r3, #2
     486:	2b00      	cmp	r3, #0
     488:	d001      	beq.n	48e <prints+0x5a>
     48a:	f04f 0630 	mov.w	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
     48e:	683b      	ldr	r3, [r7, #0]
     490:	f003 0301 	and.w	r3, r3, #1
     494:	2b00      	cmp	r3, #0
     496:	d11b      	bne.n	4d0 <prints+0x9c>
		for ( ; width > 0; --width) {
     498:	e009      	b.n	4ae <prints+0x7a>
			printchar (out, padchar);
     49a:	68f8      	ldr	r0, [r7, #12]
     49c:	4631      	mov	r1, r6
     49e:	f7ff ffb1 	bl	404 <printchar>
			++pc;
     4a2:	f104 0401 	add.w	r4, r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	f103 33ff 	add.w	r3, r3, #4294967295
     4ac:	607b      	str	r3, [r7, #4]
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	2b00      	cmp	r3, #0
     4b2:	dcf2      	bgt.n	49a <prints+0x66>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     4b4:	e00d      	b.n	4d2 <prints+0x9e>
		printchar (out, *string);
     4b6:	68bb      	ldr	r3, [r7, #8]
     4b8:	781b      	ldrb	r3, [r3, #0]
     4ba:	68f8      	ldr	r0, [r7, #12]
     4bc:	4619      	mov	r1, r3
     4be:	f7ff ffa1 	bl	404 <printchar>
		++pc;
     4c2:	f104 0401 	add.w	r4, r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     4c6:	68bb      	ldr	r3, [r7, #8]
     4c8:	f103 0301 	add.w	r3, r3, #1
     4cc:	60bb      	str	r3, [r7, #8]
     4ce:	e000      	b.n	4d2 <prints+0x9e>
     4d0:	bf00      	nop
     4d2:	68bb      	ldr	r3, [r7, #8]
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2b00      	cmp	r3, #0
     4d8:	d1ed      	bne.n	4b6 <prints+0x82>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     4da:	e009      	b.n	4f0 <prints+0xbc>
		printchar (out, padchar);
     4dc:	68f8      	ldr	r0, [r7, #12]
     4de:	4631      	mov	r1, r6
     4e0:	f7ff ff90 	bl	404 <printchar>
		++pc;
     4e4:	f104 0401 	add.w	r4, r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     4e8:	687b      	ldr	r3, [r7, #4]
     4ea:	f103 33ff 	add.w	r3, r3, #4294967295
     4ee:	607b      	str	r3, [r7, #4]
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	2b00      	cmp	r3, #0
     4f4:	dcf2      	bgt.n	4dc <prints+0xa8>
		printchar (out, padchar);
		++pc;
	}

	return pc;
     4f6:	4623      	mov	r3, r4
}
     4f8:	4618      	mov	r0, r3
     4fa:	f107 0710 	add.w	r7, r7, #16
     4fe:	46bd      	mov	sp, r7
     500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000504 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
     504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     508:	b089      	sub	sp, #36	; 0x24
     50a:	af00      	add	r7, sp, #0
     50c:	60f8      	str	r0, [r7, #12]
     50e:	60b9      	str	r1, [r7, #8]
     510:	607a      	str	r2, [r7, #4]
     512:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
     514:	f04f 0900 	mov.w	r9, #0
     518:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
     51c:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
     51e:	68bb      	ldr	r3, [r7, #8]
     520:	2b00      	cmp	r3, #0
     522:	d10f      	bne.n	544 <printi+0x40>
		print_buf[0] = '0';
     524:	f04f 0330 	mov.w	r3, #48	; 0x30
     528:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
     52a:	f04f 0300 	mov.w	r3, #0
     52e:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
     530:	f107 0314 	add.w	r3, r7, #20
     534:	68f8      	ldr	r0, [r7, #12]
     536:	4619      	mov	r1, r3
     538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     53c:	f7ff ff7a 	bl	434 <prints>
     540:	4603      	mov	r3, r0
     542:	e053      	b.n	5ec <printi+0xe8>
	}

	if (sg && b == 10 && i < 0) {
     544:	683b      	ldr	r3, [r7, #0]
     546:	2b00      	cmp	r3, #0
     548:	d00b      	beq.n	562 <printi+0x5e>
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	2b0a      	cmp	r3, #10
     54e:	d108      	bne.n	562 <printi+0x5e>
     550:	68bb      	ldr	r3, [r7, #8]
     552:	2b00      	cmp	r3, #0
     554:	da05      	bge.n	562 <printi+0x5e>
		neg = 1;
     556:	f04f 0901 	mov.w	r9, #1
		u = (unsigned int)-i;
     55a:	68bb      	ldr	r3, [r7, #8]
     55c:	f1c3 0300 	rsb	r3, r3, #0
     560:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
     562:	f107 0314 	add.w	r3, r7, #20
     566:	f103 040b 	add.w	r4, r3, #11
	*s = '\0';
     56a:	f04f 0300 	mov.w	r3, #0
     56e:	7023      	strb	r3, [r4, #0]

	while (u) {
     570:	e016      	b.n	5a0 <printi+0x9c>
		t = (unsigned int)u % b;
     572:	687b      	ldr	r3, [r7, #4]
     574:	fbb5 f2f3 	udiv	r2, r5, r3
     578:	fb03 f302 	mul.w	r3, r3, r2
     57c:	1aeb      	subs	r3, r5, r3
     57e:	461e      	mov	r6, r3
		if( t >= 10 )
     580:	2e09      	cmp	r6, #9
     582:	dd03      	ble.n	58c <printi+0x88>
			t += letbase - '0' - 10;
     584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     586:	f1a3 033a 	sub.w	r3, r3, #58	; 0x3a
     58a:	18f6      	adds	r6, r6, r3
		*--s = (char)(t + '0');
     58c:	f104 34ff 	add.w	r4, r4, #4294967295
     590:	b2f3      	uxtb	r3, r6
     592:	f103 0330 	add.w	r3, r3, #48	; 0x30
     596:	b2db      	uxtb	r3, r3
     598:	7023      	strb	r3, [r4, #0]
		u /= b;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
     5a0:	2d00      	cmp	r5, #0
     5a2:	d1e6      	bne.n	572 <printi+0x6e>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
     5a4:	f1b9 0f00 	cmp.w	r9, #0
     5a8:	d018      	beq.n	5dc <printi+0xd8>
		if( width && (pad & PAD_ZERO) ) {
     5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ac:	2b00      	cmp	r3, #0
     5ae:	d010      	beq.n	5d2 <printi+0xce>
     5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b2:	f003 0302 	and.w	r3, r3, #2
     5b6:	2b00      	cmp	r3, #0
     5b8:	d00b      	beq.n	5d2 <printi+0xce>
			printchar (out, '-');
     5ba:	68f8      	ldr	r0, [r7, #12]
     5bc:	f04f 012d 	mov.w	r1, #45	; 0x2d
     5c0:	f7ff ff20 	bl	404 <printchar>
			++pc;
     5c4:	f108 0801 	add.w	r8, r8, #1
			--width;
     5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     5ca:	f103 33ff 	add.w	r3, r3, #4294967295
     5ce:	643b      	str	r3, [r7, #64]	; 0x40
     5d0:	e004      	b.n	5dc <printi+0xd8>
		}
		else {
			*--s = '-';
     5d2:	f104 34ff 	add.w	r4, r4, #4294967295
     5d6:	f04f 032d 	mov.w	r3, #45	; 0x2d
     5da:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
     5dc:	68f8      	ldr	r0, [r7, #12]
     5de:	4621      	mov	r1, r4
     5e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5e4:	f7ff ff26 	bl	434 <prints>
     5e8:	4603      	mov	r3, r0
     5ea:	4443      	add	r3, r8
}
     5ec:	4618      	mov	r0, r3
     5ee:	f107 0724 	add.w	r7, r7, #36	; 0x24
     5f2:	46bd      	mov	sp, r7
     5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000005f8 <print>:

static int print( char **out, const char *format, va_list args )
{
     5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5fc:	b08a      	sub	sp, #40	; 0x28
     5fe:	af04      	add	r7, sp, #16
     600:	60f8      	str	r0, [r7, #12]
     602:	60b9      	str	r1, [r7, #8]
     604:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
     606:	f04f 0400 	mov.w	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
     60a:	e0e8      	b.n	7de <print+0x1e6>
		if (*format == '%') {
     60c:	68bb      	ldr	r3, [r7, #8]
     60e:	781b      	ldrb	r3, [r3, #0]
     610:	2b25      	cmp	r3, #37	; 0x25
     612:	f040 80d8 	bne.w	7c6 <print+0x1ce>
			++format;
     616:	68bb      	ldr	r3, [r7, #8]
     618:	f103 0301 	add.w	r3, r3, #1
     61c:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
     61e:	f04f 0600 	mov.w	r6, #0
     622:	4635      	mov	r5, r6
			if (*format == '\0') break;
     624:	68bb      	ldr	r3, [r7, #8]
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b00      	cmp	r3, #0
     62a:	f000 80de 	beq.w	7ea <print+0x1f2>
			if (*format == '%') goto out;
     62e:	68bb      	ldr	r3, [r7, #8]
     630:	781b      	ldrb	r3, [r3, #0]
     632:	2b25      	cmp	r3, #37	; 0x25
     634:	f000 80c6 	beq.w	7c4 <print+0x1cc>
			if (*format == '-') {
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	2b2d      	cmp	r3, #45	; 0x2d
     63e:	d10d      	bne.n	65c <print+0x64>
				++format;
     640:	68bb      	ldr	r3, [r7, #8]
     642:	f103 0301 	add.w	r3, r3, #1
     646:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
     648:	f04f 0601 	mov.w	r6, #1
			}
			while (*format == '0') {
     64c:	e007      	b.n	65e <print+0x66>
				++format;
     64e:	68bb      	ldr	r3, [r7, #8]
     650:	f103 0301 	add.w	r3, r3, #1
     654:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
     656:	f046 0602 	orr.w	r6, r6, #2
     65a:	e000      	b.n	65e <print+0x66>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
     65c:	bf00      	nop
     65e:	68bb      	ldr	r3, [r7, #8]
     660:	781b      	ldrb	r3, [r3, #0]
     662:	2b30      	cmp	r3, #48	; 0x30
     664:	d0f3      	beq.n	64e <print+0x56>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     666:	e00f      	b.n	688 <print+0x90>
				width *= 10;
     668:	462b      	mov	r3, r5
     66a:	ea4f 0383 	mov.w	r3, r3, lsl #2
     66e:	195b      	adds	r3, r3, r5
     670:	ea4f 0343 	mov.w	r3, r3, lsl #1
     674:	461d      	mov	r5, r3
				width += *format - '0';
     676:	68bb      	ldr	r3, [r7, #8]
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     67e:	18ed      	adds	r5, r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     680:	68bb      	ldr	r3, [r7, #8]
     682:	f103 0301 	add.w	r3, r3, #1
     686:	60bb      	str	r3, [r7, #8]
     688:	68bb      	ldr	r3, [r7, #8]
     68a:	781b      	ldrb	r3, [r3, #0]
     68c:	2b2f      	cmp	r3, #47	; 0x2f
     68e:	d903      	bls.n	698 <print+0xa0>
     690:	68bb      	ldr	r3, [r7, #8]
     692:	781b      	ldrb	r3, [r3, #0]
     694:	2b39      	cmp	r3, #57	; 0x39
     696:	d9e7      	bls.n	668 <print+0x70>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
     698:	68bb      	ldr	r3, [r7, #8]
     69a:	781b      	ldrb	r3, [r3, #0]
     69c:	2b73      	cmp	r3, #115	; 0x73
     69e:	d114      	bne.n	6ca <print+0xd2>
				register char *s = (char *)va_arg( args, int );
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	f103 0204 	add.w	r2, r3, #4
     6a6:	607a      	str	r2, [r7, #4]
     6a8:	681b      	ldr	r3, [r3, #0]
     6aa:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
     6ac:	f1b8 0f00 	cmp.w	r8, #0
     6b0:	d001      	beq.n	6b6 <print+0xbe>
     6b2:	4643      	mov	r3, r8
     6b4:	e000      	b.n	6b8 <print+0xc0>
     6b6:	4b55      	ldr	r3, [pc, #340]	; (80c <print+0x214>)
     6b8:	68f8      	ldr	r0, [r7, #12]
     6ba:	4619      	mov	r1, r3
     6bc:	462a      	mov	r2, r5
     6be:	4633      	mov	r3, r6
     6c0:	f7ff feb8 	bl	434 <prints>
     6c4:	4603      	mov	r3, r0
     6c6:	18e4      	adds	r4, r4, r3
				continue;
     6c8:	e085      	b.n	7d6 <print+0x1de>
			}
			if( *format == 'd' ) {
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	781b      	ldrb	r3, [r3, #0]
     6ce:	2b64      	cmp	r3, #100	; 0x64
     6d0:	d114      	bne.n	6fc <print+0x104>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	f103 0204 	add.w	r2, r3, #4
     6d8:	607a      	str	r2, [r7, #4]
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	9500      	str	r5, [sp, #0]
     6de:	9601      	str	r6, [sp, #4]
     6e0:	f04f 0261 	mov.w	r2, #97	; 0x61
     6e4:	9202      	str	r2, [sp, #8]
     6e6:	68f8      	ldr	r0, [r7, #12]
     6e8:	4619      	mov	r1, r3
     6ea:	f04f 020a 	mov.w	r2, #10
     6ee:	f04f 0301 	mov.w	r3, #1
     6f2:	f7ff ff07 	bl	504 <printi>
     6f6:	4603      	mov	r3, r0
     6f8:	18e4      	adds	r4, r4, r3
				continue;
     6fa:	e06c      	b.n	7d6 <print+0x1de>
			}
			if( *format == 'x' ) {
     6fc:	68bb      	ldr	r3, [r7, #8]
     6fe:	781b      	ldrb	r3, [r3, #0]
     700:	2b78      	cmp	r3, #120	; 0x78
     702:	d114      	bne.n	72e <print+0x136>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
     704:	687b      	ldr	r3, [r7, #4]
     706:	f103 0204 	add.w	r2, r3, #4
     70a:	607a      	str	r2, [r7, #4]
     70c:	681b      	ldr	r3, [r3, #0]
     70e:	9500      	str	r5, [sp, #0]
     710:	9601      	str	r6, [sp, #4]
     712:	f04f 0261 	mov.w	r2, #97	; 0x61
     716:	9202      	str	r2, [sp, #8]
     718:	68f8      	ldr	r0, [r7, #12]
     71a:	4619      	mov	r1, r3
     71c:	f04f 0210 	mov.w	r2, #16
     720:	f04f 0300 	mov.w	r3, #0
     724:	f7ff feee 	bl	504 <printi>
     728:	4603      	mov	r3, r0
     72a:	18e4      	adds	r4, r4, r3
				continue;
     72c:	e053      	b.n	7d6 <print+0x1de>
			}
			if( *format == 'X' ) {
     72e:	68bb      	ldr	r3, [r7, #8]
     730:	781b      	ldrb	r3, [r3, #0]
     732:	2b58      	cmp	r3, #88	; 0x58
     734:	d114      	bne.n	760 <print+0x168>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
     736:	687b      	ldr	r3, [r7, #4]
     738:	f103 0204 	add.w	r2, r3, #4
     73c:	607a      	str	r2, [r7, #4]
     73e:	681b      	ldr	r3, [r3, #0]
     740:	9500      	str	r5, [sp, #0]
     742:	9601      	str	r6, [sp, #4]
     744:	f04f 0241 	mov.w	r2, #65	; 0x41
     748:	9202      	str	r2, [sp, #8]
     74a:	68f8      	ldr	r0, [r7, #12]
     74c:	4619      	mov	r1, r3
     74e:	f04f 0210 	mov.w	r2, #16
     752:	f04f 0300 	mov.w	r3, #0
     756:	f7ff fed5 	bl	504 <printi>
     75a:	4603      	mov	r3, r0
     75c:	18e4      	adds	r4, r4, r3
				continue;
     75e:	e03a      	b.n	7d6 <print+0x1de>
			}
			if( *format == 'u' ) {
     760:	68bb      	ldr	r3, [r7, #8]
     762:	781b      	ldrb	r3, [r3, #0]
     764:	2b75      	cmp	r3, #117	; 0x75
     766:	d114      	bne.n	792 <print+0x19a>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
     768:	687b      	ldr	r3, [r7, #4]
     76a:	f103 0204 	add.w	r2, r3, #4
     76e:	607a      	str	r2, [r7, #4]
     770:	681b      	ldr	r3, [r3, #0]
     772:	9500      	str	r5, [sp, #0]
     774:	9601      	str	r6, [sp, #4]
     776:	f04f 0261 	mov.w	r2, #97	; 0x61
     77a:	9202      	str	r2, [sp, #8]
     77c:	68f8      	ldr	r0, [r7, #12]
     77e:	4619      	mov	r1, r3
     780:	f04f 020a 	mov.w	r2, #10
     784:	f04f 0300 	mov.w	r3, #0
     788:	f7ff febc 	bl	504 <printi>
     78c:	4603      	mov	r3, r0
     78e:	18e4      	adds	r4, r4, r3
				continue;
     790:	e021      	b.n	7d6 <print+0x1de>
			}
			if( *format == 'c' ) {
     792:	68bb      	ldr	r3, [r7, #8]
     794:	781b      	ldrb	r3, [r3, #0]
     796:	2b63      	cmp	r3, #99	; 0x63
     798:	d11d      	bne.n	7d6 <print+0x1de>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	f103 0204 	add.w	r2, r3, #4
     7a0:	607a      	str	r2, [r7, #4]
     7a2:	681b      	ldr	r3, [r3, #0]
     7a4:	b2db      	uxtb	r3, r3
     7a6:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
     7a8:	f04f 0300 	mov.w	r3, #0
     7ac:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
     7ae:	f107 0314 	add.w	r3, r7, #20
     7b2:	68f8      	ldr	r0, [r7, #12]
     7b4:	4619      	mov	r1, r3
     7b6:	462a      	mov	r2, r5
     7b8:	4633      	mov	r3, r6
     7ba:	f7ff fe3b 	bl	434 <prints>
     7be:	4603      	mov	r3, r0
     7c0:	18e4      	adds	r4, r4, r3
				continue;
     7c2:	e008      	b.n	7d6 <print+0x1de>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
     7c4:	bf00      	nop
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
     7c6:	68bb      	ldr	r3, [r7, #8]
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	68f8      	ldr	r0, [r7, #12]
     7cc:	4619      	mov	r1, r3
     7ce:	f7ff fe19 	bl	404 <printchar>
			++pc;
     7d2:	f104 0401 	add.w	r4, r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
     7d6:	68bb      	ldr	r3, [r7, #8]
     7d8:	f103 0301 	add.w	r3, r3, #1
     7dc:	60bb      	str	r3, [r7, #8]
     7de:	68bb      	ldr	r3, [r7, #8]
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	2b00      	cmp	r3, #0
     7e4:	f47f af12 	bne.w	60c <print+0x14>
     7e8:	e000      	b.n	7ec <print+0x1f4>
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
     7ea:	bf00      	nop
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
     7ec:	68fb      	ldr	r3, [r7, #12]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d004      	beq.n	7fc <print+0x204>
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	f04f 0200 	mov.w	r2, #0
     7fa:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
     7fc:	4623      	mov	r3, r4
}
     7fe:	4618      	mov	r0, r3
     800:	f107 0718 	add.w	r7, r7, #24
     804:	46bd      	mov	sp, r7
     806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     80a:	bf00      	nop
     80c:	00003240 	.word	0x00003240

00000810 <printf>:

int printf(const char *format, ...)
{
     810:	b40f      	push	{r0, r1, r2, r3}
     812:	b580      	push	{r7, lr}
     814:	b082      	sub	sp, #8
     816:	af00      	add	r7, sp, #0
        va_list args;
        
        va_start( args, format );
     818:	f107 0314 	add.w	r3, r7, #20
     81c:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
     81e:	f04f 0000 	mov.w	r0, #0
     822:	6939      	ldr	r1, [r7, #16]
     824:	687a      	ldr	r2, [r7, #4]
     826:	f7ff fee7 	bl	5f8 <print>
     82a:	4603      	mov	r3, r0
}
     82c:	4618      	mov	r0, r3
     82e:	f107 0708 	add.w	r7, r7, #8
     832:	46bd      	mov	sp, r7
     834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     838:	b004      	add	sp, #16
     83a:	4770      	bx	lr

0000083c <sprintf>:

int sprintf(char *out, const char *format, ...)
{
     83c:	b40e      	push	{r1, r2, r3}
     83e:	b580      	push	{r7, lr}
     840:	b085      	sub	sp, #20
     842:	af00      	add	r7, sp, #0
     844:	6078      	str	r0, [r7, #4]
        va_list args;
        
        va_start( args, format );
     846:	f107 0320 	add.w	r3, r7, #32
     84a:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
     84c:	f107 0304 	add.w	r3, r7, #4
     850:	4618      	mov	r0, r3
     852:	69f9      	ldr	r1, [r7, #28]
     854:	68fa      	ldr	r2, [r7, #12]
     856:	f7ff fecf 	bl	5f8 <print>
     85a:	4603      	mov	r3, r0
}
     85c:	4618      	mov	r0, r3
     85e:	f107 0714 	add.w	r7, r7, #20
     862:	46bd      	mov	sp, r7
     864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     868:	b003      	add	sp, #12
     86a:	4770      	bx	lr

0000086c <snprintf>:


int snprintf( char *buf, unsigned int count, const char *format, ... )
{
     86c:	b40c      	push	{r2, r3}
     86e:	b580      	push	{r7, lr}
     870:	b084      	sub	sp, #16
     872:	af00      	add	r7, sp, #0
     874:	6078      	str	r0, [r7, #4]
     876:	6039      	str	r1, [r7, #0]
        va_list args;
        
        ( void ) count;
        
        va_start( args, format );
     878:	f107 031c 	add.w	r3, r7, #28
     87c:	60fb      	str	r3, [r7, #12]
        return print( &buf, format, args );
     87e:	f107 0304 	add.w	r3, r7, #4
     882:	4618      	mov	r0, r3
     884:	69b9      	ldr	r1, [r7, #24]
     886:	68fa      	ldr	r2, [r7, #12]
     888:	f7ff feb6 	bl	5f8 <print>
     88c:	4603      	mov	r3, r0
}
     88e:	4618      	mov	r0, r3
     890:	f107 0710 	add.w	r7, r7, #16
     894:	46bd      	mov	sp, r7
     896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     89a:	b002      	add	sp, #8
     89c:	4770      	bx	lr
     89e:	bf00      	nop

000008a0 <write>:
#endif


/* To keep linker happy. */
int	write( int i, char* c, int n)
{
     8a0:	b480      	push	{r7}
     8a2:	b085      	sub	sp, #20
     8a4:	af00      	add	r7, sp, #0
     8a6:	60f8      	str	r0, [r7, #12]
     8a8:	60b9      	str	r1, [r7, #8]
     8aa:	607a      	str	r2, [r7, #4]
	(void)i;
	(void)n;
	(void)c;
	return 0;
     8ac:	f04f 0300 	mov.w	r3, #0
}
     8b0:	4618      	mov	r0, r3
     8b2:	f107 0714 	add.w	r7, r7, #20
     8b6:	46bd      	mov	sp, r7
     8b8:	bc80      	pop	{r7}
     8ba:	4770      	bx	lr

000008bc <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void
ResetISR(void) {
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
     8c2:	4b10      	ldr	r3, [pc, #64]	; (904 <zero_loop+0x10>)
     8c4:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
     8c6:	4b10      	ldr	r3, [pc, #64]	; (908 <zero_loop+0x14>)
     8c8:	603b      	str	r3, [r7, #0]
     8ca:	e00b      	b.n	8e4 <ResetISR+0x28>
    {
        *pulDest++ = *pulSrc++;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	681a      	ldr	r2, [r3, #0]
     8d0:	683b      	ldr	r3, [r7, #0]
     8d2:	601a      	str	r2, [r3, #0]
     8d4:	683b      	ldr	r3, [r7, #0]
     8d6:	f103 0304 	add.w	r3, r3, #4
     8da:	603b      	str	r3, [r7, #0]
     8dc:	687b      	ldr	r3, [r7, #4]
     8de:	f103 0304 	add.w	r3, r3, #4
     8e2:	607b      	str	r3, [r7, #4]

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
     8e4:	683a      	ldr	r2, [r7, #0]
     8e6:	4b09      	ldr	r3, [pc, #36]	; (90c <zero_loop+0x18>)
     8e8:	429a      	cmp	r2, r3
     8ea:	d3ef      	bcc.n	8cc <ResetISR+0x10>

    //
    // Zero fill the bss segment.  This is done with inline assembly since this
    // will clear the value of pulDest if it is not kept in a register.
    //
    __asm("    ldr     r0, =_bss\n"
     8ec:	4816      	ldr	r0, [pc, #88]	; (948 <ADC_IRQHandler+0x8>)
     8ee:	4917      	ldr	r1, [pc, #92]	; (94c <ADC_IRQHandler+0xc>)
     8f0:	f04f 0200 	mov.w	r2, #0

000008f4 <zero_loop>:
     8f4:	4288      	cmp	r0, r1
     8f6:	bfb8      	it	lt
     8f8:	f840 2b04 	strlt.w	r2, [r0], #4
     8fc:	dbfa      	blt.n	8f4 <zero_loop>

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main() ;
#else
	main();
     8fe:	f7ff fcf3 	bl	2e8 <main>
	//
	// main() shouldn't return, but if it does, we'll just enter an infinite loop 
	//
	while (1) {
		;
	}
     902:	e7fe      	b.n	902 <zero_loop+0xe>
     904:	000032b4 	.word	0x000032b4
     908:	10000000 	.word	0x10000000
     90c:	1000000c 	.word	0x1000000c

00000910 <NMI_Handler>:
// simply enters an infinite loop, preserving the system state for examination
// by a debugger.
//
//*****************************************************************************
void NMI_Handler(void)
{
     910:	b480      	push	{r7}
     912:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     914:	e7fe      	b.n	914 <NMI_Handler+0x4>
     916:	bf00      	nop

00000918 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
     918:	b480      	push	{r7}
     91a:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     91c:	e7fe      	b.n	91c <HardFault_Handler+0x4>
     91e:	bf00      	nop

00000920 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
     920:	b480      	push	{r7}
     922:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     924:	e7fe      	b.n	924 <MemManage_Handler+0x4>
     926:	bf00      	nop

00000928 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
     928:	b480      	push	{r7}
     92a:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     92c:	e7fe      	b.n	92c <BusFault_Handler+0x4>
     92e:	bf00      	nop

00000930 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
     930:	b480      	push	{r7}
     932:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     934:	e7fe      	b.n	934 <UsageFault_Handler+0x4>
     936:	bf00      	nop

00000938 <DebugMon_Handler>:
}


void DebugMon_Handler(void)
{
     938:	b480      	push	{r7}
     93a:	af00      	add	r7, sp, #0
    while(1)
    {
    }
     93c:	e7fe      	b.n	93c <DebugMon_Handler+0x4>
     93e:	bf00      	nop

00000940 <ADC_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a handler
// is not present in the application code.
//
//*****************************************************************************
void IntDefaultHandler(void)
{
     940:	b480      	push	{r7}
     942:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
     944:	e7fe      	b.n	944 <ADC_IRQHandler+0x4>
     946:	0000      	.short	0x0000
     948:	10000010 	.word	0x10000010
     94c:	10004e00 	.word	0x10004e00

00000950 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     950:	b580      	push	{r7, lr}
     952:	b08a      	sub	sp, #40	; 0x28
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     958:	f04f 0300 	mov.w	r3, #0
     95c:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
     95e:	f001 fb13 	bl	1f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     962:	4b4c      	ldr	r3, [pc, #304]	; (a94 <pvPortMalloc+0x144>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	2b00      	cmp	r3, #0
     968:	d11b      	bne.n	9a2 <pvPortMalloc+0x52>
		{
			prvHeapInit();
     96a:	4a4b      	ldr	r2, [pc, #300]	; (a98 <pvPortMalloc+0x148>)
     96c:	4b4b      	ldr	r3, [pc, #300]	; (a9c <pvPortMalloc+0x14c>)
     96e:	601a      	str	r2, [r3, #0]
     970:	4b4a      	ldr	r3, [pc, #296]	; (a9c <pvPortMalloc+0x14c>)
     972:	f04f 0200 	mov.w	r2, #0
     976:	605a      	str	r2, [r3, #4]
     978:	4b49      	ldr	r3, [pc, #292]	; (aa0 <pvPortMalloc+0x150>)
     97a:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     97e:	605a      	str	r2, [r3, #4]
     980:	4b47      	ldr	r3, [pc, #284]	; (aa0 <pvPortMalloc+0x150>)
     982:	f04f 0200 	mov.w	r2, #0
     986:	601a      	str	r2, [r3, #0]
     988:	4b43      	ldr	r3, [pc, #268]	; (a98 <pvPortMalloc+0x148>)
     98a:	617b      	str	r3, [r7, #20]
     98c:	697b      	ldr	r3, [r7, #20]
     98e:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     992:	605a      	str	r2, [r3, #4]
     994:	697b      	ldr	r3, [r7, #20]
     996:	4a42      	ldr	r2, [pc, #264]	; (aa0 <pvPortMalloc+0x150>)
     998:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
     99a:	4b3e      	ldr	r3, [pc, #248]	; (a94 <pvPortMalloc+0x144>)
     99c:	f04f 0201 	mov.w	r2, #1
     9a0:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	2b00      	cmp	r3, #0
     9a6:	d00f      	beq.n	9c8 <pvPortMalloc+0x78>
		{
			xWantedSize += heapSTRUCT_SIZE;
     9a8:	4b3e      	ldr	r3, [pc, #248]	; (aa4 <pvPortMalloc+0x154>)
     9aa:	881b      	ldrh	r3, [r3, #0]
     9ac:	687a      	ldr	r2, [r7, #4]
     9ae:	18d3      	adds	r3, r2, r3
     9b0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	f003 0307 	and.w	r3, r3, #7
     9b8:	2b00      	cmp	r3, #0
     9ba:	d005      	beq.n	9c8 <pvPortMalloc+0x78>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	f023 0307 	bic.w	r3, r3, #7
     9c2:	f103 0308 	add.w	r3, r3, #8
     9c6:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
     9c8:	687b      	ldr	r3, [r7, #4]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d05a      	beq.n	a84 <pvPortMalloc+0x134>
     9ce:	687a      	ldr	r2, [r7, #4]
     9d0:	f644 33ff 	movw	r3, #19455	; 0x4bff
     9d4:	429a      	cmp	r2, r3
     9d6:	d855      	bhi.n	a84 <pvPortMalloc+0x134>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     9d8:	4b30      	ldr	r3, [pc, #192]	; (a9c <pvPortMalloc+0x14c>)
     9da:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
     9dc:	4b2f      	ldr	r3, [pc, #188]	; (a9c <pvPortMalloc+0x14c>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     9e2:	e004      	b.n	9ee <pvPortMalloc+0x9e>
			{
				pxPreviousBlock = pxBlock;
     9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9e6:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
     9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f0:	685a      	ldr	r2, [r3, #4]
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	429a      	cmp	r2, r3
     9f6:	d203      	bcs.n	a00 <pvPortMalloc+0xb0>
     9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d1f1      	bne.n	9e4 <pvPortMalloc+0x94>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a02:	4b27      	ldr	r3, [pc, #156]	; (aa0 <pvPortMalloc+0x150>)
     a04:	429a      	cmp	r2, r3
     a06:	d03d      	beq.n	a84 <pvPortMalloc+0x134>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     a08:	6a3b      	ldr	r3, [r7, #32]
     a0a:	681a      	ldr	r2, [r3, #0]
     a0c:	4b25      	ldr	r3, [pc, #148]	; (aa4 <pvPortMalloc+0x154>)
     a0e:	881b      	ldrh	r3, [r3, #0]
     a10:	18d3      	adds	r3, r2, r3
     a12:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a16:	681a      	ldr	r2, [r3, #0]
     a18:	6a3b      	ldr	r3, [r7, #32]
     a1a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a1e:	685a      	ldr	r2, [r3, #4]
     a20:	687b      	ldr	r3, [r7, #4]
     a22:	1ad2      	subs	r2, r2, r3
     a24:	4b1f      	ldr	r3, [pc, #124]	; (aa4 <pvPortMalloc+0x154>)
     a26:	881b      	ldrh	r3, [r3, #0]
     a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a2c:	429a      	cmp	r2, r3
     a2e:	d922      	bls.n	a76 <pvPortMalloc+0x126>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
     a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	18d3      	adds	r3, r2, r3
     a36:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a3a:	685a      	ldr	r2, [r3, #4]
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	1ad2      	subs	r2, r2, r3
     a40:	693b      	ldr	r3, [r7, #16]
     a42:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
     a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a46:	687a      	ldr	r2, [r7, #4]
     a48:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     a4a:	693b      	ldr	r3, [r7, #16]
     a4c:	685b      	ldr	r3, [r3, #4]
     a4e:	60fb      	str	r3, [r7, #12]
     a50:	4b12      	ldr	r3, [pc, #72]	; (a9c <pvPortMalloc+0x14c>)
     a52:	61bb      	str	r3, [r7, #24]
     a54:	e002      	b.n	a5c <pvPortMalloc+0x10c>
     a56:	69bb      	ldr	r3, [r7, #24]
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	61bb      	str	r3, [r7, #24]
     a5c:	69bb      	ldr	r3, [r7, #24]
     a5e:	681b      	ldr	r3, [r3, #0]
     a60:	685a      	ldr	r2, [r3, #4]
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	429a      	cmp	r2, r3
     a66:	d3f6      	bcc.n	a56 <pvPortMalloc+0x106>
     a68:	69bb      	ldr	r3, [r7, #24]
     a6a:	681a      	ldr	r2, [r3, #0]
     a6c:	693b      	ldr	r3, [r7, #16]
     a6e:	601a      	str	r2, [r3, #0]
     a70:	69bb      	ldr	r3, [r7, #24]
     a72:	693a      	ldr	r2, [r7, #16]
     a74:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <pvPortMalloc+0x158>)
     a78:	681a      	ldr	r2, [r3, #0]
     a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a7c:	685b      	ldr	r3, [r3, #4]
     a7e:	1ad2      	subs	r2, r2, r3
     a80:	4b09      	ldr	r3, [pc, #36]	; (aa8 <pvPortMalloc+0x158>)
     a82:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
     a84:	f001 fa8e 	bl	1fa4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     a88:	69fb      	ldr	r3, [r7, #28]
}
     a8a:	4618      	mov	r0, r3
     a8c:	f107 0728 	add.w	r7, r7, #40	; 0x28
     a90:	46bd      	mov	sp, r7
     a92:	bd80      	pop	{r7, pc}
     a94:	10004c28 	.word	0x10004c28
     a98:	10000018 	.word	0x10000018
     a9c:	10004c18 	.word	0x10004c18
     aa0:	10004c20 	.word	0x10004c20
     aa4:	00003248 	.word	0x00003248
     aa8:	10000000 	.word	0x10000000

00000aac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     aac:	b580      	push	{r7, lr}
     aae:	b086      	sub	sp, #24
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	2b00      	cmp	r3, #0
     abc:	d029      	beq.n	b12 <vPortFree+0x66>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     abe:	4b17      	ldr	r3, [pc, #92]	; (b1c <vPortFree+0x70>)
     ac0:	881b      	ldrh	r3, [r3, #0]
     ac2:	f1c3 0300 	rsb	r3, r3, #0
     ac6:	693a      	ldr	r2, [r7, #16]
     ac8:	18d3      	adds	r3, r2, r3
     aca:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
     acc:	693b      	ldr	r3, [r7, #16]
     ace:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
     ad0:	f001 fa5a 	bl	1f88 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	685b      	ldr	r3, [r3, #4]
     ad8:	60bb      	str	r3, [r7, #8]
     ada:	4b11      	ldr	r3, [pc, #68]	; (b20 <vPortFree+0x74>)
     adc:	617b      	str	r3, [r7, #20]
     ade:	e002      	b.n	ae6 <vPortFree+0x3a>
     ae0:	697b      	ldr	r3, [r7, #20]
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	617b      	str	r3, [r7, #20]
     ae6:	697b      	ldr	r3, [r7, #20]
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	685a      	ldr	r2, [r3, #4]
     aec:	68bb      	ldr	r3, [r7, #8]
     aee:	429a      	cmp	r2, r3
     af0:	d3f6      	bcc.n	ae0 <vPortFree+0x34>
     af2:	697b      	ldr	r3, [r7, #20]
     af4:	681a      	ldr	r2, [r3, #0]
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	601a      	str	r2, [r3, #0]
     afa:	697b      	ldr	r3, [r7, #20]
     afc:	68fa      	ldr	r2, [r7, #12]
     afe:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	685a      	ldr	r2, [r3, #4]
     b04:	4b07      	ldr	r3, [pc, #28]	; (b24 <vPortFree+0x78>)
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	18d2      	adds	r2, r2, r3
     b0a:	4b06      	ldr	r3, [pc, #24]	; (b24 <vPortFree+0x78>)
     b0c:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
     b0e:	f001 fa49 	bl	1fa4 <xTaskResumeAll>
	}
}
     b12:	f107 0718 	add.w	r7, r7, #24
     b16:	46bd      	mov	sp, r7
     b18:	bd80      	pop	{r7, pc}
     b1a:	bf00      	nop
     b1c:	00003248 	.word	0x00003248
     b20:	10004c18 	.word	0x10004c18
     b24:	10000000 	.word	0x10000000

00000b28 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     b28:	b480      	push	{r7}
     b2a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
     b2c:	4b02      	ldr	r3, [pc, #8]	; (b38 <xPortGetFreeHeapSize+0x10>)
     b2e:	681b      	ldr	r3, [r3, #0]
}
     b30:	4618      	mov	r0, r3
     b32:	46bd      	mov	sp, r7
     b34:	bc80      	pop	{r7}
     b36:	4770      	bx	lr
     b38:	10000000 	.word	0x10000000

00000b3c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     b3c:	b480      	push	{r7}
     b3e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
     b40:	46bd      	mov	sp, r7
     b42:	bc80      	pop	{r7}
     b44:	4770      	bx	lr
     b46:	bf00      	nop

00000b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     b48:	b480      	push	{r7}
     b4a:	b085      	sub	sp, #20
     b4c:	af00      	add	r7, sp, #0
     b4e:	60f8      	str	r0, [r7, #12]
     b50:	60b9      	str	r1, [r7, #8]
     b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	f1a3 0304 	sub.w	r3, r3, #4
     b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b62:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     b64:	68fb      	ldr	r3, [r7, #12]
     b66:	f1a3 0304 	sub.w	r3, r3, #4
     b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
     b6c:	68ba      	ldr	r2, [r7, #8]
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     b72:	68fb      	ldr	r3, [r7, #12]
     b74:	f1a3 0304 	sub.w	r3, r3, #4
     b78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
     b7a:	68fb      	ldr	r3, [r7, #12]
     b7c:	f04f 0200 	mov.w	r2, #0
     b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	f1a3 0314 	sub.w	r3, r3, #20
     b88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
     b8a:	687a      	ldr	r2, [r7, #4]
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	f1a3 0320 	sub.w	r3, r3, #32
     b96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     b98:	68fb      	ldr	r3, [r7, #12]
}
     b9a:	4618      	mov	r0, r3
     b9c:	f107 0714 	add.w	r7, r7, #20
     ba0:	46bd      	mov	sp, r7
     ba2:	bc80      	pop	{r7}
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop

00000ba8 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <pxCurrentTCBConst2>)
     baa:	6819      	ldr	r1, [r3, #0]
     bac:	6808      	ldr	r0, [r1, #0]
     bae:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     bb2:	f380 8809 	msr	PSP, r0
     bb6:	f04f 0000 	mov.w	r0, #0
     bba:	f380 8811 	msr	BASEPRI, r0
     bbe:	f04e 0e0d 	orr.w	lr, lr, #13
     bc2:	4770      	bx	lr

00000bc4 <pxCurrentTCBConst2>:
     bc4:	10004c30 	.word	0x10004c30

00000bc8 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
     bc8:	4854      	ldr	r0, [pc, #336]	; (d1c <prvSetupTimerInterrupt+0x24>)
     bca:	6800      	ldr	r0, [r0, #0]
     bcc:	6800      	ldr	r0, [r0, #0]
     bce:	f380 8808 	msr	MSP, r0
     bd2:	b662      	cpsie	i
     bd4:	df00      	svc	0
     bd6:	bf00      	nop

00000bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
     bd8:	b580      	push	{r7, lr}
     bda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     bdc:	4b0b      	ldr	r3, [pc, #44]	; (c0c <xPortStartScheduler+0x34>)
     bde:	4a0b      	ldr	r2, [pc, #44]	; (c0c <xPortStartScheduler+0x34>)
     be0:	6812      	ldr	r2, [r2, #0]
     be2:	f442 0278 	orr.w	r2, r2, #16252928	; 0xf80000
     be6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     be8:	4b08      	ldr	r3, [pc, #32]	; (c0c <xPortStartScheduler+0x34>)
     bea:	4a08      	ldr	r2, [pc, #32]	; (c0c <xPortStartScheduler+0x34>)
     bec:	6812      	ldr	r2, [r2, #0]
     bee:	f042 4278 	orr.w	r2, r2, #4160749568	; 0xf8000000
     bf2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     bf4:	f000 f880 	bl	cf8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     bf8:	4b05      	ldr	r3, [pc, #20]	; (c10 <xPortStartScheduler+0x38>)
     bfa:	f04f 0200 	mov.w	r2, #0
     bfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     c00:	f7ff ffe2 	bl	bc8 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
     c04:	f04f 0300 	mov.w	r3, #0
}
     c08:	4618      	mov	r0, r3
     c0a:	bd80      	pop	{r7, pc}
     c0c:	e000ed20 	.word	0xe000ed20
     c10:	10000004 	.word	0x10000004

00000c14 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c14:	b480      	push	{r7}
     c16:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
     c18:	46bd      	mov	sp, r7
     c1a:	bc80      	pop	{r7}
     c1c:	4770      	bx	lr
     c1e:	bf00      	nop

00000c20 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
     c20:	b480      	push	{r7}
     c22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     c24:	4b03      	ldr	r3, [pc, #12]	; (c34 <vPortYieldFromISR+0x14>)
     c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     c2a:	601a      	str	r2, [r3, #0]
}
     c2c:	46bd      	mov	sp, r7
     c2e:	bc80      	pop	{r7}
     c30:	4770      	bx	lr
     c32:	bf00      	nop
     c34:	e000ed04 	.word	0xe000ed04

00000c38 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     c38:	b480      	push	{r7}
     c3a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
     c3c:	f04f 0028 	mov.w	r0, #40	; 0x28
     c40:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
     c44:	4b04      	ldr	r3, [pc, #16]	; (c58 <vPortEnterCritical+0x20>)
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	f103 0201 	add.w	r2, r3, #1
     c4c:	4b02      	ldr	r3, [pc, #8]	; (c58 <vPortEnterCritical+0x20>)
     c4e:	601a      	str	r2, [r3, #0]
}
     c50:	46bd      	mov	sp, r7
     c52:	bc80      	pop	{r7}
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	10000004 	.word	0x10000004

00000c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     c5c:	b480      	push	{r7}
     c5e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
     c60:	4b08      	ldr	r3, [pc, #32]	; (c84 <vPortExitCritical+0x28>)
     c62:	681b      	ldr	r3, [r3, #0]
     c64:	f103 32ff 	add.w	r2, r3, #4294967295
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <vPortExitCritical+0x28>)
     c6a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
     c6c:	4b05      	ldr	r3, [pc, #20]	; (c84 <vPortExitCritical+0x28>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	2b00      	cmp	r3, #0
     c72:	d103      	bne.n	c7c <vPortExitCritical+0x20>
	{
		portENABLE_INTERRUPTS();
     c74:	f04f 0000 	mov.w	r0, #0
     c78:	f380 8811 	msr	BASEPRI, r0
	}
}
     c7c:	46bd      	mov	sp, r7
     c7e:	bc80      	pop	{r7}
     c80:	4770      	bx	lr
     c82:	bf00      	nop
     c84:	10000004 	.word	0x10000004

00000c88 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     c88:	f3ef 8009 	mrs	r0, PSP
     c8c:	4b0c      	ldr	r3, [pc, #48]	; (cc0 <pxCurrentTCBConst>)
     c8e:	681a      	ldr	r2, [r3, #0]
     c90:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     c94:	6010      	str	r0, [r2, #0]
     c96:	e92d 4008 	stmdb	sp!, {r3, lr}
     c9a:	f04f 0028 	mov.w	r0, #40	; 0x28
     c9e:	f380 8811 	msr	BASEPRI, r0
     ca2:	f001 fbeb 	bl	247c <vTaskSwitchContext>
     ca6:	f04f 0000 	mov.w	r0, #0
     caa:	f380 8811 	msr	BASEPRI, r0
     cae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     cb2:	6819      	ldr	r1, [r3, #0]
     cb4:	6808      	ldr	r0, [r1, #0]
     cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     cba:	f380 8809 	msr	PSP, r0
     cbe:	4770      	bx	lr

00000cc0 <pxCurrentTCBConst>:
     cc0:	10004c30 	.word	0x10004c30

00000cc4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     cc4:	b580      	push	{r7, lr}
     cc6:	b082      	sub	sp, #8
     cc8:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     cca:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <xPortSysTickHandler+0x30>)
     ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     cd0:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     cd2:	f04f 0300 	mov.w	r3, #0
     cd6:	607b      	str	r3, [r7, #4]
     cd8:	f04f 0028 	mov.w	r0, #40	; 0x28
     cdc:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
     ce0:	f001 fb2c 	bl	233c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     ce4:	f04f 0000 	mov.w	r0, #0
     ce8:	f380 8811 	msr	BASEPRI, r0
}
     cec:	f107 0708 	add.w	r7, r7, #8
     cf0:	46bd      	mov	sp, r7
     cf2:	bd80      	pop	{r7, pc}
     cf4:	e000ed04 	.word	0xe000ed04

00000cf8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     cf8:	b480      	push	{r7}
     cfa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <prvSetupTimerInterrupt+0x18>)
     cfe:	4a05      	ldr	r2, [pc, #20]	; (d14 <prvSetupTimerInterrupt+0x1c>)
     d00:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     d02:	4b05      	ldr	r3, [pc, #20]	; (d18 <prvSetupTimerInterrupt+0x20>)
     d04:	f04f 0207 	mov.w	r2, #7
     d08:	601a      	str	r2, [r3, #0]
}
     d0a:	46bd      	mov	sp, r7
     d0c:	bc80      	pop	{r7}
     d0e:	4770      	bx	lr
     d10:	e000e014 	.word	0xe000e014
     d14:	000182b7 	.word	0x000182b7
     d18:	e000e010 	.word	0xe000e010
     d1c:	e000ed08 	.word	0xe000ed08

00000d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     d20:	b480      	push	{r7}
     d22:	b083      	sub	sp, #12
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	f103 0308 	add.w	r3, r3, #8
     d2e:	461a      	mov	r2, r3
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	f04f 32ff 	mov.w	r2, #4294967295
     d3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	f103 0308 	add.w	r3, r3, #8
     d42:	461a      	mov	r2, r3
     d44:	687b      	ldr	r3, [r7, #4]
     d46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	f103 0308 	add.w	r3, r3, #8
     d4e:	461a      	mov	r2, r3
     d50:	687b      	ldr	r3, [r7, #4]
     d52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     d54:	687b      	ldr	r3, [r7, #4]
     d56:	f04f 0200 	mov.w	r2, #0
     d5a:	601a      	str	r2, [r3, #0]
}
     d5c:	f107 070c 	add.w	r7, r7, #12
     d60:	46bd      	mov	sp, r7
     d62:	bc80      	pop	{r7}
     d64:	4770      	bx	lr
     d66:	bf00      	nop

00000d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     d68:	b480      	push	{r7}
     d6a:	b083      	sub	sp, #12
     d6c:	af00      	add	r7, sp, #0
     d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	f04f 0200 	mov.w	r2, #0
     d76:	611a      	str	r2, [r3, #16]
}
     d78:	f107 070c 	add.w	r7, r7, #12
     d7c:	46bd      	mov	sp, r7
     d7e:	bc80      	pop	{r7}
     d80:	4770      	bx	lr
     d82:	bf00      	nop

00000d84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     d84:	b480      	push	{r7}
     d86:	b085      	sub	sp, #20
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
     d8c:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	685b      	ldr	r3, [r3, #4]
     d92:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
     d94:	68fb      	ldr	r3, [r7, #12]
     d96:	685a      	ldr	r2, [r3, #4]
     d98:	683b      	ldr	r3, [r7, #0]
     d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	685a      	ldr	r2, [r3, #4]
     da0:	683b      	ldr	r3, [r7, #0]
     da2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	685b      	ldr	r3, [r3, #4]
     da8:	683a      	ldr	r2, [r7, #0]
     daa:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     dac:	683a      	ldr	r2, [r7, #0]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     db2:	683a      	ldr	r2, [r7, #0]
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     db8:	683b      	ldr	r3, [r7, #0]
     dba:	687a      	ldr	r2, [r7, #4]
     dbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     dbe:	687b      	ldr	r3, [r7, #4]
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	f103 0201 	add.w	r2, r3, #1
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	601a      	str	r2, [r3, #0]
}
     dca:	f107 0714 	add.w	r7, r7, #20
     dce:	46bd      	mov	sp, r7
     dd0:	bc80      	pop	{r7}
     dd2:	4770      	bx	lr

00000dd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     dd4:	b480      	push	{r7}
     dd6:	b085      	sub	sp, #20
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
     ddc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     dde:	683b      	ldr	r3, [r7, #0]
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     de4:	68bb      	ldr	r3, [r7, #8]
     de6:	f1b3 3fff 	cmp.w	r3, #4294967295
     dea:	d103      	bne.n	df4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     dec:	687b      	ldr	r3, [r7, #4]
     dee:	691b      	ldr	r3, [r3, #16]
     df0:	60fb      	str	r3, [r7, #12]
     df2:	e00d      	b.n	e10 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	f103 0308 	add.w	r3, r3, #8
     dfa:	60fb      	str	r3, [r7, #12]
     dfc:	e002      	b.n	e04 <vListInsert+0x30>
     dfe:	68fb      	ldr	r3, [r7, #12]
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	60fb      	str	r3, [r7, #12]
     e04:	68fb      	ldr	r3, [r7, #12]
     e06:	685b      	ldr	r3, [r3, #4]
     e08:	681a      	ldr	r2, [r3, #0]
     e0a:	68bb      	ldr	r3, [r7, #8]
     e0c:	429a      	cmp	r2, r3
     e0e:	d9f6      	bls.n	dfe <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e10:	68fb      	ldr	r3, [r7, #12]
     e12:	685a      	ldr	r2, [r3, #4]
     e14:	683b      	ldr	r3, [r7, #0]
     e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     e18:	683b      	ldr	r3, [r7, #0]
     e1a:	685b      	ldr	r3, [r3, #4]
     e1c:	683a      	ldr	r2, [r7, #0]
     e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     e20:	683b      	ldr	r3, [r7, #0]
     e22:	68fa      	ldr	r2, [r7, #12]
     e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     e26:	683a      	ldr	r2, [r7, #0]
     e28:	68fb      	ldr	r3, [r7, #12]
     e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e2c:	683b      	ldr	r3, [r7, #0]
     e2e:	687a      	ldr	r2, [r7, #4]
     e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	f103 0201 	add.w	r2, r3, #1
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	601a      	str	r2, [r3, #0]
}
     e3e:	f107 0714 	add.w	r7, r7, #20
     e42:	46bd      	mov	sp, r7
     e44:	bc80      	pop	{r7}
     e46:	4770      	bx	lr

00000e48 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     e48:	b480      	push	{r7}
     e4a:	b085      	sub	sp, #20
     e4c:	af00      	add	r7, sp, #0
     e4e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	685b      	ldr	r3, [r3, #4]
     e54:	687a      	ldr	r2, [r7, #4]
     e56:	6892      	ldr	r2, [r2, #8]
     e58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	689b      	ldr	r3, [r3, #8]
     e5e:	687a      	ldr	r2, [r7, #4]
     e60:	6852      	ldr	r2, [r2, #4]
     e62:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	691b      	ldr	r3, [r3, #16]
     e68:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	685a      	ldr	r2, [r3, #4]
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	429a      	cmp	r2, r3
     e72:	d103      	bne.n	e7c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	689a      	ldr	r2, [r3, #8]
     e78:	68fb      	ldr	r3, [r7, #12]
     e7a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	f04f 0200 	mov.w	r2, #0
     e82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     e84:	68fb      	ldr	r3, [r7, #12]
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	f103 32ff 	add.w	r2, r3, #4294967295
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	601a      	str	r2, [r3, #0]
}
     e90:	f107 0714 	add.w	r7, r7, #20
     e94:	46bd      	mov	sp, r7
     e96:	bc80      	pop	{r7}
     e98:	4770      	bx	lr
     e9a:	bf00      	nop

00000e9c <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     e9c:	b580      	push	{r7, lr}
     e9e:	b088      	sub	sp, #32
     ea0:	af00      	add	r7, sp, #0
     ea2:	60f8      	str	r0, [r7, #12]
     ea4:	60b9      	str	r1, [r7, #8]
     ea6:	4613      	mov	r3, r2
     ea8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
     eaa:	f04f 0300 	mov.w	r3, #0
     eae:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     eb0:	68fb      	ldr	r3, [r7, #12]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d05a      	beq.n	f6c <xQueueGenericCreate+0xd0>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     eb6:	f04f 0050 	mov.w	r0, #80	; 0x50
     eba:	f7ff fd49 	bl	950 <pvPortMalloc>
     ebe:	4603      	mov	r3, r0
     ec0:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
     ec2:	69bb      	ldr	r3, [r7, #24]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d051      	beq.n	f6c <xQueueGenericCreate+0xd0>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	68ba      	ldr	r2, [r7, #8]
     ecc:	fb02 f303 	mul.w	r3, r2, r3
     ed0:	f103 0301 	add.w	r3, r3, #1
     ed4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     ed6:	6978      	ldr	r0, [r7, #20]
     ed8:	f7ff fd3a 	bl	950 <pvPortMalloc>
     edc:	4603      	mov	r3, r0
     ede:	461a      	mov	r2, r3
     ee0:	69bb      	ldr	r3, [r7, #24]
     ee2:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
     ee4:	69bb      	ldr	r3, [r7, #24]
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d03c      	beq.n	f66 <xQueueGenericCreate+0xca>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
     eec:	69bb      	ldr	r3, [r7, #24]
     eee:	681a      	ldr	r2, [r3, #0]
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	68b9      	ldr	r1, [r7, #8]
     ef4:	fb01 f303 	mul.w	r3, r1, r3
     ef8:	18d2      	adds	r2, r2, r3
     efa:	69bb      	ldr	r3, [r7, #24]
     efc:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     efe:	69bb      	ldr	r3, [r7, #24]
     f00:	f04f 0200 	mov.w	r2, #0
     f04:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
     f06:	69bb      	ldr	r3, [r7, #24]
     f08:	681a      	ldr	r2, [r3, #0]
     f0a:	69bb      	ldr	r3, [r7, #24]
     f0c:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
     f0e:	69bb      	ldr	r3, [r7, #24]
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	f103 33ff 	add.w	r3, r3, #4294967295
     f18:	68b9      	ldr	r1, [r7, #8]
     f1a:	fb01 f303 	mul.w	r3, r1, r3
     f1e:	18d2      	adds	r2, r2, r3
     f20:	69bb      	ldr	r3, [r7, #24]
     f22:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
     f24:	69bb      	ldr	r3, [r7, #24]
     f26:	68fa      	ldr	r2, [r7, #12]
     f28:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     f2a:	69bb      	ldr	r3, [r7, #24]
     f2c:	68ba      	ldr	r2, [r7, #8]
     f2e:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
     f30:	69bb      	ldr	r3, [r7, #24]
     f32:	f04f 32ff 	mov.w	r2, #4294967295
     f36:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
     f38:	69bb      	ldr	r3, [r7, #24]
     f3a:	f04f 32ff 	mov.w	r2, #4294967295
     f3e:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
     f40:	69bb      	ldr	r3, [r7, #24]
     f42:	79fa      	ldrb	r2, [r7, #7]
     f44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     f48:	69bb      	ldr	r3, [r7, #24]
     f4a:	f103 0310 	add.w	r3, r3, #16
     f4e:	4618      	mov	r0, r3
     f50:	f7ff fee6 	bl	d20 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     f54:	69bb      	ldr	r3, [r7, #24]
     f56:	f103 0324 	add.w	r3, r3, #36	; 0x24
     f5a:	4618      	mov	r0, r3
     f5c:	f7ff fee0 	bl	d20 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
     f60:	69bb      	ldr	r3, [r7, #24]
     f62:	61fb      	str	r3, [r7, #28]
     f64:	e002      	b.n	f6c <xQueueGenericCreate+0xd0>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     f66:	69b8      	ldr	r0, [r7, #24]
     f68:	f7ff fda0 	bl	aac <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
     f6c:	69fb      	ldr	r3, [r7, #28]
}
     f6e:	4618      	mov	r0, r3
     f70:	f107 0720 	add.w	r7, r7, #32
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}

00000f78 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
     f78:	b580      	push	{r7, lr}
     f7a:	b084      	sub	sp, #16
     f7c:	af00      	add	r7, sp, #0
     f7e:	4603      	mov	r3, r0
     f80:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;
	
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     f82:	f04f 0050 	mov.w	r0, #80	; 0x50
     f86:	f7ff fce3 	bl	950 <pvPortMalloc>
     f8a:	4603      	mov	r3, r0
     f8c:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	2b00      	cmp	r3, #0
     f92:	d03c      	beq.n	100e <xQueueCreateMutex+0x96>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     f94:	68fb      	ldr	r3, [r7, #12]
     f96:	f04f 0200 	mov.w	r2, #0
     f9a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     f9c:	68fb      	ldr	r3, [r7, #12]
     f9e:	f04f 0200 	mov.w	r2, #0
     fa2:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     fa4:	68fb      	ldr	r3, [r7, #12]
     fa6:	f04f 0200 	mov.w	r2, #0
     faa:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	f04f 0200 	mov.w	r2, #0
     fb2:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     fb4:	68fb      	ldr	r3, [r7, #12]
     fb6:	f04f 0200 	mov.w	r2, #0
     fba:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	f04f 0201 	mov.w	r2, #1
     fc2:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	f04f 0200 	mov.w	r2, #0
     fca:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
     fcc:	68fb      	ldr	r3, [r7, #12]
     fce:	f04f 32ff 	mov.w	r2, #4294967295
     fd2:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
     fd4:	68fb      	ldr	r3, [r7, #12]
     fd6:	f04f 32ff 	mov.w	r2, #4294967295
     fda:	649a      	str	r2, [r3, #72]	; 0x48
			
			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
     fdc:	68fb      	ldr	r3, [r7, #12]
     fde:	79fa      	ldrb	r2, [r7, #7]
     fe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     fe4:	68fb      	ldr	r3, [r7, #12]
     fe6:	f103 0310 	add.w	r3, r3, #16
     fea:	4618      	mov	r0, r3
     fec:	f7ff fe98 	bl	d20 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     ff0:	68fb      	ldr	r3, [r7, #12]
     ff2:	f103 0324 	add.w	r3, r3, #36	; 0x24
     ff6:	4618      	mov	r0, r3
     ff8:	f7ff fe92 	bl	d20 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
     ffc:	68f8      	ldr	r0, [r7, #12]
     ffe:	f04f 0100 	mov.w	r1, #0
    1002:	f04f 0200 	mov.w	r2, #0
    1006:	f04f 0300 	mov.w	r3, #0
    100a:	f000 f861 	bl	10d0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    100e:	68fb      	ldr	r3, [r7, #12]
	}
    1010:	4618      	mov	r0, r3
    1012:	f107 0710 	add.w	r7, r7, #16
    1016:	46bd      	mov	sp, r7
    1018:	bd80      	pop	{r7, pc}
    101a:	bf00      	nop

0000101c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
	{
    101c:	b590      	push	{r4, r7, lr}
    101e:	b085      	sub	sp, #20
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	685c      	ldr	r4, [r3, #4]
    1028:	f001 fe38 	bl	2c9c <xTaskGetCurrentTaskHandle>
    102c:	4603      	mov	r3, r0
    102e:	429c      	cmp	r4, r3
    1030:	d116      	bne.n	1060 <xQueueGiveMutexRecursive+0x44>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->uxRecursiveCallCount )--;
    1032:	687b      	ldr	r3, [r7, #4]
    1034:	68db      	ldr	r3, [r3, #12]
    1036:	f103 32ff 	add.w	r2, r3, #4294967295
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->uxRecursiveCallCount == 0 )
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	68db      	ldr	r3, [r3, #12]
    1042:	2b00      	cmp	r3, #0
    1044:	d108      	bne.n	1058 <xQueueGiveMutexRecursive+0x3c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    1046:	6878      	ldr	r0, [r7, #4]
    1048:	f04f 0100 	mov.w	r1, #0
    104c:	f04f 0200 	mov.w	r2, #0
    1050:	f04f 0300 	mov.w	r3, #0
    1054:	f000 f83c 	bl	10d0 <xQueueGenericSend>
			}

			xReturn = pdPASS;
    1058:	f04f 0301 	mov.w	r3, #1
    105c:	60fb      	str	r3, [r7, #12]
    105e:	e002      	b.n	1066 <xQueueGiveMutexRecursive+0x4a>
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
    1060:	f04f 0300 	mov.w	r3, #0
    1064:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    1066:	68fb      	ldr	r3, [r7, #12]
	}
    1068:	4618      	mov	r0, r3
    106a:	f107 0714 	add.w	r7, r7, #20
    106e:	46bd      	mov	sp, r7
    1070:	bd90      	pop	{r4, r7, pc}
    1072:	bf00      	nop

00001074 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
	{
    1074:	b590      	push	{r4, r7, lr}
    1076:	b085      	sub	sp, #20
    1078:	af00      	add	r7, sp, #0
    107a:	6078      	str	r0, [r7, #4]
    107c:	6039      	str	r1, [r7, #0]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	685c      	ldr	r4, [r3, #4]
    1082:	f001 fe0b 	bl	2c9c <xTaskGetCurrentTaskHandle>
    1086:	4603      	mov	r3, r0
    1088:	429c      	cmp	r4, r3
    108a:	d109      	bne.n	10a0 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->uxRecursiveCallCount )++;
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	68db      	ldr	r3, [r3, #12]
    1090:	f103 0201 	add.w	r2, r3, #1
    1094:	687b      	ldr	r3, [r7, #4]
    1096:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
    1098:	f04f 0301 	mov.w	r3, #1
    109c:	60fb      	str	r3, [r7, #12]
    109e:	e011      	b.n	10c4 <xQueueTakeMutexRecursive+0x50>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
    10a0:	6878      	ldr	r0, [r7, #4]
    10a2:	f04f 0100 	mov.w	r1, #0
    10a6:	683a      	ldr	r2, [r7, #0]
    10a8:	f04f 0300 	mov.w	r3, #0
    10ac:	f000 f8e8 	bl	1280 <xQueueGenericReceive>
    10b0:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d105      	bne.n	10c4 <xQueueTakeMutexRecursive+0x50>
			{
				( pxMutex->uxRecursiveCallCount )++;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	68db      	ldr	r3, [r3, #12]
    10bc:	f103 0201 	add.w	r2, r3, #1
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    10c4:	68fb      	ldr	r3, [r7, #12]
	}
    10c6:	4618      	mov	r0, r3
    10c8:	f107 0714 	add.w	r7, r7, #20
    10cc:	46bd      	mov	sp, r7
    10ce:	bd90      	pop	{r4, r7, pc}

000010d0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    10d0:	b580      	push	{r7, lr}
    10d2:	b088      	sub	sp, #32
    10d4:	af00      	add	r7, sp, #0
    10d6:	60f8      	str	r0, [r7, #12]
    10d8:	60b9      	str	r1, [r7, #8]
    10da:	607a      	str	r2, [r7, #4]
    10dc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    10de:	f04f 0300 	mov.w	r3, #0
    10e2:	61fb      	str	r3, [r7, #28]
    10e4:	e000      	b.n	10e8 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    10e6:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    10e8:	f7ff fda6 	bl	c38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    10f0:	68fb      	ldr	r3, [r7, #12]
    10f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    10f4:	429a      	cmp	r2, r3
    10f6:	d218      	bcs.n	112a <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    10f8:	68f8      	ldr	r0, [r7, #12]
    10fa:	68b9      	ldr	r1, [r7, #8]
    10fc:	683a      	ldr	r2, [r7, #0]
    10fe:	f000 fa2d 	bl	155c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1106:	2b00      	cmp	r3, #0
    1108:	d00a      	beq.n	1120 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    110a:	68fb      	ldr	r3, [r7, #12]
    110c:	f103 0324 	add.w	r3, r3, #36	; 0x24
    1110:	4618      	mov	r0, r3
    1112:	f001 fa79 	bl	2608 <xTaskRemoveFromEventList>
    1116:	4603      	mov	r3, r0
    1118:	2b01      	cmp	r3, #1
    111a:	d101      	bne.n	1120 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    111c:	f7ff fd80 	bl	c20 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    1120:	f7ff fd9c 	bl	c5c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1124:	f04f 0301 	mov.w	r3, #1
    1128:	e05d      	b.n	11e6 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	2b00      	cmp	r3, #0
    112e:	d104      	bne.n	113a <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1130:	f7ff fd94 	bl	c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1134:	f04f 0300 	mov.w	r3, #0
    1138:	e055      	b.n	11e6 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    113a:	69fb      	ldr	r3, [r7, #28]
    113c:	2b00      	cmp	r3, #0
    113e:	d107      	bne.n	1150 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1140:	f107 0314 	add.w	r3, r7, #20
    1144:	4618      	mov	r0, r3
    1146:	f001 fab9 	bl	26bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    114a:	f04f 0301 	mov.w	r3, #1
    114e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    1150:	f7ff fd84 	bl	c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1154:	f000 ff18 	bl	1f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1158:	f7ff fd6e 	bl	c38 <vPortEnterCritical>
    115c:	68fb      	ldr	r3, [r7, #12]
    115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1160:	f1b3 3fff 	cmp.w	r3, #4294967295
    1164:	d103      	bne.n	116e <xQueueGenericSend+0x9e>
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	f04f 0200 	mov.w	r2, #0
    116c:	645a      	str	r2, [r3, #68]	; 0x44
    116e:	68fb      	ldr	r3, [r7, #12]
    1170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1172:	f1b3 3fff 	cmp.w	r3, #4294967295
    1176:	d103      	bne.n	1180 <xQueueGenericSend+0xb0>
    1178:	68fb      	ldr	r3, [r7, #12]
    117a:	f04f 0200 	mov.w	r2, #0
    117e:	649a      	str	r2, [r3, #72]	; 0x48
    1180:	f7ff fd6c 	bl	c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1184:	f107 0214 	add.w	r2, r7, #20
    1188:	f107 0304 	add.w	r3, r7, #4
    118c:	4610      	mov	r0, r2
    118e:	4619      	mov	r1, r3
    1190:	f001 faaa 	bl	26e8 <xTaskCheckForTimeOut>
    1194:	4603      	mov	r3, r0
    1196:	2b00      	cmp	r3, #0
    1198:	d11e      	bne.n	11d8 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    119a:	68f8      	ldr	r0, [r7, #12]
    119c:	f000 fae0 	bl	1760 <prvIsQueueFull>
    11a0:	4603      	mov	r3, r0
    11a2:	2b00      	cmp	r3, #0
    11a4:	d012      	beq.n	11cc <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	f103 0210 	add.w	r2, r3, #16
    11ac:	687b      	ldr	r3, [r7, #4]
    11ae:	4610      	mov	r0, r2
    11b0:	4619      	mov	r1, r3
    11b2:	f001 f9f5 	bl	25a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    11b6:	68f8      	ldr	r0, [r7, #12]
    11b8:	f000 fa5a 	bl	1670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    11bc:	f000 fef2 	bl	1fa4 <xTaskResumeAll>
    11c0:	4603      	mov	r3, r0
    11c2:	2b00      	cmp	r3, #0
    11c4:	d18f      	bne.n	10e6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    11c6:	f7ff fd2b 	bl	c20 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    11ca:	e78d      	b.n	10e8 <xQueueGenericSend+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11cc:	68f8      	ldr	r0, [r7, #12]
    11ce:	f000 fa4f 	bl	1670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11d2:	f000 fee7 	bl	1fa4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    11d6:	e787      	b.n	10e8 <xQueueGenericSend+0x18>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    11d8:	68f8      	ldr	r0, [r7, #12]
    11da:	f000 fa49 	bl	1670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11de:	f000 fee1 	bl	1fa4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    11e2:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    11e6:	4618      	mov	r0, r3
    11e8:	f107 0720 	add.w	r7, r7, #32
    11ec:	46bd      	mov	sp, r7
    11ee:	bd80      	pop	{r7, pc}

000011f0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    11f0:	b580      	push	{r7, lr}
    11f2:	b086      	sub	sp, #24
    11f4:	af00      	add	r7, sp, #0
    11f6:	60f8      	str	r0, [r7, #12]
    11f8:	60b9      	str	r1, [r7, #8]
    11fa:	607a      	str	r2, [r7, #4]
    11fc:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    11fe:	f04f 0300 	mov.w	r3, #0
    1202:	613b      	str	r3, [r7, #16]
    1204:	f04f 0028 	mov.w	r0, #40	; 0x28
    1208:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    120c:	68fb      	ldr	r3, [r7, #12]
    120e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1214:	429a      	cmp	r2, r3
    1216:	d225      	bcs.n	1264 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1218:	68f8      	ldr	r0, [r7, #12]
    121a:	68b9      	ldr	r1, [r7, #8]
    121c:	683a      	ldr	r2, [r7, #0]
    121e:	f000 f99d 	bl	155c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1226:	f1b3 3fff 	cmp.w	r3, #4294967295
    122a:	d111      	bne.n	1250 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1230:	2b00      	cmp	r3, #0
    1232:	d013      	beq.n	125c <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	f103 0324 	add.w	r3, r3, #36	; 0x24
    123a:	4618      	mov	r0, r3
    123c:	f001 f9e4 	bl	2608 <xTaskRemoveFromEventList>
    1240:	4603      	mov	r3, r0
    1242:	2b00      	cmp	r3, #0
    1244:	d00a      	beq.n	125c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	f04f 0201 	mov.w	r2, #1
    124c:	601a      	str	r2, [r3, #0]
    124e:	e005      	b.n	125c <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1254:	f103 0201 	add.w	r2, r3, #1
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    125c:	f04f 0301 	mov.w	r3, #1
    1260:	617b      	str	r3, [r7, #20]
    1262:	e002      	b.n	126a <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1264:	f04f 0300 	mov.w	r3, #0
    1268:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    126a:	f04f 0000 	mov.w	r0, #0
    126e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    1272:	697b      	ldr	r3, [r7, #20]
}
    1274:	4618      	mov	r0, r3
    1276:	f107 0718 	add.w	r7, r7, #24
    127a:	46bd      	mov	sp, r7
    127c:	bd80      	pop	{r7, pc}
    127e:	bf00      	nop

00001280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1280:	b580      	push	{r7, lr}
    1282:	b088      	sub	sp, #32
    1284:	af00      	add	r7, sp, #0
    1286:	60f8      	str	r0, [r7, #12]
    1288:	60b9      	str	r1, [r7, #8]
    128a:	607a      	str	r2, [r7, #4]
    128c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    128e:	f04f 0300 	mov.w	r3, #0
    1292:	61fb      	str	r3, [r7, #28]
    1294:	e000      	b.n	1298 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1296:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1298:	f7ff fcce 	bl	c38 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    12a0:	2b00      	cmp	r3, #0
    12a2:	d040      	beq.n	1326 <xQueueGenericReceive+0xa6>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    12aa:	68f8      	ldr	r0, [r7, #12]
    12ac:	68b9      	ldr	r1, [r7, #8]
    12ae:	f000 f9b7 	bl	1620 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    12b2:	683b      	ldr	r3, [r7, #0]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d11f      	bne.n	12f8 <xQueueGenericReceive+0x78>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    12bc:	f103 32ff 	add.w	r2, r3, #4294967295
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	681b      	ldr	r3, [r3, #0]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d105      	bne.n	12d8 <xQueueGenericReceive+0x58>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    12cc:	f001 fce6 	bl	2c9c <xTaskGetCurrentTaskHandle>
    12d0:	4603      	mov	r3, r0
    12d2:	461a      	mov	r2, r3
    12d4:	68fb      	ldr	r3, [r7, #12]
    12d6:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	691b      	ldr	r3, [r3, #16]
    12dc:	2b00      	cmp	r3, #0
    12de:	d01d      	beq.n	131c <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    12e0:	68fb      	ldr	r3, [r7, #12]
    12e2:	f103 0310 	add.w	r3, r3, #16
    12e6:	4618      	mov	r0, r3
    12e8:	f001 f98e 	bl	2608 <xTaskRemoveFromEventList>
    12ec:	4603      	mov	r3, r0
    12ee:	2b01      	cmp	r3, #1
    12f0:	d114      	bne.n	131c <xQueueGenericReceive+0x9c>
						{
							portYIELD_WITHIN_API();
    12f2:	f7ff fc95 	bl	c20 <vPortYieldFromISR>
    12f6:	e011      	b.n	131c <xQueueGenericReceive+0x9c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	69ba      	ldr	r2, [r7, #24]
    12fc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1302:	2b00      	cmp	r3, #0
    1304:	d00a      	beq.n	131c <xQueueGenericReceive+0x9c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	f103 0324 	add.w	r3, r3, #36	; 0x24
    130c:	4618      	mov	r0, r3
    130e:	f001 f97b 	bl	2608 <xTaskRemoveFromEventList>
    1312:	4603      	mov	r3, r0
    1314:	2b00      	cmp	r3, #0
    1316:	d001      	beq.n	131c <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1318:	f7ff fc82 	bl	c20 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    131c:	f7ff fc9e 	bl	c5c <vPortExitCritical>
				return pdPASS;
    1320:	f04f 0301 	mov.w	r3, #1
    1324:	e06b      	b.n	13fe <xQueueGenericReceive+0x17e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	2b00      	cmp	r3, #0
    132a:	d104      	bne.n	1336 <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    132c:	f7ff fc96 	bl	c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1330:	f04f 0300 	mov.w	r3, #0
    1334:	e063      	b.n	13fe <xQueueGenericReceive+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
    1336:	69fb      	ldr	r3, [r7, #28]
    1338:	2b00      	cmp	r3, #0
    133a:	d107      	bne.n	134c <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    133c:	f107 0310 	add.w	r3, r7, #16
    1340:	4618      	mov	r0, r3
    1342:	f001 f9bb 	bl	26bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1346:	f04f 0301 	mov.w	r3, #1
    134a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    134c:	f7ff fc86 	bl	c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1350:	f000 fe1a 	bl	1f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1354:	f7ff fc70 	bl	c38 <vPortEnterCritical>
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    135c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1360:	d103      	bne.n	136a <xQueueGenericReceive+0xea>
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	f04f 0200 	mov.w	r2, #0
    1368:	645a      	str	r2, [r3, #68]	; 0x44
    136a:	68fb      	ldr	r3, [r7, #12]
    136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    136e:	f1b3 3fff 	cmp.w	r3, #4294967295
    1372:	d103      	bne.n	137c <xQueueGenericReceive+0xfc>
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	f04f 0200 	mov.w	r2, #0
    137a:	649a      	str	r2, [r3, #72]	; 0x48
    137c:	f7ff fc6e 	bl	c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1380:	f107 0210 	add.w	r2, r7, #16
    1384:	f107 0304 	add.w	r3, r7, #4
    1388:	4610      	mov	r0, r2
    138a:	4619      	mov	r1, r3
    138c:	f001 f9ac 	bl	26e8 <xTaskCheckForTimeOut>
    1390:	4603      	mov	r3, r0
    1392:	2b00      	cmp	r3, #0
    1394:	d12c      	bne.n	13f0 <xQueueGenericReceive+0x170>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1396:	68f8      	ldr	r0, [r7, #12]
    1398:	f000 f9ba 	bl	1710 <prvIsQueueEmpty>
    139c:	4603      	mov	r3, r0
    139e:	2b00      	cmp	r3, #0
    13a0:	d020      	beq.n	13e4 <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d108      	bne.n	13bc <xQueueGenericReceive+0x13c>
					{
						portENTER_CRITICAL();
    13aa:	f7ff fc45 	bl	c38 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	685b      	ldr	r3, [r3, #4]
    13b2:	4618      	mov	r0, r3
    13b4:	f001 fc82 	bl	2cbc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    13b8:	f7ff fc50 	bl	c5c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	f103 0224 	add.w	r2, r3, #36	; 0x24
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	4610      	mov	r0, r2
    13c6:	4619      	mov	r1, r3
    13c8:	f001 f8ea 	bl	25a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    13cc:	68f8      	ldr	r0, [r7, #12]
    13ce:	f000 f94f 	bl	1670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    13d2:	f000 fde7 	bl	1fa4 <xTaskResumeAll>
    13d6:	4603      	mov	r3, r0
    13d8:	2b00      	cmp	r3, #0
    13da:	f47f af5c 	bne.w	1296 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    13de:	f7ff fc1f 	bl	c20 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    13e2:	e759      	b.n	1298 <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    13e4:	68f8      	ldr	r0, [r7, #12]
    13e6:	f000 f943 	bl	1670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    13ea:	f000 fddb 	bl	1fa4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    13ee:	e753      	b.n	1298 <xQueueGenericReceive+0x18>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    13f0:	68f8      	ldr	r0, [r7, #12]
    13f2:	f000 f93d 	bl	1670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    13f6:	f000 fdd5 	bl	1fa4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    13fa:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    13fe:	4618      	mov	r0, r3
    1400:	f107 0720 	add.w	r7, r7, #32
    1404:	46bd      	mov	sp, r7
    1406:	bd80      	pop	{r7, pc}

00001408 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1408:	b580      	push	{r7, lr}
    140a:	b086      	sub	sp, #24
    140c:	af00      	add	r7, sp, #0
    140e:	60f8      	str	r0, [r7, #12]
    1410:	60b9      	str	r1, [r7, #8]
    1412:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1414:	f04f 0300 	mov.w	r3, #0
    1418:	613b      	str	r3, [r7, #16]
    141a:	f04f 0028 	mov.w	r0, #40	; 0x28
    141e:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1426:	2b00      	cmp	r3, #0
    1428:	d02a      	beq.n	1480 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    142a:	68f8      	ldr	r0, [r7, #12]
    142c:	68b9      	ldr	r1, [r7, #8]
    142e:	f000 f8f7 	bl	1620 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1432:	68fb      	ldr	r3, [r7, #12]
    1434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1436:	f103 32ff 	add.w	r2, r3, #4294967295
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1442:	f1b3 3fff 	cmp.w	r3, #4294967295
    1446:	d111      	bne.n	146c <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1448:	68fb      	ldr	r3, [r7, #12]
    144a:	691b      	ldr	r3, [r3, #16]
    144c:	2b00      	cmp	r3, #0
    144e:	d013      	beq.n	1478 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	f103 0310 	add.w	r3, r3, #16
    1456:	4618      	mov	r0, r3
    1458:	f001 f8d6 	bl	2608 <xTaskRemoveFromEventList>
    145c:	4603      	mov	r3, r0
    145e:	2b00      	cmp	r3, #0
    1460:	d00a      	beq.n	1478 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	f04f 0201 	mov.w	r2, #1
    1468:	601a      	str	r2, [r3, #0]
    146a:	e005      	b.n	1478 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    146c:	68fb      	ldr	r3, [r7, #12]
    146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1470:	f103 0201 	add.w	r2, r3, #1
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    1478:	f04f 0301 	mov.w	r3, #1
    147c:	617b      	str	r3, [r7, #20]
    147e:	e002      	b.n	1486 <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    1480:	f04f 0300 	mov.w	r3, #0
    1484:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1486:	f04f 0000 	mov.w	r0, #0
    148a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    148e:	697b      	ldr	r3, [r7, #20]
}
    1490:	4618      	mov	r0, r3
    1492:	f107 0718 	add.w	r7, r7, #24
    1496:	46bd      	mov	sp, r7
    1498:	bd80      	pop	{r7, pc}
    149a:	bf00      	nop

0000149c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    149c:	b580      	push	{r7, lr}
    149e:	b084      	sub	sp, #16
    14a0:	af00      	add	r7, sp, #0
    14a2:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    14a4:	f7ff fbc8 	bl	c38 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    14ac:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    14ae:	f7ff fbd5 	bl	c5c <vPortExitCritical>

	return uxReturn;
    14b2:	68fb      	ldr	r3, [r7, #12]
}
    14b4:	4618      	mov	r0, r3
    14b6:	f107 0710 	add.w	r7, r7, #16
    14ba:	46bd      	mov	sp, r7
    14bc:	bd80      	pop	{r7, pc}
    14be:	bf00      	nop

000014c0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    14c0:	b480      	push	{r7}
    14c2:	b085      	sub	sp, #20
    14c4:	af00      	add	r7, sp, #0
    14c6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    14cc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    14ce:	68fb      	ldr	r3, [r7, #12]
}
    14d0:	4618      	mov	r0, r3
    14d2:	f107 0714 	add.w	r7, r7, #20
    14d6:	46bd      	mov	sp, r7
    14d8:	bc80      	pop	{r7}
    14da:	4770      	bx	lr

000014dc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    14dc:	b580      	push	{r7, lr}
    14de:	b082      	sub	sp, #8
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
    14e4:	6878      	ldr	r0, [r7, #4]
    14e6:	f000 f991 	bl	180c <vQueueUnregisterQueue>
	vPortFree( pxQueue->pcHead );
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	4618      	mov	r0, r3
    14f0:	f7ff fadc 	bl	aac <vPortFree>
	vPortFree( pxQueue );
    14f4:	6878      	ldr	r0, [r7, #4]
    14f6:	f7ff fad9 	bl	aac <vPortFree>
}
    14fa:	f107 0708 	add.w	r7, r7, #8
    14fe:	46bd      	mov	sp, r7
    1500:	bd80      	pop	{r7, pc}
    1502:	bf00      	nop

00001504 <ucQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
    1504:	b480      	push	{r7}
    1506:	b083      	sub	sp, #12
    1508:	af00      	add	r7, sp, #0
    150a:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueNumber;
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    1512:	4618      	mov	r0, r3
    1514:	f107 070c 	add.w	r7, r7, #12
    1518:	46bd      	mov	sp, r7
    151a:	bc80      	pop	{r7}
    151c:	4770      	bx	lr
    151e:	bf00      	nop

00001520 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
	{
    1520:	b480      	push	{r7}
    1522:	b083      	sub	sp, #12
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    1528:	460b      	mov	r3, r1
    152a:	70fb      	strb	r3, [r7, #3]
		pxQueue->ucQueueNumber = ucQueueNumber;
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	78fa      	ldrb	r2, [r7, #3]
    1530:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
    1534:	f107 070c 	add.w	r7, r7, #12
    1538:	46bd      	mov	sp, r7
    153a:	bc80      	pop	{r7}
    153c:	4770      	bx	lr
    153e:	bf00      	nop

00001540 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
    1540:	b480      	push	{r7}
    1542:	b083      	sub	sp, #12
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueType;
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	}
    154e:	4618      	mov	r0, r3
    1550:	f107 070c 	add.w	r7, r7, #12
    1554:	46bd      	mov	sp, r7
    1556:	bc80      	pop	{r7}
    1558:	4770      	bx	lr
    155a:	bf00      	nop

0000155c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    155c:	b580      	push	{r7, lr}
    155e:	b084      	sub	sp, #16
    1560:	af00      	add	r7, sp, #0
    1562:	60f8      	str	r0, [r7, #12]
    1564:	60b9      	str	r1, [r7, #8]
    1566:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1568:	68fb      	ldr	r3, [r7, #12]
    156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    156c:	2b00      	cmp	r3, #0
    156e:	d10d      	bne.n	158c <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2b00      	cmp	r3, #0
    1576:	d148      	bne.n	160a <prvCopyDataToQueue+0xae>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	685b      	ldr	r3, [r3, #4]
    157c:	4618      	mov	r0, r3
    157e:	f001 fbf7 	bl	2d70 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	f04f 0200 	mov.w	r2, #0
    1588:	605a      	str	r2, [r3, #4]
    158a:	e03e      	b.n	160a <prvCopyDataToQueue+0xae>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	2b00      	cmp	r3, #0
    1590:	d11a      	bne.n	15c8 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	689a      	ldr	r2, [r3, #8]
    1596:	68fb      	ldr	r3, [r7, #12]
    1598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    159a:	4610      	mov	r0, r2
    159c:	68b9      	ldr	r1, [r7, #8]
    159e:	461a      	mov	r2, r3
    15a0:	f001 fc5c 	bl	2e5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15a4:	68fb      	ldr	r3, [r7, #12]
    15a6:	689a      	ldr	r2, [r3, #8]
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15ac:	18d2      	adds	r2, r2, r3
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    15b2:	68fb      	ldr	r3, [r7, #12]
    15b4:	689a      	ldr	r2, [r3, #8]
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	685b      	ldr	r3, [r3, #4]
    15ba:	429a      	cmp	r2, r3
    15bc:	d325      	bcc.n	160a <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15be:	68fb      	ldr	r3, [r7, #12]
    15c0:	681a      	ldr	r2, [r3, #0]
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	609a      	str	r2, [r3, #8]
    15c6:	e020      	b.n	160a <prvCopyDataToQueue+0xae>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    15c8:	68fb      	ldr	r3, [r7, #12]
    15ca:	68da      	ldr	r2, [r3, #12]
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15d0:	4610      	mov	r0, r2
    15d2:	68b9      	ldr	r1, [r7, #8]
    15d4:	461a      	mov	r2, r3
    15d6:	f001 fc41 	bl	2e5c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	68da      	ldr	r2, [r3, #12]
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    15e2:	f1c3 0300 	rsb	r3, r3, #0
    15e6:	18d2      	adds	r2, r2, r3
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	68da      	ldr	r2, [r3, #12]
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	681b      	ldr	r3, [r3, #0]
    15f4:	429a      	cmp	r2, r3
    15f6:	d208      	bcs.n	160a <prvCopyDataToQueue+0xae>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    15f8:	68fb      	ldr	r3, [r7, #12]
    15fa:	685a      	ldr	r2, [r3, #4]
    15fc:	68fb      	ldr	r3, [r7, #12]
    15fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1600:	f1c3 0300 	rsb	r3, r3, #0
    1604:	18d2      	adds	r2, r2, r3
    1606:	68fb      	ldr	r3, [r7, #12]
    1608:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    160a:	68fb      	ldr	r3, [r7, #12]
    160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    160e:	f103 0201 	add.w	r2, r3, #1
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	639a      	str	r2, [r3, #56]	; 0x38
}
    1616:	f107 0710 	add.w	r7, r7, #16
    161a:	46bd      	mov	sp, r7
    161c:	bd80      	pop	{r7, pc}
    161e:	bf00      	nop

00001620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
    1628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	2b00      	cmp	r3, #0
    1630:	d019      	beq.n	1666 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	68da      	ldr	r2, [r3, #12]
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    163a:	18d2      	adds	r2, r2, r3
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	68da      	ldr	r2, [r3, #12]
    1644:	687b      	ldr	r3, [r7, #4]
    1646:	685b      	ldr	r3, [r3, #4]
    1648:	429a      	cmp	r2, r3
    164a:	d303      	bcc.n	1654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	681a      	ldr	r2, [r3, #0]
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	68da      	ldr	r2, [r3, #12]
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    165c:	6838      	ldr	r0, [r7, #0]
    165e:	4611      	mov	r1, r2
    1660:	461a      	mov	r2, r3
    1662:	f001 fbfb 	bl	2e5c <memcpy>
	}
}
    1666:	f107 0708 	add.w	r7, r7, #8
    166a:	46bd      	mov	sp, r7
    166c:	bd80      	pop	{r7, pc}
    166e:	bf00      	nop

00001670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1678:	f7ff fade 	bl	c38 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    167c:	e014      	b.n	16a8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1682:	2b00      	cmp	r3, #0
    1684:	d015      	beq.n	16b2 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1686:	687b      	ldr	r3, [r7, #4]
    1688:	f103 0324 	add.w	r3, r3, #36	; 0x24
    168c:	4618      	mov	r0, r3
    168e:	f000 ffbb 	bl	2608 <xTaskRemoveFromEventList>
    1692:	4603      	mov	r3, r0
    1694:	2b00      	cmp	r3, #0
    1696:	d001      	beq.n	169c <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1698:	f001 f870 	bl	277c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    16a0:	f103 32ff 	add.w	r2, r3, #4294967295
    16a4:	687b      	ldr	r3, [r7, #4]
    16a6:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    16ac:	2b00      	cmp	r3, #0
    16ae:	dce6      	bgt.n	167e <prvUnlockQueue+0xe>
    16b0:	e000      	b.n	16b4 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    16b2:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	f04f 32ff 	mov.w	r2, #4294967295
    16ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    16bc:	f7ff face 	bl	c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    16c0:	f7ff faba 	bl	c38 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16c4:	e014      	b.n	16f0 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	691b      	ldr	r3, [r3, #16]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d015      	beq.n	16fa <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	f103 0310 	add.w	r3, r3, #16
    16d4:	4618      	mov	r0, r3
    16d6:	f000 ff97 	bl	2608 <xTaskRemoveFromEventList>
    16da:	4603      	mov	r3, r0
    16dc:	2b00      	cmp	r3, #0
    16de:	d001      	beq.n	16e4 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    16e0:	f001 f84c 	bl	277c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    16e8:	f103 32ff 	add.w	r2, r3, #4294967295
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    16f4:	2b00      	cmp	r3, #0
    16f6:	dce6      	bgt.n	16c6 <prvUnlockQueue+0x56>
    16f8:	e000      	b.n	16fc <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    16fa:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	f04f 32ff 	mov.w	r2, #4294967295
    1702:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1704:	f7ff faaa 	bl	c5c <vPortExitCritical>
}
    1708:	f107 0708 	add.w	r7, r7, #8
    170c:	46bd      	mov	sp, r7
    170e:	bd80      	pop	{r7, pc}

00001710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1710:	b580      	push	{r7, lr}
    1712:	b084      	sub	sp, #16
    1714:	af00      	add	r7, sp, #0
    1716:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1718:	f7ff fa8e 	bl	c38 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    171c:	687b      	ldr	r3, [r7, #4]
    171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1720:	2b00      	cmp	r3, #0
    1722:	bf14      	ite	ne
    1724:	2300      	movne	r3, #0
    1726:	2301      	moveq	r3, #1
    1728:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    172a:	f7ff fa97 	bl	c5c <vPortExitCritical>

	return xReturn;
    172e:	68fb      	ldr	r3, [r7, #12]
}
    1730:	4618      	mov	r0, r3
    1732:	f107 0710 	add.w	r7, r7, #16
    1736:	46bd      	mov	sp, r7
    1738:	bd80      	pop	{r7, pc}
    173a:	bf00      	nop

0000173c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    173c:	b480      	push	{r7}
    173e:	b085      	sub	sp, #20
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1748:	2b00      	cmp	r3, #0
    174a:	bf14      	ite	ne
    174c:	2300      	movne	r3, #0
    174e:	2301      	moveq	r3, #1
    1750:	60fb      	str	r3, [r7, #12]

	return xReturn;
    1752:	68fb      	ldr	r3, [r7, #12]
}
    1754:	4618      	mov	r0, r3
    1756:	f107 0714 	add.w	r7, r7, #20
    175a:	46bd      	mov	sp, r7
    175c:	bc80      	pop	{r7}
    175e:	4770      	bx	lr

00001760 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1760:	b580      	push	{r7, lr}
    1762:	b084      	sub	sp, #16
    1764:	af00      	add	r7, sp, #0
    1766:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1768:	f7ff fa66 	bl	c38 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1774:	429a      	cmp	r2, r3
    1776:	bf14      	ite	ne
    1778:	2300      	movne	r3, #0
    177a:	2301      	moveq	r3, #1
    177c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    177e:	f7ff fa6d 	bl	c5c <vPortExitCritical>

	return xReturn;
    1782:	68fb      	ldr	r3, [r7, #12]
}
    1784:	4618      	mov	r0, r3
    1786:	f107 0710 	add.w	r7, r7, #16
    178a:	46bd      	mov	sp, r7
    178c:	bd80      	pop	{r7, pc}
    178e:	bf00      	nop

00001790 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1790:	b480      	push	{r7}
    1792:	b085      	sub	sp, #20
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1798:	687b      	ldr	r3, [r7, #4]
    179a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    17a0:	429a      	cmp	r2, r3
    17a2:	bf14      	ite	ne
    17a4:	2300      	movne	r3, #0
    17a6:	2301      	moveq	r3, #1
    17a8:	60fb      	str	r3, [r7, #12]

	return xReturn;
    17aa:	68fb      	ldr	r3, [r7, #12]
}
    17ac:	4618      	mov	r0, r3
    17ae:	f107 0714 	add.w	r7, r7, #20
    17b2:	46bd      	mov	sp, r7
    17b4:	bc80      	pop	{r7}
    17b6:	4770      	bx	lr

000017b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
    17b8:	b480      	push	{r7}
    17ba:	b085      	sub	sp, #20
    17bc:	af00      	add	r7, sp, #0
    17be:	6078      	str	r0, [r7, #4]
    17c0:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    17c2:	f04f 0300 	mov.w	r3, #0
    17c6:	60fb      	str	r3, [r7, #12]
    17c8:	e016      	b.n	17f8 <vQueueAddToRegistry+0x40>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    17ca:	4b0f      	ldr	r3, [pc, #60]	; (1808 <vQueueAddToRegistry+0x50>)
    17cc:	68fa      	ldr	r2, [r7, #12]
    17ce:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d10c      	bne.n	17f0 <vQueueAddToRegistry+0x38>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    17d6:	4b0c      	ldr	r3, [pc, #48]	; (1808 <vQueueAddToRegistry+0x50>)
    17d8:	68fa      	ldr	r2, [r7, #12]
    17da:	6839      	ldr	r1, [r7, #0]
    17dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    17e0:	4a09      	ldr	r2, [pc, #36]	; (1808 <vQueueAddToRegistry+0x50>)
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17e8:	18d3      	adds	r3, r2, r3
    17ea:	687a      	ldr	r2, [r7, #4]
    17ec:	605a      	str	r2, [r3, #4]
				break;
    17ee:	e006      	b.n	17fe <vQueueAddToRegistry+0x46>
	{
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	f103 0301 	add.w	r3, r3, #1
    17f6:	60fb      	str	r3, [r7, #12]
    17f8:	68fb      	ldr	r3, [r7, #12]
    17fa:	2b09      	cmp	r3, #9
    17fc:	d9e5      	bls.n	17ca <vQueueAddToRegistry+0x12>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
				break;
			}
		}
	}
    17fe:	f107 0714 	add.w	r7, r7, #20
    1802:	46bd      	mov	sp, r7
    1804:	bc80      	pop	{r7}
    1806:	4770      	bx	lr
    1808:	10004db0 	.word	0x10004db0

0000180c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	static void vQueueUnregisterQueue( xQueueHandle xQueue )
	{
    180c:	b480      	push	{r7}
    180e:	b085      	sub	sp, #20
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1814:	f04f 0300 	mov.w	r3, #0
    1818:	60fb      	str	r3, [r7, #12]
    181a:	e013      	b.n	1844 <vQueueUnregisterQueue+0x38>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    181c:	4a0d      	ldr	r2, [pc, #52]	; (1854 <vQueueUnregisterQueue+0x48>)
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1824:	18d3      	adds	r3, r2, r3
    1826:	685a      	ldr	r2, [r3, #4]
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	429a      	cmp	r2, r3
    182c:	d106      	bne.n	183c <vQueueUnregisterQueue+0x30>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    182e:	4b09      	ldr	r3, [pc, #36]	; (1854 <vQueueUnregisterQueue+0x48>)
    1830:	68fa      	ldr	r2, [r7, #12]
    1832:	f04f 0100 	mov.w	r1, #0
    1836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				break;
    183a:	e006      	b.n	184a <vQueueUnregisterQueue+0x3e>
	{
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    183c:	68fb      	ldr	r3, [r7, #12]
    183e:	f103 0301 	add.w	r3, r3, #1
    1842:	60fb      	str	r3, [r7, #12]
    1844:	68fb      	ldr	r3, [r7, #12]
    1846:	2b09      	cmp	r3, #9
    1848:	d9e8      	bls.n	181c <vQueueUnregisterQueue+0x10>
				xQueueRegistry[ ux ].pcQueueName = NULL;
				break;
			}
		}

	}
    184a:	f107 0714 	add.w	r7, r7, #20
    184e:	46bd      	mov	sp, r7
    1850:	bc80      	pop	{r7}
    1852:	4770      	bx	lr
    1854:	10004db0 	.word	0x10004db0

00001858 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1858:	b580      	push	{r7, lr}
    185a:	b08a      	sub	sp, #40	; 0x28
    185c:	af02      	add	r7, sp, #8
    185e:	60f8      	str	r0, [r7, #12]
    1860:	60b9      	str	r1, [r7, #8]
    1862:	603b      	str	r3, [r7, #0]
    1864:	4613      	mov	r3, r2
    1866:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1868:	88fb      	ldrh	r3, [r7, #6]
    186a:	4618      	mov	r0, r3
    186c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    186e:	f001 f8bd 	bl	29ec <prvAllocateTCBAndStack>
    1872:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    1874:	69bb      	ldr	r3, [r7, #24]
    1876:	2b00      	cmp	r3, #0
    1878:	d07c      	beq.n	1974 <xTaskGenericCreate+0x11c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    187a:	69bb      	ldr	r3, [r7, #24]
    187c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    187e:	88fb      	ldrh	r3, [r7, #6]
    1880:	f103 33ff 	add.w	r3, r3, #4294967295
    1884:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1888:	18d3      	adds	r3, r2, r3
    188a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    188c:	697b      	ldr	r3, [r7, #20]
    188e:	f023 0307 	bic.w	r3, r3, #7
    1892:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1894:	88fb      	ldrh	r3, [r7, #6]
    1896:	9300      	str	r3, [sp, #0]
    1898:	69b8      	ldr	r0, [r7, #24]
    189a:	68b9      	ldr	r1, [r7, #8]
    189c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18a0:	f000 ffaa 	bl	27f8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    18a4:	6978      	ldr	r0, [r7, #20]
    18a6:	68f9      	ldr	r1, [r7, #12]
    18a8:	683a      	ldr	r2, [r7, #0]
    18aa:	f7ff f94d 	bl	b48 <pxPortInitialiseStack>
    18ae:	4603      	mov	r3, r0
    18b0:	461a      	mov	r2, r3
    18b2:	69bb      	ldr	r3, [r7, #24]
    18b4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    18b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18b8:	2b00      	cmp	r3, #0
    18ba:	d002      	beq.n	18c2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    18bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18be:	69ba      	ldr	r2, [r7, #24]
    18c0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    18c2:	f7ff f9b9 	bl	c38 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    18c6:	4b37      	ldr	r3, [pc, #220]	; (19a4 <xTaskGenericCreate+0x14c>)
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	f103 0201 	add.w	r2, r3, #1
    18ce:	4b35      	ldr	r3, [pc, #212]	; (19a4 <xTaskGenericCreate+0x14c>)
    18d0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    18d2:	4b35      	ldr	r3, [pc, #212]	; (19a8 <xTaskGenericCreate+0x150>)
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d109      	bne.n	18ee <xTaskGenericCreate+0x96>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    18da:	4b33      	ldr	r3, [pc, #204]	; (19a8 <xTaskGenericCreate+0x150>)
    18dc:	69ba      	ldr	r2, [r7, #24]
    18de:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    18e0:	4b30      	ldr	r3, [pc, #192]	; (19a4 <xTaskGenericCreate+0x14c>)
    18e2:	681b      	ldr	r3, [r3, #0]
    18e4:	2b01      	cmp	r3, #1
    18e6:	d10f      	bne.n	1908 <xTaskGenericCreate+0xb0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    18e8:	f000 ffc8 	bl	287c <prvInitialiseTaskLists>
    18ec:	e00c      	b.n	1908 <xTaskGenericCreate+0xb0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    18ee:	4b2f      	ldr	r3, [pc, #188]	; (19ac <xTaskGenericCreate+0x154>)
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d108      	bne.n	1908 <xTaskGenericCreate+0xb0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    18f6:	4b2c      	ldr	r3, [pc, #176]	; (19a8 <xTaskGenericCreate+0x150>)
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18fe:	429a      	cmp	r2, r3
    1900:	d802      	bhi.n	1908 <xTaskGenericCreate+0xb0>
					{
						pxCurrentTCB = pxNewTCB;
    1902:	4b29      	ldr	r3, [pc, #164]	; (19a8 <xTaskGenericCreate+0x150>)
    1904:	69ba      	ldr	r2, [r7, #24]
    1906:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1908:	69bb      	ldr	r3, [r7, #24]
    190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    190c:	4b28      	ldr	r3, [pc, #160]	; (19b0 <xTaskGenericCreate+0x158>)
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	429a      	cmp	r2, r3
    1912:	d903      	bls.n	191c <xTaskGenericCreate+0xc4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1914:	69bb      	ldr	r3, [r7, #24]
    1916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1918:	4b25      	ldr	r3, [pc, #148]	; (19b0 <xTaskGenericCreate+0x158>)
    191a:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
    191c:	4b25      	ldr	r3, [pc, #148]	; (19b4 <xTaskGenericCreate+0x15c>)
    191e:	681a      	ldr	r2, [r3, #0]
    1920:	69bb      	ldr	r3, [r7, #24]
    1922:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
    1924:	4b23      	ldr	r3, [pc, #140]	; (19b4 <xTaskGenericCreate+0x15c>)
    1926:	681b      	ldr	r3, [r3, #0]
    1928:	f103 0201 	add.w	r2, r3, #1
    192c:	4b21      	ldr	r3, [pc, #132]	; (19b4 <xTaskGenericCreate+0x15c>)
    192e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    1930:	69bb      	ldr	r3, [r7, #24]
    1932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1934:	4b20      	ldr	r3, [pc, #128]	; (19b8 <xTaskGenericCreate+0x160>)
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	429a      	cmp	r2, r3
    193a:	d903      	bls.n	1944 <xTaskGenericCreate+0xec>
    193c:	69bb      	ldr	r3, [r7, #24]
    193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1940:	4b1d      	ldr	r3, [pc, #116]	; (19b8 <xTaskGenericCreate+0x160>)
    1942:	601a      	str	r2, [r3, #0]
    1944:	69bb      	ldr	r3, [r7, #24]
    1946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1948:	4613      	mov	r3, r2
    194a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    194e:	189b      	adds	r3, r3, r2
    1950:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1954:	461a      	mov	r2, r3
    1956:	4b19      	ldr	r3, [pc, #100]	; (19bc <xTaskGenericCreate+0x164>)
    1958:	18d2      	adds	r2, r2, r3
    195a:	69bb      	ldr	r3, [r7, #24]
    195c:	f103 0304 	add.w	r3, r3, #4
    1960:	4610      	mov	r0, r2
    1962:	4619      	mov	r1, r3
    1964:	f7ff fa0e 	bl	d84 <vListInsertEnd>

			xReturn = pdPASS;
    1968:	f04f 0301 	mov.w	r3, #1
    196c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    196e:	f7ff f975 	bl	c5c <vPortExitCritical>
    1972:	e002      	b.n	197a <xTaskGenericCreate+0x122>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1974:	f04f 33ff 	mov.w	r3, #4294967295
    1978:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    197a:	69fb      	ldr	r3, [r7, #28]
    197c:	2b01      	cmp	r3, #1
    197e:	d10b      	bne.n	1998 <xTaskGenericCreate+0x140>
	{
		if( xSchedulerRunning != pdFALSE )
    1980:	4b0a      	ldr	r3, [pc, #40]	; (19ac <xTaskGenericCreate+0x154>)
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	2b00      	cmp	r3, #0
    1986:	d007      	beq.n	1998 <xTaskGenericCreate+0x140>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1988:	4b07      	ldr	r3, [pc, #28]	; (19a8 <xTaskGenericCreate+0x150>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1990:	429a      	cmp	r2, r3
    1992:	d201      	bcs.n	1998 <xTaskGenericCreate+0x140>
			{
				portYIELD_WITHIN_API();
    1994:	f7ff f944 	bl	c20 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    1998:	69fb      	ldr	r3, [r7, #28]
}
    199a:	4618      	mov	r0, r3
    199c:	f107 0720 	add.w	r7, r7, #32
    19a0:	46bd      	mov	sp, r7
    19a2:	bd80      	pop	{r7, pc}
    19a4:	10004d08 	.word	0x10004d08
    19a8:	10004c30 	.word	0x10004c30
    19ac:	10004d18 	.word	0x10004d18
    19b0:	10004d10 	.word	0x10004d10
    19b4:	10004d2c 	.word	0x10004d2c
    19b8:	10004d14 	.word	0x10004d14
    19bc:	10004c34 	.word	0x10004c34

000019c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    19c0:	b580      	push	{r7, lr}
    19c2:	b084      	sub	sp, #16
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    19c8:	f7ff f936 	bl	c38 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    19cc:	4b20      	ldr	r3, [pc, #128]	; (1a50 <vTaskDelete+0x90>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	687a      	ldr	r2, [r7, #4]
    19d2:	429a      	cmp	r2, r3
    19d4:	d102      	bne.n	19dc <vTaskDelete+0x1c>
			{
				pxTaskToDelete = NULL;
    19d6:	f04f 0300 	mov.w	r3, #0
    19da:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	2b00      	cmp	r3, #0
    19e0:	d102      	bne.n	19e8 <vTaskDelete+0x28>
    19e2:	4b1b      	ldr	r3, [pc, #108]	; (1a50 <vTaskDelete+0x90>)
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	e000      	b.n	19ea <vTaskDelete+0x2a>
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	f103 0304 	add.w	r3, r3, #4
    19f2:	4618      	mov	r0, r3
    19f4:	f7ff fa28 	bl	e48 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    19f8:	68fb      	ldr	r3, [r7, #12]
    19fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19fc:	2b00      	cmp	r3, #0
    19fe:	d005      	beq.n	1a0c <vTaskDelete+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	f103 0318 	add.w	r3, r3, #24
    1a06:	4618      	mov	r0, r3
    1a08:	f7ff fa1e 	bl	e48 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1a0c:	68fb      	ldr	r3, [r7, #12]
    1a0e:	f103 0304 	add.w	r3, r3, #4
    1a12:	4810      	ldr	r0, [pc, #64]	; (1a54 <vTaskDelete+0x94>)
    1a14:	4619      	mov	r1, r3
    1a16:	f7ff f9b5 	bl	d84 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1a1a:	4b0f      	ldr	r3, [pc, #60]	; (1a58 <vTaskDelete+0x98>)
    1a1c:	681b      	ldr	r3, [r3, #0]
    1a1e:	f103 0201 	add.w	r2, r3, #1
    1a22:	4b0d      	ldr	r3, [pc, #52]	; (1a58 <vTaskDelete+0x98>)
    1a24:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTCBNumber++;
    1a26:	4b0d      	ldr	r3, [pc, #52]	; (1a5c <vTaskDelete+0x9c>)
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	f103 0201 	add.w	r2, r3, #1
    1a2e:	4b0b      	ldr	r3, [pc, #44]	; (1a5c <vTaskDelete+0x9c>)
    1a30:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1a32:	f7ff f913 	bl	c5c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1a36:	4b0a      	ldr	r3, [pc, #40]	; (1a60 <vTaskDelete+0xa0>)
    1a38:	681b      	ldr	r3, [r3, #0]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d004      	beq.n	1a48 <vTaskDelete+0x88>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d101      	bne.n	1a48 <vTaskDelete+0x88>
			{
				portYIELD_WITHIN_API();
    1a44:	f7ff f8ec 	bl	c20 <vPortYieldFromISR>
			}
		}
	}
    1a48:	f107 0710 	add.w	r7, r7, #16
    1a4c:	46bd      	mov	sp, r7
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	10004c30 	.word	0x10004c30
    1a54:	10004cdc 	.word	0x10004cdc
    1a58:	10004cf0 	.word	0x10004cf0
    1a5c:	10004d2c 	.word	0x10004d2c
    1a60:	10004d18 	.word	0x10004d18

00001a64 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1a64:	b580      	push	{r7, lr}
    1a66:	b086      	sub	sp, #24
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
    1a6c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1a6e:	f04f 0300 	mov.w	r3, #0
    1a72:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1a74:	f000 fa88 	bl	1f88 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	681a      	ldr	r2, [r3, #0]
    1a7c:	683b      	ldr	r3, [r7, #0]
    1a7e:	18d3      	adds	r3, r2, r3
    1a80:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	681a      	ldr	r2, [r3, #0]
    1a86:	4b1d      	ldr	r3, [pc, #116]	; (1afc <vTaskDelayUntil+0x98>)
    1a88:	681b      	ldr	r3, [r3, #0]
    1a8a:	429a      	cmp	r2, r3
    1a8c:	d90d      	bls.n	1aaa <vTaskDelayUntil+0x46>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	681a      	ldr	r2, [r3, #0]
    1a92:	693b      	ldr	r3, [r7, #16]
    1a94:	429a      	cmp	r2, r3
    1a96:	d915      	bls.n	1ac4 <vTaskDelayUntil+0x60>
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <vTaskDelayUntil+0x98>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	693a      	ldr	r2, [r7, #16]
    1a9e:	429a      	cmp	r2, r3
    1aa0:	d910      	bls.n	1ac4 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    1aa2:	f04f 0301 	mov.w	r3, #1
    1aa6:	617b      	str	r3, [r7, #20]
    1aa8:	e00c      	b.n	1ac4 <vTaskDelayUntil+0x60>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	681a      	ldr	r2, [r3, #0]
    1aae:	693b      	ldr	r3, [r7, #16]
    1ab0:	429a      	cmp	r2, r3
    1ab2:	d804      	bhi.n	1abe <vTaskDelayUntil+0x5a>
    1ab4:	4b11      	ldr	r3, [pc, #68]	; (1afc <vTaskDelayUntil+0x98>)
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	693a      	ldr	r2, [r7, #16]
    1aba:	429a      	cmp	r2, r3
    1abc:	d902      	bls.n	1ac4 <vTaskDelayUntil+0x60>
				{
					xShouldDelay = pdTRUE;
    1abe:	f04f 0301 	mov.w	r3, #1
    1ac2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	693a      	ldr	r2, [r7, #16]
    1ac8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    1aca:	697b      	ldr	r3, [r7, #20]
    1acc:	2b00      	cmp	r3, #0
    1ace:	d009      	beq.n	1ae4 <vTaskDelayUntil+0x80>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1ad0:	4b0b      	ldr	r3, [pc, #44]	; (1b00 <vTaskDelayUntil+0x9c>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	f103 0304 	add.w	r3, r3, #4
    1ad8:	4618      	mov	r0, r3
    1ada:	f7ff f9b5 	bl	e48 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1ade:	6938      	ldr	r0, [r7, #16]
    1ae0:	f000 ff4c 	bl	297c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1ae4:	f000 fa5e 	bl	1fa4 <xTaskResumeAll>
    1ae8:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d101      	bne.n	1af4 <vTaskDelayUntil+0x90>
		{
			portYIELD_WITHIN_API();
    1af0:	f7ff f896 	bl	c20 <vPortYieldFromISR>
		}
	}
    1af4:	f107 0718 	add.w	r7, r7, #24
    1af8:	46bd      	mov	sp, r7
    1afa:	bd80      	pop	{r7, pc}
    1afc:	10004d0c 	.word	0x10004d0c
    1b00:	10004c30 	.word	0x10004c30

00001b04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1b04:	b580      	push	{r7, lr}
    1b06:	b084      	sub	sp, #16
    1b08:	af00      	add	r7, sp, #0
    1b0a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1b0c:	f04f 0300 	mov.w	r3, #0
    1b10:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d013      	beq.n	1b40 <vTaskDelay+0x3c>
		{
			vTaskSuspendAll();
    1b18:	f000 fa36 	bl	1f88 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1b1c:	4b0d      	ldr	r3, [pc, #52]	; (1b54 <vTaskDelay+0x50>)
    1b1e:	681a      	ldr	r2, [r3, #0]
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	18d3      	adds	r3, r2, r3
    1b24:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1b26:	4b0c      	ldr	r3, [pc, #48]	; (1b58 <vTaskDelay+0x54>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	f103 0304 	add.w	r3, r3, #4
    1b2e:	4618      	mov	r0, r3
    1b30:	f7ff f98a 	bl	e48 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1b34:	68b8      	ldr	r0, [r7, #8]
    1b36:	f000 ff21 	bl	297c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1b3a:	f000 fa33 	bl	1fa4 <xTaskResumeAll>
    1b3e:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1b40:	68fb      	ldr	r3, [r7, #12]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d101      	bne.n	1b4a <vTaskDelay+0x46>
		{
			portYIELD_WITHIN_API();
    1b46:	f7ff f86b 	bl	c20 <vPortYieldFromISR>
		}
	}
    1b4a:	f107 0710 	add.w	r7, r7, #16
    1b4e:	46bd      	mov	sp, r7
    1b50:	bd80      	pop	{r7, pc}
    1b52:	bf00      	nop
    1b54:	10004d0c 	.word	0x10004d0c
    1b58:	10004c30 	.word	0x10004c30

00001b5c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b084      	sub	sp, #16
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    1b64:	f7ff f868 	bl	c38 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d102      	bne.n	1b74 <uxTaskPriorityGet+0x18>
    1b6e:	4b08      	ldr	r3, [pc, #32]	; (1b90 <uxTaskPriorityGet+0x34>)
    1b70:	681b      	ldr	r3, [r3, #0]
    1b72:	e000      	b.n	1b76 <uxTaskPriorityGet+0x1a>
    1b74:	687b      	ldr	r3, [r7, #4]
    1b76:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    1b78:	68fb      	ldr	r3, [r7, #12]
    1b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b7c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    1b7e:	f7ff f86d 	bl	c5c <vPortExitCritical>

		return uxReturn;
    1b82:	68bb      	ldr	r3, [r7, #8]
	}
    1b84:	4618      	mov	r0, r3
    1b86:	f107 0710 	add.w	r7, r7, #16
    1b8a:	46bd      	mov	sp, r7
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	bf00      	nop
    1b90:	10004c30 	.word	0x10004c30

00001b94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    1b94:	b580      	push	{r7, lr}
    1b96:	b086      	sub	sp, #24
    1b98:	af00      	add	r7, sp, #0
    1b9a:	6078      	str	r0, [r7, #4]
    1b9c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    1b9e:	f04f 0300 	mov.w	r3, #0
    1ba2:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    1ba4:	683b      	ldr	r3, [r7, #0]
    1ba6:	2b04      	cmp	r3, #4
    1ba8:	d902      	bls.n	1bb0 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    1baa:	f04f 0304 	mov.w	r3, #4
    1bae:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    1bb0:	f7ff f842 	bl	c38 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    1bb4:	4b39      	ldr	r3, [pc, #228]	; (1c9c <vTaskPrioritySet+0x108>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	687a      	ldr	r2, [r7, #4]
    1bba:	429a      	cmp	r2, r3
    1bbc:	d102      	bne.n	1bc4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    1bbe:	f04f 0300 	mov.w	r3, #0
    1bc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d102      	bne.n	1bd0 <vTaskPrioritySet+0x3c>
    1bca:	4b34      	ldr	r3, [pc, #208]	; (1c9c <vTaskPrioritySet+0x108>)
    1bcc:	681b      	ldr	r3, [r3, #0]
    1bce:	e000      	b.n	1bd2 <vTaskPrioritySet+0x3e>
    1bd0:	687b      	ldr	r3, [r7, #4]
    1bd2:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    1bd4:	693b      	ldr	r3, [r7, #16]
    1bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1bd8:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    1bda:	68fa      	ldr	r2, [r7, #12]
    1bdc:	683b      	ldr	r3, [r7, #0]
    1bde:	429a      	cmp	r2, r3
    1be0:	d056      	beq.n	1c90 <vTaskPrioritySet+0xfc>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    1be2:	683a      	ldr	r2, [r7, #0]
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	429a      	cmp	r2, r3
    1be8:	d906      	bls.n	1bf8 <vTaskPrioritySet+0x64>
				{
					if( pxTask != NULL )
    1bea:	687b      	ldr	r3, [r7, #4]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d009      	beq.n	1c04 <vTaskPrioritySet+0x70>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    1bf0:	f04f 0301 	mov.w	r3, #1
    1bf4:	617b      	str	r3, [r7, #20]
    1bf6:	e005      	b.n	1c04 <vTaskPrioritySet+0x70>
					}
				}
				else if( pxTask == NULL )
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d102      	bne.n	1c04 <vTaskPrioritySet+0x70>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    1bfe:	f04f 0301 	mov.w	r3, #1
    1c02:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1c04:	693b      	ldr	r3, [r7, #16]
    1c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1c08:	693b      	ldr	r3, [r7, #16]
    1c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c0c:	429a      	cmp	r2, r3
    1c0e:	d102      	bne.n	1c16 <vTaskPrioritySet+0x82>
					{
						pxTCB->uxPriority = uxNewPriority;
    1c10:	693b      	ldr	r3, [r7, #16]
    1c12:	683a      	ldr	r2, [r7, #0]
    1c14:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1c16:	693b      	ldr	r3, [r7, #16]
    1c18:	683a      	ldr	r2, [r7, #0]
    1c1a:	649a      	str	r2, [r3, #72]	; 0x48
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    1c1c:	683b      	ldr	r3, [r7, #0]
    1c1e:	f1c3 0205 	rsb	r2, r3, #5
    1c22:	693b      	ldr	r3, [r7, #16]
    1c24:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    1c26:	693b      	ldr	r3, [r7, #16]
    1c28:	6959      	ldr	r1, [r3, #20]
    1c2a:	68fa      	ldr	r2, [r7, #12]
    1c2c:	4613      	mov	r3, r2
    1c2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c32:	189b      	adds	r3, r3, r2
    1c34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c38:	461a      	mov	r2, r3
    1c3a:	4b19      	ldr	r3, [pc, #100]	; (1ca0 <vTaskPrioritySet+0x10c>)
    1c3c:	18d3      	adds	r3, r2, r3
    1c3e:	4299      	cmp	r1, r3
    1c40:	d121      	bne.n	1c86 <vTaskPrioritySet+0xf2>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    1c42:	693b      	ldr	r3, [r7, #16]
    1c44:	f103 0304 	add.w	r3, r3, #4
    1c48:	4618      	mov	r0, r3
    1c4a:	f7ff f8fd 	bl	e48 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1c4e:	693b      	ldr	r3, [r7, #16]
    1c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c52:	4b14      	ldr	r3, [pc, #80]	; (1ca4 <vTaskPrioritySet+0x110>)
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	429a      	cmp	r2, r3
    1c58:	d903      	bls.n	1c62 <vTaskPrioritySet+0xce>
    1c5a:	693b      	ldr	r3, [r7, #16]
    1c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c5e:	4b11      	ldr	r3, [pc, #68]	; (1ca4 <vTaskPrioritySet+0x110>)
    1c60:	601a      	str	r2, [r3, #0]
    1c62:	693b      	ldr	r3, [r7, #16]
    1c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c66:	4613      	mov	r3, r2
    1c68:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c6c:	189b      	adds	r3, r3, r2
    1c6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c72:	461a      	mov	r2, r3
    1c74:	4b0a      	ldr	r3, [pc, #40]	; (1ca0 <vTaskPrioritySet+0x10c>)
    1c76:	18d2      	adds	r2, r2, r3
    1c78:	693b      	ldr	r3, [r7, #16]
    1c7a:	f103 0304 	add.w	r3, r3, #4
    1c7e:	4610      	mov	r0, r2
    1c80:	4619      	mov	r1, r3
    1c82:	f7ff f87f 	bl	d84 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    1c86:	697b      	ldr	r3, [r7, #20]
    1c88:	2b01      	cmp	r3, #1
    1c8a:	d101      	bne.n	1c90 <vTaskPrioritySet+0xfc>
				{
					portYIELD_WITHIN_API();
    1c8c:	f7fe ffc8 	bl	c20 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    1c90:	f7fe ffe4 	bl	c5c <vPortExitCritical>
	}
    1c94:	f107 0718 	add.w	r7, r7, #24
    1c98:	46bd      	mov	sp, r7
    1c9a:	bd80      	pop	{r7, pc}
    1c9c:	10004c30 	.word	0x10004c30
    1ca0:	10004c34 	.word	0x10004c34
    1ca4:	10004d14 	.word	0x10004d14

00001ca8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1cb0:	f7fe ffc2 	bl	c38 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    1cb4:	4b21      	ldr	r3, [pc, #132]	; (1d3c <vTaskSuspend+0x94>)
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	687a      	ldr	r2, [r7, #4]
    1cba:	429a      	cmp	r2, r3
    1cbc:	d102      	bne.n	1cc4 <vTaskSuspend+0x1c>
			{
				pxTaskToSuspend = NULL;
    1cbe:	f04f 0300 	mov.w	r3, #0
    1cc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	d102      	bne.n	1cd0 <vTaskSuspend+0x28>
    1cca:	4b1c      	ldr	r3, [pc, #112]	; (1d3c <vTaskSuspend+0x94>)
    1ccc:	681b      	ldr	r3, [r3, #0]
    1cce:	e000      	b.n	1cd2 <vTaskSuspend+0x2a>
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	f103 0304 	add.w	r3, r3, #4
    1cda:	4618      	mov	r0, r3
    1cdc:	f7ff f8b4 	bl	e48 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1ce0:	68fb      	ldr	r3, [r7, #12]
    1ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d005      	beq.n	1cf4 <vTaskSuspend+0x4c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1ce8:	68fb      	ldr	r3, [r7, #12]
    1cea:	f103 0318 	add.w	r3, r3, #24
    1cee:	4618      	mov	r0, r3
    1cf0:	f7ff f8aa 	bl	e48 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    1cf4:	68fb      	ldr	r3, [r7, #12]
    1cf6:	f103 0304 	add.w	r3, r3, #4
    1cfa:	4811      	ldr	r0, [pc, #68]	; (1d40 <vTaskSuspend+0x98>)
    1cfc:	4619      	mov	r1, r3
    1cfe:	f7ff f841 	bl	d84 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1d02:	f7fe ffab 	bl	c5c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d113      	bne.n	1d34 <vTaskSuspend+0x8c>
		{
			if( xSchedulerRunning != pdFALSE )
    1d0c:	4b0d      	ldr	r3, [pc, #52]	; (1d44 <vTaskSuspend+0x9c>)
    1d0e:	681b      	ldr	r3, [r3, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d002      	beq.n	1d1a <vTaskSuspend+0x72>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    1d14:	f7fe ff84 	bl	c20 <vPortYieldFromISR>
    1d18:	e00c      	b.n	1d34 <vTaskSuspend+0x8c>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1d1a:	4b09      	ldr	r3, [pc, #36]	; (1d40 <vTaskSuspend+0x98>)
    1d1c:	681a      	ldr	r2, [r3, #0]
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <vTaskSuspend+0xa0>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	429a      	cmp	r2, r3
    1d24:	d104      	bne.n	1d30 <vTaskSuspend+0x88>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1d26:	4b05      	ldr	r3, [pc, #20]	; (1d3c <vTaskSuspend+0x94>)
    1d28:	f04f 0200 	mov.w	r2, #0
    1d2c:	601a      	str	r2, [r3, #0]
    1d2e:	e001      	b.n	1d34 <vTaskSuspend+0x8c>
				}
				else
				{
					vTaskSwitchContext();
    1d30:	f000 fba4 	bl	247c <vTaskSwitchContext>
				}
			}
		}
	}
    1d34:	f107 0710 	add.w	r7, r7, #16
    1d38:	46bd      	mov	sp, r7
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	10004c30 	.word	0x10004c30
    1d40:	10004cf4 	.word	0x10004cf4
    1d44:	10004d18 	.word	0x10004d18
    1d48:	10004d08 	.word	0x10004d08

00001d4c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    1d4c:	b480      	push	{r7}
    1d4e:	b085      	sub	sp, #20
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    1d54:	f04f 0300 	mov.w	r3, #0
    1d58:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1d5e:	68bb      	ldr	r3, [r7, #8]
    1d60:	695a      	ldr	r2, [r3, #20]
    1d62:	4b0b      	ldr	r3, [pc, #44]	; (1d90 <xTaskIsTaskSuspended+0x44>)
    1d64:	429a      	cmp	r2, r3
    1d66:	d10b      	bne.n	1d80 <xTaskIsTaskSuspended+0x34>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    1d68:	68bb      	ldr	r3, [r7, #8]
    1d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d6c:	4b09      	ldr	r3, [pc, #36]	; (1d94 <xTaskIsTaskSuspended+0x48>)
    1d6e:	429a      	cmp	r2, r3
    1d70:	d006      	beq.n	1d80 <xTaskIsTaskSuspended+0x34>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    1d72:	68bb      	ldr	r3, [r7, #8]
    1d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d76:	2b00      	cmp	r3, #0
    1d78:	d102      	bne.n	1d80 <xTaskIsTaskSuspended+0x34>
				{
					xReturn = pdTRUE;
    1d7a:	f04f 0301 	mov.w	r3, #1
    1d7e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    1d80:	68fb      	ldr	r3, [r7, #12]
	}
    1d82:	4618      	mov	r0, r3
    1d84:	f107 0714 	add.w	r7, r7, #20
    1d88:	46bd      	mov	sp, r7
    1d8a:	bc80      	pop	{r7}
    1d8c:	4770      	bx	lr
    1d8e:	bf00      	nop
    1d90:	10004cf4 	.word	0x10004cf4
    1d94:	10004cc8 	.word	0x10004cc8

00001d98 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b084      	sub	sp, #16
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d039      	beq.n	1e1e <vTaskResume+0x86>
    1daa:	4b1f      	ldr	r3, [pc, #124]	; (1e28 <vTaskResume+0x90>)
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	68fa      	ldr	r2, [r7, #12]
    1db0:	429a      	cmp	r2, r3
    1db2:	d034      	beq.n	1e1e <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
    1db4:	f7fe ff40 	bl	c38 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1db8:	68f8      	ldr	r0, [r7, #12]
    1dba:	f7ff ffc7 	bl	1d4c <xTaskIsTaskSuspended>
    1dbe:	4603      	mov	r3, r0
    1dc0:	2b01      	cmp	r3, #1
    1dc2:	d12a      	bne.n	1e1a <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    1dc4:	68fb      	ldr	r3, [r7, #12]
    1dc6:	f103 0304 	add.w	r3, r3, #4
    1dca:	4618      	mov	r0, r3
    1dcc:	f7ff f83c 	bl	e48 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dd4:	4b15      	ldr	r3, [pc, #84]	; (1e2c <vTaskResume+0x94>)
    1dd6:	681b      	ldr	r3, [r3, #0]
    1dd8:	429a      	cmp	r2, r3
    1dda:	d903      	bls.n	1de4 <vTaskResume+0x4c>
    1ddc:	68fb      	ldr	r3, [r7, #12]
    1dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1de0:	4b12      	ldr	r3, [pc, #72]	; (1e2c <vTaskResume+0x94>)
    1de2:	601a      	str	r2, [r3, #0]
    1de4:	68fb      	ldr	r3, [r7, #12]
    1de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1de8:	4613      	mov	r3, r2
    1dea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1dee:	189b      	adds	r3, r3, r2
    1df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1df4:	461a      	mov	r2, r3
    1df6:	4b0e      	ldr	r3, [pc, #56]	; (1e30 <vTaskResume+0x98>)
    1df8:	18d2      	adds	r2, r2, r3
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	f103 0304 	add.w	r3, r3, #4
    1e00:	4610      	mov	r0, r2
    1e02:	4619      	mov	r1, r3
    1e04:	f7fe ffbe 	bl	d84 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e08:	68fb      	ldr	r3, [r7, #12]
    1e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <vTaskResume+0x90>)
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e12:	429a      	cmp	r2, r3
    1e14:	d301      	bcc.n	1e1a <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    1e16:	f7fe ff03 	bl	c20 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    1e1a:	f7fe ff1f 	bl	c5c <vPortExitCritical>
		}
	}
    1e1e:	f107 0710 	add.w	r7, r7, #16
    1e22:	46bd      	mov	sp, r7
    1e24:	bd80      	pop	{r7, pc}
    1e26:	bf00      	nop
    1e28:	10004c30 	.word	0x10004c30
    1e2c:	10004d14 	.word	0x10004d14
    1e30:	10004c34 	.word	0x10004c34

00001e34 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    1e34:	b580      	push	{r7, lr}
    1e36:	b086      	sub	sp, #24
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    1e3c:	f04f 0300 	mov.w	r3, #0
    1e40:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1e46:	f04f 0300 	mov.w	r3, #0
    1e4a:	60fb      	str	r3, [r7, #12]
    1e4c:	f04f 0028 	mov.w	r0, #40	; 0x28
    1e50:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1e54:	6938      	ldr	r0, [r7, #16]
    1e56:	f7ff ff79 	bl	1d4c <xTaskIsTaskSuspended>
    1e5a:	4603      	mov	r3, r0
    1e5c:	2b01      	cmp	r3, #1
    1e5e:	d137      	bne.n	1ed0 <xTaskResumeFromISR+0x9c>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e60:	4b20      	ldr	r3, [pc, #128]	; (1ee4 <xTaskResumeFromISR+0xb0>)
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	2b00      	cmp	r3, #0
    1e66:	d12c      	bne.n	1ec2 <xTaskResumeFromISR+0x8e>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    1e68:	693b      	ldr	r3, [r7, #16]
    1e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e6c:	4b1e      	ldr	r3, [pc, #120]	; (1ee8 <xTaskResumeFromISR+0xb4>)
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e72:	429a      	cmp	r2, r3
    1e74:	bf34      	ite	cc
    1e76:	2300      	movcc	r3, #0
    1e78:	2301      	movcs	r3, #1
    1e7a:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    1e7c:	693b      	ldr	r3, [r7, #16]
    1e7e:	f103 0304 	add.w	r3, r3, #4
    1e82:	4618      	mov	r0, r3
    1e84:	f7fe ffe0 	bl	e48 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1e88:	693b      	ldr	r3, [r7, #16]
    1e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e8c:	4b17      	ldr	r3, [pc, #92]	; (1eec <xTaskResumeFromISR+0xb8>)
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	429a      	cmp	r2, r3
    1e92:	d903      	bls.n	1e9c <xTaskResumeFromISR+0x68>
    1e94:	693b      	ldr	r3, [r7, #16]
    1e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e98:	4b14      	ldr	r3, [pc, #80]	; (1eec <xTaskResumeFromISR+0xb8>)
    1e9a:	601a      	str	r2, [r3, #0]
    1e9c:	693b      	ldr	r3, [r7, #16]
    1e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ea0:	4613      	mov	r3, r2
    1ea2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1ea6:	189b      	adds	r3, r3, r2
    1ea8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1eac:	461a      	mov	r2, r3
    1eae:	4b10      	ldr	r3, [pc, #64]	; (1ef0 <xTaskResumeFromISR+0xbc>)
    1eb0:	18d2      	adds	r2, r2, r3
    1eb2:	693b      	ldr	r3, [r7, #16]
    1eb4:	f103 0304 	add.w	r3, r3, #4
    1eb8:	4610      	mov	r0, r2
    1eba:	4619      	mov	r1, r3
    1ebc:	f7fe ff62 	bl	d84 <vListInsertEnd>
    1ec0:	e006      	b.n	1ed0 <xTaskResumeFromISR+0x9c>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1ec2:	693b      	ldr	r3, [r7, #16]
    1ec4:	f103 0318 	add.w	r3, r3, #24
    1ec8:	480a      	ldr	r0, [pc, #40]	; (1ef4 <xTaskResumeFromISR+0xc0>)
    1eca:	4619      	mov	r1, r3
    1ecc:	f7fe ff5a 	bl	d84 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1ed0:	f04f 0000 	mov.w	r0, #0
    1ed4:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    1ed8:	697b      	ldr	r3, [r7, #20]
	}
    1eda:	4618      	mov	r0, r3
    1edc:	f107 0718 	add.w	r7, r7, #24
    1ee0:	46bd      	mov	sp, r7
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	10004d1c 	.word	0x10004d1c
    1ee8:	10004c30 	.word	0x10004c30
    1eec:	10004d14 	.word	0x10004d14
    1ef0:	10004c34 	.word	0x10004c34
    1ef4:	10004cc8 	.word	0x10004cc8

00001ef8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b086      	sub	sp, #24
    1efc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1efe:	4b16      	ldr	r3, [pc, #88]	; (1f58 <vTaskStartScheduler+0x60>)
    1f00:	f04f 0200 	mov.w	r2, #0
    1f04:	9200      	str	r2, [sp, #0]
    1f06:	f04f 0200 	mov.w	r2, #0
    1f0a:	9201      	str	r2, [sp, #4]
    1f0c:	f04f 0200 	mov.w	r2, #0
    1f10:	9202      	str	r2, [sp, #8]
    1f12:	f04f 0200 	mov.w	r2, #0
    1f16:	9203      	str	r2, [sp, #12]
    1f18:	4810      	ldr	r0, [pc, #64]	; (1f5c <vTaskStartScheduler+0x64>)
    1f1a:	4619      	mov	r1, r3
    1f1c:	f04f 0250 	mov.w	r2, #80	; 0x50
    1f20:	f04f 0300 	mov.w	r3, #0
    1f24:	f7ff fc98 	bl	1858 <xTaskGenericCreate>
    1f28:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	2b01      	cmp	r3, #1
    1f2e:	d10f      	bne.n	1f50 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1f30:	f04f 0028 	mov.w	r0, #40	; 0x28
    1f34:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    1f38:	4b09      	ldr	r3, [pc, #36]	; (1f60 <vTaskStartScheduler+0x68>)
    1f3a:	f04f 0201 	mov.w	r2, #1
    1f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    1f40:	4b08      	ldr	r3, [pc, #32]	; (1f64 <vTaskStartScheduler+0x6c>)
    1f42:	f04f 0200 	mov.w	r2, #0
    1f46:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    1f48:	f7fe fa04 	bl	354 <vConfigureTimerForRunTimeStats>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1f4c:	f7fe fe44 	bl	bd8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1f50:	f107 0708 	add.w	r7, r7, #8
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}
    1f58:	00003250 	.word	0x00003250
    1f5c:	000027e9 	.word	0x000027e9
    1f60:	10004d18 	.word	0x10004d18
    1f64:	10004d0c 	.word	0x10004d0c

00001f68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1f6c:	f04f 0028 	mov.w	r0, #40	; 0x28
    1f70:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    1f74:	4b03      	ldr	r3, [pc, #12]	; (1f84 <vTaskEndScheduler+0x1c>)
    1f76:	f04f 0200 	mov.w	r2, #0
    1f7a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    1f7c:	f7fe fe4a 	bl	c14 <vPortEndScheduler>
}
    1f80:	bd80      	pop	{r7, pc}
    1f82:	bf00      	nop
    1f84:	10004d18 	.word	0x10004d18

00001f88 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1f88:	b480      	push	{r7}
    1f8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <vTaskSuspendAll+0x18>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	f103 0201 	add.w	r2, r3, #1
    1f94:	4b02      	ldr	r3, [pc, #8]	; (1fa0 <vTaskSuspendAll+0x18>)
    1f96:	601a      	str	r2, [r3, #0]
}
    1f98:	46bd      	mov	sp, r7
    1f9a:	bc80      	pop	{r7}
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	10004d1c 	.word	0x10004d1c

00001fa4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1fa4:	b590      	push	{r4, r7, lr}
    1fa6:	b083      	sub	sp, #12
    1fa8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1faa:	f04f 0300 	mov.w	r3, #0
    1fae:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1fb0:	f7fe fe42 	bl	c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    1fb4:	4b38      	ldr	r3, [pc, #224]	; (2098 <xTaskResumeAll+0xf4>)
    1fb6:	681b      	ldr	r3, [r3, #0]
    1fb8:	f103 32ff 	add.w	r2, r3, #4294967295
    1fbc:	4b36      	ldr	r3, [pc, #216]	; (2098 <xTaskResumeAll+0xf4>)
    1fbe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1fc0:	4b35      	ldr	r3, [pc, #212]	; (2098 <xTaskResumeAll+0xf4>)
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d15e      	bne.n	2086 <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1fc8:	4b34      	ldr	r3, [pc, #208]	; (209c <xTaskResumeAll+0xf8>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d05a      	beq.n	2086 <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1fd0:	f04f 0300 	mov.w	r3, #0
    1fd4:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1fd6:	e02e      	b.n	2036 <xTaskResumeAll+0x92>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1fd8:	4b31      	ldr	r3, [pc, #196]	; (20a0 <xTaskResumeAll+0xfc>)
    1fda:	68db      	ldr	r3, [r3, #12]
    1fdc:	68db      	ldr	r3, [r3, #12]
    1fde:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
    1fe0:	f104 0318 	add.w	r3, r4, #24
    1fe4:	4618      	mov	r0, r3
    1fe6:	f7fe ff2f 	bl	e48 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1fea:	f104 0304 	add.w	r3, r4, #4
    1fee:	4618      	mov	r0, r3
    1ff0:	f7fe ff2a 	bl	e48 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1ff4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1ff6:	4b2b      	ldr	r3, [pc, #172]	; (20a4 <xTaskResumeAll+0x100>)
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	429a      	cmp	r2, r3
    1ffc:	d902      	bls.n	2004 <xTaskResumeAll+0x60>
    1ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2000:	4b28      	ldr	r3, [pc, #160]	; (20a4 <xTaskResumeAll+0x100>)
    2002:	601a      	str	r2, [r3, #0]
    2004:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2006:	4613      	mov	r3, r2
    2008:	ea4f 0383 	mov.w	r3, r3, lsl #2
    200c:	189b      	adds	r3, r3, r2
    200e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2012:	461a      	mov	r2, r3
    2014:	4b24      	ldr	r3, [pc, #144]	; (20a8 <xTaskResumeAll+0x104>)
    2016:	18d2      	adds	r2, r2, r3
    2018:	f104 0304 	add.w	r3, r4, #4
    201c:	4610      	mov	r0, r2
    201e:	4619      	mov	r1, r3
    2020:	f7fe feb0 	bl	d84 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2024:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2026:	4b21      	ldr	r3, [pc, #132]	; (20ac <xTaskResumeAll+0x108>)
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    202c:	429a      	cmp	r2, r3
    202e:	d302      	bcc.n	2036 <xTaskResumeAll+0x92>
					{
						xYieldRequired = pdTRUE;
    2030:	f04f 0301 	mov.w	r3, #1
    2034:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2036:	4b1a      	ldr	r3, [pc, #104]	; (20a0 <xTaskResumeAll+0xfc>)
    2038:	681b      	ldr	r3, [r3, #0]
    203a:	2b00      	cmp	r3, #0
    203c:	d1cc      	bne.n	1fd8 <xTaskResumeAll+0x34>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    203e:	4b1c      	ldr	r3, [pc, #112]	; (20b0 <xTaskResumeAll+0x10c>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	2b00      	cmp	r3, #0
    2044:	d00f      	beq.n	2066 <xTaskResumeAll+0xc2>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2046:	e007      	b.n	2058 <xTaskResumeAll+0xb4>
					{
						vTaskIncrementTick();
    2048:	f000 f978 	bl	233c <vTaskIncrementTick>
						--uxMissedTicks;
    204c:	4b18      	ldr	r3, [pc, #96]	; (20b0 <xTaskResumeAll+0x10c>)
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	f103 32ff 	add.w	r2, r3, #4294967295
    2054:	4b16      	ldr	r3, [pc, #88]	; (20b0 <xTaskResumeAll+0x10c>)
    2056:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2058:	4b15      	ldr	r3, [pc, #84]	; (20b0 <xTaskResumeAll+0x10c>)
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	2b00      	cmp	r3, #0
    205e:	d1f3      	bne.n	2048 <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2060:	f04f 0301 	mov.w	r3, #1
    2064:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2066:	683b      	ldr	r3, [r7, #0]
    2068:	2b01      	cmp	r3, #1
    206a:	d003      	beq.n	2074 <xTaskResumeAll+0xd0>
    206c:	4b11      	ldr	r3, [pc, #68]	; (20b4 <xTaskResumeAll+0x110>)
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	2b01      	cmp	r3, #1
    2072:	d108      	bne.n	2086 <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
    2074:	f04f 0301 	mov.w	r3, #1
    2078:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    207a:	4b0e      	ldr	r3, [pc, #56]	; (20b4 <xTaskResumeAll+0x110>)
    207c:	f04f 0200 	mov.w	r2, #0
    2080:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    2082:	f7fe fdcd 	bl	c20 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2086:	f7fe fde9 	bl	c5c <vPortExitCritical>

	return xAlreadyYielded;
    208a:	687b      	ldr	r3, [r7, #4]
}
    208c:	4618      	mov	r0, r3
    208e:	f107 070c 	add.w	r7, r7, #12
    2092:	46bd      	mov	sp, r7
    2094:	bd90      	pop	{r4, r7, pc}
    2096:	bf00      	nop
    2098:	10004d1c 	.word	0x10004d1c
    209c:	10004d08 	.word	0x10004d08
    20a0:	10004cc8 	.word	0x10004cc8
    20a4:	10004d14 	.word	0x10004d14
    20a8:	10004c34 	.word	0x10004c34
    20ac:	10004c30 	.word	0x10004c30
    20b0:	10004d20 	.word	0x10004d20
    20b4:	10004d24 	.word	0x10004d24

000020b8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    20b8:	b580      	push	{r7, lr}
    20ba:	b082      	sub	sp, #8
    20bc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    20be:	f7fe fdbb 	bl	c38 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    20c2:	4b05      	ldr	r3, [pc, #20]	; (20d8 <xTaskGetTickCount+0x20>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    20c8:	f7fe fdc8 	bl	c5c <vPortExitCritical>

	return xTicks;
    20cc:	687b      	ldr	r3, [r7, #4]
}
    20ce:	4618      	mov	r0, r3
    20d0:	f107 0708 	add.w	r7, r7, #8
    20d4:	46bd      	mov	sp, r7
    20d6:	bd80      	pop	{r7, pc}
    20d8:	10004d0c 	.word	0x10004d0c

000020dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    20dc:	b480      	push	{r7}
    20de:	b083      	sub	sp, #12
    20e0:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20e2:	f04f 0300 	mov.w	r3, #0
    20e6:	607b      	str	r3, [r7, #4]
    20e8:	f04f 0028 	mov.w	r0, #40	; 0x28
    20ec:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <xTaskGetTickCountFromISR+0x30>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    20f6:	f04f 0000 	mov.w	r0, #0
    20fa:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    20fe:	683b      	ldr	r3, [r7, #0]
}
    2100:	4618      	mov	r0, r3
    2102:	f107 070c 	add.w	r7, r7, #12
    2106:	46bd      	mov	sp, r7
    2108:	bc80      	pop	{r7}
    210a:	4770      	bx	lr
    210c:	10004d0c 	.word	0x10004d0c

00002110 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2110:	b480      	push	{r7}
    2112:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2114:	4b02      	ldr	r3, [pc, #8]	; (2120 <uxTaskGetNumberOfTasks+0x10>)
    2116:	681b      	ldr	r3, [r3, #0]
}
    2118:	4618      	mov	r0, r3
    211a:	46bd      	mov	sp, r7
    211c:	bc80      	pop	{r7}
    211e:	4770      	bx	lr
    2120:	10004d08 	.word	0x10004d08

00002124 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    2124:	b590      	push	{r4, r7, lr}
    2126:	b085      	sub	sp, #20
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    212c:	f7ff ff2c 	bl	1f88 <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	f04f 0200 	mov.w	r2, #0
    2136:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    2138:	687c      	ldr	r4, [r7, #4]
    213a:	4620      	mov	r0, r4
    213c:	f001 f812 	bl	3164 <strlen>
    2140:	4603      	mov	r3, r0
    2142:	18e3      	adds	r3, r4, r3
    2144:	4618      	mov	r0, r3
    2146:	4931      	ldr	r1, [pc, #196]	; (220c <vTaskList+0xe8>)
    2148:	f04f 0203 	mov.w	r2, #3
    214c:	f000 fe86 	bl	2e5c <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    2150:	4b2f      	ldr	r3, [pc, #188]	; (2210 <vTaskList+0xec>)
    2152:	681b      	ldr	r3, [r3, #0]
    2154:	f103 0301 	add.w	r3, r3, #1
    2158:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	f103 33ff 	add.w	r3, r3, #4294967295
    2160:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    2162:	68fa      	ldr	r2, [r7, #12]
    2164:	4613      	mov	r3, r2
    2166:	ea4f 0383 	mov.w	r3, r3, lsl #2
    216a:	189b      	adds	r3, r3, r2
    216c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2170:	461a      	mov	r2, r3
    2172:	4b28      	ldr	r3, [pc, #160]	; (2214 <vTaskList+0xf0>)
    2174:	18d3      	adds	r3, r2, r3
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	2b00      	cmp	r3, #0
    217a:	d00f      	beq.n	219c <vTaskList+0x78>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    217c:	68fa      	ldr	r2, [r7, #12]
    217e:	4613      	mov	r3, r2
    2180:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2184:	189b      	adds	r3, r3, r2
    2186:	ea4f 0383 	mov.w	r3, r3, lsl #2
    218a:	461a      	mov	r2, r3
    218c:	4b21      	ldr	r3, [pc, #132]	; (2214 <vTaskList+0xf0>)
    218e:	18d3      	adds	r3, r2, r3
    2190:	6878      	ldr	r0, [r7, #4]
    2192:	4619      	mov	r1, r3
    2194:	f04f 0252 	mov.w	r2, #82	; 0x52
    2198:	f000 fc62 	bl	2a60 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    219c:	68fb      	ldr	r3, [r7, #12]
    219e:	2b00      	cmp	r3, #0
    21a0:	d1db      	bne.n	215a <vTaskList+0x36>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    21a2:	4b1d      	ldr	r3, [pc, #116]	; (2218 <vTaskList+0xf4>)
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d007      	beq.n	21bc <vTaskList+0x98>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    21ac:	4b1a      	ldr	r3, [pc, #104]	; (2218 <vTaskList+0xf4>)
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	6878      	ldr	r0, [r7, #4]
    21b2:	4619      	mov	r1, r3
    21b4:	f04f 0242 	mov.w	r2, #66	; 0x42
    21b8:	f000 fc52 	bl	2a60 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    21bc:	4b17      	ldr	r3, [pc, #92]	; (221c <vTaskList+0xf8>)
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	681b      	ldr	r3, [r3, #0]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d007      	beq.n	21d6 <vTaskList+0xb2>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    21c6:	4b15      	ldr	r3, [pc, #84]	; (221c <vTaskList+0xf8>)
    21c8:	681b      	ldr	r3, [r3, #0]
    21ca:	6878      	ldr	r0, [r7, #4]
    21cc:	4619      	mov	r1, r3
    21ce:	f04f 0242 	mov.w	r2, #66	; 0x42
    21d2:	f000 fc45 	bl	2a60 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    21d6:	4b12      	ldr	r3, [pc, #72]	; (2220 <vTaskList+0xfc>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	2b00      	cmp	r3, #0
    21dc:	d005      	beq.n	21ea <vTaskList+0xc6>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
    21de:	6878      	ldr	r0, [r7, #4]
    21e0:	490f      	ldr	r1, [pc, #60]	; (2220 <vTaskList+0xfc>)
    21e2:	f04f 0244 	mov.w	r2, #68	; 0x44
    21e6:	f000 fc3b 	bl	2a60 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    21ea:	4b0e      	ldr	r3, [pc, #56]	; (2224 <vTaskList+0x100>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d005      	beq.n	21fe <vTaskList+0xda>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
    21f2:	6878      	ldr	r0, [r7, #4]
    21f4:	490b      	ldr	r1, [pc, #44]	; (2224 <vTaskList+0x100>)
    21f6:	f04f 0253 	mov.w	r2, #83	; 0x53
    21fa:	f000 fc31 	bl	2a60 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    21fe:	f7ff fed1 	bl	1fa4 <xTaskResumeAll>
	}
    2202:	f107 0714 	add.w	r7, r7, #20
    2206:	46bd      	mov	sp, r7
    2208:	bd90      	pop	{r4, r7, pc}
    220a:	bf00      	nop
    220c:	00003258 	.word	0x00003258
    2210:	10004d10 	.word	0x10004d10
    2214:	10004c34 	.word	0x10004c34
    2218:	10004cc0 	.word	0x10004cc0
    221c:	10004cc4 	.word	0x10004cc4
    2220:	10004cdc 	.word	0x10004cdc
    2224:	10004cf4 	.word	0x10004cf4

00002228 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
    2228:	b590      	push	{r4, r7, lr}
    222a:	b085      	sub	sp, #20
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    2230:	f7ff feaa 	bl	1f88 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2238:	689b      	ldr	r3, [r3, #8]
    223a:	60bb      	str	r3, [r7, #8]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
    223c:	68ba      	ldr	r2, [r7, #8]
    223e:	4b37      	ldr	r3, [pc, #220]	; (231c <vTaskGetRunTimeStats+0xf4>)
    2240:	fba3 1302 	umull	r1, r3, r3, r2
    2244:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2248:	60bb      	str	r3, [r7, #8]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	f04f 0200 	mov.w	r2, #0
    2250:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    2252:	687c      	ldr	r4, [r7, #4]
    2254:	4620      	mov	r0, r4
    2256:	f000 ff85 	bl	3164 <strlen>
    225a:	4603      	mov	r3, r0
    225c:	18e3      	adds	r3, r4, r3
    225e:	4618      	mov	r0, r3
    2260:	492f      	ldr	r1, [pc, #188]	; (2320 <vTaskGetRunTimeStats+0xf8>)
    2262:	f04f 0203 	mov.w	r2, #3
    2266:	f000 fdf9 	bl	2e5c <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    226a:	4b2e      	ldr	r3, [pc, #184]	; (2324 <vTaskGetRunTimeStats+0xfc>)
    226c:	681b      	ldr	r3, [r3, #0]
    226e:	f103 0301 	add.w	r3, r3, #1
    2272:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    2274:	68fb      	ldr	r3, [r7, #12]
    2276:	f103 33ff 	add.w	r3, r3, #4294967295
    227a:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    227c:	68fa      	ldr	r2, [r7, #12]
    227e:	4613      	mov	r3, r2
    2280:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2284:	189b      	adds	r3, r3, r2
    2286:	ea4f 0383 	mov.w	r3, r3, lsl #2
    228a:	461a      	mov	r2, r3
    228c:	4b26      	ldr	r3, [pc, #152]	; (2328 <vTaskGetRunTimeStats+0x100>)
    228e:	18d3      	adds	r3, r2, r3
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d00e      	beq.n	22b4 <vTaskGetRunTimeStats+0x8c>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime );
    2296:	68fa      	ldr	r2, [r7, #12]
    2298:	4613      	mov	r3, r2
    229a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    229e:	189b      	adds	r3, r3, r2
    22a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    22a4:	461a      	mov	r2, r3
    22a6:	4b20      	ldr	r3, [pc, #128]	; (2328 <vTaskGetRunTimeStats+0x100>)
    22a8:	18d3      	adds	r3, r2, r3
    22aa:	6878      	ldr	r0, [r7, #4]
    22ac:	4619      	mov	r1, r3
    22ae:	68ba      	ldr	r2, [r7, #8]
    22b0:	f000 fc34 	bl	2b1c <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d1dc      	bne.n	2274 <vTaskGetRunTimeStats+0x4c>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    22ba:	4b1c      	ldr	r3, [pc, #112]	; (232c <vTaskGetRunTimeStats+0x104>)
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	681b      	ldr	r3, [r3, #0]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d006      	beq.n	22d2 <vTaskGetRunTimeStats+0xaa>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime );
    22c4:	4b19      	ldr	r3, [pc, #100]	; (232c <vTaskGetRunTimeStats+0x104>)
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	6878      	ldr	r0, [r7, #4]
    22ca:	4619      	mov	r1, r3
    22cc:	68ba      	ldr	r2, [r7, #8]
    22ce:	f000 fc25 	bl	2b1c <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    22d2:	4b17      	ldr	r3, [pc, #92]	; (2330 <vTaskGetRunTimeStats+0x108>)
    22d4:	681b      	ldr	r3, [r3, #0]
    22d6:	681b      	ldr	r3, [r3, #0]
    22d8:	2b00      	cmp	r3, #0
    22da:	d006      	beq.n	22ea <vTaskGetRunTimeStats+0xc2>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime );
    22dc:	4b14      	ldr	r3, [pc, #80]	; (2330 <vTaskGetRunTimeStats+0x108>)
    22de:	681b      	ldr	r3, [r3, #0]
    22e0:	6878      	ldr	r0, [r7, #4]
    22e2:	4619      	mov	r1, r3
    22e4:	68ba      	ldr	r2, [r7, #8]
    22e6:	f000 fc19 	bl	2b1c <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    22ea:	4b12      	ldr	r3, [pc, #72]	; (2334 <vTaskGetRunTimeStats+0x10c>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d004      	beq.n	22fc <vTaskGetRunTimeStats+0xd4>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime );
    22f2:	6878      	ldr	r0, [r7, #4]
    22f4:	490f      	ldr	r1, [pc, #60]	; (2334 <vTaskGetRunTimeStats+0x10c>)
    22f6:	68ba      	ldr	r2, [r7, #8]
    22f8:	f000 fc10 	bl	2b1c <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    22fc:	4b0e      	ldr	r3, [pc, #56]	; (2338 <vTaskGetRunTimeStats+0x110>)
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	2b00      	cmp	r3, #0
    2302:	d004      	beq.n	230e <vTaskGetRunTimeStats+0xe6>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
    2304:	6878      	ldr	r0, [r7, #4]
    2306:	490c      	ldr	r1, [pc, #48]	; (2338 <vTaskGetRunTimeStats+0x110>)
    2308:	68ba      	ldr	r2, [r7, #8]
    230a:	f000 fc07 	bl	2b1c <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    230e:	f7ff fe49 	bl	1fa4 <xTaskResumeAll>
	}
    2312:	f107 0714 	add.w	r7, r7, #20
    2316:	46bd      	mov	sp, r7
    2318:	bd90      	pop	{r4, r7, pc}
    231a:	bf00      	nop
    231c:	51eb851f 	.word	0x51eb851f
    2320:	00003258 	.word	0x00003258
    2324:	10004d10 	.word	0x10004d10
    2328:	10004c34 	.word	0x10004c34
    232c:	10004cc0 	.word	0x10004cc0
    2330:	10004cc4 	.word	0x10004cc4
    2334:	10004cdc 	.word	0x10004cdc
    2338:	10004cf4 	.word	0x10004cf4

0000233c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    233c:	b580      	push	{r7, lr}
    233e:	b084      	sub	sp, #16
    2340:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2342:	4b45      	ldr	r3, [pc, #276]	; (2458 <vTaskIncrementTick+0x11c>)
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	2b00      	cmp	r3, #0
    2348:	d17a      	bne.n	2440 <vTaskIncrementTick+0x104>
	{
		++xTickCount;
    234a:	4b44      	ldr	r3, [pc, #272]	; (245c <vTaskIncrementTick+0x120>)
    234c:	681b      	ldr	r3, [r3, #0]
    234e:	f103 0201 	add.w	r2, r3, #1
    2352:	4b42      	ldr	r3, [pc, #264]	; (245c <vTaskIncrementTick+0x120>)
    2354:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    2356:	4b41      	ldr	r3, [pc, #260]	; (245c <vTaskIncrementTick+0x120>)
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d122      	bne.n	23a4 <vTaskIncrementTick+0x68>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    235e:	4b40      	ldr	r3, [pc, #256]	; (2460 <vTaskIncrementTick+0x124>)
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2364:	4b3f      	ldr	r3, [pc, #252]	; (2464 <vTaskIncrementTick+0x128>)
    2366:	681a      	ldr	r2, [r3, #0]
    2368:	4b3d      	ldr	r3, [pc, #244]	; (2460 <vTaskIncrementTick+0x124>)
    236a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    236c:	4b3d      	ldr	r3, [pc, #244]	; (2464 <vTaskIncrementTick+0x128>)
    236e:	68fa      	ldr	r2, [r7, #12]
    2370:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    2372:	4b3d      	ldr	r3, [pc, #244]	; (2468 <vTaskIncrementTick+0x12c>)
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	f103 0201 	add.w	r2, r3, #1
    237a:	4b3b      	ldr	r3, [pc, #236]	; (2468 <vTaskIncrementTick+0x12c>)
    237c:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    237e:	4b38      	ldr	r3, [pc, #224]	; (2460 <vTaskIncrementTick+0x124>)
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	681b      	ldr	r3, [r3, #0]
    2384:	2b00      	cmp	r3, #0
    2386:	d104      	bne.n	2392 <vTaskIncrementTick+0x56>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2388:	4b38      	ldr	r3, [pc, #224]	; (246c <vTaskIncrementTick+0x130>)
    238a:	f04f 32ff 	mov.w	r2, #4294967295
    238e:	601a      	str	r2, [r3, #0]
    2390:	e008      	b.n	23a4 <vTaskIncrementTick+0x68>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2392:	4b33      	ldr	r3, [pc, #204]	; (2460 <vTaskIncrementTick+0x124>)
    2394:	681b      	ldr	r3, [r3, #0]
    2396:	68db      	ldr	r3, [r3, #12]
    2398:	68db      	ldr	r3, [r3, #12]
    239a:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    239c:	68bb      	ldr	r3, [r7, #8]
    239e:	685a      	ldr	r2, [r3, #4]
    23a0:	4b32      	ldr	r3, [pc, #200]	; (246c <vTaskIncrementTick+0x130>)
    23a2:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    23a4:	4b2d      	ldr	r3, [pc, #180]	; (245c <vTaskIncrementTick+0x120>)
    23a6:	681a      	ldr	r2, [r3, #0]
    23a8:	4b30      	ldr	r3, [pc, #192]	; (246c <vTaskIncrementTick+0x130>)
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	429a      	cmp	r2, r3
    23ae:	d34d      	bcc.n	244c <vTaskIncrementTick+0x110>
    23b0:	4b2b      	ldr	r3, [pc, #172]	; (2460 <vTaskIncrementTick+0x124>)
    23b2:	681b      	ldr	r3, [r3, #0]
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d104      	bne.n	23c4 <vTaskIncrementTick+0x88>
    23ba:	4b2c      	ldr	r3, [pc, #176]	; (246c <vTaskIncrementTick+0x130>)
    23bc:	f04f 32ff 	mov.w	r2, #4294967295
    23c0:	601a      	str	r2, [r3, #0]
    23c2:	e043      	b.n	244c <vTaskIncrementTick+0x110>
    23c4:	4b26      	ldr	r3, [pc, #152]	; (2460 <vTaskIncrementTick+0x124>)
    23c6:	681b      	ldr	r3, [r3, #0]
    23c8:	68db      	ldr	r3, [r3, #12]
    23ca:	68db      	ldr	r3, [r3, #12]
    23cc:	60bb      	str	r3, [r7, #8]
    23ce:	68bb      	ldr	r3, [r7, #8]
    23d0:	685b      	ldr	r3, [r3, #4]
    23d2:	607b      	str	r3, [r7, #4]
    23d4:	4b21      	ldr	r3, [pc, #132]	; (245c <vTaskIncrementTick+0x120>)
    23d6:	681a      	ldr	r2, [r3, #0]
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	429a      	cmp	r2, r3
    23dc:	d203      	bcs.n	23e6 <vTaskIncrementTick+0xaa>
    23de:	4b23      	ldr	r3, [pc, #140]	; (246c <vTaskIncrementTick+0x130>)
    23e0:	687a      	ldr	r2, [r7, #4]
    23e2:	601a      	str	r2, [r3, #0]
    23e4:	e032      	b.n	244c <vTaskIncrementTick+0x110>
    23e6:	68bb      	ldr	r3, [r7, #8]
    23e8:	f103 0304 	add.w	r3, r3, #4
    23ec:	4618      	mov	r0, r3
    23ee:	f7fe fd2b 	bl	e48 <vListRemove>
    23f2:	68bb      	ldr	r3, [r7, #8]
    23f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23f6:	2b00      	cmp	r3, #0
    23f8:	d005      	beq.n	2406 <vTaskIncrementTick+0xca>
    23fa:	68bb      	ldr	r3, [r7, #8]
    23fc:	f103 0318 	add.w	r3, r3, #24
    2400:	4618      	mov	r0, r3
    2402:	f7fe fd21 	bl	e48 <vListRemove>
    2406:	68bb      	ldr	r3, [r7, #8]
    2408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    240a:	4b19      	ldr	r3, [pc, #100]	; (2470 <vTaskIncrementTick+0x134>)
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	429a      	cmp	r2, r3
    2410:	d903      	bls.n	241a <vTaskIncrementTick+0xde>
    2412:	68bb      	ldr	r3, [r7, #8]
    2414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2416:	4b16      	ldr	r3, [pc, #88]	; (2470 <vTaskIncrementTick+0x134>)
    2418:	601a      	str	r2, [r3, #0]
    241a:	68bb      	ldr	r3, [r7, #8]
    241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    241e:	4613      	mov	r3, r2
    2420:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2424:	189b      	adds	r3, r3, r2
    2426:	ea4f 0383 	mov.w	r3, r3, lsl #2
    242a:	461a      	mov	r2, r3
    242c:	4b11      	ldr	r3, [pc, #68]	; (2474 <vTaskIncrementTick+0x138>)
    242e:	18d2      	adds	r2, r2, r3
    2430:	68bb      	ldr	r3, [r7, #8]
    2432:	f103 0304 	add.w	r3, r3, #4
    2436:	4610      	mov	r0, r2
    2438:	4619      	mov	r1, r3
    243a:	f7fe fca3 	bl	d84 <vListInsertEnd>
    243e:	e7b7      	b.n	23b0 <vTaskIncrementTick+0x74>
	}
	else
	{
		++uxMissedTicks;
    2440:	4b0d      	ldr	r3, [pc, #52]	; (2478 <vTaskIncrementTick+0x13c>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	f103 0201 	add.w	r2, r3, #1
    2448:	4b0b      	ldr	r3, [pc, #44]	; (2478 <vTaskIncrementTick+0x13c>)
    244a:	601a      	str	r2, [r3, #0]

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    244c:	4b0a      	ldr	r3, [pc, #40]	; (2478 <vTaskIncrementTick+0x13c>)
    244e:	681b      	ldr	r3, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2450:	f107 0710 	add.w	r7, r7, #16
    2454:	46bd      	mov	sp, r7
    2456:	bd80      	pop	{r7, pc}
    2458:	10004d1c 	.word	0x10004d1c
    245c:	10004d0c 	.word	0x10004d0c
    2460:	10004cc0 	.word	0x10004cc0
    2464:	10004cc4 	.word	0x10004cc4
    2468:	10004d28 	.word	0x10004d28
    246c:	10000008 	.word	0x10000008
    2470:	10004d14 	.word	0x10004d14
    2474:	10004c34 	.word	0x10004c34
    2478:	10004d20 	.word	0x10004d20

0000247c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    247c:	b580      	push	{r7, lr}
    247e:	b082      	sub	sp, #8
    2480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2482:	4b40      	ldr	r3, [pc, #256]	; (2584 <vTaskSwitchContext+0x108>)
    2484:	681b      	ldr	r3, [r3, #0]
    2486:	2b00      	cmp	r3, #0
    2488:	d004      	beq.n	2494 <vTaskSwitchContext+0x18>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    248a:	4b3f      	ldr	r3, [pc, #252]	; (2588 <vTaskSwitchContext+0x10c>)
    248c:	f04f 0201 	mov.w	r2, #1
    2490:	601a      	str	r2, [r3, #0]
    2492:	e073      	b.n	257c <vTaskSwitchContext+0x100>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
    2494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    2498:	689b      	ldr	r3, [r3, #8]
    249a:	607b      	str	r3, [r7, #4]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
    249c:	4b3b      	ldr	r3, [pc, #236]	; (258c <vTaskSwitchContext+0x110>)
    249e:	681b      	ldr	r3, [r3, #0]
    24a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    24a2:	4a3b      	ldr	r2, [pc, #236]	; (2590 <vTaskSwitchContext+0x114>)
    24a4:	6812      	ldr	r2, [r2, #0]
    24a6:	6878      	ldr	r0, [r7, #4]
    24a8:	1a82      	subs	r2, r0, r2
    24aa:	188a      	adds	r2, r1, r2
    24ac:	64da      	str	r2, [r3, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
    24ae:	4b38      	ldr	r3, [pc, #224]	; (2590 <vTaskSwitchContext+0x114>)
    24b0:	687a      	ldr	r2, [r7, #4]
    24b2:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    24b4:	4b35      	ldr	r3, [pc, #212]	; (258c <vTaskSwitchContext+0x110>)
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	681a      	ldr	r2, [r3, #0]
    24ba:	4b34      	ldr	r3, [pc, #208]	; (258c <vTaskSwitchContext+0x110>)
    24bc:	681b      	ldr	r3, [r3, #0]
    24be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24c0:	429a      	cmp	r2, r3
    24c2:	d80a      	bhi.n	24da <vTaskSwitchContext+0x5e>
    24c4:	4b31      	ldr	r3, [pc, #196]	; (258c <vTaskSwitchContext+0x110>)
    24c6:	681b      	ldr	r3, [r3, #0]
    24c8:	461a      	mov	r2, r3
    24ca:	4b30      	ldr	r3, [pc, #192]	; (258c <vTaskSwitchContext+0x110>)
    24cc:	681b      	ldr	r3, [r3, #0]
    24ce:	f103 0334 	add.w	r3, r3, #52	; 0x34
    24d2:	4610      	mov	r0, r2
    24d4:	4619      	mov	r1, r3
    24d6:	f7fd ff37 	bl	348 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    24da:	4b2c      	ldr	r3, [pc, #176]	; (258c <vTaskSwitchContext+0x110>)
    24dc:	681b      	ldr	r3, [r3, #0]
    24de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24e0:	4618      	mov	r0, r3
    24e2:	492c      	ldr	r1, [pc, #176]	; (2594 <vTaskSwitchContext+0x118>)
    24e4:	f04f 0214 	mov.w	r2, #20
    24e8:	f000 fc86 	bl	2df8 <memcmp>
    24ec:	4603      	mov	r3, r0
    24ee:	2b00      	cmp	r3, #0
    24f0:	d012      	beq.n	2518 <vTaskSwitchContext+0x9c>
    24f2:	4b26      	ldr	r3, [pc, #152]	; (258c <vTaskSwitchContext+0x110>)
    24f4:	681b      	ldr	r3, [r3, #0]
    24f6:	461a      	mov	r2, r3
    24f8:	4b24      	ldr	r3, [pc, #144]	; (258c <vTaskSwitchContext+0x110>)
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2500:	4610      	mov	r0, r2
    2502:	4619      	mov	r1, r3
    2504:	f7fd ff20 	bl	348 <vApplicationStackOverflowHook>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2508:	e007      	b.n	251a <vTaskSwitchContext+0x9e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    250a:	4b23      	ldr	r3, [pc, #140]	; (2598 <vTaskSwitchContext+0x11c>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	f103 32ff 	add.w	r2, r3, #4294967295
    2512:	4b21      	ldr	r3, [pc, #132]	; (2598 <vTaskSwitchContext+0x11c>)
    2514:	601a      	str	r2, [r3, #0]
    2516:	e000      	b.n	251a <vTaskSwitchContext+0x9e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2518:	bf00      	nop
    251a:	4b1f      	ldr	r3, [pc, #124]	; (2598 <vTaskSwitchContext+0x11c>)
    251c:	681a      	ldr	r2, [r3, #0]
    251e:	4613      	mov	r3, r2
    2520:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2524:	189b      	adds	r3, r3, r2
    2526:	ea4f 0383 	mov.w	r3, r3, lsl #2
    252a:	461a      	mov	r2, r3
    252c:	4b1b      	ldr	r3, [pc, #108]	; (259c <vTaskSwitchContext+0x120>)
    252e:	18d3      	adds	r3, r2, r3
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	2b00      	cmp	r3, #0
    2534:	d0e9      	beq.n	250a <vTaskSwitchContext+0x8e>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2536:	4b18      	ldr	r3, [pc, #96]	; (2598 <vTaskSwitchContext+0x11c>)
    2538:	681a      	ldr	r2, [r3, #0]
    253a:	4613      	mov	r3, r2
    253c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2540:	189b      	adds	r3, r3, r2
    2542:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2546:	461a      	mov	r2, r3
    2548:	4b14      	ldr	r3, [pc, #80]	; (259c <vTaskSwitchContext+0x120>)
    254a:	18d3      	adds	r3, r2, r3
    254c:	603b      	str	r3, [r7, #0]
    254e:	683b      	ldr	r3, [r7, #0]
    2550:	685b      	ldr	r3, [r3, #4]
    2552:	685a      	ldr	r2, [r3, #4]
    2554:	683b      	ldr	r3, [r7, #0]
    2556:	605a      	str	r2, [r3, #4]
    2558:	683b      	ldr	r3, [r7, #0]
    255a:	685a      	ldr	r2, [r3, #4]
    255c:	683b      	ldr	r3, [r7, #0]
    255e:	f103 0308 	add.w	r3, r3, #8
    2562:	429a      	cmp	r2, r3
    2564:	d104      	bne.n	2570 <vTaskSwitchContext+0xf4>
    2566:	683b      	ldr	r3, [r7, #0]
    2568:	685b      	ldr	r3, [r3, #4]
    256a:	685a      	ldr	r2, [r3, #4]
    256c:	683b      	ldr	r3, [r7, #0]
    256e:	605a      	str	r2, [r3, #4]
    2570:	683b      	ldr	r3, [r7, #0]
    2572:	685b      	ldr	r3, [r3, #4]
    2574:	68db      	ldr	r3, [r3, #12]
    2576:	461a      	mov	r2, r3
    2578:	4b04      	ldr	r3, [pc, #16]	; (258c <vTaskSwitchContext+0x110>)
    257a:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    257c:	f107 0708 	add.w	r7, r7, #8
    2580:	46bd      	mov	sp, r7
    2582:	bd80      	pop	{r7, pc}
    2584:	10004d1c 	.word	0x10004d1c
    2588:	10004d24 	.word	0x10004d24
    258c:	10004c30 	.word	0x10004c30
    2590:	10004d64 	.word	0x10004d64
    2594:	000032a0 	.word	0x000032a0
    2598:	10004d14 	.word	0x10004d14
    259c:	10004c34 	.word	0x10004c34

000025a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    25a0:	b580      	push	{r7, lr}
    25a2:	b084      	sub	sp, #16
    25a4:	af00      	add	r7, sp, #0
    25a6:	6078      	str	r0, [r7, #4]
    25a8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    25aa:	4b14      	ldr	r3, [pc, #80]	; (25fc <vTaskPlaceOnEventList+0x5c>)
    25ac:	681b      	ldr	r3, [r3, #0]
    25ae:	f103 0318 	add.w	r3, r3, #24
    25b2:	6878      	ldr	r0, [r7, #4]
    25b4:	4619      	mov	r1, r3
    25b6:	f7fe fc0d 	bl	dd4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    25ba:	4b10      	ldr	r3, [pc, #64]	; (25fc <vTaskPlaceOnEventList+0x5c>)
    25bc:	681b      	ldr	r3, [r3, #0]
    25be:	f103 0304 	add.w	r3, r3, #4
    25c2:	4618      	mov	r0, r3
    25c4:	f7fe fc40 	bl	e48 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    25c8:	683b      	ldr	r3, [r7, #0]
    25ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    25ce:	d108      	bne.n	25e2 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    25d0:	4b0a      	ldr	r3, [pc, #40]	; (25fc <vTaskPlaceOnEventList+0x5c>)
    25d2:	681b      	ldr	r3, [r3, #0]
    25d4:	f103 0304 	add.w	r3, r3, #4
    25d8:	4809      	ldr	r0, [pc, #36]	; (2600 <vTaskPlaceOnEventList+0x60>)
    25da:	4619      	mov	r1, r3
    25dc:	f7fe fbd2 	bl	d84 <vListInsertEnd>
    25e0:	e007      	b.n	25f2 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    25e2:	4b08      	ldr	r3, [pc, #32]	; (2604 <vTaskPlaceOnEventList+0x64>)
    25e4:	681a      	ldr	r2, [r3, #0]
    25e6:	683b      	ldr	r3, [r7, #0]
    25e8:	18d3      	adds	r3, r2, r3
    25ea:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    25ec:	68f8      	ldr	r0, [r7, #12]
    25ee:	f000 f9c5 	bl	297c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    25f2:	f107 0710 	add.w	r7, r7, #16
    25f6:	46bd      	mov	sp, r7
    25f8:	bd80      	pop	{r7, pc}
    25fa:	bf00      	nop
    25fc:	10004c30 	.word	0x10004c30
    2600:	10004cf4 	.word	0x10004cf4
    2604:	10004d0c 	.word	0x10004d0c

00002608 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2608:	b580      	push	{r7, lr}
    260a:	b084      	sub	sp, #16
    260c:	af00      	add	r7, sp, #0
    260e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	68db      	ldr	r3, [r3, #12]
    2614:	68db      	ldr	r3, [r3, #12]
    2616:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2618:	68bb      	ldr	r3, [r7, #8]
    261a:	f103 0318 	add.w	r3, r3, #24
    261e:	4618      	mov	r0, r3
    2620:	f7fe fc12 	bl	e48 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2624:	4b20      	ldr	r3, [pc, #128]	; (26a8 <xTaskRemoveFromEventList+0xa0>)
    2626:	681b      	ldr	r3, [r3, #0]
    2628:	2b00      	cmp	r3, #0
    262a:	d122      	bne.n	2672 <xTaskRemoveFromEventList+0x6a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    262c:	68bb      	ldr	r3, [r7, #8]
    262e:	f103 0304 	add.w	r3, r3, #4
    2632:	4618      	mov	r0, r3
    2634:	f7fe fc08 	bl	e48 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2638:	68bb      	ldr	r3, [r7, #8]
    263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    263c:	4b1b      	ldr	r3, [pc, #108]	; (26ac <xTaskRemoveFromEventList+0xa4>)
    263e:	681b      	ldr	r3, [r3, #0]
    2640:	429a      	cmp	r2, r3
    2642:	d903      	bls.n	264c <xTaskRemoveFromEventList+0x44>
    2644:	68bb      	ldr	r3, [r7, #8]
    2646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2648:	4b18      	ldr	r3, [pc, #96]	; (26ac <xTaskRemoveFromEventList+0xa4>)
    264a:	601a      	str	r2, [r3, #0]
    264c:	68bb      	ldr	r3, [r7, #8]
    264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2650:	4613      	mov	r3, r2
    2652:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2656:	189b      	adds	r3, r3, r2
    2658:	ea4f 0383 	mov.w	r3, r3, lsl #2
    265c:	461a      	mov	r2, r3
    265e:	4b14      	ldr	r3, [pc, #80]	; (26b0 <xTaskRemoveFromEventList+0xa8>)
    2660:	18d2      	adds	r2, r2, r3
    2662:	68bb      	ldr	r3, [r7, #8]
    2664:	f103 0304 	add.w	r3, r3, #4
    2668:	4610      	mov	r0, r2
    266a:	4619      	mov	r1, r3
    266c:	f7fe fb8a 	bl	d84 <vListInsertEnd>
    2670:	e006      	b.n	2680 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2672:	68bb      	ldr	r3, [r7, #8]
    2674:	f103 0318 	add.w	r3, r3, #24
    2678:	480e      	ldr	r0, [pc, #56]	; (26b4 <xTaskRemoveFromEventList+0xac>)
    267a:	4619      	mov	r1, r3
    267c:	f7fe fb82 	bl	d84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2680:	68bb      	ldr	r3, [r7, #8]
    2682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2684:	4b0c      	ldr	r3, [pc, #48]	; (26b8 <xTaskRemoveFromEventList+0xb0>)
    2686:	681b      	ldr	r3, [r3, #0]
    2688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    268a:	429a      	cmp	r2, r3
    268c:	d303      	bcc.n	2696 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    268e:	f04f 0301 	mov.w	r3, #1
    2692:	60fb      	str	r3, [r7, #12]
    2694:	e002      	b.n	269c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    2696:	f04f 0300 	mov.w	r3, #0
    269a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    269c:	68fb      	ldr	r3, [r7, #12]
}
    269e:	4618      	mov	r0, r3
    26a0:	f107 0710 	add.w	r7, r7, #16
    26a4:	46bd      	mov	sp, r7
    26a6:	bd80      	pop	{r7, pc}
    26a8:	10004d1c 	.word	0x10004d1c
    26ac:	10004d14 	.word	0x10004d14
    26b0:	10004c34 	.word	0x10004c34
    26b4:	10004cc8 	.word	0x10004cc8
    26b8:	10004c30 	.word	0x10004c30

000026bc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    26bc:	b480      	push	{r7}
    26be:	b083      	sub	sp, #12
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    26c4:	4b06      	ldr	r3, [pc, #24]	; (26e0 <vTaskSetTimeOutState+0x24>)
    26c6:	681a      	ldr	r2, [r3, #0]
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    26cc:	4b05      	ldr	r3, [pc, #20]	; (26e4 <vTaskSetTimeOutState+0x28>)
    26ce:	681a      	ldr	r2, [r3, #0]
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	605a      	str	r2, [r3, #4]
}
    26d4:	f107 070c 	add.w	r7, r7, #12
    26d8:	46bd      	mov	sp, r7
    26da:	bc80      	pop	{r7}
    26dc:	4770      	bx	lr
    26de:	bf00      	nop
    26e0:	10004d28 	.word	0x10004d28
    26e4:	10004d0c 	.word	0x10004d0c

000026e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    26f2:	f7fe faa1 	bl	c38 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    26fe:	d103      	bne.n	2708 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    2700:	f04f 0300 	mov.w	r3, #0
    2704:	60fb      	str	r3, [r7, #12]
    2706:	e02c      	b.n	2762 <xTaskCheckForTimeOut+0x7a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	681a      	ldr	r2, [r3, #0]
    270c:	4b19      	ldr	r3, [pc, #100]	; (2774 <xTaskCheckForTimeOut+0x8c>)
    270e:	681b      	ldr	r3, [r3, #0]
    2710:	429a      	cmp	r2, r3
    2712:	d009      	beq.n	2728 <xTaskCheckForTimeOut+0x40>
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	685a      	ldr	r2, [r3, #4]
    2718:	4b17      	ldr	r3, [pc, #92]	; (2778 <xTaskCheckForTimeOut+0x90>)
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	429a      	cmp	r2, r3
    271e:	d803      	bhi.n	2728 <xTaskCheckForTimeOut+0x40>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2720:	f04f 0301 	mov.w	r3, #1
    2724:	60fb      	str	r3, [r7, #12]
    2726:	e01c      	b.n	2762 <xTaskCheckForTimeOut+0x7a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2728:	4b13      	ldr	r3, [pc, #76]	; (2778 <xTaskCheckForTimeOut+0x90>)
    272a:	681a      	ldr	r2, [r3, #0]
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	685b      	ldr	r3, [r3, #4]
    2730:	1ad2      	subs	r2, r2, r3
    2732:	683b      	ldr	r3, [r7, #0]
    2734:	681b      	ldr	r3, [r3, #0]
    2736:	429a      	cmp	r2, r3
    2738:	d210      	bcs.n	275c <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	681a      	ldr	r2, [r3, #0]
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	6859      	ldr	r1, [r3, #4]
    2742:	4b0d      	ldr	r3, [pc, #52]	; (2778 <xTaskCheckForTimeOut+0x90>)
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	1acb      	subs	r3, r1, r3
    2748:	18d2      	adds	r2, r2, r3
    274a:	683b      	ldr	r3, [r7, #0]
    274c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    274e:	6878      	ldr	r0, [r7, #4]
    2750:	f7ff ffb4 	bl	26bc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2754:	f04f 0300 	mov.w	r3, #0
    2758:	60fb      	str	r3, [r7, #12]
    275a:	e002      	b.n	2762 <xTaskCheckForTimeOut+0x7a>
		}
		else
		{
			xReturn = pdTRUE;
    275c:	f04f 0301 	mov.w	r3, #1
    2760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2762:	f7fe fa7b 	bl	c5c <vPortExitCritical>

	return xReturn;
    2766:	68fb      	ldr	r3, [r7, #12]
}
    2768:	4618      	mov	r0, r3
    276a:	f107 0710 	add.w	r7, r7, #16
    276e:	46bd      	mov	sp, r7
    2770:	bd80      	pop	{r7, pc}
    2772:	bf00      	nop
    2774:	10004d28 	.word	0x10004d28
    2778:	10004d0c 	.word	0x10004d0c

0000277c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    277c:	b480      	push	{r7}
    277e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    2780:	4b03      	ldr	r3, [pc, #12]	; (2790 <vTaskMissedYield+0x14>)
    2782:	f04f 0201 	mov.w	r2, #1
    2786:	601a      	str	r2, [r3, #0]
}
    2788:	46bd      	mov	sp, r7
    278a:	bc80      	pop	{r7}
    278c:	4770      	bx	lr
    278e:	bf00      	nop
    2790:	10004d24 	.word	0x10004d24

00002794 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
    2794:	b480      	push	{r7}
    2796:	b085      	sub	sp, #20
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	2b00      	cmp	r3, #0
    27a0:	d005      	beq.n	27ae <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    27a6:	68bb      	ldr	r3, [r7, #8]
    27a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27aa:	60fb      	str	r3, [r7, #12]
    27ac:	e002      	b.n	27b4 <uxTaskGetTaskNumber+0x20>
		}
		else
		{
			uxReturn = 0U;
    27ae:	f04f 0300 	mov.w	r3, #0
    27b2:	60fb      	str	r3, [r7, #12]
		}
		
		return uxReturn;
    27b4:	68fb      	ldr	r3, [r7, #12]
	}
    27b6:	4618      	mov	r0, r3
    27b8:	f107 0714 	add.w	r7, r7, #20
    27bc:	46bd      	mov	sp, r7
    27be:	bc80      	pop	{r7}
    27c0:	4770      	bx	lr
    27c2:	bf00      	nop

000027c4 <vTaskSetTaskNumber>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
	{
    27c4:	b480      	push	{r7}
    27c6:	b085      	sub	sp, #20
    27c8:	af00      	add	r7, sp, #0
    27ca:	6078      	str	r0, [r7, #4]
    27cc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d004      	beq.n	27de <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    27d8:	68fb      	ldr	r3, [r7, #12]
    27da:	683a      	ldr	r2, [r7, #0]
    27dc:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
    27de:	f107 0714 	add.w	r7, r7, #20
    27e2:	46bd      	mov	sp, r7
    27e4:	bc80      	pop	{r7}
    27e6:	4770      	bx	lr

000027e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b082      	sub	sp, #8
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    27f0:	f000 f888 	bl	2904 <prvCheckTasksWaitingTermination>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    27f4:	e7fc      	b.n	27f0 <prvIdleTask+0x8>
    27f6:	bf00      	nop

000027f8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    27f8:	b580      	push	{r7, lr}
    27fa:	b084      	sub	sp, #16
    27fc:	af00      	add	r7, sp, #0
    27fe:	60f8      	str	r0, [r7, #12]
    2800:	60b9      	str	r1, [r7, #8]
    2802:	607a      	str	r2, [r7, #4]
    2804:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2806:	68fb      	ldr	r3, [r7, #12]
    2808:	f103 0334 	add.w	r3, r3, #52	; 0x34
    280c:	461a      	mov	r2, r3
    280e:	68bb      	ldr	r3, [r7, #8]
    2810:	4610      	mov	r0, r2
    2812:	4619      	mov	r1, r3
    2814:	f04f 020c 	mov.w	r2, #12
    2818:	f000 fcd4 	bl	31c4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    281c:	68fb      	ldr	r3, [r7, #12]
    281e:	f04f 0200 	mov.w	r2, #0
    2822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2b04      	cmp	r3, #4
    282a:	d902      	bls.n	2832 <prvInitialiseTCBVariables+0x3a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    282c:	f04f 0304 	mov.w	r3, #4
    2830:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    2832:	68fb      	ldr	r3, [r7, #12]
    2834:	687a      	ldr	r2, [r7, #4]
    2836:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2838:	68fb      	ldr	r3, [r7, #12]
    283a:	687a      	ldr	r2, [r7, #4]
    283c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	f103 0304 	add.w	r3, r3, #4
    2844:	4618      	mov	r0, r3
    2846:	f7fe fa8f 	bl	d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    284a:	68fb      	ldr	r3, [r7, #12]
    284c:	f103 0318 	add.w	r3, r3, #24
    2850:	4618      	mov	r0, r3
    2852:	f7fe fa89 	bl	d68 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2856:	68fb      	ldr	r3, [r7, #12]
    2858:	68fa      	ldr	r2, [r7, #12]
    285a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	f1c3 0205 	rsb	r2, r3, #5
    2862:	68fb      	ldr	r3, [r7, #12]
    2864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2866:	68fb      	ldr	r3, [r7, #12]
    2868:	68fa      	ldr	r2, [r7, #12]
    286a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
    286c:	68fb      	ldr	r3, [r7, #12]
    286e:	f04f 0200 	mov.w	r2, #0
    2872:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2874:	f107 0710 	add.w	r7, r7, #16
    2878:	46bd      	mov	sp, r7
    287a:	bd80      	pop	{r7, pc}

0000287c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2882:	f04f 0300 	mov.w	r3, #0
    2886:	607b      	str	r3, [r7, #4]
    2888:	e010      	b.n	28ac <prvInitialiseTaskLists+0x30>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    288a:	687a      	ldr	r2, [r7, #4]
    288c:	4613      	mov	r3, r2
    288e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2892:	189b      	adds	r3, r3, r2
    2894:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2898:	461a      	mov	r2, r3
    289a:	4b12      	ldr	r3, [pc, #72]	; (28e4 <prvInitialiseTaskLists+0x68>)
    289c:	18d3      	adds	r3, r2, r3
    289e:	4618      	mov	r0, r3
    28a0:	f7fe fa3e 	bl	d20 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	f103 0301 	add.w	r3, r3, #1
    28aa:	607b      	str	r3, [r7, #4]
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	2b04      	cmp	r3, #4
    28b0:	d9eb      	bls.n	288a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    28b2:	480d      	ldr	r0, [pc, #52]	; (28e8 <prvInitialiseTaskLists+0x6c>)
    28b4:	f7fe fa34 	bl	d20 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    28b8:	480c      	ldr	r0, [pc, #48]	; (28ec <prvInitialiseTaskLists+0x70>)
    28ba:	f7fe fa31 	bl	d20 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    28be:	480c      	ldr	r0, [pc, #48]	; (28f0 <prvInitialiseTaskLists+0x74>)
    28c0:	f7fe fa2e 	bl	d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    28c4:	480b      	ldr	r0, [pc, #44]	; (28f4 <prvInitialiseTaskLists+0x78>)
    28c6:	f7fe fa2b 	bl	d20 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    28ca:	480b      	ldr	r0, [pc, #44]	; (28f8 <prvInitialiseTaskLists+0x7c>)
    28cc:	f7fe fa28 	bl	d20 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    28d0:	4b0a      	ldr	r3, [pc, #40]	; (28fc <prvInitialiseTaskLists+0x80>)
    28d2:	4a05      	ldr	r2, [pc, #20]	; (28e8 <prvInitialiseTaskLists+0x6c>)
    28d4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    28d6:	4b0a      	ldr	r3, [pc, #40]	; (2900 <prvInitialiseTaskLists+0x84>)
    28d8:	4a04      	ldr	r2, [pc, #16]	; (28ec <prvInitialiseTaskLists+0x70>)
    28da:	601a      	str	r2, [r3, #0]
}
    28dc:	f107 0708 	add.w	r7, r7, #8
    28e0:	46bd      	mov	sp, r7
    28e2:	bd80      	pop	{r7, pc}
    28e4:	10004c34 	.word	0x10004c34
    28e8:	10004c98 	.word	0x10004c98
    28ec:	10004cac 	.word	0x10004cac
    28f0:	10004cc8 	.word	0x10004cc8
    28f4:	10004cdc 	.word	0x10004cdc
    28f8:	10004cf4 	.word	0x10004cf4
    28fc:	10004cc0 	.word	0x10004cc0
    2900:	10004cc4 	.word	0x10004cc4

00002904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2904:	b580      	push	{r7, lr}
    2906:	b082      	sub	sp, #8
    2908:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    290a:	4b19      	ldr	r3, [pc, #100]	; (2970 <prvCheckTasksWaitingTermination+0x6c>)
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	2b00      	cmp	r3, #0
    2910:	d02a      	beq.n	2968 <prvCheckTasksWaitingTermination+0x64>
		{
			vTaskSuspendAll();
    2912:	f7ff fb39 	bl	1f88 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2916:	4b17      	ldr	r3, [pc, #92]	; (2974 <prvCheckTasksWaitingTermination+0x70>)
    2918:	681b      	ldr	r3, [r3, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	bf14      	ite	ne
    291e:	2300      	movne	r3, #0
    2920:	2301      	moveq	r3, #1
    2922:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    2924:	f7ff fb3e 	bl	1fa4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	2b00      	cmp	r3, #0
    292c:	d11c      	bne.n	2968 <prvCheckTasksWaitingTermination+0x64>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    292e:	f7fe f983 	bl	c38 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2932:	4b10      	ldr	r3, [pc, #64]	; (2974 <prvCheckTasksWaitingTermination+0x70>)
    2934:	68db      	ldr	r3, [r3, #12]
    2936:	68db      	ldr	r3, [r3, #12]
    2938:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    293a:	683b      	ldr	r3, [r7, #0]
    293c:	f103 0304 	add.w	r3, r3, #4
    2940:	4618      	mov	r0, r3
    2942:	f7fe fa81 	bl	e48 <vListRemove>
					--uxCurrentNumberOfTasks;
    2946:	4b0c      	ldr	r3, [pc, #48]	; (2978 <prvCheckTasksWaitingTermination+0x74>)
    2948:	681b      	ldr	r3, [r3, #0]
    294a:	f103 32ff 	add.w	r2, r3, #4294967295
    294e:	4b0a      	ldr	r3, [pc, #40]	; (2978 <prvCheckTasksWaitingTermination+0x74>)
    2950:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    2952:	4b07      	ldr	r3, [pc, #28]	; (2970 <prvCheckTasksWaitingTermination+0x6c>)
    2954:	681b      	ldr	r3, [r3, #0]
    2956:	f103 32ff 	add.w	r2, r3, #4294967295
    295a:	4b05      	ldr	r3, [pc, #20]	; (2970 <prvCheckTasksWaitingTermination+0x6c>)
    295c:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    295e:	f7fe f97d 	bl	c5c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    2962:	6838      	ldr	r0, [r7, #0]
    2964:	f000 f98a 	bl	2c7c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2968:	f107 0708 	add.w	r7, r7, #8
    296c:	46bd      	mov	sp, r7
    296e:	bd80      	pop	{r7, pc}
    2970:	10004cf0 	.word	0x10004cf0
    2974:	10004cdc 	.word	0x10004cdc
    2978:	10004d08 	.word	0x10004d08

0000297c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    297c:	b580      	push	{r7, lr}
    297e:	b082      	sub	sp, #8
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2984:	4b14      	ldr	r3, [pc, #80]	; (29d8 <prvAddCurrentTaskToDelayedList+0x5c>)
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	687a      	ldr	r2, [r7, #4]
    298a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    298c:	4b13      	ldr	r3, [pc, #76]	; (29dc <prvAddCurrentTaskToDelayedList+0x60>)
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	687a      	ldr	r2, [r7, #4]
    2992:	429a      	cmp	r2, r3
    2994:	d20a      	bcs.n	29ac <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2996:	4b12      	ldr	r3, [pc, #72]	; (29e0 <prvAddCurrentTaskToDelayedList+0x64>)
    2998:	681a      	ldr	r2, [r3, #0]
    299a:	4b0f      	ldr	r3, [pc, #60]	; (29d8 <prvAddCurrentTaskToDelayedList+0x5c>)
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	f103 0304 	add.w	r3, r3, #4
    29a2:	4610      	mov	r0, r2
    29a4:	4619      	mov	r1, r3
    29a6:	f7fe fa15 	bl	dd4 <vListInsert>
    29aa:	e011      	b.n	29d0 <prvAddCurrentTaskToDelayedList+0x54>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    29ac:	4b0d      	ldr	r3, [pc, #52]	; (29e4 <prvAddCurrentTaskToDelayedList+0x68>)
    29ae:	681a      	ldr	r2, [r3, #0]
    29b0:	4b09      	ldr	r3, [pc, #36]	; (29d8 <prvAddCurrentTaskToDelayedList+0x5c>)
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	f103 0304 	add.w	r3, r3, #4
    29b8:	4610      	mov	r0, r2
    29ba:	4619      	mov	r1, r3
    29bc:	f7fe fa0a 	bl	dd4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    29c0:	4b09      	ldr	r3, [pc, #36]	; (29e8 <prvAddCurrentTaskToDelayedList+0x6c>)
    29c2:	681b      	ldr	r3, [r3, #0]
    29c4:	687a      	ldr	r2, [r7, #4]
    29c6:	429a      	cmp	r2, r3
    29c8:	d202      	bcs.n	29d0 <prvAddCurrentTaskToDelayedList+0x54>
		{
			xNextTaskUnblockTime = xTimeToWake;
    29ca:	4b07      	ldr	r3, [pc, #28]	; (29e8 <prvAddCurrentTaskToDelayedList+0x6c>)
    29cc:	687a      	ldr	r2, [r7, #4]
    29ce:	601a      	str	r2, [r3, #0]
		}
	}
}
    29d0:	f107 0708 	add.w	r7, r7, #8
    29d4:	46bd      	mov	sp, r7
    29d6:	bd80      	pop	{r7, pc}
    29d8:	10004c30 	.word	0x10004c30
    29dc:	10004d0c 	.word	0x10004d0c
    29e0:	10004cc4 	.word	0x10004cc4
    29e4:	10004cc0 	.word	0x10004cc0
    29e8:	10000008 	.word	0x10000008

000029ec <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    29ec:	b580      	push	{r7, lr}
    29ee:	b084      	sub	sp, #16
    29f0:	af00      	add	r7, sp, #0
    29f2:	4603      	mov	r3, r0
    29f4:	6039      	str	r1, [r7, #0]
    29f6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    29f8:	f04f 0050 	mov.w	r0, #80	; 0x50
    29fc:	f7fd ffa8 	bl	950 <pvPortMalloc>
    2a00:	4603      	mov	r3, r0
    2a02:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d023      	beq.n	2a52 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2a0a:	683b      	ldr	r3, [r7, #0]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d107      	bne.n	2a20 <prvAllocateTCBAndStack+0x34>
    2a10:	88fb      	ldrh	r3, [r7, #6]
    2a12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a16:	4618      	mov	r0, r3
    2a18:	f7fd ff9a 	bl	950 <pvPortMalloc>
    2a1c:	4603      	mov	r3, r0
    2a1e:	e000      	b.n	2a22 <prvAllocateTCBAndStack+0x36>
    2a20:	683b      	ldr	r3, [r7, #0]
    2a22:	68fa      	ldr	r2, [r7, #12]
    2a24:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    2a26:	68fb      	ldr	r3, [r7, #12]
    2a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d106      	bne.n	2a3c <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2a2e:	68f8      	ldr	r0, [r7, #12]
    2a30:	f7fe f83c 	bl	aac <vPortFree>
			pxNewTCB = NULL;
    2a34:	f04f 0300 	mov.w	r3, #0
    2a38:	60fb      	str	r3, [r7, #12]
    2a3a:	e00a      	b.n	2a52 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2a3c:	68fb      	ldr	r3, [r7, #12]
    2a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2a40:	88fb      	ldrh	r3, [r7, #6]
    2a42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a46:	4610      	mov	r0, r2
    2a48:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    2a4c:	461a      	mov	r2, r3
    2a4e:	f000 faad 	bl	2fac <memset>
		}
	}

	return pxNewTCB;
    2a52:	68fb      	ldr	r3, [r7, #12]
}
    2a54:	4618      	mov	r0, r3
    2a56:	f107 0710 	add.w	r7, r7, #16
    2a5a:	46bd      	mov	sp, r7
    2a5c:	bd80      	pop	{r7, pc}
    2a5e:	bf00      	nop

00002a60 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    2a60:	b590      	push	{r4, r7, lr}
    2a62:	b08f      	sub	sp, #60	; 0x3c
    2a64:	af04      	add	r7, sp, #16
    2a66:	60f8      	str	r0, [r7, #12]
    2a68:	60b9      	str	r1, [r7, #8]
    2a6a:	4613      	mov	r3, r2
    2a6c:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ 50 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    2a6e:	68bb      	ldr	r3, [r7, #8]
    2a70:	627b      	str	r3, [r7, #36]	; 0x24
    2a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a74:	685b      	ldr	r3, [r3, #4]
    2a76:	685a      	ldr	r2, [r3, #4]
    2a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a7a:	605a      	str	r2, [r3, #4]
    2a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a7e:	685a      	ldr	r2, [r3, #4]
    2a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a82:	f103 0308 	add.w	r3, r3, #8
    2a86:	429a      	cmp	r2, r3
    2a88:	d104      	bne.n	2a94 <prvListTaskWithinSingleList+0x34>
    2a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a8c:	685b      	ldr	r3, [r3, #4]
    2a8e:	685a      	ldr	r2, [r3, #4]
    2a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a92:	605a      	str	r2, [r3, #4]
    2a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a96:	685b      	ldr	r3, [r3, #4]
    2a98:	68db      	ldr	r3, [r3, #12]
    2a9a:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    2a9c:	68bb      	ldr	r3, [r7, #8]
    2a9e:	61fb      	str	r3, [r7, #28]
    2aa0:	69fb      	ldr	r3, [r7, #28]
    2aa2:	685b      	ldr	r3, [r3, #4]
    2aa4:	685a      	ldr	r2, [r3, #4]
    2aa6:	69fb      	ldr	r3, [r7, #28]
    2aa8:	605a      	str	r2, [r3, #4]
    2aaa:	69fb      	ldr	r3, [r7, #28]
    2aac:	685a      	ldr	r2, [r3, #4]
    2aae:	69fb      	ldr	r3, [r7, #28]
    2ab0:	f103 0308 	add.w	r3, r3, #8
    2ab4:	429a      	cmp	r2, r3
    2ab6:	d104      	bne.n	2ac2 <prvListTaskWithinSingleList+0x62>
    2ab8:	69fb      	ldr	r3, [r7, #28]
    2aba:	685b      	ldr	r3, [r3, #4]
    2abc:	685a      	ldr	r2, [r3, #4]
    2abe:	69fb      	ldr	r3, [r7, #28]
    2ac0:	605a      	str	r2, [r3, #4]
    2ac2:	69fb      	ldr	r3, [r7, #28]
    2ac4:	685b      	ldr	r3, [r3, #4]
    2ac6:	68db      	ldr	r3, [r3, #12]
    2ac8:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    2aca:	69bb      	ldr	r3, [r7, #24]
    2acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ace:	4618      	mov	r0, r3
    2ad0:	f000 f89c 	bl	2c0c <usTaskCheckFreeStackSpace>
    2ad4:	4603      	mov	r3, r0
    2ad6:	82fb      	strh	r3, [r7, #22]
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    2ad8:	69bb      	ldr	r3, [r7, #24]
    2ada:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
    2ae2:	69b9      	ldr	r1, [r7, #24]
    2ae4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    2ae6:	8af8      	ldrh	r0, [r7, #22]
    2ae8:	69b9      	ldr	r1, [r7, #24]
    2aea:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2aec:	9400      	str	r4, [sp, #0]
    2aee:	9001      	str	r0, [sp, #4]
    2af0:	9102      	str	r1, [sp, #8]
    2af2:	4808      	ldr	r0, [pc, #32]	; (2b14 <prvListTaskWithinSingleList+0xb4>)
    2af4:	4908      	ldr	r1, [pc, #32]	; (2b18 <prvListTaskWithinSingleList+0xb8>)
    2af6:	f7fd fea1 	bl	83c <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	4618      	mov	r0, r3
    2afe:	4905      	ldr	r1, [pc, #20]	; (2b14 <prvListTaskWithinSingleList+0xb4>)
    2b00:	f000 faae 	bl	3060 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    2b04:	69ba      	ldr	r2, [r7, #24]
    2b06:	6a3b      	ldr	r3, [r7, #32]
    2b08:	429a      	cmp	r2, r3
    2b0a:	d1c7      	bne.n	2a9c <prvListTaskWithinSingleList+0x3c>
	}
    2b0c:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    2b10:	46bd      	mov	sp, r7
    2b12:	bd90      	pop	{r4, r7, pc}
    2b14:	10004d68 	.word	0x10004d68
    2b18:	0000325c 	.word	0x0000325c

00002b1c <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b08c      	sub	sp, #48	; 0x30
    2b20:	af02      	add	r7, sp, #8
    2b22:	60f8      	str	r0, [r7, #12]
    2b24:	60b9      	str	r1, [r7, #8]
    2b26:	607a      	str	r2, [r7, #4]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    2b28:	68bb      	ldr	r3, [r7, #8]
    2b2a:	627b      	str	r3, [r7, #36]	; 0x24
    2b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b2e:	685b      	ldr	r3, [r3, #4]
    2b30:	685a      	ldr	r2, [r3, #4]
    2b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b34:	605a      	str	r2, [r3, #4]
    2b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b38:	685a      	ldr	r2, [r3, #4]
    2b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b3c:	f103 0308 	add.w	r3, r3, #8
    2b40:	429a      	cmp	r2, r3
    2b42:	d104      	bne.n	2b4e <prvGenerateRunTimeStatsForTasksInList+0x32>
    2b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b46:	685b      	ldr	r3, [r3, #4]
    2b48:	685a      	ldr	r2, [r3, #4]
    2b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b4c:	605a      	str	r2, [r3, #4]
    2b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2b50:	685b      	ldr	r3, [r3, #4]
    2b52:	68db      	ldr	r3, [r3, #12]
    2b54:	623b      	str	r3, [r7, #32]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    2b56:	68bb      	ldr	r3, [r7, #8]
    2b58:	61fb      	str	r3, [r7, #28]
    2b5a:	69fb      	ldr	r3, [r7, #28]
    2b5c:	685b      	ldr	r3, [r3, #4]
    2b5e:	685a      	ldr	r2, [r3, #4]
    2b60:	69fb      	ldr	r3, [r7, #28]
    2b62:	605a      	str	r2, [r3, #4]
    2b64:	69fb      	ldr	r3, [r7, #28]
    2b66:	685a      	ldr	r2, [r3, #4]
    2b68:	69fb      	ldr	r3, [r7, #28]
    2b6a:	f103 0308 	add.w	r3, r3, #8
    2b6e:	429a      	cmp	r2, r3
    2b70:	d104      	bne.n	2b7c <prvGenerateRunTimeStatsForTasksInList+0x60>
    2b72:	69fb      	ldr	r3, [r7, #28]
    2b74:	685b      	ldr	r3, [r3, #4]
    2b76:	685a      	ldr	r2, [r3, #4]
    2b78:	69fb      	ldr	r3, [r7, #28]
    2b7a:	605a      	str	r2, [r3, #4]
    2b7c:	69fb      	ldr	r3, [r7, #28]
    2b7e:	685b      	ldr	r3, [r3, #4]
    2b80:	68db      	ldr	r3, [r3, #12]
    2b82:	61bb      	str	r3, [r7, #24]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
    2b84:	687b      	ldr	r3, [r7, #4]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d02f      	beq.n	2bea <prvGenerateRunTimeStatsForTasksInList+0xce>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
    2b8a:	69bb      	ldr	r3, [r7, #24]
    2b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d108      	bne.n	2ba4 <prvGenerateRunTimeStatsForTasksInList+0x88>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
    2b92:	69bb      	ldr	r3, [r7, #24]
    2b94:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2b98:	4818      	ldr	r0, [pc, #96]	; (2bfc <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2b9a:	4919      	ldr	r1, [pc, #100]	; (2c00 <prvGenerateRunTimeStatsForTasksInList+0xe4>)
    2b9c:	461a      	mov	r2, r3
    2b9e:	f7fd fe4d 	bl	83c <sprintf>
    2ba2:	e01d      	b.n	2be0 <prvGenerateRunTimeStatsForTasksInList+0xc4>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
    2ba4:	69bb      	ldr	r3, [r7, #24]
    2ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	fbb2 f3f3 	udiv	r3, r2, r3
    2bae:	617b      	str	r3, [r7, #20]

					if( ulStatsAsPercentage > 0UL )
    2bb0:	697b      	ldr	r3, [r7, #20]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d00b      	beq.n	2bce <prvGenerateRunTimeStatsForTasksInList+0xb2>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
    2bb6:	69bb      	ldr	r3, [r7, #24]
    2bb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2bbc:	69bb      	ldr	r3, [r7, #24]
    2bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2bc0:	6979      	ldr	r1, [r7, #20]
    2bc2:	9100      	str	r1, [sp, #0]
    2bc4:	480d      	ldr	r0, [pc, #52]	; (2bfc <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2bc6:	490f      	ldr	r1, [pc, #60]	; (2c04 <prvGenerateRunTimeStatsForTasksInList+0xe8>)
    2bc8:	f7fd fe38 	bl	83c <sprintf>
    2bcc:	e008      	b.n	2be0 <prvGenerateRunTimeStatsForTasksInList+0xc4>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter );
    2bce:	69bb      	ldr	r3, [r7, #24]
    2bd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2bd4:	69bb      	ldr	r3, [r7, #24]
    2bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2bd8:	4808      	ldr	r0, [pc, #32]	; (2bfc <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2bda:	490b      	ldr	r1, [pc, #44]	; (2c08 <prvGenerateRunTimeStatsForTasksInList+0xec>)
    2bdc:	f7fd fe2e 	bl	83c <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
    2be0:	68fb      	ldr	r3, [r7, #12]
    2be2:	4618      	mov	r0, r3
    2be4:	4905      	ldr	r1, [pc, #20]	; (2bfc <prvGenerateRunTimeStatsForTasksInList+0xe0>)
    2be6:	f000 fa3b 	bl	3060 <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
    2bea:	69ba      	ldr	r2, [r7, #24]
    2bec:	6a3b      	ldr	r3, [r7, #32]
    2bee:	429a      	cmp	r2, r3
    2bf0:	d1b1      	bne.n	2b56 <prvGenerateRunTimeStatsForTasksInList+0x3a>
	}
    2bf2:	f107 0728 	add.w	r7, r7, #40	; 0x28
    2bf6:	46bd      	mov	sp, r7
    2bf8:	bd80      	pop	{r7, pc}
    2bfa:	bf00      	nop
    2bfc:	10004d30 	.word	0x10004d30
    2c00:	00003270 	.word	0x00003270
    2c04:	00003280 	.word	0x00003280
    2c08:	00003290 	.word	0x00003290

00002c0c <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    2c0c:	b490      	push	{r4, r7}
    2c0e:	b082      	sub	sp, #8
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
    2c14:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2c18:	e006      	b.n	2c28 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	f103 0301 	add.w	r3, r3, #1
    2c20:	607b      	str	r3, [r7, #4]
			usCount++;
    2c22:	f104 0301 	add.w	r3, r4, #1
    2c26:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	2ba5      	cmp	r3, #165	; 0xa5
    2c2e:	d0f4      	beq.n	2c1a <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
    2c30:	ea4f 0394 	mov.w	r3, r4, lsr #2
    2c34:	b29c      	uxth	r4, r3

		return usCount;
    2c36:	4623      	mov	r3, r4
	}
    2c38:	4618      	mov	r0, r3
    2c3a:	f107 0708 	add.w	r7, r7, #8
    2c3e:	46bd      	mov	sp, r7
    2c40:	bc90      	pop	{r4, r7}
    2c42:	4770      	bx	lr

00002c44 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    2c44:	b580      	push	{r7, lr}
    2c46:	b086      	sub	sp, #24
    2c48:	af00      	add	r7, sp, #0
    2c4a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d102      	bne.n	2c58 <uxTaskGetStackHighWaterMark+0x14>
    2c52:	4b09      	ldr	r3, [pc, #36]	; (2c78 <uxTaskGetStackHighWaterMark+0x34>)
    2c54:	681b      	ldr	r3, [r3, #0]
    2c56:	e000      	b.n	2c5a <uxTaskGetStackHighWaterMark+0x16>
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    2c5c:	697b      	ldr	r3, [r7, #20]
    2c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c60:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    2c62:	6938      	ldr	r0, [r7, #16]
    2c64:	f7ff ffd2 	bl	2c0c <usTaskCheckFreeStackSpace>
    2c68:	4603      	mov	r3, r0
    2c6a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    2c6c:	68fb      	ldr	r3, [r7, #12]
	}
    2c6e:	4618      	mov	r0, r3
    2c70:	f107 0718 	add.w	r7, r7, #24
    2c74:	46bd      	mov	sp, r7
    2c76:	bd80      	pop	{r7, pc}
    2c78:	10004c30 	.word	0x10004c30

00002c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b082      	sub	sp, #8
    2c80:	af00      	add	r7, sp, #0
    2c82:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2c88:	4618      	mov	r0, r3
    2c8a:	f7fd ff0f 	bl	aac <vPortFree>
		vPortFree( pxTCB );
    2c8e:	6878      	ldr	r0, [r7, #4]
    2c90:	f7fd ff0c 	bl	aac <vPortFree>
	}
    2c94:	f107 0708 	add.w	r7, r7, #8
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}

00002c9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    2c9c:	b480      	push	{r7}
    2c9e:	b083      	sub	sp, #12
    2ca0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2ca2:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <xTaskGetCurrentTaskHandle+0x1c>)
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	607b      	str	r3, [r7, #4]

		return xReturn;
    2ca8:	687b      	ldr	r3, [r7, #4]
	}
    2caa:	4618      	mov	r0, r3
    2cac:	f107 070c 	add.w	r7, r7, #12
    2cb0:	46bd      	mov	sp, r7
    2cb2:	bc80      	pop	{r7}
    2cb4:	4770      	bx	lr
    2cb6:	bf00      	nop
    2cb8:	10004c30 	.word	0x10004c30

00002cbc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	b084      	sub	sp, #16
    2cc0:	af00      	add	r7, sp, #0
    2cc2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2cc8:	68fb      	ldr	r3, [r7, #12]
    2cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2ccc:	4b25      	ldr	r3, [pc, #148]	; (2d64 <vTaskPriorityInherit+0xa8>)
    2cce:	681b      	ldr	r3, [r3, #0]
    2cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cd2:	429a      	cmp	r2, r3
    2cd4:	d242      	bcs.n	2d5c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    2cd6:	4b23      	ldr	r3, [pc, #140]	; (2d64 <vTaskPriorityInherit+0xa8>)
    2cd8:	681b      	ldr	r3, [r3, #0]
    2cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2cdc:	f1c3 0205 	rsb	r2, r3, #5
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2ce4:	68fb      	ldr	r3, [r7, #12]
    2ce6:	6959      	ldr	r1, [r3, #20]
    2ce8:	68fb      	ldr	r3, [r7, #12]
    2cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2cec:	4613      	mov	r3, r2
    2cee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cf2:	189b      	adds	r3, r3, r2
    2cf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2cf8:	461a      	mov	r2, r3
    2cfa:	4b1b      	ldr	r3, [pc, #108]	; (2d68 <vTaskPriorityInherit+0xac>)
    2cfc:	18d3      	adds	r3, r2, r3
    2cfe:	4299      	cmp	r1, r3
    2d00:	d127      	bne.n	2d52 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	f103 0304 	add.w	r3, r3, #4
    2d08:	4618      	mov	r0, r3
    2d0a:	f7fe f89d 	bl	e48 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2d0e:	4b15      	ldr	r3, [pc, #84]	; (2d64 <vTaskPriorityInherit+0xa8>)
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    2d18:	68fb      	ldr	r3, [r7, #12]
    2d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d1c:	4b13      	ldr	r3, [pc, #76]	; (2d6c <vTaskPriorityInherit+0xb0>)
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	429a      	cmp	r2, r3
    2d22:	d903      	bls.n	2d2c <vTaskPriorityInherit+0x70>
    2d24:	68fb      	ldr	r3, [r7, #12]
    2d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d28:	4b10      	ldr	r3, [pc, #64]	; (2d6c <vTaskPriorityInherit+0xb0>)
    2d2a:	601a      	str	r2, [r3, #0]
    2d2c:	68fb      	ldr	r3, [r7, #12]
    2d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d30:	4613      	mov	r3, r2
    2d32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d36:	189b      	adds	r3, r3, r2
    2d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d3c:	461a      	mov	r2, r3
    2d3e:	4b0a      	ldr	r3, [pc, #40]	; (2d68 <vTaskPriorityInherit+0xac>)
    2d40:	18d2      	adds	r2, r2, r3
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	f103 0304 	add.w	r3, r3, #4
    2d48:	4610      	mov	r0, r2
    2d4a:	4619      	mov	r1, r3
    2d4c:	f7fe f81a 	bl	d84 <vListInsertEnd>
    2d50:	e004      	b.n	2d5c <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2d52:	4b04      	ldr	r3, [pc, #16]	; (2d64 <vTaskPriorityInherit+0xa8>)
    2d54:	681b      	ldr	r3, [r3, #0]
    2d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d58:	68fb      	ldr	r3, [r7, #12]
    2d5a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    2d5c:	f107 0710 	add.w	r7, r7, #16
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}
    2d64:	10004c30 	.word	0x10004c30
    2d68:	10004c34 	.word	0x10004c34
    2d6c:	10004d14 	.word	0x10004d14

00002d70 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    2d70:	b580      	push	{r7, lr}
    2d72:	b084      	sub	sp, #16
    2d74:	af00      	add	r7, sp, #0
    2d76:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    2d7c:	687b      	ldr	r3, [r7, #4]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d031      	beq.n	2de6 <vTaskPriorityDisinherit+0x76>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d02b      	beq.n	2de6 <vTaskPriorityDisinherit+0x76>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    2d8e:	68fb      	ldr	r3, [r7, #12]
    2d90:	f103 0304 	add.w	r3, r3, #4
    2d94:	4618      	mov	r0, r3
    2d96:	f7fe f857 	bl	e48 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2d9a:	68fb      	ldr	r3, [r7, #12]
    2d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2da2:	68fb      	ldr	r3, [r7, #12]
    2da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2da6:	f1c3 0205 	rsb	r2, r3, #5
    2daa:	68fb      	ldr	r3, [r7, #12]
    2dac:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    2dae:	68fb      	ldr	r3, [r7, #12]
    2db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2db2:	4b0f      	ldr	r3, [pc, #60]	; (2df0 <vTaskPriorityDisinherit+0x80>)
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	429a      	cmp	r2, r3
    2db8:	d903      	bls.n	2dc2 <vTaskPriorityDisinherit+0x52>
    2dba:	68fb      	ldr	r3, [r7, #12]
    2dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2dbe:	4b0c      	ldr	r3, [pc, #48]	; (2df0 <vTaskPriorityDisinherit+0x80>)
    2dc0:	601a      	str	r2, [r3, #0]
    2dc2:	68fb      	ldr	r3, [r7, #12]
    2dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2dc6:	4613      	mov	r3, r2
    2dc8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2dcc:	189b      	adds	r3, r3, r2
    2dce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2dd2:	461a      	mov	r2, r3
    2dd4:	4b07      	ldr	r3, [pc, #28]	; (2df4 <vTaskPriorityDisinherit+0x84>)
    2dd6:	18d2      	adds	r2, r2, r3
    2dd8:	68fb      	ldr	r3, [r7, #12]
    2dda:	f103 0304 	add.w	r3, r3, #4
    2dde:	4610      	mov	r0, r2
    2de0:	4619      	mov	r1, r3
    2de2:	f7fd ffcf 	bl	d84 <vListInsertEnd>
			}
		}
	}
    2de6:	f107 0710 	add.w	r7, r7, #16
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	bf00      	nop
    2df0:	10004d14 	.word	0x10004d14
    2df4:	10004c34 	.word	0x10004c34

00002df8 <memcmp>:
    2df8:	2a03      	cmp	r2, #3
    2dfa:	b470      	push	{r4, r5, r6}
    2dfc:	4604      	mov	r4, r0
    2dfe:	460d      	mov	r5, r1
    2e00:	d926      	bls.n	2e50 <memcmp+0x58>
    2e02:	ea41 0300 	orr.w	r3, r1, r0
    2e06:	f013 0f03 	tst.w	r3, #3
    2e0a:	d013      	beq.n	2e34 <memcmp+0x3c>
    2e0c:	7820      	ldrb	r0, [r4, #0]
    2e0e:	782b      	ldrb	r3, [r5, #0]
    2e10:	4298      	cmp	r0, r3
    2e12:	bf08      	it	eq
    2e14:	4629      	moveq	r1, r5
    2e16:	d006      	beq.n	2e26 <memcmp+0x2e>
    2e18:	e01e      	b.n	2e58 <memcmp+0x60>
    2e1a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    2e1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    2e22:	4298      	cmp	r0, r3
    2e24:	d118      	bne.n	2e58 <memcmp+0x60>
    2e26:	2a01      	cmp	r2, #1
    2e28:	f102 32ff 	add.w	r2, r2, #4294967295
    2e2c:	d1f5      	bne.n	2e1a <memcmp+0x22>
    2e2e:	2000      	movs	r0, #0
    2e30:	bc70      	pop	{r4, r5, r6}
    2e32:	4770      	bx	lr
    2e34:	460b      	mov	r3, r1
    2e36:	4604      	mov	r4, r0
    2e38:	f851 5b04 	ldr.w	r5, [r1], #4
    2e3c:	f850 6b04 	ldr.w	r6, [r0], #4
    2e40:	42ae      	cmp	r6, r5
    2e42:	d104      	bne.n	2e4e <memcmp+0x56>
    2e44:	3a04      	subs	r2, #4
    2e46:	4604      	mov	r4, r0
    2e48:	2a03      	cmp	r2, #3
    2e4a:	460b      	mov	r3, r1
    2e4c:	d8f2      	bhi.n	2e34 <memcmp+0x3c>
    2e4e:	461d      	mov	r5, r3
    2e50:	4610      	mov	r0, r2
    2e52:	2a00      	cmp	r2, #0
    2e54:	d1da      	bne.n	2e0c <memcmp+0x14>
    2e56:	e7eb      	b.n	2e30 <memcmp+0x38>
    2e58:	1ac0      	subs	r0, r0, r3
    2e5a:	e7e9      	b.n	2e30 <memcmp+0x38>

00002e5c <memcpy>:
    2e5c:	2a03      	cmp	r2, #3
    2e5e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    2e62:	d809      	bhi.n	2e78 <memcpy+0x1c>
    2e64:	b12a      	cbz	r2, 2e72 <memcpy+0x16>
    2e66:	2300      	movs	r3, #0
    2e68:	5ccc      	ldrb	r4, [r1, r3]
    2e6a:	54c4      	strb	r4, [r0, r3]
    2e6c:	3301      	adds	r3, #1
    2e6e:	4293      	cmp	r3, r2
    2e70:	d1fa      	bne.n	2e68 <memcpy+0xc>
    2e72:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    2e76:	4770      	bx	lr
    2e78:	460b      	mov	r3, r1
    2e7a:	1882      	adds	r2, r0, r2
    2e7c:	4601      	mov	r1, r0
    2e7e:	e003      	b.n	2e88 <memcpy+0x2c>
    2e80:	7824      	ldrb	r4, [r4, #0]
    2e82:	3301      	adds	r3, #1
    2e84:	f801 4b01 	strb.w	r4, [r1], #1
    2e88:	f011 0f03 	tst.w	r1, #3
    2e8c:	461c      	mov	r4, r3
    2e8e:	d1f7      	bne.n	2e80 <memcpy+0x24>
    2e90:	f013 0503 	ands.w	r5, r3, #3
    2e94:	d05d      	beq.n	2f52 <memcpy+0xf6>
    2e96:	426e      	negs	r6, r5
    2e98:	f1c5 0c04 	rsb	ip, r5, #4
    2e9c:	00ed      	lsls	r5, r5, #3
    2e9e:	599b      	ldr	r3, [r3, r6]
    2ea0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    2ea4:	e008      	b.n	2eb8 <memcpy+0x5c>
    2ea6:	3404      	adds	r4, #4
    2ea8:	59a7      	ldr	r7, [r4, r6]
    2eaa:	463b      	mov	r3, r7
    2eac:	fa07 f70c 	lsl.w	r7, r7, ip
    2eb0:	ea48 0707 	orr.w	r7, r8, r7
    2eb4:	f841 7b04 	str.w	r7, [r1], #4
    2eb8:	1a57      	subs	r7, r2, r1
    2eba:	fa23 f805 	lsr.w	r8, r3, r5
    2ebe:	2f03      	cmp	r7, #3
    2ec0:	dcf1      	bgt.n	2ea6 <memcpy+0x4a>
    2ec2:	e003      	b.n	2ecc <memcpy+0x70>
    2ec4:	f814 3b01 	ldrb.w	r3, [r4], #1
    2ec8:	f801 3b01 	strb.w	r3, [r1], #1
    2ecc:	428a      	cmp	r2, r1
    2ece:	d8f9      	bhi.n	2ec4 <memcpy+0x68>
    2ed0:	e7cf      	b.n	2e72 <memcpy+0x16>
    2ed2:	f853 4c40 	ldr.w	r4, [r3, #-64]
    2ed6:	f841 4c40 	str.w	r4, [r1, #-64]
    2eda:	f853 4c3c 	ldr.w	r4, [r3, #-60]
    2ede:	f841 4c3c 	str.w	r4, [r1, #-60]
    2ee2:	f853 4c38 	ldr.w	r4, [r3, #-56]
    2ee6:	f841 4c38 	str.w	r4, [r1, #-56]
    2eea:	f853 4c34 	ldr.w	r4, [r3, #-52]
    2eee:	f841 4c34 	str.w	r4, [r1, #-52]
    2ef2:	f853 4c30 	ldr.w	r4, [r3, #-48]
    2ef6:	f841 4c30 	str.w	r4, [r1, #-48]
    2efa:	f853 4c2c 	ldr.w	r4, [r3, #-44]
    2efe:	f841 4c2c 	str.w	r4, [r1, #-44]
    2f02:	f853 4c28 	ldr.w	r4, [r3, #-40]
    2f06:	f841 4c28 	str.w	r4, [r1, #-40]
    2f0a:	f853 4c24 	ldr.w	r4, [r3, #-36]
    2f0e:	f841 4c24 	str.w	r4, [r1, #-36]
    2f12:	f853 4c20 	ldr.w	r4, [r3, #-32]
    2f16:	f841 4c20 	str.w	r4, [r1, #-32]
    2f1a:	f853 4c1c 	ldr.w	r4, [r3, #-28]
    2f1e:	f841 4c1c 	str.w	r4, [r1, #-28]
    2f22:	f853 4c18 	ldr.w	r4, [r3, #-24]
    2f26:	f841 4c18 	str.w	r4, [r1, #-24]
    2f2a:	f853 4c14 	ldr.w	r4, [r3, #-20]
    2f2e:	f841 4c14 	str.w	r4, [r1, #-20]
    2f32:	f853 4c10 	ldr.w	r4, [r3, #-16]
    2f36:	f841 4c10 	str.w	r4, [r1, #-16]
    2f3a:	f853 4c0c 	ldr.w	r4, [r3, #-12]
    2f3e:	f841 4c0c 	str.w	r4, [r1, #-12]
    2f42:	f853 4c08 	ldr.w	r4, [r3, #-8]
    2f46:	f841 4c08 	str.w	r4, [r1, #-8]
    2f4a:	f853 4c04 	ldr.w	r4, [r3, #-4]
    2f4e:	f841 4c04 	str.w	r4, [r1, #-4]
    2f52:	1a56      	subs	r6, r2, r1
    2f54:	461d      	mov	r5, r3
    2f56:	460c      	mov	r4, r1
    2f58:	3340      	adds	r3, #64	; 0x40
    2f5a:	3140      	adds	r1, #64	; 0x40
    2f5c:	2e3f      	cmp	r6, #63	; 0x3f
    2f5e:	dcb8      	bgt.n	2ed2 <memcpy+0x76>
    2f60:	462b      	mov	r3, r5
    2f62:	e00f      	b.n	2f84 <memcpy+0x128>
    2f64:	f853 1c10 	ldr.w	r1, [r3, #-16]
    2f68:	f844 1c10 	str.w	r1, [r4, #-16]
    2f6c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    2f70:	f844 1c0c 	str.w	r1, [r4, #-12]
    2f74:	f853 1c08 	ldr.w	r1, [r3, #-8]
    2f78:	f844 1c08 	str.w	r1, [r4, #-8]
    2f7c:	f853 1c04 	ldr.w	r1, [r3, #-4]
    2f80:	f844 1c04 	str.w	r1, [r4, #-4]
    2f84:	1b16      	subs	r6, r2, r4
    2f86:	4621      	mov	r1, r4
    2f88:	461d      	mov	r5, r3
    2f8a:	3410      	adds	r4, #16
    2f8c:	3310      	adds	r3, #16
    2f8e:	2e0f      	cmp	r6, #15
    2f90:	dce8      	bgt.n	2f64 <memcpy+0x108>
    2f92:	462b      	mov	r3, r5
    2f94:	e002      	b.n	2f9c <memcpy+0x140>
    2f96:	6824      	ldr	r4, [r4, #0]
    2f98:	f841 4b04 	str.w	r4, [r1], #4
    2f9c:	1a55      	subs	r5, r2, r1
    2f9e:	461c      	mov	r4, r3
    2fa0:	2d03      	cmp	r5, #3
    2fa2:	f103 0304 	add.w	r3, r3, #4
    2fa6:	dcf6      	bgt.n	2f96 <memcpy+0x13a>
    2fa8:	e790      	b.n	2ecc <memcpy+0x70>
    2faa:	bf00      	nop

00002fac <memset>:
    2fac:	2a03      	cmp	r2, #3
    2fae:	b2c9      	uxtb	r1, r1
    2fb0:	b470      	push	{r4, r5, r6}
    2fb2:	d808      	bhi.n	2fc6 <memset+0x1a>
    2fb4:	b12a      	cbz	r2, 2fc2 <memset+0x16>
    2fb6:	4603      	mov	r3, r0
    2fb8:	1812      	adds	r2, r2, r0
    2fba:	f803 1b01 	strb.w	r1, [r3], #1
    2fbe:	4293      	cmp	r3, r2
    2fc0:	d1fb      	bne.n	2fba <memset+0xe>
    2fc2:	bc70      	pop	{r4, r5, r6}
    2fc4:	4770      	bx	lr
    2fc6:	1882      	adds	r2, r0, r2
    2fc8:	4604      	mov	r4, r0
    2fca:	e001      	b.n	2fd0 <memset+0x24>
    2fcc:	f804 1b01 	strb.w	r1, [r4], #1
    2fd0:	f014 0f03 	tst.w	r4, #3
    2fd4:	d1fa      	bne.n	2fcc <memset+0x20>
    2fd6:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    2fda:	fb03 f301 	mul.w	r3, r3, r1
    2fde:	e01f      	b.n	3020 <memset+0x74>
    2fe0:	f844 3c40 	str.w	r3, [r4, #-64]
    2fe4:	f844 3c3c 	str.w	r3, [r4, #-60]
    2fe8:	f844 3c38 	str.w	r3, [r4, #-56]
    2fec:	f844 3c34 	str.w	r3, [r4, #-52]
    2ff0:	f844 3c30 	str.w	r3, [r4, #-48]
    2ff4:	f844 3c2c 	str.w	r3, [r4, #-44]
    2ff8:	f844 3c28 	str.w	r3, [r4, #-40]
    2ffc:	f844 3c24 	str.w	r3, [r4, #-36]
    3000:	f844 3c20 	str.w	r3, [r4, #-32]
    3004:	f844 3c1c 	str.w	r3, [r4, #-28]
    3008:	f844 3c18 	str.w	r3, [r4, #-24]
    300c:	f844 3c14 	str.w	r3, [r4, #-20]
    3010:	f844 3c10 	str.w	r3, [r4, #-16]
    3014:	f844 3c0c 	str.w	r3, [r4, #-12]
    3018:	f844 3c08 	str.w	r3, [r4, #-8]
    301c:	f844 3c04 	str.w	r3, [r4, #-4]
    3020:	1b16      	subs	r6, r2, r4
    3022:	4625      	mov	r5, r4
    3024:	3440      	adds	r4, #64	; 0x40
    3026:	2e3f      	cmp	r6, #63	; 0x3f
    3028:	dcda      	bgt.n	2fe0 <memset+0x34>
    302a:	462c      	mov	r4, r5
    302c:	e007      	b.n	303e <memset+0x92>
    302e:	f844 3c10 	str.w	r3, [r4, #-16]
    3032:	f844 3c0c 	str.w	r3, [r4, #-12]
    3036:	f844 3c08 	str.w	r3, [r4, #-8]
    303a:	f844 3c04 	str.w	r3, [r4, #-4]
    303e:	1b16      	subs	r6, r2, r4
    3040:	4625      	mov	r5, r4
    3042:	3410      	adds	r4, #16
    3044:	2e0f      	cmp	r6, #15
    3046:	dcf2      	bgt.n	302e <memset+0x82>
    3048:	e001      	b.n	304e <memset+0xa2>
    304a:	f845 3b04 	str.w	r3, [r5], #4
    304e:	1b54      	subs	r4, r2, r5
    3050:	2c03      	cmp	r4, #3
    3052:	dcfa      	bgt.n	304a <memset+0x9e>
    3054:	e001      	b.n	305a <memset+0xae>
    3056:	f805 1b01 	strb.w	r1, [r5], #1
    305a:	4295      	cmp	r5, r2
    305c:	d3fb      	bcc.n	3056 <memset+0xaa>
    305e:	e7b0      	b.n	2fc2 <memset+0x16>

00003060 <strcat>:
    3060:	f010 0f03 	tst.w	r0, #3
    3064:	b538      	push	{r3, r4, r5, lr}
    3066:	4604      	mov	r4, r0
    3068:	d112      	bne.n	3090 <strcat+0x30>
    306a:	6803      	ldr	r3, [r0, #0]
    306c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    3070:	ea22 0303 	bic.w	r3, r2, r3
    3074:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    3078:	d10a      	bne.n	3090 <strcat+0x30>
    307a:	1d03      	adds	r3, r0, #4
    307c:	4618      	mov	r0, r3
    307e:	f853 2b04 	ldr.w	r2, [r3], #4
    3082:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    3086:	ea25 0202 	bic.w	r2, r5, r2
    308a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    308e:	d0f5      	beq.n	307c <strcat+0x1c>
    3090:	7803      	ldrb	r3, [r0, #0]
    3092:	b12b      	cbz	r3, 30a0 <strcat+0x40>
    3094:	1c43      	adds	r3, r0, #1
    3096:	4618      	mov	r0, r3
    3098:	f813 2b01 	ldrb.w	r2, [r3], #1
    309c:	2a00      	cmp	r2, #0
    309e:	d1fa      	bne.n	3096 <strcat+0x36>
    30a0:	f000 f802 	bl	30a8 <strcpy>
    30a4:	4620      	mov	r0, r4
    30a6:	bd38      	pop	{r3, r4, r5, pc}

000030a8 <strcpy>:
    30a8:	ea80 0201 	eor.w	r2, r0, r1
    30ac:	4684      	mov	ip, r0
    30ae:	f012 0f03 	tst.w	r2, #3
    30b2:	d14f      	bne.n	3154 <strcpy+0xac>
    30b4:	f011 0f03 	tst.w	r1, #3
    30b8:	d132      	bne.n	3120 <strcpy+0x78>
    30ba:	f84d 4d04 	str.w	r4, [sp, #-4]!
    30be:	f011 0f04 	tst.w	r1, #4
    30c2:	f851 3b04 	ldr.w	r3, [r1], #4
    30c6:	d00b      	beq.n	30e0 <strcpy+0x38>
    30c8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    30cc:	439a      	bics	r2, r3
    30ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    30d2:	bf04      	itt	eq
    30d4:	f84c 3b04 	streq.w	r3, [ip], #4
    30d8:	f851 3b04 	ldreq.w	r3, [r1], #4
    30dc:	d116      	bne.n	310c <strcpy+0x64>
    30de:	bf00      	nop
    30e0:	f851 4b04 	ldr.w	r4, [r1], #4
    30e4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    30e8:	439a      	bics	r2, r3
    30ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    30ee:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    30f2:	d10b      	bne.n	310c <strcpy+0x64>
    30f4:	f84c 3b04 	str.w	r3, [ip], #4
    30f8:	43a2      	bics	r2, r4
    30fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    30fe:	bf04      	itt	eq
    3100:	f851 3b04 	ldreq.w	r3, [r1], #4
    3104:	f84c 4b04 	streq.w	r4, [ip], #4
    3108:	d0ea      	beq.n	30e0 <strcpy+0x38>
    310a:	4623      	mov	r3, r4
    310c:	f80c 3b01 	strb.w	r3, [ip], #1
    3110:	f013 0fff 	tst.w	r3, #255	; 0xff
    3114:	ea4f 2333 	mov.w	r3, r3, ror #8
    3118:	d1f8      	bne.n	310c <strcpy+0x64>
    311a:	f85d 4b04 	ldr.w	r4, [sp], #4
    311e:	4770      	bx	lr
    3120:	f011 0f01 	tst.w	r1, #1
    3124:	d006      	beq.n	3134 <strcpy+0x8c>
    3126:	f811 2b01 	ldrb.w	r2, [r1], #1
    312a:	f80c 2b01 	strb.w	r2, [ip], #1
    312e:	2a00      	cmp	r2, #0
    3130:	bf08      	it	eq
    3132:	4770      	bxeq	lr
    3134:	f011 0f02 	tst.w	r1, #2
    3138:	d0bf      	beq.n	30ba <strcpy+0x12>
    313a:	f831 2b02 	ldrh.w	r2, [r1], #2
    313e:	f012 0fff 	tst.w	r2, #255	; 0xff
    3142:	bf16      	itet	ne
    3144:	f82c 2b02 	strhne.w	r2, [ip], #2
    3148:	f88c 2000 	strbeq.w	r2, [ip]
    314c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    3150:	d1b3      	bne.n	30ba <strcpy+0x12>
    3152:	4770      	bx	lr
    3154:	f811 2b01 	ldrb.w	r2, [r1], #1
    3158:	f80c 2b01 	strb.w	r2, [ip], #1
    315c:	2a00      	cmp	r2, #0
    315e:	d1f9      	bne.n	3154 <strcpy+0xac>
    3160:	4770      	bx	lr
    3162:	bf00      	nop

00003164 <strlen>:
    3164:	f020 0103 	bic.w	r1, r0, #3
    3168:	f010 0003 	ands.w	r0, r0, #3
    316c:	f1c0 0000 	rsb	r0, r0, #0
    3170:	f851 3b04 	ldr.w	r3, [r1], #4
    3174:	f100 0c04 	add.w	ip, r0, #4
    3178:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    317c:	f06f 0200 	mvn.w	r2, #0
    3180:	bf1c      	itt	ne
    3182:	fa22 f20c 	lsrne.w	r2, r2, ip
    3186:	4313      	orrne	r3, r2
    3188:	f04f 0c01 	mov.w	ip, #1
    318c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    3190:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    3194:	eba3 020c 	sub.w	r2, r3, ip
    3198:	ea22 0203 	bic.w	r2, r2, r3
    319c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    31a0:	bf04      	itt	eq
    31a2:	f851 3b04 	ldreq.w	r3, [r1], #4
    31a6:	3004      	addeq	r0, #4
    31a8:	d0f4      	beq.n	3194 <strlen+0x30>
    31aa:	f013 0fff 	tst.w	r3, #255	; 0xff
    31ae:	bf1f      	itttt	ne
    31b0:	3001      	addne	r0, #1
    31b2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    31b6:	3001      	addne	r0, #1
    31b8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    31bc:	bf18      	it	ne
    31be:	3001      	addne	r0, #1
    31c0:	4770      	bx	lr
    31c2:	bf00      	nop

000031c4 <strncpy>:
    31c4:	ea41 0300 	orr.w	r3, r1, r0
    31c8:	f013 0f03 	tst.w	r3, #3
    31cc:	460b      	mov	r3, r1
    31ce:	b470      	push	{r4, r5, r6}
    31d0:	bf14      	ite	ne
    31d2:	2400      	movne	r4, #0
    31d4:	2401      	moveq	r4, #1
    31d6:	2a03      	cmp	r2, #3
    31d8:	bf94      	ite	ls
    31da:	2400      	movls	r4, #0
    31dc:	f004 0401 	andhi.w	r4, r4, #1
    31e0:	4605      	mov	r5, r0
    31e2:	b9d4      	cbnz	r4, 321a <strncpy+0x56>
    31e4:	b1ba      	cbz	r2, 3216 <strncpy+0x52>
    31e6:	780e      	ldrb	r6, [r1, #0]
    31e8:	462b      	mov	r3, r5
    31ea:	3a01      	subs	r2, #1
    31ec:	f803 6b01 	strb.w	r6, [r3], #1
    31f0:	b156      	cbz	r6, 3208 <strncpy+0x44>
    31f2:	1cac      	adds	r4, r5, #2
    31f4:	b17a      	cbz	r2, 3216 <strncpy+0x52>
    31f6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    31fa:	4623      	mov	r3, r4
    31fc:	3a01      	subs	r2, #1
    31fe:	f804 5c01 	strb.w	r5, [r4, #-1]
    3202:	3401      	adds	r4, #1
    3204:	2d00      	cmp	r5, #0
    3206:	d1f5      	bne.n	31f4 <strncpy+0x30>
    3208:	b12a      	cbz	r2, 3216 <strncpy+0x52>
    320a:	189a      	adds	r2, r3, r2
    320c:	2100      	movs	r1, #0
    320e:	f803 1b01 	strb.w	r1, [r3], #1
    3212:	4293      	cmp	r3, r2
    3214:	d1fb      	bne.n	320e <strncpy+0x4a>
    3216:	bc70      	pop	{r4, r5, r6}
    3218:	4770      	bx	lr
    321a:	4619      	mov	r1, r3
    321c:	f853 4b04 	ldr.w	r4, [r3], #4
    3220:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    3224:	ea26 0604 	bic.w	r6, r6, r4
    3228:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    322c:	d1da      	bne.n	31e4 <strncpy+0x20>
    322e:	3a04      	subs	r2, #4
    3230:	f845 4b04 	str.w	r4, [r5], #4
    3234:	2a03      	cmp	r2, #3
    3236:	4619      	mov	r1, r3
    3238:	d8ef      	bhi.n	321a <strncpy+0x56>
    323a:	e7d3      	b.n	31e4 <strncpy+0x20>
    323c:	0044454c 	.word	0x0044454c
    3240:	6c756e28 	.word	0x6c756e28
    3244:	0000296c 	.word	0x0000296c

00003248 <heapSTRUCT_SIZE>:
    3248:	00000010                                ....

0000324c <ulKernelPriority>:
    324c:	000000f8 454c4449 00000000 00000a0d     ....IDLE........
    325c:	09097325 25096325 75250975 0d752509     %s..%c.%u.%u.%u.
    326c:	0000000a 09097325 30090930 0a0d2525     ....%s..0..0%%..
    327c:	00000000 09097325 09097525 25257525     ....%s..%u..%u%%
    328c:	00000a0d 09097325 09097525 2525313c     ....%s..%u..<1%%
    329c:	00000a0d                                ....

000032a0 <ucExpectedStackBytes.6806>:
    32a0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
    32b0:	a5a5a5a5                                ....
