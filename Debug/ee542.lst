
ee542.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b404  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b404  0000b404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  10000000  0000b40c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005064  10000010  0000b41c  00018010  2**3
                  ALLOC
  4 .debug_abbrev 0000262a  00000000  00000000  00018010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c880  00000000  00000000  0001a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00005dbc  00000000  00000000  00026eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_macinfo 000bfb52  00000000  00000000  0002cc76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000025e0  00000000  00000000  000ec7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004def  00000000  00000000  000eeda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000017de  00000000  00000000  000f3b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000400  00000000  00000000  000f5378  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000041ec  00000000  00000000  000f5778  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000288  00000000  00000000  000f9964  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000031  00000000  00000000  000f9bec  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000198  00000000  00000000  000f9c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	f0 7f 00 10 a1 a3 00 00 fd a3 00 00 05 a4 00 00     ................
      10:	0d a4 00 00 15 a4 00 00 1d a4 00 00 00 00 00 00     ................
	...
      2c:	15 12 00 00 25 a4 00 00 00 00 00 00 21 13 00 00     ....%.......!...
      3c:	5d 13 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     ]...-...-...-...
      4c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 69 02 00 00     -...-...-...i...
      5c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      6c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      7c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      8c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      9c:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      ac:	2d a4 00 00 2d a4 00 00 2d a4 00 00 2d a4 00 00     -...-...-...-...
      bc:	2d a4 00 00 2d a4 00 00 2d a4 00 00                 -...-...-...

000000c8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
      c8:	b480      	push	{r7}
      ca:	b083      	sub	sp, #12
      cc:	af00      	add	r7, sp, #0
      ce:	4603      	mov	r3, r0
      d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
      d2:	f24e 1300 	movw	r3, #57600	; 0xe100
      d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
      da:	f997 2007 	ldrsb.w	r2, [r7, #7]
      de:	ea4f 1252 	mov.w	r2, r2, lsr #5
      e2:	79f9      	ldrb	r1, [r7, #7]
      e4:	f001 011f 	and.w	r1, r1, #31
      e8:	f04f 0001 	mov.w	r0, #1
      ec:	fa00 f101 	lsl.w	r1, r0, r1
      f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
      f4:	f107 070c 	add.w	r7, r7, #12
      f8:	46bd      	mov	sp, r7
      fa:	bc80      	pop	{r7}
      fc:	4770      	bx	lr
      fe:	bf00      	nop

00000100 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     100:	b480      	push	{r7}
     102:	b083      	sub	sp, #12
     104:	af00      	add	r7, sp, #0
     106:	4603      	mov	r3, r0
     108:	6039      	str	r1, [r7, #0]
     10a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
     10c:	f997 3007 	ldrsb.w	r3, [r7, #7]
     110:	2b00      	cmp	r3, #0
     112:	da10      	bge.n	136 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     114:	f64e 5300 	movw	r3, #60672	; 0xed00
     118:	f2ce 0300 	movt	r3, #57344	; 0xe000
     11c:	79fa      	ldrb	r2, [r7, #7]
     11e:	f002 020f 	and.w	r2, r2, #15
     122:	f1a2 0104 	sub.w	r1, r2, #4
     126:	683a      	ldr	r2, [r7, #0]
     128:	b2d2      	uxtb	r2, r2
     12a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     12e:	b2d2      	uxtb	r2, r2
     130:	440b      	add	r3, r1
     132:	761a      	strb	r2, [r3, #24]
     134:	e00d      	b.n	152 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     136:	f24e 1300 	movw	r3, #57600	; 0xe100
     13a:	f2ce 0300 	movt	r3, #57344	; 0xe000
     13e:	f997 1007 	ldrsb.w	r1, [r7, #7]
     142:	683a      	ldr	r2, [r7, #0]
     144:	b2d2      	uxtb	r2, r2
     146:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     14a:	b2d2      	uxtb	r2, r2
     14c:	440b      	add	r3, r1
     14e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     152:	f107 070c 	add.w	r7, r7, #12
     156:	46bd      	mov	sp, r7
     158:	bc80      	pop	{r7}
     15a:	4770      	bx	lr

0000015c <configGpsUART>:

// current GPS Rx status
extern __IO SetState gpsRxReady;

void configGpsUART(void)
{
     15c:	b580      	push	{r7, lr}
     15e:	b086      	sub	sp, #24
     160:	af00      	add	r7, sp, #0
	UART_FIFO_CFG_Type UARTFIFO_initStructure;
	// Pin configuration for GPS UART
	PINSEL_CFG_Type pin_initStructure;

	// initialize UART1 pin connect
	pin_initStructure.Funcnum   = GPS_PIN_FUNC;
     162:	f04f 0301 	mov.w	r3, #1
     166:	71bb      	strb	r3, [r7, #6]
	pin_initStructure.OpenDrain = PINSEL_PINMODE_NORMAL;
     168:	f04f 0300 	mov.w	r3, #0
     16c:	723b      	strb	r3, [r7, #8]
	pin_initStructure.Pinmode   = PINSEL_PINMODE_PULLUP;
     16e:	f04f 0300 	mov.w	r3, #0
     172:	71fb      	strb	r3, [r7, #7]
	pin_initStructure.Pinnum    = GPS_PIN_TX;
     174:	f04f 030f 	mov.w	r3, #15
     178:	717b      	strb	r3, [r7, #5]
	pin_initStructure.Portnum   = GPS_PORT;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	713b      	strb	r3, [r7, #4]
	PINSEL_ConfigPin(&pin_initStructure);
     180:	f107 0304 	add.w	r3, r7, #4
     184:	4618      	mov	r0, r3
     186:	f006 fd69 	bl	6c5c <PINSEL_ConfigPin>
	pin_initStructure.Pinnum    = GPS_PIN_RX;
     18a:	f04f 0310 	mov.w	r3, #16
     18e:	717b      	strb	r3, [r7, #5]
	PINSEL_ConfigPin(&pin_initStructure);
     190:	f107 0304 	add.w	r3, r7, #4
     194:	4618      	mov	r0, r3
     196:	f006 fd61 	bl	6c5c <PINSEL_ConfigPin>

	// initialize GPS UART
	UART_initStructure.Baud_rate = 115200;
     19a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     19e:	613b      	str	r3, [r7, #16]
	UART_initStructure.Databits  = UART_DATABIT_8;
     1a0:	f04f 0303 	mov.w	r3, #3
     1a4:	757b      	strb	r3, [r7, #21]
	UART_initStructure.Parity    = UART_PARITY_NONE;
     1a6:	f04f 0300 	mov.w	r3, #0
     1aa:	753b      	strb	r3, [r7, #20]
	UART_initStructure.Stopbits  = UART_STOPBIT_1;
     1ac:	f04f 0300 	mov.w	r3, #0
     1b0:	75bb      	strb	r3, [r7, #22]

	// configure the UART
	UART_Init((LPC_UART_TypeDef *)GPS_UART, &UART_initStructure);
     1b2:	f107 0310 	add.w	r3, r7, #16
     1b6:	f240 0000 	movw	r0, #0
     1ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
     1be:	4619      	mov	r1, r3
     1c0:	f008 fe2c 	bl	8e1c <UART_Init>
	//          -FIFO_DMAMode = DISABLE
	//          -FIFO_Level = UART_FIFO_TRGLEV0
	//          -FIFO_ResetRxBuf = ENABLE
	//          -FIFO_ResetTxBuf = ENABLE
	//          -FIFO_State = ENABLE
	UART_FIFOConfigStructInit(&UARTFIFO_initStructure);
     1c4:	f107 030c 	add.w	r3, r7, #12
     1c8:	4618      	mov	r0, r3
     1ca:	f009 fc3b 	bl	9a44 <UART_FIFOConfigStructInit>

	// initialize FIFO for GPS UART
	UART_FIFOConfig((LPC_UART_TypeDef *)GPS_UART, &UARTFIFO_initStructure);
     1ce:	f107 030c 	add.w	r3, r7, #12
     1d2:	f240 0000 	movw	r0, #0
     1d6:	f2c4 0001 	movt	r0, #16385	; 0x4001
     1da:	4619      	mov	r1, r3
     1dc:	f009 fb6e 	bl	98bc <UART_FIFOConfig>

	// enable the UART
	UART_TxCmd((LPC_UART_TypeDef *)GPS_UART, ENABLE);
     1e0:	f240 0000 	movw	r0, #0
     1e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
     1e8:	f04f 0101 	mov.w	r1, #1
     1ec:	f009 fd38 	bl	9c60 <UART_TxCmd>

	// enable GPS_UART Rx interrupt
	UART_IntConfig((LPC_UART_TypeDef *)GPS_UART, UART_INTCFG_RBR, ENABLE);
     1f0:	f240 0000 	movw	r0, #0
     1f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
     1f8:	f04f 0100 	mov.w	r1, #0
     1fc:	f04f 0201 	mov.w	r2, #1
     200:	f009 f9e8 	bl	95d4 <UART_IntConfig>

	// reset ring buf head and tail idx
	__BUF_RESET(gpsRb.rx_head);
     204:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     208:	f2c1 0300 	movt	r3, #4096	; 0x1000
     20c:	f04f 0200 	mov.w	r2, #0
     210:	609a      	str	r2, [r3, #8]
	__BUF_RESET(gpsRb.rx_tail);
     212:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     216:	f2c1 0300 	movt	r3, #4096	; 0x1000
     21a:	f04f 0200 	mov.w	r2, #0
     21e:	60da      	str	r2, [r3, #12]
	__BUF_RESET(gpsRb.tx_head);
     220:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     224:	f2c1 0300 	movt	r3, #4096	; 0x1000
     228:	f04f 0200 	mov.w	r2, #0
     22c:	601a      	str	r2, [r3, #0]
	__BUF_RESET(gpsRb.tx_tail);
     22e:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     232:	f2c1 0300 	movt	r3, #4096	; 0x1000
     236:	f04f 0200 	mov.w	r2, #0
     23a:	605a      	str	r2, [r3, #4]

	// preemption = 1, sub-priority = 1
	NVIC_SetPriority(UART1_IRQn, ((0x01<<3)|0x01));
     23c:	f04f 0006 	mov.w	r0, #6
     240:	f04f 0109 	mov.w	r1, #9
     244:	f7ff ff5c 	bl	100 <NVIC_SetPriority>
	// enable interrupt for GPS UART channel
	NVIC_EnableIRQ(UART1_IRQn);
     248:	f04f 0006 	mov.w	r0, #6
     24c:	f7ff ff3c 	bl	c8 <NVIC_EnableIRQ>

	// reset the Rx state
	gpsRxReady = RESET;
     250:	f644 73e4 	movw	r3, #20452	; 0x4fe4
     254:	f2c1 0300 	movt	r3, #4096	; 0x1000
     258:	f04f 0200 	mov.w	r2, #0
     25c:	701a      	strb	r2, [r3, #0]
}
     25e:	f107 0718 	add.w	r7, r7, #24
     262:	46bd      	mov	sp, r7
     264:	bd80      	pop	{r7, pc}
     266:	bf00      	nop

00000268 <UART1_IRQHandler>:


void UART1_IRQHandler(void)
{
     268:	b580      	push	{r7, lr}
     26a:	b082      	sub	sp, #8
     26c:	af00      	add	r7, sp, #0
	//portBASE_TYPE xYieldRequired;
	uint32_t intsrc, tmp;

	// determine the interrupt source
	intsrc = UART_GetIntId((LPC_UART_TypeDef *)GPS_UART);
     26e:	f240 0000 	movw	r0, #0
     272:	f2c4 0001 	movt	r0, #16385	; 0x4001
     276:	f009 fad5 	bl	9824 <UART_GetIntId>
     27a:	4603      	mov	r3, r0
     27c:	603b      	str	r3, [r7, #0]
	tmp = intsrc & UART_IIR_INTID_MASK;
     27e:	683b      	ldr	r3, [r7, #0]
     280:	f003 030e 	and.w	r3, r3, #14
     284:	607b      	str	r3, [r7, #4]

	// receive data available
	if(tmp == UART_IIR_INTID_RDA)
     286:	687b      	ldr	r3, [r7, #4]
     288:	2b04      	cmp	r3, #4
     28a:	d110      	bne.n	2ae <UART1_IRQHandler+0x46>
		//	portYIELD_FROM_ISR();
		//}
		//GPS_IntReceive();

		// disable the interrupt
		UART_IntConfig((LPC_UART_TypeDef *)GPS_UART, UART_INTCFG_RBR, DISABLE);
     28c:	f240 0000 	movw	r0, #0
     290:	f2c4 0001 	movt	r0, #16385	; 0x4001
     294:	f04f 0100 	mov.w	r1, #0
     298:	f04f 0200 	mov.w	r2, #0
     29c:	f009 f99a 	bl	95d4 <UART_IntConfig>

		// set the Rx state flag
		gpsRxReady = SET;
     2a0:	f644 73e4 	movw	r3, #20452	; 0x4fe4
     2a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
     2a8:	f04f 0201 	mov.w	r2, #1
     2ac:	701a      	strb	r2, [r3, #0]
	// transmit holding empty
	if(tmp == UART_IIR_INTID_THRE)
	{
		//GPS_IntTransmit();
	}
}
     2ae:	f107 0708 	add.w	r7, r7, #8
     2b2:	46bd      	mov	sp, r7
     2b4:	bd80      	pop	{r7, pc}
     2b6:	bf00      	nop

000002b8 <GPS_IntReceive>:

void GPS_IntReceive(void)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b082      	sub	sp, #8
     2bc:	af00      	add	r7, sp, #0
     2be:	e000      	b.n	2c2 <GPS_IntReceive+0xa>
		}
		else // no more data
		{
			break;
		}
	}
     2c0:	bf00      	nop
	uint32_t rLen;

	while(1)
	{
		// call UART read function in UART driver
		rLen = UART_Receive((LPC_UART_TypeDef *)GPS_UART, &tmpc, 1, NONE_BLOCKING);
     2c2:	f107 0303 	add.w	r3, r7, #3
     2c6:	f240 0000 	movw	r0, #0
     2ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
     2ce:	4619      	mov	r1, r3
     2d0:	f04f 0201 	mov.w	r2, #1
     2d4:	f04f 0300 	mov.w	r3, #0
     2d8:	f009 f8cc 	bl	9474 <UART_Receive>
     2dc:	4603      	mov	r3, r0
     2de:	607b      	str	r3, [r7, #4]

		// if there is data to receive
		if(rLen)
     2e0:	687b      	ldr	r3, [r7, #4]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d02d      	beq.n	342 <GPS_IntReceive+0x8a>
		{
			// check if there is more room in the buffer to put the character
			// if not, the rest will be trimmed off
			if(!__BUF_IS_FULL(gpsRb.rx_head, gpsRb.rx_tail))
     2e6:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     2ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
     2ee:	68da      	ldr	r2, [r3, #12]
     2f0:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     2f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
     2f8:	689b      	ldr	r3, [r3, #8]
     2fa:	f103 0301 	add.w	r3, r3, #1
     2fe:	ea82 0303 	eor.w	r3, r2, r3
     302:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     306:	2b00      	cmp	r3, #0
     308:	d0da      	beq.n	2c0 <GPS_IntReceive+0x8>
			{
				gpsRb.rx[gpsRb.rx_head] = tmpc;
     30a:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     30e:	f2c1 0300 	movt	r3, #4096	; 0x1000
     312:	6899      	ldr	r1, [r3, #8]
     314:	78fa      	ldrb	r2, [r7, #3]
     316:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     31a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     31e:	440b      	add	r3, r1
     320:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				__BUF_INCR(gpsRb.rx_head);
     324:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     328:	f2c1 0300 	movt	r3, #4096	; 0x1000
     32c:	689b      	ldr	r3, [r3, #8]
     32e:	f103 0301 	add.w	r3, r3, #1
     332:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     336:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     33a:	f2c1 0300 	movt	r3, #4096	; 0x1000
     33e:	609a      	str	r2, [r3, #8]
		}
		else // no more data
		{
			break;
		}
	}
     340:	e7bf      	b.n	2c2 <GPS_IntReceive+0xa>
}
     342:	f107 0708 	add.w	r7, r7, #8
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop

0000034c <GPSReceive>:

uint32_t GPSReceive(uint8_t *rxBuf, uint8_t bufLen)
{
     34c:	b480      	push	{r7}
     34e:	b085      	sub	sp, #20
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
     354:	460b      	mov	r3, r1
     356:	70fb      	strb	r3, [r7, #3]
	uint8_t *data = (uint8_t *)rxBuf;
     358:	687b      	ldr	r3, [r7, #4]
     35a:	60bb      	str	r3, [r7, #8]
	uint32_t bytes = 0;
     35c:	f04f 0300 	mov.w	r3, #0
     360:	60fb      	str	r3, [r7, #12]

	// loop until receive buffer ring is empty or until max_bytes expires
	while((bufLen > 0) && (!(__BUF_IS_EMPTY(gpsRb.rx_head, gpsRb.rx_tail))))
     362:	e028      	b.n	3b6 <GPSReceive+0x6a>
	{
		// read from the ring buffer into user buffer
		*data = gpsRb.rx[gpsRb.rx_tail];
     364:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     368:	f2c1 0300 	movt	r3, #4096	; 0x1000
     36c:	68da      	ldr	r2, [r3, #12]
     36e:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     372:	f2c1 0300 	movt	r3, #4096	; 0x1000
     376:	4413      	add	r3, r2
     378:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
     37c:	b2da      	uxtb	r2, r3
     37e:	68bb      	ldr	r3, [r7, #8]
     380:	701a      	strb	r2, [r3, #0]
		data++;
     382:	68bb      	ldr	r3, [r7, #8]
     384:	f103 0301 	add.w	r3, r3, #1
     388:	60bb      	str	r3, [r7, #8]

		// update the pointer
		__BUF_INCR(gpsRb.rx_tail);
     38a:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     38e:	f2c1 0300 	movt	r3, #4096	; 0x1000
     392:	68db      	ldr	r3, [r3, #12]
     394:	f103 0301 	add.w	r3, r3, #1
     398:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     39c:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     3a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     3a4:	60da      	str	r2, [r3, #12]

		// increment data count and decrement buffer size count
		bytes++;
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	f103 0301 	add.w	r3, r3, #1
     3ac:	60fb      	str	r3, [r7, #12]
		bufLen--;
     3ae:	78fb      	ldrb	r3, [r7, #3]
     3b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     3b4:	70fb      	strb	r3, [r7, #3]
{
	uint8_t *data = (uint8_t *)rxBuf;
	uint32_t bytes = 0;

	// loop until receive buffer ring is empty or until max_bytes expires
	while((bufLen > 0) && (!(__BUF_IS_EMPTY(gpsRb.rx_head, gpsRb.rx_tail))))
     3b6:	78fb      	ldrb	r3, [r7, #3]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d00f      	beq.n	3dc <GPSReceive+0x90>
     3bc:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     3c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     3c4:	689a      	ldr	r2, [r3, #8]
     3c6:	f644 53d0 	movw	r3, #19920	; 0x4dd0
     3ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
     3ce:	68db      	ldr	r3, [r3, #12]
     3d0:	ea82 0303 	eor.w	r3, r2, r3
     3d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     3d8:	2b00      	cmp	r3, #0
     3da:	d1c3      	bne.n	364 <GPSReceive+0x18>
		// increment data count and decrement buffer size count
		bytes++;
		bufLen--;
	}

	return bytes;
     3dc:	68fb      	ldr	r3, [r7, #12]
}
     3de:	4618      	mov	r0, r3
     3e0:	f107 0714 	add.w	r7, r7, #20
     3e4:	46bd      	mov	sp, r7
     3e6:	bc80      	pop	{r7}
     3e8:	4770      	bx	lr
     3ea:	bf00      	nop

000003ec <setSystem>:
#include "lpc17xx_gpio.h"
#include "lpc17xx_uart.h"
#include "lpc17xx_pinsel.h"

void setSystem(void)
{
     3ec:	b580      	push	{r7, lr}
     3ee:	af00      	add	r7, sp, #0
	// disable peripherals power
	LPC_SC->PCONP = 0;
     3f0:	f24c 0300 	movw	r3, #49152	; 0xc000
     3f4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     3f8:	f04f 0200 	mov.w	r2, #0
     3fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// enable GPIO power
	LPC_SC->PCONP = CLKPWR_PCONP_PCGPIO;
     400:	f24c 0300 	movw	r3, #49152	; 0xc000
     404:	f2c4 030f 	movt	r3, #16399	; 0x400f
     408:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     40c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// disable TPIU
	LPC_PINCON->PINSEL10 = 0;
     410:	f24c 0300 	movw	r3, #49152	; 0xc000
     414:	f2c4 0302 	movt	r3, #16386	; 0x4002
     418:	f04f 0200 	mov.w	r2, #0
     41c:	629a      	str	r2, [r3, #40]	; 0x28

	if ( LPC_SC->PLL0STAT & ( 1 << 25 ) )
     41e:	f24c 0300 	movw	r3, #49152	; 0xc000
     422:	f2c4 030f 	movt	r3, #16399	; 0x400f
     426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     42a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     42e:	2b00      	cmp	r3, #0
     430:	d017      	beq.n	462 <setSystem+0x76>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL0CON = 1;
     432:	f24c 0300 	movw	r3, #49152	; 0xc000
     436:	f2c4 030f 	movt	r3, #16399	; 0x400f
     43a:	f04f 0201 	mov.w	r2, #1
     43e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		LPC_SC->PLL0FEED = PLLFEED_FEED1;
     442:	f24c 0300 	movw	r3, #49152	; 0xc000
     446:	f2c4 030f 	movt	r3, #16399	; 0x400f
     44a:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		LPC_SC->PLL0FEED = PLLFEED_FEED2;
     452:	f24c 0300 	movw	r3, #49152	; 0xc000
     456:	f2c4 030f 	movt	r3, #16399	; 0x400f
     45a:	f04f 0255 	mov.w	r2, #85	; 0x55
     45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL0CON = 0;
     462:	f24c 0300 	movw	r3, #49152	; 0xc000
     466:	f2c4 030f 	movt	r3, #16399	; 0x400f
     46a:	f04f 0200 	mov.w	r2, #0
     46e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     472:	f24c 0300 	movw	r3, #49152	; 0xc000
     476:	f2c4 030f 	movt	r3, #16399	; 0x400f
     47a:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     482:	f24c 0300 	movw	r3, #49152	; 0xc000
     486:	f2c4 030f 	movt	r3, #16399	; 0x400f
     48a:	f04f 0255 	mov.w	r2, #85	; 0x55
     48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable main OSC. */
	LPC_SC->SCS |= 0x20;
     492:	f24c 0300 	movw	r3, #49152	; 0xc000
     496:	f2c4 030f 	movt	r3, #16399	; 0x400f
     49a:	f24c 0200 	movw	r2, #49152	; 0xc000
     49e:	f2c4 020f 	movt	r2, #16399	; 0x400f
     4a2:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
     4a6:	f042 0220 	orr.w	r2, r2, #32
     4aa:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	while( !( LPC_SC->SCS & 0x40 ) );
     4ae:	f24c 0300 	movw	r3, #49152	; 0xc000
     4b2:	f2c4 030f 	movt	r3, #16399	; 0x400f
     4b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
     4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
     4be:	2b00      	cmp	r3, #0
     4c0:	d0f5      	beq.n	4ae <setSystem+0xc2>

	/* select main OSC, 12MHz, as the PLL clock source. */
	LPC_SC->CLKSRCSEL = 0x1;
     4c2:	f24c 0300 	movw	r3, #49152	; 0xc000
     4c6:	f2c4 030f 	movt	r3, #16399	; 0x400f
     4ca:	f04f 0201 	mov.w	r2, #1
     4ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	LPC_SC->PLL0CFG = 0x20031;
     4d2:	f24c 0300 	movw	r3, #49152	; 0xc000
     4d6:	f2c4 030f 	movt	r3, #16399	; 0x400f
     4da:	f240 0231 	movw	r2, #49	; 0x31
     4de:	f2c0 0202 	movt	r2, #2
     4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     4e6:	f24c 0300 	movw	r3, #49152	; 0xc000
     4ea:	f2c4 030f 	movt	r3, #16399	; 0x400f
     4ee:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     4f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     4f6:	f24c 0300 	movw	r3, #49152	; 0xc000
     4fa:	f2c4 030f 	movt	r3, #16399	; 0x400f
     4fe:	f04f 0255 	mov.w	r2, #85	; 0x55
     502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Enable PLL, disconnected. */
	LPC_SC->PLL0CON = 1;
     506:	f24c 0300 	movw	r3, #49152	; 0xc000
     50a:	f2c4 030f 	movt	r3, #16399	; 0x400f
     50e:	f04f 0201 	mov.w	r2, #1
     512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     516:	f24c 0300 	movw	r3, #49152	; 0xc000
     51a:	f2c4 030f 	movt	r3, #16399	; 0x400f
     51e:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     526:	f24c 0300 	movw	r3, #49152	; 0xc000
     52a:	f2c4 030f 	movt	r3, #16399	; 0x400f
     52e:	f04f 0255 	mov.w	r2, #85	; 0x55
     532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	/* Set clock divider. */
	LPC_SC->CCLKCFG = 0x03;
     536:	f24c 0300 	movw	r3, #49152	; 0xc000
     53a:	f2c4 030f 	movt	r3, #16399	; 0x400f
     53e:	f04f 0203 	mov.w	r2, #3
     542:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	/* Configure flash accelerator. */
	LPC_SC->FLASHCFG = 0x403a;
     546:	f24c 0300 	movw	r3, #49152	; 0xc000
     54a:	f2c4 030f 	movt	r3, #16399	; 0x400f
     54e:	f244 023a 	movw	r2, #16442	; 0x403a
     552:	601a      	str	r2, [r3, #0]

	/* Check lock bit status. */
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 26 ) ) == 0 ) );
     554:	f24c 0300 	movw	r3, #49152	; 0xc000
     558:	f2c4 030f 	movt	r3, #16399	; 0x400f
     55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     564:	2b00      	cmp	r3, #0
     566:	d0f5      	beq.n	554 <setSystem+0x168>

	/* Enable and connect. */
	LPC_SC->PLL0CON = 3;
     568:	f24c 0300 	movw	r3, #49152	; 0xc000
     56c:	f2c4 030f 	movt	r3, #16399	; 0x400f
     570:	f04f 0203 	mov.w	r2, #3
     574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	LPC_SC->PLL0FEED = PLLFEED_FEED1;
     578:	f24c 0300 	movw	r3, #49152	; 0xc000
     57c:	f2c4 030f 	movt	r3, #16399	; 0x400f
     580:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	LPC_SC->PLL0FEED = PLLFEED_FEED2;
     588:	f24c 0300 	movw	r3, #49152	; 0xc000
     58c:	f2c4 030f 	movt	r3, #16399	; 0x400f
     590:	f04f 0255 	mov.w	r2, #85	; 0x55
     594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	while( ( ( LPC_SC->PLL0STAT & ( 1 << 25 ) ) == 0 ) );
     598:	f24c 0300 	movw	r3, #49152	; 0xc000
     59c:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     5a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     5a8:	2b00      	cmp	r3, #0
     5aa:	d0f5      	beq.n	598 <setSystem+0x1ac>



	/* Configure the clock for the USB. */

	if( LPC_SC->PLL1STAT & ( 1 << 9 ) )
     5ac:	f24c 0300 	movw	r3, #49152	; 0xc000
     5b0:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     5b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
     5bc:	2b00      	cmp	r3, #0
     5be:	d017      	beq.n	5f0 <setSystem+0x204>
	{
		/* Enable PLL, disconnected. */
		LPC_SC->PLL1CON = 1;
     5c0:	f24c 0300 	movw	r3, #49152	; 0xc000
     5c4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5c8:	f04f 0201 	mov.w	r2, #1
     5cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		LPC_SC->PLL1FEED = PLLFEED_FEED1;
     5d0:	f24c 0300 	movw	r3, #49152	; 0xc000
     5d4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5d8:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     5dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		LPC_SC->PLL1FEED = PLLFEED_FEED2;
     5e0:	f24c 0300 	movw	r3, #49152	; 0xc000
     5e4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5e8:	f04f 0255 	mov.w	r2, #85	; 0x55
     5ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	/* Disable PLL, disconnected. */
	LPC_SC->PLL1CON = 0;
     5f0:	f24c 0300 	movw	r3, #49152	; 0xc000
     5f4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     5f8:	f04f 0200 	mov.w	r2, #0
     5fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     600:	f24c 0300 	movw	r3, #49152	; 0xc000
     604:	f2c4 030f 	movt	r3, #16399	; 0x400f
     608:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     60c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     610:	f24c 0300 	movw	r3, #49152	; 0xc000
     614:	f2c4 030f 	movt	r3, #16399	; 0x400f
     618:	f04f 0255 	mov.w	r2, #85	; 0x55
     61c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	LPC_SC->PLL1CFG = 0x23;
     620:	f24c 0300 	movw	r3, #49152	; 0xc000
     624:	f2c4 030f 	movt	r3, #16399	; 0x400f
     628:	f04f 0223 	mov.w	r2, #35	; 0x23
     62c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     630:	f24c 0300 	movw	r3, #49152	; 0xc000
     634:	f2c4 030f 	movt	r3, #16399	; 0x400f
     638:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     63c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     640:	f24c 0300 	movw	r3, #49152	; 0xc000
     644:	f2c4 030f 	movt	r3, #16399	; 0x400f
     648:	f04f 0255 	mov.w	r2, #85	; 0x55
     64c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	/* Enable PLL, disconnected. */
	LPC_SC->PLL1CON = 1;
     650:	f24c 0300 	movw	r3, #49152	; 0xc000
     654:	f2c4 030f 	movt	r3, #16399	; 0x400f
     658:	f04f 0201 	mov.w	r2, #1
     65c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     660:	f24c 0300 	movw	r3, #49152	; 0xc000
     664:	f2c4 030f 	movt	r3, #16399	; 0x400f
     668:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     66c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     670:	f24c 0300 	movw	r3, #49152	; 0xc000
     674:	f2c4 030f 	movt	r3, #16399	; 0x400f
     678:	f04f 0255 	mov.w	r2, #85	; 0x55
     67c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 10 ) ) == 0 ) );
     680:	f24c 0300 	movw	r3, #49152	; 0xc000
     684:	f2c4 030f 	movt	r3, #16399	; 0x400f
     688:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     690:	2b00      	cmp	r3, #0
     692:	d0f5      	beq.n	680 <setSystem+0x294>

	/* Enable and connect. */
	LPC_SC->PLL1CON = 3;
     694:	f24c 0300 	movw	r3, #49152	; 0xc000
     698:	f2c4 030f 	movt	r3, #16399	; 0x400f
     69c:	f04f 0203 	mov.w	r2, #3
     6a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	LPC_SC->PLL1FEED = PLLFEED_FEED1;
     6a4:	f24c 0300 	movw	r3, #49152	; 0xc000
     6a8:	f2c4 030f 	movt	r3, #16399	; 0x400f
     6ac:	f04f 02aa 	mov.w	r2, #170	; 0xaa
     6b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	LPC_SC->PLL1FEED = PLLFEED_FEED2;
     6b4:	f24c 0300 	movw	r3, #49152	; 0xc000
     6b8:	f2c4 030f 	movt	r3, #16399	; 0x400f
     6bc:	f04f 0255 	mov.w	r2, #85	; 0x55
     6c0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	while( ( ( LPC_SC->PLL1STAT & ( 1 << 9 ) ) == 0 ) );
     6c4:	f24c 0300 	movw	r3, #49152	; 0xc000
     6c8:	f2c4 030f 	movt	r3, #16399	; 0x400f
     6cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
     6d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
     6d4:	2b00      	cmp	r3, #0
     6d6:	d0f5      	beq.n	6c4 <setSystem+0x2d8>

	/*  Setup the peripheral bus to be the same as the PLL output (64 MHz). */
	LPC_SC->PCLKSEL0 = 0x05555555;
     6d8:	f24c 0300 	movw	r3, #49152	; 0xc000
     6dc:	f2c4 030f 	movt	r3, #16399	; 0x400f
     6e0:	f245 5255 	movw	r2, #21845	; 0x5555
     6e4:	f2c0 5255 	movt	r2, #1365	; 0x555
     6e8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	// configure the RED_LED
	configRedLed();
     6ec:	f000 f802 	bl	6f4 <configRedLed>
}
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop

000006f4 <configRedLed>:

void configRedLed(void)
{
     6f4:	b480      	push	{r7}
     6f6:	af00      	add	r7, sp, #0
	// RED LED on port 3
	LPC_GPIO3->FIODIR  = RED_LED;
     6f8:	f24c 0360 	movw	r3, #49248	; 0xc060
     6fc:	f2c2 0309 	movt	r3, #8201	; 0x2009
     700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     704:	601a      	str	r2, [r3, #0]

	// start with the LED OFF
	LPC_GPIO3->FIOCLR = RED_LED;
     706:	f24c 0360 	movw	r3, #49248	; 0xc060
     70a:	f2c2 0309 	movt	r3, #8201	; 0x2009
     70e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     712:	61da      	str	r2, [r3, #28]
}
     714:	46bd      	mov	sp, r7
     716:	bc80      	pop	{r7}
     718:	4770      	bx	lr
     71a:	bf00      	nop

0000071c <configPwm>:

void configPwm(void)
{
     71c:	b480      	push	{r7}
     71e:	af00      	add	r7, sp, #0
	// enable the PWM power
	LPC_SC->PCONP |= CLKPWR_PCONP_PCPWM1;
     720:	f24c 0300 	movw	r3, #49152	; 0xc000
     724:	f2c4 030f 	movt	r3, #16399	; 0x400f
     728:	f24c 0200 	movw	r2, #49152	; 0xc000
     72c:	f2c4 020f 	movt	r2, #16399	; 0x400f
     730:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
     734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     738:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	// set the clock divider to 1
	LPC_SC->PCLKSEL0 |= CLKPWR_PCLKSEL_PWM1;
     73c:	f24c 0300 	movw	r3, #49152	; 0xc000
     740:	f2c4 030f 	movt	r3, #16399	; 0x400f
     744:	f24c 0200 	movw	r2, #49152	; 0xc000
     748:	f2c4 020f 	movt	r2, #16399	; 0x400f
     74c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
     750:	f042 020c 	orr.w	r2, r2, #12
     754:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
     758:	46bd      	mov	sp, r7
     75a:	bc80      	pop	{r7}
     75c:	4770      	bx	lr
     75e:	bf00      	nop

00000760 <main>:

// current GPS Rx status
__IO SetState gpsRxReady;

int main( void )
{
     760:	b580      	push	{r7, lr}
     762:	b084      	sub	sp, #16
     764:	af04      	add	r7, sp, #16
	// configure the system
    setSystem();
     766:	f7ff fe41 	bl	3ec <setSystem>

    // create the LED task
    if(xTaskCreate(vLedTask, (signed portCHAR*) "LED",128,NULL, 1, &taskHandles[0]) != pdPASS)
     76a:	f24b 23a8 	movw	r3, #45736	; 0xb2a8
     76e:	f2c0 0300 	movt	r3, #0
     772:	f04f 0201 	mov.w	r2, #1
     776:	9200      	str	r2, [sp, #0]
     778:	f644 72e8 	movw	r2, #20456	; 0x4fe8
     77c:	f2c1 0200 	movt	r2, #4096	; 0x1000
     780:	9201      	str	r2, [sp, #4]
     782:	f04f 0200 	mov.w	r2, #0
     786:	9202      	str	r2, [sp, #8]
     788:	f04f 0200 	mov.w	r2, #0
     78c:	9203      	str	r2, [sp, #12]
     78e:	f640 00ad 	movw	r0, #2221	; 0x8ad
     792:	f2c0 0000 	movt	r0, #0
     796:	4619      	mov	r1, r3
     798:	f04f 0280 	mov.w	r2, #128	; 0x80
     79c:	f04f 0300 	mov.w	r3, #0
     7a0:	f001 fbca 	bl	1f38 <xTaskGenericCreate>
    {
    	//TODO: the task was not created, do something
    }

    taskHandles[4] = 0; //TODO: will need to change when we know how many tasks there will be
     7a4:	f644 73e8 	movw	r3, #20456	; 0x4fe8
     7a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
     7ac:	f04f 0200 	mov.w	r2, #0
     7b0:	611a      	str	r2, [r3, #16]

    // enable the interrupts
    portENABLE_INTERRUPTS();
     7b2:	f04f 0000 	mov.w	r0, #0
     7b6:	f380 8811 	msr	BASEPRI, r0

    // start the scheduler
	vTaskStartScheduler();
     7ba:	f001 ff85 	bl	26c8 <vTaskStartScheduler>

    // will only get here if there was insufficient memory to create the idle
    // task.  The idle task is created within vTaskStartScheduler().
	for( ;; );
     7be:	e7fe      	b.n	7be <main+0x5e>

000007c0 <vApplicationTickHook>:
	return 0; // never gets here
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
     7c0:	b480      	push	{r7}
     7c2:	af00      	add	r7, sp, #0
	    {
	    	pcStatusMessage = "An error has been detected in the Mutex test/demo.";
	    }
	}
	*/
}
     7c4:	46bd      	mov	sp, r7
     7c6:	bc80      	pop	{r7}
     7c8:	4770      	bx	lr
     7ca:	bf00      	nop

000007cc <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
     7cc:	b480      	push	{r7}
     7ce:	b083      	sub	sp, #12
     7d0:	af00      	add	r7, sp, #0
     7d2:	6078      	str	r0, [r7, #4]
     7d4:	6039      	str	r1, [r7, #0]
	/* This function will get called if a task overflows its stack. */

	( void ) pxTask;
	( void ) pcTaskName;

	for( ;; );
     7d6:	e7fe      	b.n	7d6 <vApplicationStackOverflowHook+0xa>

000007d8 <vConfigureTimerForRunTimeStats>:
}
/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
     7d8:	b480      	push	{r7}
     7da:	b085      	sub	sp, #20
     7dc:	af00      	add	r7, sp, #0
const unsigned long TCR_COUNT_RESET = 2, CTCR_CTM_TIMER = 0x00, TCR_COUNT_ENABLE = 0x01;
     7de:	f04f 0302 	mov.w	r3, #2
     7e2:	607b      	str	r3, [r7, #4]
     7e4:	f04f 0300 	mov.w	r3, #0
     7e8:	60bb      	str	r3, [r7, #8]
     7ea:	f04f 0301 	mov.w	r3, #1
     7ee:	60fb      	str	r3, [r7, #12]
	of CPU time that each task is utilising.  It is called automatically when
	the scheduler is started (assuming configGENERATE_RUN_TIME_STATS is set
	to 1). */

	/* Power up and feed the timer. */
	LPC_SC->PCONP |= 0x02UL;
     7f0:	f24c 0300 	movw	r3, #49152	; 0xc000
     7f4:	f2c4 030f 	movt	r3, #16399	; 0x400f
     7f8:	f24c 0200 	movw	r2, #49152	; 0xc000
     7fc:	f2c4 020f 	movt	r2, #16399	; 0x400f
     800:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
     804:	f042 0202 	orr.w	r2, r2, #2
     808:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
     80c:	f24c 0300 	movw	r3, #49152	; 0xc000
     810:	f2c4 030f 	movt	r3, #16399	; 0x400f
     814:	f24c 0200 	movw	r2, #49152	; 0xc000
     818:	f2c4 020f 	movt	r2, #16399	; 0x400f
     81c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
     820:	f022 020c 	bic.w	r2, r2, #12
     824:	f042 0204 	orr.w	r2, r2, #4
     828:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

	/* Reset Timer 0 */
	LPC_TIM0->TCR = TCR_COUNT_RESET;
     82c:	f244 0300 	movw	r3, #16384	; 0x4000
     830:	f2c4 0300 	movt	r3, #16384	; 0x4000
     834:	687a      	ldr	r2, [r7, #4]
     836:	605a      	str	r2, [r3, #4]

	/* Just count up. */
	LPC_TIM0->CTCR = CTCR_CTM_TIMER;
     838:	f244 0300 	movw	r3, #16384	; 0x4000
     83c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     840:	68ba      	ldr	r2, [r7, #8]
     842:	671a      	str	r2, [r3, #112]	; 0x70

	/* Prescale to a frequency that is good enough to get a decent resolution,
	but not too fast so as to overflow all the time. */
	LPC_TIM0->PR =  ( configCPU_CLOCK_HZ / 10000UL ) - 1UL;
     844:	f244 0300 	movw	r3, #16384	; 0x4000
     848:	f2c4 0300 	movt	r3, #16384	; 0x4000
     84c:	f242 62ab 	movw	r2, #9899	; 0x26ab
     850:	60da      	str	r2, [r3, #12]

	/* Start the counter. */
	LPC_TIM0->TCR = TCR_COUNT_ENABLE;
     852:	f244 0300 	movw	r3, #16384	; 0x4000
     856:	f2c4 0300 	movt	r3, #16384	; 0x4000
     85a:	68fa      	ldr	r2, [r7, #12]
     85c:	605a      	str	r2, [r3, #4]
}
     85e:	f107 0714 	add.w	r7, r7, #20
     862:	46bd      	mov	sp, r7
     864:	bc80      	pop	{r7}
     866:	4770      	bx	lr

00000868 <vGpsTask>:

// current GPS Rx status
extern __IO SetState gpsRxReady;

void vGpsTask( void *pvParameters )
{
     868:	b580      	push	{r7, lr}
     86a:	b082      	sub	sp, #8
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
     870:	e000      	b.n	874 <vGpsTask+0xc>

			// reset the RX flag, should follow right
			// after enabling the interrupt
			gpsRxReady = RESET;
		}
	}
     872:	bf00      	nop
void vGpsTask( void *pvParameters )
{

	for( ;; )
	{
		if(gpsRxReady)
     874:	f644 73e4 	movw	r3, #20452	; 0x4fe4
     878:	f2c1 0300 	movt	r3, #4096	; 0x1000
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	b2db      	uxtb	r3, r3
     880:	2b00      	cmp	r3, #0
     882:	d0f6      	beq.n	872 <vGpsTask+0xa>
		{
			// get the message from the UART port and place it
			// into the ring buffer (gpsRb)
			GPS_IntReceive();
     884:	f7ff fd18 	bl	2b8 <GPS_IntReceive>
			// copy the command in the local buffer
			//GPSReceive(&gpsData.cmdString, GPS_DATA_SIZE);

			// we are done with the current message, re-enable
			// the RX interrupt
			UART_IntConfig((LPC_UART_TypeDef *)GPS_UART, UART_INTCFG_RBR, ENABLE);
     888:	f240 0000 	movw	r0, #0
     88c:	f2c4 0001 	movt	r0, #16385	; 0x4001
     890:	f04f 0100 	mov.w	r1, #0
     894:	f04f 0201 	mov.w	r2, #1
     898:	f008 fe9c 	bl	95d4 <UART_IntConfig>

			// reset the RX flag, should follow right
			// after enabling the interrupt
			gpsRxReady = RESET;
     89c:	f644 73e4 	movw	r3, #20452	; 0x4fe4
     8a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     8a4:	f04f 0200 	mov.w	r2, #0
     8a8:	701a      	strb	r2, [r3, #0]
		}
	}
     8aa:	e7e3      	b.n	874 <vGpsTask+0xc>

000008ac <vLedTask>:
#include "hwConfig.h"
#include "platformConfig.h"
#include "taskLed.h"

void vLedTask( void *pvParameters )
{
     8ac:	b580      	push	{r7, lr}
     8ae:	b084      	sub	sp, #16
     8b0:	af00      	add	r7, sp, #0
     8b2:	6078      	str	r0, [r7, #4]
	portTickType xLastWakeTime;

	xLastWakeTime = xTaskGetTickCount();
     8b4:	f002 f812 	bl	28dc <xTaskGetTickCount>
     8b8:	4603      	mov	r3, r0
     8ba:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     8bc:	f107 030c 	add.w	r3, r7, #12
     8c0:	4618      	mov	r0, r3
     8c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     8c6:	f001 fc77 	bl	21b8 <vTaskDelayUntil>

		// Turn the LED on
		LPC_GPIO3->FIOCLR = RED_LED;
     8ca:	f24c 0360 	movw	r3, #49248	; 0xc060
     8ce:	f2c2 0309 	movt	r3, #8201	; 0x2009
     8d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     8d6:	61da      	str	r2, [r3, #28]

		// wait for the next cycle
		vTaskDelayUntil(&xLastWakeTime, DELAY_PERIOD);
     8d8:	f107 030c 	add.w	r3, r7, #12
     8dc:	4618      	mov	r0, r3
     8de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     8e2:	f001 fc69 	bl	21b8 <vTaskDelayUntil>

		// Turn the LED off
		LPC_GPIO3->FIOSET = RED_LED;
     8e6:	f24c 0360 	movw	r3, #49248	; 0xc060
     8ea:	f2c2 0309 	movt	r3, #8201	; 0x2009
     8ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     8f2:	619a      	str	r2, [r3, #24]
	}
     8f4:	e7e2      	b.n	8bc <vLedTask+0x10>
     8f6:	bf00      	nop

000008f8 <isDigit>:
* ASSUMPTIONS		:
* Input			    : c-> a character
* Output			: None
* Return			: True if the character is a number, False otherwise
------------------------------------------------------------------------------*/
Bool isDigit(char c) {return c >= '0' && c <= '9';}
     8f8:	b480      	push	{r7}
     8fa:	b083      	sub	sp, #12
     8fc:	af00      	add	r7, sp, #0
     8fe:	4603      	mov	r3, r0
     900:	71fb      	strb	r3, [r7, #7]
     902:	79fb      	ldrb	r3, [r7, #7]
     904:	2b2f      	cmp	r3, #47	; 0x2f
     906:	d905      	bls.n	914 <isDigit+0x1c>
     908:	79fb      	ldrb	r3, [r7, #7]
     90a:	2b39      	cmp	r3, #57	; 0x39
     90c:	d802      	bhi.n	914 <isDigit+0x1c>
     90e:	f04f 0301 	mov.w	r3, #1
     912:	e001      	b.n	918 <isDigit+0x20>
     914:	f04f 0300 	mov.w	r3, #0
     918:	b2db      	uxtb	r3, r3
     91a:	4618      	mov	r0, r3
     91c:	f107 070c 	add.w	r7, r7, #12
     920:	46bd      	mov	sp, r7
     922:	bc80      	pop	{r7}
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <strCmp>:
 */

#include "util.h"

int strCmp(const char *str1, const char *str2)
{
     928:	b480      	push	{r7}
     92a:	b083      	sub	sp, #12
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
     930:	6039      	str	r1, [r7, #0]
	while(*str1 && *str1 == *str2)
     932:	e007      	b.n	944 <strCmp+0x1c>
		++str1, ++str2;
     934:	687b      	ldr	r3, [r7, #4]
     936:	f103 0301 	add.w	r3, r3, #1
     93a:	607b      	str	r3, [r7, #4]
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	f103 0301 	add.w	r3, r3, #1
     942:	603b      	str	r3, [r7, #0]

#include "util.h"

int strCmp(const char *str1, const char *str2)
{
	while(*str1 && *str1 == *str2)
     944:	687b      	ldr	r3, [r7, #4]
     946:	781b      	ldrb	r3, [r3, #0]
     948:	2b00      	cmp	r3, #0
     94a:	d005      	beq.n	958 <strCmp+0x30>
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	683b      	ldr	r3, [r7, #0]
     952:	781b      	ldrb	r3, [r3, #0]
     954:	429a      	cmp	r2, r3
     956:	d0ed      	beq.n	934 <strCmp+0xc>
		++str1, ++str2;
	return *str1;
     958:	687b      	ldr	r3, [r7, #4]
     95a:	781b      	ldrb	r3, [r3, #0]
}
     95c:	4618      	mov	r0, r3
     95e:	f107 070c 	add.w	r7, r7, #12
     962:	46bd      	mov	sp, r7
     964:	bc80      	pop	{r7}
     966:	4770      	bx	lr

00000968 <a2l>:

long a2l(const char *str)
{
     968:	b580      	push	{r7, lr}
     96a:	b084      	sub	sp, #16
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
	long ret = 0;
     970:	f04f 0300 	mov.w	r3, #0
     974:	60fb      	str	r3, [r7, #12]
	while(isDigit(*str))
     976:	e011      	b.n	99c <a2l+0x34>
		ret = 10 * ret + *str++ - '0';
     978:	68fa      	ldr	r2, [r7, #12]
     97a:	4613      	mov	r3, r2
     97c:	ea4f 0383 	mov.w	r3, r3, lsl #2
     980:	4413      	add	r3, r2
     982:	ea4f 0343 	mov.w	r3, r3, lsl #1
     986:	461a      	mov	r2, r3
     988:	687b      	ldr	r3, [r7, #4]
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	4413      	add	r3, r2
     98e:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     992:	60fb      	str	r3, [r7, #12]
     994:	687b      	ldr	r3, [r7, #4]
     996:	f103 0301 	add.w	r3, r3, #1
     99a:	607b      	str	r3, [r7, #4]
}

long a2l(const char *str)
{
	long ret = 0;
	while(isDigit(*str))
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	781b      	ldrb	r3, [r3, #0]
     9a0:	4618      	mov	r0, r3
     9a2:	f7ff ffa9 	bl	8f8 <isDigit>
     9a6:	4603      	mov	r3, r0
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1e5      	bne.n	978 <a2l+0x10>
		ret = 10 * ret + *str++ - '0';
	return 0;
     9ac:	f04f 0300 	mov.w	r3, #0
}
     9b0:	4618      	mov	r0, r3
     9b2:	f107 0710 	add.w	r7, r7, #16
     9b6:	46bd      	mov	sp, r7
     9b8:	bd80      	pop	{r7, pc}
     9ba:	bf00      	nop

000009bc <a2d>:

unsigned long a2d(const char *str)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b084      	sub	sp, #16
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
	Bool isneg = *str == '-';
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	2b2d      	cmp	r3, #45	; 0x2d
     9ca:	bf14      	ite	ne
     9cc:	2300      	movne	r3, #0
     9ce:	2301      	moveq	r3, #1
     9d0:	72fb      	strb	r3, [r7, #11]
	if(isneg) ++str;
     9d2:	7afb      	ldrb	r3, [r7, #11]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d003      	beq.n	9e0 <a2d+0x24>
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	f103 0301 	add.w	r3, r3, #1
     9de:	607b      	str	r3, [r7, #4]

	unsigned long ret = 100UL * a2l(str);
     9e0:	6878      	ldr	r0, [r7, #4]
     9e2:	f7ff ffc1 	bl	968 <a2l>
     9e6:	4603      	mov	r3, r0
     9e8:	f04f 0264 	mov.w	r2, #100	; 0x64
     9ec:	fb02 f303 	mul.w	r3, r2, r3
     9f0:	60fb      	str	r3, [r7, #12]
	while(isDigit(*str)) ++str;
     9f2:	e003      	b.n	9fc <a2d+0x40>
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	f103 0301 	add.w	r3, r3, #1
     9fa:	607b      	str	r3, [r7, #4]
     9fc:	687b      	ldr	r3, [r7, #4]
     9fe:	781b      	ldrb	r3, [r3, #0]
     a00:	4618      	mov	r0, r3
     a02:	f7ff ff79 	bl	8f8 <isDigit>
     a06:	4603      	mov	r3, r0
     a08:	2b00      	cmp	r3, #0
     a0a:	d1f3      	bne.n	9f4 <a2d+0x38>

	if(*str == '.')
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	2b2e      	cmp	r3, #46	; 0x2e
     a12:	d12e      	bne.n	a72 <a2d+0xb6>
	{
		if(isDigit(str[1]))
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	f103 0301 	add.w	r3, r3, #1
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	4618      	mov	r0, r3
     a1e:	f7ff ff6b 	bl	8f8 <isDigit>
     a22:	4603      	mov	r3, r0
     a24:	2b00      	cmp	r3, #0
     a26:	d024      	beq.n	a72 <a2d+0xb6>
		{
			ret += 10 * (str[1] - '0');
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	f103 0301 	add.w	r3, r3, #1
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	461a      	mov	r2, r3
     a32:	4613      	mov	r3, r2
     a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
     a38:	4413      	add	r3, r2
     a3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a3e:	461a      	mov	r2, r3
     a40:	68fb      	ldr	r3, [r7, #12]
     a42:	4413      	add	r3, r2
     a44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
     a48:	60fb      	str	r3, [r7, #12]
			if(isDigit(str[2]))
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	f103 0302 	add.w	r3, r3, #2
     a50:	781b      	ldrb	r3, [r3, #0]
     a52:	4618      	mov	r0, r3
     a54:	f7ff ff50 	bl	8f8 <isDigit>
     a58:	4603      	mov	r3, r0
     a5a:	2b00      	cmp	r3, #0
     a5c:	d009      	beq.n	a72 <a2d+0xb6>
			{
				ret += str[2] - '0';
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	f103 0302 	add.w	r3, r3, #2
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	461a      	mov	r2, r3
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	4413      	add	r3, r2
     a6c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     a70:	60fb      	str	r3, [r7, #12]
			}
		}
	}
	return isneg ? -ret : ret;
     a72:	7afb      	ldrb	r3, [r7, #11]
     a74:	2b00      	cmp	r3, #0
     a76:	d003      	beq.n	a80 <a2d+0xc4>
     a78:	68fb      	ldr	r3, [r7, #12]
     a7a:	f1c3 0300 	rsb	r3, r3, #0
     a7e:	e000      	b.n	a82 <a2d+0xc6>
     a80:	68fb      	ldr	r3, [r7, #12]
}
     a82:	4618      	mov	r0, r3
     a84:	f107 0710 	add.w	r7, r7, #16
     a88:	46bd      	mov	sp, r7
     a8a:	bd80      	pop	{r7, pc}

00000a8c <printchar>:
#define putchar(c) c

#include <stdarg.h>

static void printchar(char **str, int c)
{
     a8c:	b480      	push	{r7}
     a8e:	b083      	sub	sp, #12
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
     a94:	6039      	str	r1, [r7, #0]
	//extern int putchar(int c);
	
	if (str) {
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	2b00      	cmp	r3, #0
     a9a:	d00a      	beq.n	ab2 <printchar+0x26>
		**str = (char)c;
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	683a      	ldr	r2, [r7, #0]
     aa2:	b2d2      	uxtb	r2, r2
     aa4:	701a      	strb	r2, [r3, #0]
		++(*str);
     aa6:	687b      	ldr	r3, [r7, #4]
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	f103 0201 	add.w	r2, r3, #1
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{ 
		(void)putchar(c);
	}
}
     ab2:	f107 070c 	add.w	r7, r7, #12
     ab6:	46bd      	mov	sp, r7
     ab8:	bc80      	pop	{r7}
     aba:	4770      	bx	lr

00000abc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
     abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ac0:	b084      	sub	sp, #16
     ac2:	af00      	add	r7, sp, #0
     ac4:	60f8      	str	r0, [r7, #12]
     ac6:	60b9      	str	r1, [r7, #8]
     ac8:	607a      	str	r2, [r7, #4]
     aca:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
     acc:	f04f 0400 	mov.w	r4, #0
     ad0:	f04f 0620 	mov.w	r6, #32

	if (width > 0) {
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	2b00      	cmp	r3, #0
     ad8:	dd1e      	ble.n	b18 <prints+0x5c>
		register int len = 0;
     ada:	f04f 0500 	mov.w	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
     ade:	f8d7 8008 	ldr.w	r8, [r7, #8]
     ae2:	e003      	b.n	aec <prints+0x30>
     ae4:	f105 0501 	add.w	r5, r5, #1
     ae8:	f108 0801 	add.w	r8, r8, #1
     aec:	f898 3000 	ldrb.w	r3, [r8]
     af0:	2b00      	cmp	r3, #0
     af2:	d1f7      	bne.n	ae4 <prints+0x28>
		if (len >= width) width = 0;
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	429d      	cmp	r5, r3
     af8:	db03      	blt.n	b02 <prints+0x46>
     afa:	f04f 0300 	mov.w	r3, #0
     afe:	607b      	str	r3, [r7, #4]
     b00:	e003      	b.n	b0a <prints+0x4e>
		else width -= len;
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	ebc5 0303 	rsb	r3, r5, r3
     b08:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
     b0a:	683b      	ldr	r3, [r7, #0]
     b0c:	f003 0302 	and.w	r3, r3, #2
     b10:	2b00      	cmp	r3, #0
     b12:	d001      	beq.n	b18 <prints+0x5c>
     b14:	f04f 0630 	mov.w	r6, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
     b18:	683b      	ldr	r3, [r7, #0]
     b1a:	f003 0301 	and.w	r3, r3, #1
     b1e:	2b00      	cmp	r3, #0
     b20:	d11b      	bne.n	b5a <prints+0x9e>
		for ( ; width > 0; --width) {
     b22:	e009      	b.n	b38 <prints+0x7c>
			printchar (out, padchar);
     b24:	68f8      	ldr	r0, [r7, #12]
     b26:	4631      	mov	r1, r6
     b28:	f7ff ffb0 	bl	a8c <printchar>
			++pc;
     b2c:	f104 0401 	add.w	r4, r4, #1
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     b36:	607b      	str	r3, [r7, #4]
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	2b00      	cmp	r3, #0
     b3c:	dcf2      	bgt.n	b24 <prints+0x68>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     b3e:	e00d      	b.n	b5c <prints+0xa0>
		printchar (out, *string);
     b40:	68bb      	ldr	r3, [r7, #8]
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	68f8      	ldr	r0, [r7, #12]
     b46:	4619      	mov	r1, r3
     b48:	f7ff ffa0 	bl	a8c <printchar>
		++pc;
     b4c:	f104 0401 	add.w	r4, r4, #1
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	f103 0301 	add.w	r3, r3, #1
     b56:	60bb      	str	r3, [r7, #8]
     b58:	e000      	b.n	b5c <prints+0xa0>
     b5a:	bf00      	nop
     b5c:	68bb      	ldr	r3, [r7, #8]
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b00      	cmp	r3, #0
     b62:	d1ed      	bne.n	b40 <prints+0x84>
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     b64:	e009      	b.n	b7a <prints+0xbe>
		printchar (out, padchar);
     b66:	68f8      	ldr	r0, [r7, #12]
     b68:	4631      	mov	r1, r6
     b6a:	f7ff ff8f 	bl	a8c <printchar>
		++pc;
     b6e:	f104 0401 	add.w	r4, r4, #1
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
     b72:	687b      	ldr	r3, [r7, #4]
     b74:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     b78:	607b      	str	r3, [r7, #4]
     b7a:	687b      	ldr	r3, [r7, #4]
     b7c:	2b00      	cmp	r3, #0
     b7e:	dcf2      	bgt.n	b66 <prints+0xaa>
		printchar (out, padchar);
		++pc;
	}

	return pc;
     b80:	4623      	mov	r3, r4
}
     b82:	4618      	mov	r0, r3
     b84:	f107 0710 	add.w	r7, r7, #16
     b88:	46bd      	mov	sp, r7
     b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b8e:	bf00      	nop

00000b90 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
     b90:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
     b94:	b089      	sub	sp, #36	; 0x24
     b96:	af00      	add	r7, sp, #0
     b98:	60f8      	str	r0, [r7, #12]
     b9a:	60b9      	str	r1, [r7, #8]
     b9c:	607a      	str	r2, [r7, #4]
     b9e:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
     ba0:	f04f 0a00 	mov.w	sl, #0
     ba4:	f04f 0800 	mov.w	r8, #0
	register unsigned int u = (unsigned int)i;
     ba8:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
     baa:	68bb      	ldr	r3, [r7, #8]
     bac:	2b00      	cmp	r3, #0
     bae:	d10f      	bne.n	bd0 <printi+0x40>
		print_buf[0] = '0';
     bb0:	f04f 0330 	mov.w	r3, #48	; 0x30
     bb4:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
     bb6:	f04f 0300 	mov.w	r3, #0
     bba:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
     bbc:	f107 0314 	add.w	r3, r7, #20
     bc0:	68f8      	ldr	r0, [r7, #12]
     bc2:	4619      	mov	r1, r3
     bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     bc8:	f7ff ff78 	bl	abc <prints>
     bcc:	4603      	mov	r3, r0
     bce:	e054      	b.n	c7a <printi+0xea>
	}

	if (sg && b == 10 && i < 0) {
     bd0:	683b      	ldr	r3, [r7, #0]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d00b      	beq.n	bee <printi+0x5e>
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2b0a      	cmp	r3, #10
     bda:	d108      	bne.n	bee <printi+0x5e>
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	2b00      	cmp	r3, #0
     be0:	da05      	bge.n	bee <printi+0x5e>
		neg = 1;
     be2:	f04f 0a01 	mov.w	sl, #1
		u = (unsigned int)-i;
     be6:	68bb      	ldr	r3, [r7, #8]
     be8:	f1c3 0300 	rsb	r3, r3, #0
     bec:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
     bee:	f107 0314 	add.w	r3, r7, #20
     bf2:	f103 040b 	add.w	r4, r3, #11
	*s = '\0';
     bf6:	f04f 0300 	mov.w	r3, #0
     bfa:	7023      	strb	r3, [r4, #0]

	while (u) {
     bfc:	e017      	b.n	c2e <printi+0x9e>
		t = (unsigned int)u % b;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	fbb5 f2f3 	udiv	r2, r5, r3
     c04:	fb03 f302 	mul.w	r3, r3, r2
     c08:	ebc3 0305 	rsb	r3, r3, r5
     c0c:	461e      	mov	r6, r3
		if( t >= 10 )
     c0e:	2e09      	cmp	r6, #9
     c10:	dd03      	ble.n	c1a <printi+0x8a>
			t += letbase - '0' - 10;
     c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     c14:	f1a3 033a 	sub.w	r3, r3, #58	; 0x3a
     c18:	441e      	add	r6, r3
		*--s = (char)(t + '0');
     c1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
     c1e:	b2f3      	uxtb	r3, r6
     c20:	f103 0330 	add.w	r3, r3, #48	; 0x30
     c24:	b2db      	uxtb	r3, r3
     c26:	7023      	strb	r3, [r4, #0]
		u /= b;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	fbb5 f5f3 	udiv	r5, r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
     c2e:	2d00      	cmp	r5, #0
     c30:	d1e5      	bne.n	bfe <printi+0x6e>
			t += letbase - '0' - 10;
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
     c32:	f1ba 0f00 	cmp.w	sl, #0
     c36:	d018      	beq.n	c6a <printi+0xda>
		if( width && (pad & PAD_ZERO) ) {
     c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c3a:	2b00      	cmp	r3, #0
     c3c:	d010      	beq.n	c60 <printi+0xd0>
     c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c40:	f003 0302 	and.w	r3, r3, #2
     c44:	2b00      	cmp	r3, #0
     c46:	d00b      	beq.n	c60 <printi+0xd0>
			printchar (out, '-');
     c48:	68f8      	ldr	r0, [r7, #12]
     c4a:	f04f 012d 	mov.w	r1, #45	; 0x2d
     c4e:	f7ff ff1d 	bl	a8c <printchar>
			++pc;
     c52:	f108 0801 	add.w	r8, r8, #1
			--width;
     c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c58:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     c5c:	643b      	str	r3, [r7, #64]	; 0x40
		*--s = (char)(t + '0');
		u /= b;
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
     c5e:	e004      	b.n	c6a <printi+0xda>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
     c60:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
     c64:	f04f 032d 	mov.w	r3, #45	; 0x2d
     c68:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
     c6a:	68f8      	ldr	r0, [r7, #12]
     c6c:	4621      	mov	r1, r4
     c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
     c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c72:	f7ff ff23 	bl	abc <prints>
     c76:	4603      	mov	r3, r0
     c78:	4443      	add	r3, r8
}
     c7a:	4618      	mov	r0, r3
     c7c:	f107 0724 	add.w	r7, r7, #36	; 0x24
     c80:	46bd      	mov	sp, r7
     c82:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
     c86:	bf00      	nop

00000c88 <print>:

static int print( char **out, const char *format, va_list args )
{
     c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c8c:	b08a      	sub	sp, #40	; 0x28
     c8e:	af04      	add	r7, sp, #16
     c90:	60f8      	str	r0, [r7, #12]
     c92:	60b9      	str	r1, [r7, #8]
     c94:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
     c96:	f04f 0400 	mov.w	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
     c9a:	e0ed      	b.n	e78 <print+0x1f0>
		if (*format == '%') {
     c9c:	68bb      	ldr	r3, [r7, #8]
     c9e:	781b      	ldrb	r3, [r3, #0]
     ca0:	2b25      	cmp	r3, #37	; 0x25
     ca2:	f040 80db 	bne.w	e5c <print+0x1d4>
			++format;
     ca6:	68bb      	ldr	r3, [r7, #8]
     ca8:	f103 0301 	add.w	r3, r3, #1
     cac:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
     cae:	f04f 0600 	mov.w	r6, #0
     cb2:	4635      	mov	r5, r6
			if (*format == '\0') break;
     cb4:	68bb      	ldr	r3, [r7, #8]
     cb6:	781b      	ldrb	r3, [r3, #0]
     cb8:	2b00      	cmp	r3, #0
     cba:	f000 80e3 	beq.w	e84 <print+0x1fc>
			if (*format == '%') goto out;
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	2b25      	cmp	r3, #37	; 0x25
     cc4:	f000 80c9 	beq.w	e5a <print+0x1d2>
			if (*format == '-') {
     cc8:	68bb      	ldr	r3, [r7, #8]
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	2b2d      	cmp	r3, #45	; 0x2d
     cce:	d10d      	bne.n	cec <print+0x64>
				++format;
     cd0:	68bb      	ldr	r3, [r7, #8]
     cd2:	f103 0301 	add.w	r3, r3, #1
     cd6:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
     cd8:	f04f 0601 	mov.w	r6, #1
			}
			while (*format == '0') {
     cdc:	e007      	b.n	cee <print+0x66>
				++format;
     cde:	68bb      	ldr	r3, [r7, #8]
     ce0:	f103 0301 	add.w	r3, r3, #1
     ce4:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
     ce6:	f046 0602 	orr.w	r6, r6, #2
     cea:	e000      	b.n	cee <print+0x66>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
     cec:	bf00      	nop
     cee:	68bb      	ldr	r3, [r7, #8]
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b30      	cmp	r3, #48	; 0x30
     cf4:	d0f3      	beq.n	cde <print+0x56>
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     cf6:	e00f      	b.n	d18 <print+0x90>
				width *= 10;
     cf8:	462b      	mov	r3, r5
     cfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
     cfe:	442b      	add	r3, r5
     d00:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d04:	461d      	mov	r5, r3
				width += *format - '0';
     d06:	68bb      	ldr	r3, [r7, #8]
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     d0e:	441d      	add	r5, r3
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
     d10:	68bb      	ldr	r3, [r7, #8]
     d12:	f103 0301 	add.w	r3, r3, #1
     d16:	60bb      	str	r3, [r7, #8]
     d18:	68bb      	ldr	r3, [r7, #8]
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	2b2f      	cmp	r3, #47	; 0x2f
     d1e:	d903      	bls.n	d28 <print+0xa0>
     d20:	68bb      	ldr	r3, [r7, #8]
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b39      	cmp	r3, #57	; 0x39
     d26:	d9e7      	bls.n	cf8 <print+0x70>
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	2b73      	cmp	r3, #115	; 0x73
     d2e:	d117      	bne.n	d60 <print+0xd8>
				register char *s = (char *)va_arg( args, int );
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	f103 0204 	add.w	r2, r3, #4
     d36:	607a      	str	r2, [r7, #4]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
     d3c:	f1b8 0f00 	cmp.w	r8, #0
     d40:	d001      	beq.n	d46 <print+0xbe>
     d42:	4643      	mov	r3, r8
     d44:	e003      	b.n	d4e <print+0xc6>
     d46:	f24b 23ac 	movw	r3, #45740	; 0xb2ac
     d4a:	f2c0 0300 	movt	r3, #0
     d4e:	68f8      	ldr	r0, [r7, #12]
     d50:	4619      	mov	r1, r3
     d52:	462a      	mov	r2, r5
     d54:	4633      	mov	r3, r6
     d56:	f7ff feb1 	bl	abc <prints>
     d5a:	4603      	mov	r3, r0
     d5c:	441c      	add	r4, r3
				continue;
     d5e:	e087      	b.n	e70 <print+0x1e8>
			}
			if( *format == 'd' ) {
     d60:	68bb      	ldr	r3, [r7, #8]
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	2b64      	cmp	r3, #100	; 0x64
     d66:	d114      	bne.n	d92 <print+0x10a>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
     d68:	687b      	ldr	r3, [r7, #4]
     d6a:	f103 0204 	add.w	r2, r3, #4
     d6e:	607a      	str	r2, [r7, #4]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	9500      	str	r5, [sp, #0]
     d74:	9601      	str	r6, [sp, #4]
     d76:	f04f 0261 	mov.w	r2, #97	; 0x61
     d7a:	9202      	str	r2, [sp, #8]
     d7c:	68f8      	ldr	r0, [r7, #12]
     d7e:	4619      	mov	r1, r3
     d80:	f04f 020a 	mov.w	r2, #10
     d84:	f04f 0301 	mov.w	r3, #1
     d88:	f7ff ff02 	bl	b90 <printi>
     d8c:	4603      	mov	r3, r0
     d8e:	441c      	add	r4, r3
				continue;
     d90:	e06e      	b.n	e70 <print+0x1e8>
			}
			if( *format == 'x' ) {
     d92:	68bb      	ldr	r3, [r7, #8]
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	2b78      	cmp	r3, #120	; 0x78
     d98:	d114      	bne.n	dc4 <print+0x13c>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	f103 0204 	add.w	r2, r3, #4
     da0:	607a      	str	r2, [r7, #4]
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	9500      	str	r5, [sp, #0]
     da6:	9601      	str	r6, [sp, #4]
     da8:	f04f 0261 	mov.w	r2, #97	; 0x61
     dac:	9202      	str	r2, [sp, #8]
     dae:	68f8      	ldr	r0, [r7, #12]
     db0:	4619      	mov	r1, r3
     db2:	f04f 0210 	mov.w	r2, #16
     db6:	f04f 0300 	mov.w	r3, #0
     dba:	f7ff fee9 	bl	b90 <printi>
     dbe:	4603      	mov	r3, r0
     dc0:	441c      	add	r4, r3
				continue;
     dc2:	e055      	b.n	e70 <print+0x1e8>
			}
			if( *format == 'X' ) {
     dc4:	68bb      	ldr	r3, [r7, #8]
     dc6:	781b      	ldrb	r3, [r3, #0]
     dc8:	2b58      	cmp	r3, #88	; 0x58
     dca:	d114      	bne.n	df6 <print+0x16e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	f103 0204 	add.w	r2, r3, #4
     dd2:	607a      	str	r2, [r7, #4]
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	9500      	str	r5, [sp, #0]
     dd8:	9601      	str	r6, [sp, #4]
     dda:	f04f 0241 	mov.w	r2, #65	; 0x41
     dde:	9202      	str	r2, [sp, #8]
     de0:	68f8      	ldr	r0, [r7, #12]
     de2:	4619      	mov	r1, r3
     de4:	f04f 0210 	mov.w	r2, #16
     de8:	f04f 0300 	mov.w	r3, #0
     dec:	f7ff fed0 	bl	b90 <printi>
     df0:	4603      	mov	r3, r0
     df2:	441c      	add	r4, r3
				continue;
     df4:	e03c      	b.n	e70 <print+0x1e8>
			}
			if( *format == 'u' ) {
     df6:	68bb      	ldr	r3, [r7, #8]
     df8:	781b      	ldrb	r3, [r3, #0]
     dfa:	2b75      	cmp	r3, #117	; 0x75
     dfc:	d114      	bne.n	e28 <print+0x1a0>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	f103 0204 	add.w	r2, r3, #4
     e04:	607a      	str	r2, [r7, #4]
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	9500      	str	r5, [sp, #0]
     e0a:	9601      	str	r6, [sp, #4]
     e0c:	f04f 0261 	mov.w	r2, #97	; 0x61
     e10:	9202      	str	r2, [sp, #8]
     e12:	68f8      	ldr	r0, [r7, #12]
     e14:	4619      	mov	r1, r3
     e16:	f04f 020a 	mov.w	r2, #10
     e1a:	f04f 0300 	mov.w	r3, #0
     e1e:	f7ff feb7 	bl	b90 <printi>
     e22:	4603      	mov	r3, r0
     e24:	441c      	add	r4, r3
				continue;
     e26:	e023      	b.n	e70 <print+0x1e8>
			}
			if( *format == 'c' ) {
     e28:	68bb      	ldr	r3, [r7, #8]
     e2a:	781b      	ldrb	r3, [r3, #0]
     e2c:	2b63      	cmp	r3, #99	; 0x63
     e2e:	d11e      	bne.n	e6e <print+0x1e6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	f103 0204 	add.w	r2, r3, #4
     e36:	607a      	str	r2, [r7, #4]
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	b2db      	uxtb	r3, r3
     e3c:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
     e3e:	f04f 0300 	mov.w	r3, #0
     e42:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
     e44:	f107 0314 	add.w	r3, r7, #20
     e48:	68f8      	ldr	r0, [r7, #12]
     e4a:	4619      	mov	r1, r3
     e4c:	462a      	mov	r2, r5
     e4e:	4633      	mov	r3, r6
     e50:	f7ff fe34 	bl	abc <prints>
     e54:	4603      	mov	r3, r0
     e56:	441c      	add	r4, r3
				continue;
     e58:	e00a      	b.n	e70 <print+0x1e8>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
     e5a:	bf00      	nop
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
     e5c:	68bb      	ldr	r3, [r7, #8]
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	68f8      	ldr	r0, [r7, #12]
     e62:	4619      	mov	r1, r3
     e64:	f7ff fe12 	bl	a8c <printchar>
			++pc;
     e68:	f104 0401 	add.w	r4, r4, #1
     e6c:	e000      	b.n	e70 <print+0x1e8>
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
				continue;
     e6e:	bf00      	nop
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
     e70:	68bb      	ldr	r3, [r7, #8]
     e72:	f103 0301 	add.w	r3, r3, #1
     e76:	60bb      	str	r3, [r7, #8]
     e78:	68bb      	ldr	r3, [r7, #8]
     e7a:	781b      	ldrb	r3, [r3, #0]
     e7c:	2b00      	cmp	r3, #0
     e7e:	f47f af0d 	bne.w	c9c <print+0x14>
     e82:	e000      	b.n	e86 <print+0x1fe>
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
     e84:	bf00      	nop
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	2b00      	cmp	r3, #0
     e8a:	d004      	beq.n	e96 <print+0x20e>
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	f04f 0200 	mov.w	r2, #0
     e94:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
     e96:	4623      	mov	r3, r4
}
     e98:	4618      	mov	r0, r3
     e9a:	f107 0718 	add.w	r7, r7, #24
     e9e:	46bd      	mov	sp, r7
     ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000ea4 <printf>:

int printf(const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
     ea4:	b40f      	push	{r0, r1, r2, r3}
     ea6:	b580      	push	{r7, lr}
     ea8:	b082      	sub	sp, #8
     eaa:	af00      	add	r7, sp, #0
     eac:	f107 0314 	add.w	r3, r7, #20
     eb0:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
     eb2:	f04f 0000 	mov.w	r0, #0
     eb6:	6939      	ldr	r1, [r7, #16]
     eb8:	687a      	ldr	r2, [r7, #4]
     eba:	f7ff fee5 	bl	c88 <print>
     ebe:	4603      	mov	r3, r0
}
     ec0:	4618      	mov	r0, r3
     ec2:	f107 0708 	add.w	r7, r7, #8
     ec6:	46bd      	mov	sp, r7
     ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     ecc:	b004      	add	sp, #16
     ece:	4770      	bx	lr

00000ed0 <sprintf>:

int sprintf(char *out, const char *format, ...)
{
        va_list args;
        
        va_start( args, format );
     ed0:	b40e      	push	{r1, r2, r3}
     ed2:	b580      	push	{r7, lr}
     ed4:	b085      	sub	sp, #20
     ed6:	af00      	add	r7, sp, #0
     ed8:	6078      	str	r0, [r7, #4]
     eda:	f107 0320 	add.w	r3, r7, #32
     ede:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
     ee0:	f107 0304 	add.w	r3, r7, #4
     ee4:	4618      	mov	r0, r3
     ee6:	69f9      	ldr	r1, [r7, #28]
     ee8:	68fa      	ldr	r2, [r7, #12]
     eea:	f7ff fecd 	bl	c88 <print>
     eee:	4603      	mov	r3, r0
}
     ef0:	4618      	mov	r0, r3
     ef2:	f107 0714 	add.w	r7, r7, #20
     ef6:	46bd      	mov	sp, r7
     ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     efc:	b003      	add	sp, #12
     efe:	4770      	bx	lr

00000f00 <snprintf>:
{
        va_list args;
        
        ( void ) count;
        
        va_start( args, format );
     f00:	b40c      	push	{r2, r3}
     f02:	b580      	push	{r7, lr}
     f04:	b084      	sub	sp, #16
     f06:	af00      	add	r7, sp, #0
     f08:	6078      	str	r0, [r7, #4]
     f0a:	6039      	str	r1, [r7, #0]
     f0c:	f107 031c 	add.w	r3, r7, #28
     f10:	60fb      	str	r3, [r7, #12]
        return print( &buf, format, args );
     f12:	f107 0304 	add.w	r3, r7, #4
     f16:	4618      	mov	r0, r3
     f18:	69b9      	ldr	r1, [r7, #24]
     f1a:	68fa      	ldr	r2, [r7, #12]
     f1c:	f7ff feb4 	bl	c88 <print>
     f20:	4603      	mov	r3, r0
}
     f22:	4618      	mov	r0, r3
     f24:	f107 0710 	add.w	r7, r7, #16
     f28:	46bd      	mov	sp, r7
     f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     f2e:	b002      	add	sp, #8
     f30:	4770      	bx	lr
     f32:	bf00      	nop

00000f34 <write>:
#endif


/* To keep linker happy. */
int	write( int i, char* c, int n)
{
     f34:	b480      	push	{r7}
     f36:	b085      	sub	sp, #20
     f38:	af00      	add	r7, sp, #0
     f3a:	60f8      	str	r0, [r7, #12]
     f3c:	60b9      	str	r1, [r7, #8]
     f3e:	607a      	str	r2, [r7, #4]
	(void)i;
	(void)n;
	(void)c;
	return 0;
     f40:	f04f 0300 	mov.w	r3, #0
}
     f44:	4618      	mov	r0, r3
     f46:	f107 0714 	add.w	r7, r7, #20
     f4a:	46bd      	mov	sp, r7
     f4c:	bc80      	pop	{r7}
     f4e:	4770      	bx	lr

00000f50 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f50:	b580      	push	{r7, lr}
     f52:	b08a      	sub	sp, #40	; 0x28
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     f58:	f04f 0300 	mov.w	r3, #0
     f5c:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
     f5e:	f001 fc01 	bl	2764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     f62:	f644 4328 	movw	r3, #19496	; 0x4c28
     f66:	f2c1 0300 	movt	r3, #4096	; 0x1000
     f6a:	681b      	ldr	r3, [r3, #0]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d133      	bne.n	fd8 <pvPortMalloc+0x88>
		{
			prvHeapInit();
     f70:	f240 0218 	movw	r2, #24
     f74:	f2c1 0200 	movt	r2, #4096	; 0x1000
     f78:	f644 4318 	movw	r3, #19480	; 0x4c18
     f7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
     f80:	601a      	str	r2, [r3, #0]
     f82:	f644 4318 	movw	r3, #19480	; 0x4c18
     f86:	f2c1 0300 	movt	r3, #4096	; 0x1000
     f8a:	f04f 0200 	mov.w	r2, #0
     f8e:	605a      	str	r2, [r3, #4]
     f90:	f644 4320 	movw	r3, #19488	; 0x4c20
     f94:	f2c1 0300 	movt	r3, #4096	; 0x1000
     f98:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     f9c:	605a      	str	r2, [r3, #4]
     f9e:	f644 4320 	movw	r3, #19488	; 0x4c20
     fa2:	f2c1 0300 	movt	r3, #4096	; 0x1000
     fa6:	f04f 0200 	mov.w	r2, #0
     faa:	601a      	str	r2, [r3, #0]
     fac:	f240 0318 	movw	r3, #24
     fb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
     fb4:	61fb      	str	r3, [r7, #28]
     fb6:	69fb      	ldr	r3, [r7, #28]
     fb8:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
     fbc:	605a      	str	r2, [r3, #4]
     fbe:	69fa      	ldr	r2, [r7, #28]
     fc0:	f644 4320 	movw	r3, #19488	; 0x4c20
     fc4:	f2c1 0300 	movt	r3, #4096	; 0x1000
     fc8:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
     fca:	f644 4328 	movw	r3, #19496	; 0x4c28
     fce:	f2c1 0300 	movt	r3, #4096	; 0x1000
     fd2:	f04f 0201 	mov.w	r2, #1
     fd6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	2b00      	cmp	r3, #0
     fdc:	d012      	beq.n	1004 <pvPortMalloc+0xb4>
		{
			xWantedSize += heapSTRUCT_SIZE;
     fde:	f24b 23b4 	movw	r3, #45748	; 0xb2b4
     fe2:	f2c0 0300 	movt	r3, #0
     fe6:	881b      	ldrh	r3, [r3, #0]
     fe8:	687a      	ldr	r2, [r7, #4]
     fea:	4413      	add	r3, r2
     fec:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	f003 0307 	and.w	r3, r3, #7
     ff4:	2b00      	cmp	r3, #0
     ff6:	d005      	beq.n	1004 <pvPortMalloc+0xb4>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	f023 0307 	bic.w	r3, r3, #7
     ffe:	f103 0308 	add.w	r3, r3, #8
    1002:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	2b00      	cmp	r3, #0
    1008:	d075      	beq.n	10f6 <pvPortMalloc+0x1a6>
    100a:	687a      	ldr	r2, [r7, #4]
    100c:	f644 33ff 	movw	r3, #19455	; 0x4bff
    1010:	429a      	cmp	r2, r3
    1012:	d870      	bhi.n	10f6 <pvPortMalloc+0x1a6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1014:	f644 4318 	movw	r3, #19480	; 0x4c18
    1018:	f2c1 0300 	movt	r3, #4096	; 0x1000
    101c:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
    101e:	f644 4318 	movw	r3, #19480	; 0x4c18
    1022:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	60fb      	str	r3, [r7, #12]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    102a:	e004      	b.n	1036 <pvPortMalloc+0xe6>
			{
				pxPreviousBlock = pxBlock;
    102c:	68fb      	ldr	r3, [r7, #12]
    102e:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
    1030:	68fb      	ldr	r3, [r7, #12]
    1032:	681b      	ldr	r3, [r3, #0]
    1034:	60fb      	str	r3, [r7, #12]
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    1036:	68fb      	ldr	r3, [r7, #12]
    1038:	685a      	ldr	r2, [r3, #4]
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	429a      	cmp	r2, r3
    103e:	d203      	bcs.n	1048 <pvPortMalloc+0xf8>
    1040:	68fb      	ldr	r3, [r7, #12]
    1042:	681b      	ldr	r3, [r3, #0]
    1044:	2b00      	cmp	r3, #0
    1046:	d1f1      	bne.n	102c <pvPortMalloc+0xdc>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1048:	68fa      	ldr	r2, [r7, #12]
    104a:	f644 4320 	movw	r3, #19488	; 0x4c20
    104e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1052:	429a      	cmp	r2, r3
    1054:	d04f      	beq.n	10f6 <pvPortMalloc+0x1a6>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1056:	693b      	ldr	r3, [r7, #16]
    1058:	681a      	ldr	r2, [r3, #0]
    105a:	f24b 23b4 	movw	r3, #45748	; 0xb2b4
    105e:	f2c0 0300 	movt	r3, #0
    1062:	881b      	ldrh	r3, [r3, #0]
    1064:	4413      	add	r3, r2
    1066:	61bb      	str	r3, [r7, #24]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1068:	68fb      	ldr	r3, [r7, #12]
    106a:	681a      	ldr	r2, [r3, #0]
    106c:	693b      	ldr	r3, [r7, #16]
    106e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1070:	68fb      	ldr	r3, [r7, #12]
    1072:	685a      	ldr	r2, [r3, #4]
    1074:	687b      	ldr	r3, [r7, #4]
    1076:	ebc3 0202 	rsb	r2, r3, r2
    107a:	f24b 23b4 	movw	r3, #45748	; 0xb2b4
    107e:	f2c0 0300 	movt	r3, #0
    1082:	881b      	ldrh	r3, [r3, #0]
    1084:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1088:	429a      	cmp	r2, r3
    108a:	d926      	bls.n	10da <pvPortMalloc+0x18a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    108c:	68fa      	ldr	r2, [r7, #12]
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	4413      	add	r3, r2
    1092:	617b      	str	r3, [r7, #20]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1094:	68fb      	ldr	r3, [r7, #12]
    1096:	685a      	ldr	r2, [r3, #4]
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	ebc3 0202 	rsb	r2, r3, r2
    109e:	697b      	ldr	r3, [r7, #20]
    10a0:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    10a2:	68fb      	ldr	r3, [r7, #12]
    10a4:	687a      	ldr	r2, [r7, #4]
    10a6:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    10a8:	697b      	ldr	r3, [r7, #20]
    10aa:	685b      	ldr	r3, [r3, #4]
    10ac:	627b      	str	r3, [r7, #36]	; 0x24
    10ae:	f644 4318 	movw	r3, #19480	; 0x4c18
    10b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    10b6:	623b      	str	r3, [r7, #32]
    10b8:	e002      	b.n	10c0 <pvPortMalloc+0x170>
    10ba:	6a3b      	ldr	r3, [r7, #32]
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	623b      	str	r3, [r7, #32]
    10c0:	6a3b      	ldr	r3, [r7, #32]
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	685a      	ldr	r2, [r3, #4]
    10c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10c8:	429a      	cmp	r2, r3
    10ca:	d3f6      	bcc.n	10ba <pvPortMalloc+0x16a>
    10cc:	6a3b      	ldr	r3, [r7, #32]
    10ce:	681a      	ldr	r2, [r3, #0]
    10d0:	697b      	ldr	r3, [r7, #20]
    10d2:	601a      	str	r2, [r3, #0]
    10d4:	6a3b      	ldr	r3, [r7, #32]
    10d6:	697a      	ldr	r2, [r7, #20]
    10d8:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    10da:	f240 0300 	movw	r3, #0
    10de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	68fb      	ldr	r3, [r7, #12]
    10e6:	685b      	ldr	r3, [r3, #4]
    10e8:	ebc3 0202 	rsb	r2, r3, r2
    10ec:	f240 0300 	movw	r3, #0
    10f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    10f4:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    10f6:	f001 fb47 	bl	2788 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    10fa:	69bb      	ldr	r3, [r7, #24]
}
    10fc:	4618      	mov	r0, r3
    10fe:	f107 0728 	add.w	r7, r7, #40	; 0x28
    1102:	46bd      	mov	sp, r7
    1104:	bd80      	pop	{r7, pc}
    1106:	bf00      	nop

00001108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1108:	b580      	push	{r7, lr}
    110a:	b086      	sub	sp, #24
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	60bb      	str	r3, [r7, #8]
xBlockLink *pxLink;

	if( pv )
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	2b00      	cmp	r3, #0
    1118:	d035      	beq.n	1186 <vPortFree+0x7e>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    111a:	f24b 23b4 	movw	r3, #45748	; 0xb2b4
    111e:	f2c0 0300 	movt	r3, #0
    1122:	881b      	ldrh	r3, [r3, #0]
    1124:	f1c3 0300 	rsb	r3, r3, #0
    1128:	68ba      	ldr	r2, [r7, #8]
    112a:	4413      	add	r3, r2
    112c:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    112e:	68bb      	ldr	r3, [r7, #8]
    1130:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    1132:	f001 fb17 	bl	2764 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    1136:	68fb      	ldr	r3, [r7, #12]
    1138:	685b      	ldr	r3, [r3, #4]
    113a:	617b      	str	r3, [r7, #20]
    113c:	f644 4318 	movw	r3, #19480	; 0x4c18
    1140:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1144:	613b      	str	r3, [r7, #16]
    1146:	e002      	b.n	114e <vPortFree+0x46>
    1148:	693b      	ldr	r3, [r7, #16]
    114a:	681b      	ldr	r3, [r3, #0]
    114c:	613b      	str	r3, [r7, #16]
    114e:	693b      	ldr	r3, [r7, #16]
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	685a      	ldr	r2, [r3, #4]
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	429a      	cmp	r2, r3
    1158:	d3f6      	bcc.n	1148 <vPortFree+0x40>
    115a:	693b      	ldr	r3, [r7, #16]
    115c:	681a      	ldr	r2, [r3, #0]
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	601a      	str	r2, [r3, #0]
    1162:	693b      	ldr	r3, [r7, #16]
    1164:	68fa      	ldr	r2, [r7, #12]
    1166:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	685a      	ldr	r2, [r3, #4]
    116c:	f240 0300 	movw	r3, #0
    1170:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1174:	681b      	ldr	r3, [r3, #0]
    1176:	441a      	add	r2, r3
    1178:	f240 0300 	movw	r3, #0
    117c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1180:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    1182:	f001 fb01 	bl	2788 <xTaskResumeAll>
	}
}
    1186:	f107 0718 	add.w	r7, r7, #24
    118a:	46bd      	mov	sp, r7
    118c:	bd80      	pop	{r7, pc}
    118e:	bf00      	nop

00001190 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1190:	b480      	push	{r7}
    1192:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    1194:	f240 0300 	movw	r3, #0
    1198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    119c:	681b      	ldr	r3, [r3, #0]
}
    119e:	4618      	mov	r0, r3
    11a0:	46bd      	mov	sp, r7
    11a2:	bc80      	pop	{r7}
    11a4:	4770      	bx	lr
    11a6:	bf00      	nop

000011a8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    11a8:	b480      	push	{r7}
    11aa:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    11ac:	46bd      	mov	sp, r7
    11ae:	bc80      	pop	{r7}
    11b0:	4770      	bx	lr
    11b2:	bf00      	nop

000011b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    11b4:	b480      	push	{r7}
    11b6:	b085      	sub	sp, #20
    11b8:	af00      	add	r7, sp, #0
    11ba:	60f8      	str	r0, [r7, #12]
    11bc:	60b9      	str	r1, [r7, #8]
    11be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    11c0:	68fb      	ldr	r3, [r7, #12]
    11c2:	f1a3 0304 	sub.w	r3, r3, #4
    11c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    11ce:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	f1a3 0304 	sub.w	r3, r3, #4
    11d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    11d8:	68ba      	ldr	r2, [r7, #8]
    11da:	68fb      	ldr	r3, [r7, #12]
    11dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	f1a3 0304 	sub.w	r3, r3, #4
    11e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	f04f 0200 	mov.w	r2, #0
    11ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	f1a3 0314 	sub.w	r3, r3, #20
    11f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    11f6:	687a      	ldr	r2, [r7, #4]
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    11fc:	68fb      	ldr	r3, [r7, #12]
    11fe:	f1a3 0320 	sub.w	r3, r3, #32
    1202:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1204:	68fb      	ldr	r3, [r7, #12]
}
    1206:	4618      	mov	r0, r3
    1208:	f107 0714 	add.w	r7, r7, #20
    120c:	46bd      	mov	sp, r7
    120e:	bc80      	pop	{r7}
    1210:	4770      	bx	lr
    1212:	bf00      	nop

00001214 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    1214:	4b06      	ldr	r3, [pc, #24]	; (1230 <pxCurrentTCBConst2>)
    1216:	6819      	ldr	r1, [r3, #0]
    1218:	6808      	ldr	r0, [r1, #0]
    121a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    121e:	f380 8809 	msr	PSP, r0
    1222:	f04f 0000 	mov.w	r0, #0
    1226:	f380 8811 	msr	BASEPRI, r0
    122a:	f04e 0e0d 	orr.w	lr, lr, #13
    122e:	4770      	bx	lr

00001230 <pxCurrentTCBConst2>:
    1230:	10004c30 	.word	0x10004c30

00001234 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
    1234:	4862      	ldr	r0, [pc, #392]	; (13c0 <prvSetupTimerInterrupt+0x2c>)
    1236:	6800      	ldr	r0, [r0, #0]
    1238:	6800      	ldr	r0, [r0, #0]
    123a:	f380 8808 	msr	MSP, r0
    123e:	b662      	cpsie	i
    1240:	df00      	svc	0
    1242:	bf00      	nop

00001244 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    1244:	b580      	push	{r7, lr}
    1246:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1248:	f64e 5320 	movw	r3, #60704	; 0xed20
    124c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1250:	f64e 5220 	movw	r2, #60704	; 0xed20
    1254:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1258:	6812      	ldr	r2, [r2, #0]
    125a:	f442 0278 	orr.w	r2, r2, #16252928	; 0xf80000
    125e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1260:	f64e 5320 	movw	r3, #60704	; 0xed20
    1264:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1268:	f64e 5220 	movw	r2, #60704	; 0xed20
    126c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    1270:	6812      	ldr	r2, [r2, #0]
    1272:	f042 4278 	orr.w	r2, r2, #4160749568	; 0xf8000000
    1276:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    1278:	f000 f88c 	bl	1394 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    127c:	f240 0304 	movw	r3, #4
    1280:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1284:	f04f 0200 	mov.w	r2, #0
    1288:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    128a:	f7ff ffd3 	bl	1234 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
    128e:	f04f 0300 	mov.w	r3, #0
}
    1292:	4618      	mov	r0, r3
    1294:	bd80      	pop	{r7, pc}
    1296:	bf00      	nop

00001298 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1298:	b480      	push	{r7}
    129a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    129c:	46bd      	mov	sp, r7
    129e:	bc80      	pop	{r7}
    12a0:	4770      	bx	lr
    12a2:	bf00      	nop

000012a4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    12a4:	b480      	push	{r7}
    12a6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    12a8:	f64e 5304 	movw	r3, #60676	; 0xed04
    12ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    12b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    12b4:	601a      	str	r2, [r3, #0]
}
    12b6:	46bd      	mov	sp, r7
    12b8:	bc80      	pop	{r7}
    12ba:	4770      	bx	lr

000012bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    12bc:	b480      	push	{r7}
    12be:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    12c0:	f04f 0028 	mov.w	r0, #40	; 0x28
    12c4:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    12c8:	f240 0304 	movw	r3, #4
    12cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	f103 0201 	add.w	r2, r3, #1
    12d6:	f240 0304 	movw	r3, #4
    12da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    12de:	601a      	str	r2, [r3, #0]
}
    12e0:	46bd      	mov	sp, r7
    12e2:	bc80      	pop	{r7}
    12e4:	4770      	bx	lr
    12e6:	bf00      	nop

000012e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    12e8:	b480      	push	{r7}
    12ea:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    12ec:	f240 0304 	movw	r3, #4
    12f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    12f4:	681b      	ldr	r3, [r3, #0]
    12f6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    12fa:	f240 0304 	movw	r3, #4
    12fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1302:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    1304:	f240 0304 	movw	r3, #4
    1308:	f2c1 0300 	movt	r3, #4096	; 0x1000
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	2b00      	cmp	r3, #0
    1310:	d103      	bne.n	131a <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    1312:	f04f 0000 	mov.w	r0, #0
    1316:	f380 8811 	msr	BASEPRI, r0
	}
}
    131a:	46bd      	mov	sp, r7
    131c:	bc80      	pop	{r7}
    131e:	4770      	bx	lr

00001320 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1320:	f3ef 8009 	mrs	r0, PSP
    1324:	4b0c      	ldr	r3, [pc, #48]	; (1358 <pxCurrentTCBConst>)
    1326:	681a      	ldr	r2, [r3, #0]
    1328:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    132c:	6010      	str	r0, [r2, #0]
    132e:	e92d 4008 	stmdb	sp!, {r3, lr}
    1332:	f04f 0028 	mov.w	r0, #40	; 0x28
    1336:	f380 8811 	msr	BASEPRI, r0
    133a:	f001 fd25 	bl	2d88 <vTaskSwitchContext>
    133e:	f04f 0000 	mov.w	r0, #0
    1342:	f380 8811 	msr	BASEPRI, r0
    1346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    134a:	6819      	ldr	r1, [r3, #0]
    134c:	6808      	ldr	r0, [r1, #0]
    134e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1352:	f380 8809 	msr	PSP, r0
    1356:	4770      	bx	lr

00001358 <pxCurrentTCBConst>:
    1358:	10004c30 	.word	0x10004c30

0000135c <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    135c:	b580      	push	{r7, lr}
    135e:	b082      	sub	sp, #8
    1360:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1362:	f64e 5304 	movw	r3, #60676	; 0xed04
    1366:	f2ce 0300 	movt	r3, #57344	; 0xe000
    136a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    136e:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    1370:	f04f 0300 	mov.w	r3, #0
    1374:	607b      	str	r3, [r7, #4]
    1376:	f04f 0028 	mov.w	r0, #40	; 0x28
    137a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    137e:	f001 fc23 	bl	2bc8 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    1382:	f04f 0000 	mov.w	r0, #0
    1386:	f380 8811 	msr	BASEPRI, r0
}
    138a:	f107 0708 	add.w	r7, r7, #8
    138e:	46bd      	mov	sp, r7
    1390:	bd80      	pop	{r7, pc}
    1392:	bf00      	nop

00001394 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    1394:	b480      	push	{r7}
    1396:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1398:	f24e 0314 	movw	r3, #57364	; 0xe014
    139c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    13a0:	f248 22b7 	movw	r2, #33463	; 0x82b7
    13a4:	f2c0 0201 	movt	r2, #1
    13a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    13aa:	f24e 0310 	movw	r3, #57360	; 0xe010
    13ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
    13b2:	f04f 0207 	mov.w	r2, #7
    13b6:	601a      	str	r2, [r3, #0]
}
    13b8:	46bd      	mov	sp, r7
    13ba:	bc80      	pop	{r7}
    13bc:	4770      	bx	lr
    13be:	0000      	.short	0x0000
    13c0:	e000ed08 	.word	0xe000ed08

000013c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	f103 0308 	add.w	r3, r3, #8
    13d2:	461a      	mov	r2, r3
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	f103 0308 	add.w	r3, r3, #8
    13e6:	461a      	mov	r2, r3
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	f103 0308 	add.w	r3, r3, #8
    13f2:	461a      	mov	r2, r3
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	f04f 0200 	mov.w	r2, #0
    13fe:	601a      	str	r2, [r3, #0]
}
    1400:	f107 070c 	add.w	r7, r7, #12
    1404:	46bd      	mov	sp, r7
    1406:	bc80      	pop	{r7}
    1408:	4770      	bx	lr
    140a:	bf00      	nop

0000140c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    140c:	b480      	push	{r7}
    140e:	b083      	sub	sp, #12
    1410:	af00      	add	r7, sp, #0
    1412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1414:	687b      	ldr	r3, [r7, #4]
    1416:	f04f 0200 	mov.w	r2, #0
    141a:	611a      	str	r2, [r3, #16]
}
    141c:	f107 070c 	add.w	r7, r7, #12
    1420:	46bd      	mov	sp, r7
    1422:	bc80      	pop	{r7}
    1424:	4770      	bx	lr
    1426:	bf00      	nop

00001428 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1428:	b480      	push	{r7}
    142a:	b085      	sub	sp, #20
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
    1430:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	685b      	ldr	r3, [r3, #4]
    1436:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	685a      	ldr	r2, [r3, #4]
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	685a      	ldr	r2, [r3, #4]
    1444:	683b      	ldr	r3, [r7, #0]
    1446:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1448:	68fb      	ldr	r3, [r7, #12]
    144a:	685b      	ldr	r3, [r3, #4]
    144c:	683a      	ldr	r2, [r7, #0]
    144e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1450:	683a      	ldr	r2, [r7, #0]
    1452:	68fb      	ldr	r3, [r7, #12]
    1454:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1456:	683a      	ldr	r2, [r7, #0]
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    145c:	683b      	ldr	r3, [r7, #0]
    145e:	687a      	ldr	r2, [r7, #4]
    1460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	f103 0201 	add.w	r2, r3, #1
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	601a      	str	r2, [r3, #0]
}
    146e:	f107 0714 	add.w	r7, r7, #20
    1472:	46bd      	mov	sp, r7
    1474:	bc80      	pop	{r7}
    1476:	4770      	bx	lr

00001478 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1478:	b480      	push	{r7}
    147a:	b085      	sub	sp, #20
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1482:	683b      	ldr	r3, [r7, #0]
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	60fb      	str	r3, [r7, #12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    148e:	d103      	bne.n	1498 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	691b      	ldr	r3, [r3, #16]
    1494:	60bb      	str	r3, [r7, #8]
    1496:	e00d      	b.n	14b4 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	f103 0308 	add.w	r3, r3, #8
    149e:	60bb      	str	r3, [r7, #8]
    14a0:	e002      	b.n	14a8 <vListInsert+0x30>
    14a2:	68bb      	ldr	r3, [r7, #8]
    14a4:	685b      	ldr	r3, [r3, #4]
    14a6:	60bb      	str	r3, [r7, #8]
    14a8:	68bb      	ldr	r3, [r7, #8]
    14aa:	685b      	ldr	r3, [r3, #4]
    14ac:	681a      	ldr	r2, [r3, #0]
    14ae:	68fb      	ldr	r3, [r7, #12]
    14b0:	429a      	cmp	r2, r3
    14b2:	d9f6      	bls.n	14a2 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    14b4:	68bb      	ldr	r3, [r7, #8]
    14b6:	685a      	ldr	r2, [r3, #4]
    14b8:	683b      	ldr	r3, [r7, #0]
    14ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    14bc:	683b      	ldr	r3, [r7, #0]
    14be:	685b      	ldr	r3, [r3, #4]
    14c0:	683a      	ldr	r2, [r7, #0]
    14c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    14c4:	683b      	ldr	r3, [r7, #0]
    14c6:	68ba      	ldr	r2, [r7, #8]
    14c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    14ca:	683a      	ldr	r2, [r7, #0]
    14cc:	68bb      	ldr	r3, [r7, #8]
    14ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14d0:	683b      	ldr	r3, [r7, #0]
    14d2:	687a      	ldr	r2, [r7, #4]
    14d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	f103 0201 	add.w	r2, r3, #1
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	601a      	str	r2, [r3, #0]
}
    14e2:	f107 0714 	add.w	r7, r7, #20
    14e6:	46bd      	mov	sp, r7
    14e8:	bc80      	pop	{r7}
    14ea:	4770      	bx	lr

000014ec <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    14ec:	b480      	push	{r7}
    14ee:	b085      	sub	sp, #20
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	685b      	ldr	r3, [r3, #4]
    14f8:	687a      	ldr	r2, [r7, #4]
    14fa:	6892      	ldr	r2, [r2, #8]
    14fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	689b      	ldr	r3, [r3, #8]
    1502:	687a      	ldr	r2, [r7, #4]
    1504:	6852      	ldr	r2, [r2, #4]
    1506:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	691b      	ldr	r3, [r3, #16]
    150c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	685a      	ldr	r2, [r3, #4]
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	429a      	cmp	r2, r3
    1516:	d103      	bne.n	1520 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	689a      	ldr	r2, [r3, #8]
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	f04f 0200 	mov.w	r2, #0
    1526:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	601a      	str	r2, [r3, #0]
}
    1534:	f107 0714 	add.w	r7, r7, #20
    1538:	46bd      	mov	sp, r7
    153a:	bc80      	pop	{r7}
    153c:	4770      	bx	lr
    153e:	bf00      	nop

00001540 <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    1540:	b580      	push	{r7, lr}
    1542:	b088      	sub	sp, #32
    1544:	af00      	add	r7, sp, #0
    1546:	60f8      	str	r0, [r7, #12]
    1548:	60b9      	str	r1, [r7, #8]
    154a:	4613      	mov	r3, r2
    154c:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    154e:	f04f 0300 	mov.w	r3, #0
    1552:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	2b00      	cmp	r3, #0
    1558:	d05a      	beq.n	1610 <xQueueGenericCreate+0xd0>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    155a:	f04f 0050 	mov.w	r0, #80	; 0x50
    155e:	f7ff fcf7 	bl	f50 <pvPortMalloc>
    1562:	4603      	mov	r3, r0
    1564:	617b      	str	r3, [r7, #20]
		if( pxNewQueue != NULL )
    1566:	697b      	ldr	r3, [r7, #20]
    1568:	2b00      	cmp	r3, #0
    156a:	d051      	beq.n	1610 <xQueueGenericCreate+0xd0>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    156c:	68fb      	ldr	r3, [r7, #12]
    156e:	68ba      	ldr	r2, [r7, #8]
    1570:	fb02 f303 	mul.w	r3, r2, r3
    1574:	f103 0301 	add.w	r3, r3, #1
    1578:	61bb      	str	r3, [r7, #24]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    157a:	69b8      	ldr	r0, [r7, #24]
    157c:	f7ff fce8 	bl	f50 <pvPortMalloc>
    1580:	4603      	mov	r3, r0
    1582:	461a      	mov	r2, r3
    1584:	697b      	ldr	r3, [r7, #20]
    1586:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    1588:	697b      	ldr	r3, [r7, #20]
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	2b00      	cmp	r3, #0
    158e:	d03c      	beq.n	160a <xQueueGenericCreate+0xca>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1590:	697b      	ldr	r3, [r7, #20]
    1592:	681a      	ldr	r2, [r3, #0]
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	68b9      	ldr	r1, [r7, #8]
    1598:	fb01 f303 	mul.w	r3, r1, r3
    159c:	441a      	add	r2, r3
    159e:	697b      	ldr	r3, [r7, #20]
    15a0:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    15a2:	697b      	ldr	r3, [r7, #20]
    15a4:	f04f 0200 	mov.w	r2, #0
    15a8:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    15aa:	697b      	ldr	r3, [r7, #20]
    15ac:	681a      	ldr	r2, [r3, #0]
    15ae:	697b      	ldr	r3, [r7, #20]
    15b0:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    15b2:	697b      	ldr	r3, [r7, #20]
    15b4:	681a      	ldr	r2, [r3, #0]
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    15bc:	68b9      	ldr	r1, [r7, #8]
    15be:	fb01 f303 	mul.w	r3, r1, r3
    15c2:	441a      	add	r2, r3
    15c4:	697b      	ldr	r3, [r7, #20]
    15c6:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
    15c8:	697b      	ldr	r3, [r7, #20]
    15ca:	68fa      	ldr	r2, [r7, #12]
    15cc:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    15ce:	697b      	ldr	r3, [r7, #20]
    15d0:	68ba      	ldr	r2, [r7, #8]
    15d2:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
    15d4:	697b      	ldr	r3, [r7, #20]
    15d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    15da:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
    15dc:	697b      	ldr	r3, [r7, #20]
    15de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    15e2:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    15e4:	697b      	ldr	r3, [r7, #20]
    15e6:	79fa      	ldrb	r2, [r7, #7]
    15e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    15ec:	697b      	ldr	r3, [r7, #20]
    15ee:	f103 0310 	add.w	r3, r3, #16
    15f2:	4618      	mov	r0, r3
    15f4:	f7ff fee6 	bl	13c4 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    15f8:	697b      	ldr	r3, [r7, #20]
    15fa:	f103 0324 	add.w	r3, r3, #36	; 0x24
    15fe:	4618      	mov	r0, r3
    1600:	f7ff fee0 	bl	13c4 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1604:	697b      	ldr	r3, [r7, #20]
    1606:	61fb      	str	r3, [r7, #28]
    1608:	e002      	b.n	1610 <xQueueGenericCreate+0xd0>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    160a:	6978      	ldr	r0, [r7, #20]
    160c:	f7ff fd7c 	bl	1108 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1610:	69fb      	ldr	r3, [r7, #28]
}
    1612:	4618      	mov	r0, r3
    1614:	f107 0720 	add.w	r7, r7, #32
    1618:	46bd      	mov	sp, r7
    161a:	bd80      	pop	{r7, pc}

0000161c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    161c:	b580      	push	{r7, lr}
    161e:	b084      	sub	sp, #16
    1620:	af00      	add	r7, sp, #0
    1622:	4603      	mov	r3, r0
    1624:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;
	
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1626:	f04f 0050 	mov.w	r0, #80	; 0x50
    162a:	f7ff fc91 	bl	f50 <pvPortMalloc>
    162e:	4603      	mov	r3, r0
    1630:	60fb      	str	r3, [r7, #12]
		if( pxNewQueue != NULL )
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	2b00      	cmp	r3, #0
    1636:	d03c      	beq.n	16b2 <xQueueCreateMutex+0x96>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1638:	68fb      	ldr	r3, [r7, #12]
    163a:	f04f 0200 	mov.w	r2, #0
    163e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1640:	68fb      	ldr	r3, [r7, #12]
    1642:	f04f 0200 	mov.w	r2, #0
    1646:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	f04f 0200 	mov.w	r2, #0
    164e:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    1650:	68fb      	ldr	r3, [r7, #12]
    1652:	f04f 0200 	mov.w	r2, #0
    1656:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1658:	68fb      	ldr	r3, [r7, #12]
    165a:	f04f 0200 	mov.w	r2, #0
    165e:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	f04f 0201 	mov.w	r2, #1
    1666:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	f04f 0200 	mov.w	r2, #0
    166e:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1676:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    167e:	649a      	str	r2, [r3, #72]	; 0x48
			
			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
    1680:	68fb      	ldr	r3, [r7, #12]
    1682:	79fa      	ldrb	r2, [r7, #7]
    1684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	f103 0310 	add.w	r3, r3, #16
    168e:	4618      	mov	r0, r3
    1690:	f7ff fe98 	bl	13c4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1694:	68fb      	ldr	r3, [r7, #12]
    1696:	f103 0324 	add.w	r3, r3, #36	; 0x24
    169a:	4618      	mov	r0, r3
    169c:	f7ff fe92 	bl	13c4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    16a0:	68f8      	ldr	r0, [r7, #12]
    16a2:	f04f 0100 	mov.w	r1, #0
    16a6:	f04f 0200 	mov.w	r2, #0
    16aa:	f04f 0300 	mov.w	r3, #0
    16ae:	f000 f863 	bl	1778 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    16b2:	68fb      	ldr	r3, [r7, #12]
	}
    16b4:	4618      	mov	r0, r3
    16b6:	f107 0710 	add.w	r7, r7, #16
    16ba:	46bd      	mov	sp, r7
    16bc:	bd80      	pop	{r7, pc}
    16be:	bf00      	nop

000016c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueGiveMutexRecursive( xQueueHandle pxMutex )
	{
    16c0:	b590      	push	{r4, r7, lr}
    16c2:	b085      	sub	sp, #20
    16c4:	af00      	add	r7, sp, #0
    16c6:	6078      	str	r0, [r7, #4]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
    16c8:	687b      	ldr	r3, [r7, #4]
    16ca:	685c      	ldr	r4, [r3, #4]
    16cc:	f001 fffe 	bl	36cc <xTaskGetCurrentTaskHandle>
    16d0:	4603      	mov	r3, r0
    16d2:	429c      	cmp	r4, r3
    16d4:	d116      	bne.n	1704 <xQueueGiveMutexRecursive+0x44>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->uxRecursiveCallCount )--;
    16d6:	687b      	ldr	r3, [r7, #4]
    16d8:	68db      	ldr	r3, [r3, #12]
    16da:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->uxRecursiveCallCount == 0 )
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	68db      	ldr	r3, [r3, #12]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d108      	bne.n	16fc <xQueueGiveMutexRecursive+0x3c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    16ea:	6878      	ldr	r0, [r7, #4]
    16ec:	f04f 0100 	mov.w	r1, #0
    16f0:	f04f 0200 	mov.w	r2, #0
    16f4:	f04f 0300 	mov.w	r3, #0
    16f8:	f000 f83e 	bl	1778 <xQueueGenericSend>
			}

			xReturn = pdPASS;
    16fc:	f04f 0301 	mov.w	r3, #1
    1700:	60fb      	str	r3, [r7, #12]
    1702:	e002      	b.n	170a <xQueueGiveMutexRecursive+0x4a>
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
    1704:	f04f 0300 	mov.w	r3, #0
    1708:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
    170a:	68fb      	ldr	r3, [r7, #12]
	}
    170c:	4618      	mov	r0, r3
    170e:	f107 0714 	add.w	r7, r7, #20
    1712:	46bd      	mov	sp, r7
    1714:	bd90      	pop	{r4, r7, pc}
    1716:	bf00      	nop

00001718 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if configUSE_RECURSIVE_MUTEXES == 1

	portBASE_TYPE xQueueTakeMutexRecursive( xQueueHandle pxMutex, portTickType xBlockTime )
	{
    1718:	b590      	push	{r4, r7, lr}
    171a:	b085      	sub	sp, #20
    171c:	af00      	add	r7, sp, #0
    171e:	6078      	str	r0, [r7, #4]
    1720:	6039      	str	r1, [r7, #0]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == xTaskGetCurrentTaskHandle() )
    1722:	687b      	ldr	r3, [r7, #4]
    1724:	685c      	ldr	r4, [r3, #4]
    1726:	f001 ffd1 	bl	36cc <xTaskGetCurrentTaskHandle>
    172a:	4603      	mov	r3, r0
    172c:	429c      	cmp	r4, r3
    172e:	d109      	bne.n	1744 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->uxRecursiveCallCount )++;
    1730:	687b      	ldr	r3, [r7, #4]
    1732:	68db      	ldr	r3, [r3, #12]
    1734:	f103 0201 	add.w	r2, r3, #1
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
    173c:	f04f 0301 	mov.w	r3, #1
    1740:	60fb      	str	r3, [r7, #12]
    1742:	e012      	b.n	176a <xQueueTakeMutexRecursive+0x52>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xBlockTime, pdFALSE );
    1744:	6878      	ldr	r0, [r7, #4]
    1746:	f04f 0100 	mov.w	r1, #0
    174a:	683a      	ldr	r2, [r7, #0]
    174c:	f04f 0300 	mov.w	r3, #0
    1750:	f000 f8ee 	bl	1930 <xQueueGenericReceive>
    1754:	4603      	mov	r3, r0
    1756:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
    1758:	68fb      	ldr	r3, [r7, #12]
    175a:	2b01      	cmp	r3, #1
    175c:	d105      	bne.n	176a <xQueueTakeMutexRecursive+0x52>
			{
				( pxMutex->uxRecursiveCallCount )++;
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	68db      	ldr	r3, [r3, #12]
    1762:	f103 0201 	add.w	r2, r3, #1
    1766:	687b      	ldr	r3, [r7, #4]
    1768:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
    176a:	68fb      	ldr	r3, [r7, #12]
	}
    176c:	4618      	mov	r0, r3
    176e:	f107 0714 	add.w	r7, r7, #20
    1772:	46bd      	mov	sp, r7
    1774:	bd90      	pop	{r4, r7, pc}
    1776:	bf00      	nop

00001778 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1778:	b580      	push	{r7, lr}
    177a:	b088      	sub	sp, #32
    177c:	af00      	add	r7, sp, #0
    177e:	60f8      	str	r0, [r7, #12]
    1780:	60b9      	str	r1, [r7, #8]
    1782:	607a      	str	r2, [r7, #4]
    1784:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	61fb      	str	r3, [r7, #28]
    178c:	e000      	b.n	1790 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    178e:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1790:	f7ff fd94 	bl	12bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1794:	68fb      	ldr	r3, [r7, #12]
    1796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    179c:	429a      	cmp	r2, r3
    179e:	d218      	bcs.n	17d2 <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    17a0:	68f8      	ldr	r0, [r7, #12]
    17a2:	68b9      	ldr	r1, [r7, #8]
    17a4:	683a      	ldr	r2, [r7, #0]
    17a6:	f000 fa39 	bl	1c1c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ae:	2b00      	cmp	r3, #0
    17b0:	d00a      	beq.n	17c8 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	f103 0324 	add.w	r3, r3, #36	; 0x24
    17b8:	4618      	mov	r0, r3
    17ba:	f001 fbe5 	bl	2f88 <xTaskRemoveFromEventList>
    17be:	4603      	mov	r3, r0
    17c0:	2b01      	cmp	r3, #1
    17c2:	d101      	bne.n	17c8 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    17c4:	f7ff fd6e 	bl	12a4 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    17c8:	f7ff fd8e 	bl	12e8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    17cc:	f04f 0301 	mov.w	r3, #1
    17d0:	e05d      	b.n	188e <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d104      	bne.n	17e2 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    17d8:	f7ff fd86 	bl	12e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    17dc:	f04f 0300 	mov.w	r3, #0
    17e0:	e055      	b.n	188e <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    17e2:	69fb      	ldr	r3, [r7, #28]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d107      	bne.n	17f8 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    17e8:	f107 0314 	add.w	r3, r7, #20
    17ec:	4618      	mov	r0, r3
    17ee:	f001 fc2d 	bl	304c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    17f2:	f04f 0301 	mov.w	r3, #1
    17f6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    17f8:	f7ff fd76 	bl	12e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    17fc:	f000 ffb2 	bl	2764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1800:	f7ff fd5c 	bl	12bc <vPortEnterCritical>
    1804:	68fb      	ldr	r3, [r7, #12]
    1806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    180c:	d103      	bne.n	1816 <xQueueGenericSend+0x9e>
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	f04f 0200 	mov.w	r2, #0
    1814:	645a      	str	r2, [r3, #68]	; 0x44
    1816:	68fb      	ldr	r3, [r7, #12]
    1818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    181a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    181e:	d103      	bne.n	1828 <xQueueGenericSend+0xb0>
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	f04f 0200 	mov.w	r2, #0
    1826:	649a      	str	r2, [r3, #72]	; 0x48
    1828:	f7ff fd5e 	bl	12e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    182c:	f107 0214 	add.w	r2, r7, #20
    1830:	f107 0304 	add.w	r3, r7, #4
    1834:	4610      	mov	r0, r2
    1836:	4619      	mov	r1, r3
    1838:	f001 fc20 	bl	307c <xTaskCheckForTimeOut>
    183c:	4603      	mov	r3, r0
    183e:	2b00      	cmp	r3, #0
    1840:	d11e      	bne.n	1880 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1842:	68f8      	ldr	r0, [r7, #12]
    1844:	f000 faf0 	bl	1e28 <prvIsQueueFull>
    1848:	4603      	mov	r3, r0
    184a:	2b00      	cmp	r3, #0
    184c:	d012      	beq.n	1874 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	f103 0210 	add.w	r2, r3, #16
    1854:	687b      	ldr	r3, [r7, #4]
    1856:	4610      	mov	r0, r2
    1858:	4619      	mov	r1, r3
    185a:	f001 fb59 	bl	2f10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    185e:	68f8      	ldr	r0, [r7, #12]
    1860:	f000 fa6a 	bl	1d38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1864:	f000 ff90 	bl	2788 <xTaskResumeAll>
    1868:	4603      	mov	r3, r0
    186a:	2b00      	cmp	r3, #0
    186c:	d18f      	bne.n	178e <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    186e:	f7ff fd19 	bl	12a4 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    1872:	e78d      	b.n	1790 <xQueueGenericSend+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1874:	68f8      	ldr	r0, [r7, #12]
    1876:	f000 fa5f 	bl	1d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    187a:	f000 ff85 	bl	2788 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    187e:	e787      	b.n	1790 <xQueueGenericSend+0x18>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1880:	68f8      	ldr	r0, [r7, #12]
    1882:	f000 fa59 	bl	1d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1886:	f000 ff7f 	bl	2788 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    188a:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    188e:	4618      	mov	r0, r3
    1890:	f107 0720 	add.w	r7, r7, #32
    1894:	46bd      	mov	sp, r7
    1896:	bd80      	pop	{r7, pc}

00001898 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1898:	b580      	push	{r7, lr}
    189a:	b086      	sub	sp, #24
    189c:	af00      	add	r7, sp, #0
    189e:	60f8      	str	r0, [r7, #12]
    18a0:	60b9      	str	r1, [r7, #8]
    18a2:	607a      	str	r2, [r7, #4]
    18a4:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    18a6:	f04f 0300 	mov.w	r3, #0
    18aa:	617b      	str	r3, [r7, #20]
    18ac:	f04f 0028 	mov.w	r0, #40	; 0x28
    18b0:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    18bc:	429a      	cmp	r2, r3
    18be:	d229      	bcs.n	1914 <xQueueGenericSendFromISR+0x7c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    18c0:	68f8      	ldr	r0, [r7, #12]
    18c2:	68b9      	ldr	r1, [r7, #8]
    18c4:	683a      	ldr	r2, [r7, #0]
    18c6:	f000 f9a9 	bl	1c1c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    18ca:	68fb      	ldr	r3, [r7, #12]
    18cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    18ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    18d2:	d111      	bne.n	18f8 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18d4:	68fb      	ldr	r3, [r7, #12]
    18d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    18d8:	2b00      	cmp	r3, #0
    18da:	d014      	beq.n	1906 <xQueueGenericSendFromISR+0x6e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	f103 0324 	add.w	r3, r3, #36	; 0x24
    18e2:	4618      	mov	r0, r3
    18e4:	f001 fb50 	bl	2f88 <xTaskRemoveFromEventList>
    18e8:	4603      	mov	r3, r0
    18ea:	2b00      	cmp	r3, #0
    18ec:	d00d      	beq.n	190a <xQueueGenericSendFromISR+0x72>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	f04f 0201 	mov.w	r2, #1
    18f4:	601a      	str	r2, [r3, #0]
    18f6:	e009      	b.n	190c <xQueueGenericSendFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    18fc:	f103 0201 	add.w	r2, r3, #1
    1900:	68fb      	ldr	r3, [r7, #12]
    1902:	649a      	str	r2, [r3, #72]	; 0x48
    1904:	e002      	b.n	190c <xQueueGenericSendFromISR+0x74>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1906:	bf00      	nop
    1908:	e000      	b.n	190c <xQueueGenericSendFromISR+0x74>
    190a:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    190c:	f04f 0301 	mov.w	r3, #1
    1910:	613b      	str	r3, [r7, #16]
    1912:	e002      	b.n	191a <xQueueGenericSendFromISR+0x82>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1914:	f04f 0300 	mov.w	r3, #0
    1918:	613b      	str	r3, [r7, #16]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    191a:	f04f 0000 	mov.w	r0, #0
    191e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    1922:	693b      	ldr	r3, [r7, #16]
}
    1924:	4618      	mov	r0, r3
    1926:	f107 0718 	add.w	r7, r7, #24
    192a:	46bd      	mov	sp, r7
    192c:	bd80      	pop	{r7, pc}
    192e:	bf00      	nop

00001930 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1930:	b580      	push	{r7, lr}
    1932:	b088      	sub	sp, #32
    1934:	af00      	add	r7, sp, #0
    1936:	60f8      	str	r0, [r7, #12]
    1938:	60b9      	str	r1, [r7, #8]
    193a:	607a      	str	r2, [r7, #4]
    193c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    193e:	f04f 0300 	mov.w	r3, #0
    1942:	61bb      	str	r3, [r7, #24]
    1944:	e000      	b.n	1948 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1946:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1948:	f7ff fcb8 	bl	12bc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1950:	2b00      	cmp	r3, #0
    1952:	d044      	beq.n	19de <xQueueGenericReceive+0xae>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1954:	68fb      	ldr	r3, [r7, #12]
    1956:	68db      	ldr	r3, [r3, #12]
    1958:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    195a:	68f8      	ldr	r0, [r7, #12]
    195c:	68b9      	ldr	r1, [r7, #8]
    195e:	f000 f9c3 	bl	1ce8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1962:	683b      	ldr	r3, [r7, #0]
    1964:	2b00      	cmp	r3, #0
    1966:	d11f      	bne.n	19a8 <xQueueGenericReceive+0x78>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    196c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    1970:	68fb      	ldr	r3, [r7, #12]
    1972:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1974:	68fb      	ldr	r3, [r7, #12]
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	2b00      	cmp	r3, #0
    197a:	d105      	bne.n	1988 <xQueueGenericReceive+0x58>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    197c:	f001 fea6 	bl	36cc <xTaskGetCurrentTaskHandle>
    1980:	4603      	mov	r3, r0
    1982:	461a      	mov	r2, r3
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1988:	68fb      	ldr	r3, [r7, #12]
    198a:	691b      	ldr	r3, [r3, #16]
    198c:	2b00      	cmp	r3, #0
    198e:	d01e      	beq.n	19ce <xQueueGenericReceive+0x9e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	f103 0310 	add.w	r3, r3, #16
    1996:	4618      	mov	r0, r3
    1998:	f001 faf6 	bl	2f88 <xTaskRemoveFromEventList>
    199c:	4603      	mov	r3, r0
    199e:	2b01      	cmp	r3, #1
    19a0:	d117      	bne.n	19d2 <xQueueGenericReceive+0xa2>
						{
							portYIELD_WITHIN_API();
    19a2:	f7ff fc7f 	bl	12a4 <vPortYieldFromISR>
    19a6:	e015      	b.n	19d4 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    19a8:	68fb      	ldr	r3, [r7, #12]
    19aa:	69fa      	ldr	r2, [r7, #28]
    19ac:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19b2:	2b00      	cmp	r3, #0
    19b4:	d00e      	beq.n	19d4 <xQueueGenericReceive+0xa4>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19b6:	68fb      	ldr	r3, [r7, #12]
    19b8:	f103 0324 	add.w	r3, r3, #36	; 0x24
    19bc:	4618      	mov	r0, r3
    19be:	f001 fae3 	bl	2f88 <xTaskRemoveFromEventList>
    19c2:	4603      	mov	r3, r0
    19c4:	2b00      	cmp	r3, #0
    19c6:	d005      	beq.n	19d4 <xQueueGenericReceive+0xa4>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    19c8:	f7ff fc6c 	bl	12a4 <vPortYieldFromISR>
    19cc:	e002      	b.n	19d4 <xQueueGenericReceive+0xa4>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
							portYIELD_WITHIN_API();
    19ce:	bf00      	nop
    19d0:	e000      	b.n	19d4 <xQueueGenericReceive+0xa4>
    19d2:	bf00      	nop
						}
					}

				}

				taskEXIT_CRITICAL();
    19d4:	f7ff fc88 	bl	12e8 <vPortExitCritical>
				return pdPASS;
    19d8:	f04f 0301 	mov.w	r3, #1
    19dc:	e06b      	b.n	1ab6 <xQueueGenericReceive+0x186>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d104      	bne.n	19ee <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19e4:	f7ff fc80 	bl	12e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    19e8:	f04f 0300 	mov.w	r3, #0
    19ec:	e063      	b.n	1ab6 <xQueueGenericReceive+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
    19ee:	69bb      	ldr	r3, [r7, #24]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d107      	bne.n	1a04 <xQueueGenericReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19f4:	f107 0310 	add.w	r3, r7, #16
    19f8:	4618      	mov	r0, r3
    19fa:	f001 fb27 	bl	304c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    19fe:	f04f 0301 	mov.w	r3, #1
    1a02:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		taskEXIT_CRITICAL();
    1a04:	f7ff fc70 	bl	12e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a08:	f000 feac 	bl	2764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a0c:	f7ff fc56 	bl	12bc <vPortEnterCritical>
    1a10:	68fb      	ldr	r3, [r7, #12]
    1a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1a18:	d103      	bne.n	1a22 <xQueueGenericReceive+0xf2>
    1a1a:	68fb      	ldr	r3, [r7, #12]
    1a1c:	f04f 0200 	mov.w	r2, #0
    1a20:	645a      	str	r2, [r3, #68]	; 0x44
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1a2a:	d103      	bne.n	1a34 <xQueueGenericReceive+0x104>
    1a2c:	68fb      	ldr	r3, [r7, #12]
    1a2e:	f04f 0200 	mov.w	r2, #0
    1a32:	649a      	str	r2, [r3, #72]	; 0x48
    1a34:	f7ff fc58 	bl	12e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a38:	f107 0210 	add.w	r2, r7, #16
    1a3c:	f107 0304 	add.w	r3, r7, #4
    1a40:	4610      	mov	r0, r2
    1a42:	4619      	mov	r1, r3
    1a44:	f001 fb1a 	bl	307c <xTaskCheckForTimeOut>
    1a48:	4603      	mov	r3, r0
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d12c      	bne.n	1aa8 <xQueueGenericReceive+0x178>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a4e:	68f8      	ldr	r0, [r7, #12]
    1a50:	f000 f9c2 	bl	1dd8 <prvIsQueueEmpty>
    1a54:	4603      	mov	r3, r0
    1a56:	2b00      	cmp	r3, #0
    1a58:	d020      	beq.n	1a9c <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a5a:	68fb      	ldr	r3, [r7, #12]
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d108      	bne.n	1a74 <xQueueGenericReceive+0x144>
					{
						portENTER_CRITICAL();
    1a62:	f7ff fc2b 	bl	12bc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1a66:	68fb      	ldr	r3, [r7, #12]
    1a68:	685b      	ldr	r3, [r3, #4]
    1a6a:	4618      	mov	r0, r3
    1a6c:	f001 fe3e 	bl	36ec <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1a70:	f7ff fc3a 	bl	12e8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a74:	68fb      	ldr	r3, [r7, #12]
    1a76:	f103 0224 	add.w	r2, r3, #36	; 0x24
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	4610      	mov	r0, r2
    1a7e:	4619      	mov	r1, r3
    1a80:	f001 fa46 	bl	2f10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1a84:	68f8      	ldr	r0, [r7, #12]
    1a86:	f000 f957 	bl	1d38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1a8a:	f000 fe7d 	bl	2788 <xTaskResumeAll>
    1a8e:	4603      	mov	r3, r0
    1a90:	2b00      	cmp	r3, #0
    1a92:	f47f af58 	bne.w	1946 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    1a96:	f7ff fc05 	bl	12a4 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1a9a:	e755      	b.n	1948 <xQueueGenericReceive+0x18>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a9c:	68f8      	ldr	r0, [r7, #12]
    1a9e:	f000 f94b 	bl	1d38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1aa2:	f000 fe71 	bl	2788 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    1aa6:	e74f      	b.n	1948 <xQueueGenericReceive+0x18>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1aa8:	68f8      	ldr	r0, [r7, #12]
    1aaa:	f000 f945 	bl	1d38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1aae:	f000 fe6b 	bl	2788 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1ab2:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    1ab6:	4618      	mov	r0, r3
    1ab8:	f107 0720 	add.w	r7, r7, #32
    1abc:	46bd      	mov	sp, r7
    1abe:	bd80      	pop	{r7, pc}

00001ac0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b086      	sub	sp, #24
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	60f8      	str	r0, [r7, #12]
    1ac8:	60b9      	str	r1, [r7, #8]
    1aca:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1acc:	f04f 0300 	mov.w	r3, #0
    1ad0:	617b      	str	r3, [r7, #20]
    1ad2:	f04f 0028 	mov.w	r0, #40	; 0x28
    1ad6:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1ada:	68fb      	ldr	r3, [r7, #12]
    1adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d02e      	beq.n	1b40 <xQueueReceiveFromISR+0x80>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1ae2:	68f8      	ldr	r0, [r7, #12]
    1ae4:	68b9      	ldr	r1, [r7, #8]
    1ae6:	f000 f8ff 	bl	1ce8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1aee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    1af2:	68fb      	ldr	r3, [r7, #12]
    1af4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1af6:	68fb      	ldr	r3, [r7, #12]
    1af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1afe:	d111      	bne.n	1b24 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b00:	68fb      	ldr	r3, [r7, #12]
    1b02:	691b      	ldr	r3, [r3, #16]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d014      	beq.n	1b32 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	f103 0310 	add.w	r3, r3, #16
    1b0e:	4618      	mov	r0, r3
    1b10:	f001 fa3a 	bl	2f88 <xTaskRemoveFromEventList>
    1b14:	4603      	mov	r3, r0
    1b16:	2b00      	cmp	r3, #0
    1b18:	d00d      	beq.n	1b36 <xQueueReceiveFromISR+0x76>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	f04f 0201 	mov.w	r2, #1
    1b20:	601a      	str	r2, [r3, #0]
    1b22:	e009      	b.n	1b38 <xQueueReceiveFromISR+0x78>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1b28:	f103 0201 	add.w	r2, r3, #1
    1b2c:	68fb      	ldr	r3, [r7, #12]
    1b2e:	645a      	str	r2, [r3, #68]	; 0x44
    1b30:	e002      	b.n	1b38 <xQueueReceiveFromISR+0x78>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1b32:	bf00      	nop
    1b34:	e000      	b.n	1b38 <xQueueReceiveFromISR+0x78>
    1b36:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    1b38:	f04f 0301 	mov.w	r3, #1
    1b3c:	613b      	str	r3, [r7, #16]
    1b3e:	e002      	b.n	1b46 <xQueueReceiveFromISR+0x86>
		}
		else
		{
			xReturn = pdFAIL;
    1b40:	f04f 0300 	mov.w	r3, #0
    1b44:	613b      	str	r3, [r7, #16]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1b46:	f04f 0000 	mov.w	r0, #0
    1b4a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    1b4e:	693b      	ldr	r3, [r7, #16]
}
    1b50:	4618      	mov	r0, r3
    1b52:	f107 0718 	add.w	r7, r7, #24
    1b56:	46bd      	mov	sp, r7
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	bf00      	nop

00001b5c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b084      	sub	sp, #16
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1b64:	f7ff fbaa 	bl	12bc <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b6c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    1b6e:	f7ff fbbb 	bl	12e8 <vPortExitCritical>

	return uxReturn;
    1b72:	68fb      	ldr	r3, [r7, #12]
}
    1b74:	4618      	mov	r0, r3
    1b76:	f107 0710 	add.w	r7, r7, #16
    1b7a:	46bd      	mov	sp, r7
    1b7c:	bd80      	pop	{r7, pc}
    1b7e:	bf00      	nop

00001b80 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1b80:	b480      	push	{r7}
    1b82:	b085      	sub	sp, #20
    1b84:	af00      	add	r7, sp, #0
    1b86:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b8c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    1b8e:	68fb      	ldr	r3, [r7, #12]
}
    1b90:	4618      	mov	r0, r3
    1b92:	f107 0714 	add.w	r7, r7, #20
    1b96:	46bd      	mov	sp, r7
    1b98:	bc80      	pop	{r7}
    1b9a:	4770      	bx	lr

00001b9c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
    1ba4:	6878      	ldr	r0, [r7, #4]
    1ba6:	f000 f99d 	bl	1ee4 <vQueueUnregisterQueue>
	vPortFree( pxQueue->pcHead );
    1baa:	687b      	ldr	r3, [r7, #4]
    1bac:	681b      	ldr	r3, [r3, #0]
    1bae:	4618      	mov	r0, r3
    1bb0:	f7ff faaa 	bl	1108 <vPortFree>
	vPortFree( pxQueue );
    1bb4:	6878      	ldr	r0, [r7, #4]
    1bb6:	f7ff faa7 	bl	1108 <vPortFree>
}
    1bba:	f107 0708 	add.w	r7, r7, #8
    1bbe:	46bd      	mov	sp, r7
    1bc0:	bd80      	pop	{r7, pc}
    1bc2:	bf00      	nop

00001bc4 <ucQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
    1bc4:	b480      	push	{r7}
    1bc6:	b083      	sub	sp, #12
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueNumber;
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    1bd2:	4618      	mov	r0, r3
    1bd4:	f107 070c 	add.w	r7, r7, #12
    1bd8:	46bd      	mov	sp, r7
    1bda:	bc80      	pop	{r7}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop

00001be0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
	{
    1be0:	b480      	push	{r7}
    1be2:	b083      	sub	sp, #12
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	460b      	mov	r3, r1
    1bea:	70fb      	strb	r3, [r7, #3]
		pxQueue->ucQueueNumber = ucQueueNumber;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	78fa      	ldrb	r2, [r7, #3]
    1bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
    1bf4:	f107 070c 	add.w	r7, r7, #12
    1bf8:	46bd      	mov	sp, r7
    1bfa:	bc80      	pop	{r7}
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop

00001c00 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
    1c00:	b480      	push	{r7}
    1c02:	b083      	sub	sp, #12
    1c04:	af00      	add	r7, sp, #0
    1c06:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueType;
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	}
    1c0e:	4618      	mov	r0, r3
    1c10:	f107 070c 	add.w	r7, r7, #12
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1c1c:	b580      	push	{r7, lr}
    1c1e:	b084      	sub	sp, #16
    1c20:	af00      	add	r7, sp, #0
    1c22:	60f8      	str	r0, [r7, #12]
    1c24:	60b9      	str	r1, [r7, #8]
    1c26:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d10d      	bne.n	1c4c <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c30:	68fb      	ldr	r3, [r7, #12]
    1c32:	681b      	ldr	r3, [r3, #0]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d149      	bne.n	1ccc <prvCopyDataToQueue+0xb0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1c38:	68fb      	ldr	r3, [r7, #12]
    1c3a:	685b      	ldr	r3, [r3, #4]
    1c3c:	4618      	mov	r0, r3
    1c3e:	f001 fdc1 	bl	37c4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    1c42:	68fb      	ldr	r3, [r7, #12]
    1c44:	f04f 0200 	mov.w	r2, #0
    1c48:	605a      	str	r2, [r3, #4]
    1c4a:	e042      	b.n	1cd2 <prvCopyDataToQueue+0xb6>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d11a      	bne.n	1c88 <prvCopyDataToQueue+0x6c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	689a      	ldr	r2, [r3, #8]
    1c56:	68fb      	ldr	r3, [r7, #12]
    1c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c5a:	4610      	mov	r0, r2
    1c5c:	68b9      	ldr	r1, [r7, #8]
    1c5e:	461a      	mov	r2, r3
    1c60:	f009 fadf 	bl	b222 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c64:	68fb      	ldr	r3, [r7, #12]
    1c66:	689a      	ldr	r2, [r3, #8]
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c6c:	441a      	add	r2, r3
    1c6e:	68fb      	ldr	r3, [r7, #12]
    1c70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1c72:	68fb      	ldr	r3, [r7, #12]
    1c74:	689a      	ldr	r2, [r3, #8]
    1c76:	68fb      	ldr	r3, [r7, #12]
    1c78:	685b      	ldr	r3, [r3, #4]
    1c7a:	429a      	cmp	r2, r3
    1c7c:	d328      	bcc.n	1cd0 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1c7e:	68fb      	ldr	r3, [r7, #12]
    1c80:	681a      	ldr	r2, [r3, #0]
    1c82:	68fb      	ldr	r3, [r7, #12]
    1c84:	609a      	str	r2, [r3, #8]
    1c86:	e024      	b.n	1cd2 <prvCopyDataToQueue+0xb6>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c88:	68fb      	ldr	r3, [r7, #12]
    1c8a:	68da      	ldr	r2, [r3, #12]
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c90:	4610      	mov	r0, r2
    1c92:	68b9      	ldr	r1, [r7, #8]
    1c94:	461a      	mov	r2, r3
    1c96:	f009 fac4 	bl	b222 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1c9a:	68fb      	ldr	r3, [r7, #12]
    1c9c:	68da      	ldr	r2, [r3, #12]
    1c9e:	68fb      	ldr	r3, [r7, #12]
    1ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ca2:	f1c3 0300 	rsb	r3, r3, #0
    1ca6:	441a      	add	r2, r3
    1ca8:	68fb      	ldr	r3, [r7, #12]
    1caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	68da      	ldr	r2, [r3, #12]
    1cb0:	68fb      	ldr	r3, [r7, #12]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d20c      	bcs.n	1cd2 <prvCopyDataToQueue+0xb6>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1cb8:	68fb      	ldr	r3, [r7, #12]
    1cba:	685a      	ldr	r2, [r3, #4]
    1cbc:	68fb      	ldr	r3, [r7, #12]
    1cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1cc0:	f1c3 0300 	rsb	r3, r3, #0
    1cc4:	441a      	add	r2, r3
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	60da      	str	r2, [r3, #12]
    1cca:	e002      	b.n	1cd2 <prvCopyDataToQueue+0xb6>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
    1ccc:	bf00      	nop
    1cce:	e000      	b.n	1cd2 <prvCopyDataToQueue+0xb6>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1cd0:	bf00      	nop
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1cd2:	68fb      	ldr	r3, [r7, #12]
    1cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1cd6:	f103 0201 	add.w	r2, r3, #1
    1cda:	68fb      	ldr	r3, [r7, #12]
    1cdc:	639a      	str	r2, [r3, #56]	; 0x38
}
    1cde:	f107 0710 	add.w	r7, r7, #16
    1ce2:	46bd      	mov	sp, r7
    1ce4:	bd80      	pop	{r7, pc}
    1ce6:	bf00      	nop

00001ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	b082      	sub	sp, #8
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
    1cf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d019      	beq.n	1d2e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	68da      	ldr	r2, [r3, #12]
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d02:	441a      	add	r2, r3
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	68da      	ldr	r2, [r3, #12]
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	685b      	ldr	r3, [r3, #4]
    1d10:	429a      	cmp	r2, r3
    1d12:	d303      	bcc.n	1d1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	681a      	ldr	r2, [r3, #0]
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	68da      	ldr	r2, [r3, #12]
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d24:	6838      	ldr	r0, [r7, #0]
    1d26:	4611      	mov	r1, r2
    1d28:	461a      	mov	r2, r3
    1d2a:	f009 fa7a 	bl	b222 <memcpy>
	}
}
    1d2e:	f107 0708 	add.w	r7, r7, #8
    1d32:	46bd      	mov	sp, r7
    1d34:	bd80      	pop	{r7, pc}
    1d36:	bf00      	nop

00001d38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1d38:	b580      	push	{r7, lr}
    1d3a:	b082      	sub	sp, #8
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1d40:	f7ff fabc 	bl	12bc <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1d44:	e014      	b.n	1d70 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d46:	687b      	ldr	r3, [r7, #4]
    1d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d015      	beq.n	1d7a <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	f103 0324 	add.w	r3, r3, #36	; 0x24
    1d54:	4618      	mov	r0, r3
    1d56:	f001 f917 	bl	2f88 <xTaskRemoveFromEventList>
    1d5a:	4603      	mov	r3, r0
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d001      	beq.n	1d64 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1d60:	f001 f9e0 	bl	3124 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1d68:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1d74:	2b00      	cmp	r3, #0
    1d76:	dce6      	bgt.n	1d46 <prvUnlockQueue+0xe>
    1d78:	e000      	b.n	1d7c <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    1d7a:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1d84:	f7ff fab0 	bl	12e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1d88:	f7ff fa98 	bl	12bc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1d8c:	e014      	b.n	1db8 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	691b      	ldr	r3, [r3, #16]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d015      	beq.n	1dc2 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d96:	687b      	ldr	r3, [r7, #4]
    1d98:	f103 0310 	add.w	r3, r3, #16
    1d9c:	4618      	mov	r0, r3
    1d9e:	f001 f8f3 	bl	2f88 <xTaskRemoveFromEventList>
    1da2:	4603      	mov	r3, r0
    1da4:	2b00      	cmp	r3, #0
    1da6:	d001      	beq.n	1dac <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    1da8:	f001 f9bc 	bl	3124 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1db0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	dce6      	bgt.n	1d8e <prvUnlockQueue+0x56>
    1dc0:	e000      	b.n	1dc4 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    1dc2:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1dca:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1dcc:	f7ff fa8c 	bl	12e8 <vPortExitCritical>
}
    1dd0:	f107 0708 	add.w	r7, r7, #8
    1dd4:	46bd      	mov	sp, r7
    1dd6:	bd80      	pop	{r7, pc}

00001dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1dd8:	b580      	push	{r7, lr}
    1dda:	b084      	sub	sp, #16
    1ddc:	af00      	add	r7, sp, #0
    1dde:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1de0:	f7ff fa6c 	bl	12bc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1de8:	2b00      	cmp	r3, #0
    1dea:	bf14      	ite	ne
    1dec:	2300      	movne	r3, #0
    1dee:	2301      	moveq	r3, #1
    1df0:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    1df2:	f7ff fa79 	bl	12e8 <vPortExitCritical>

	return xReturn;
    1df6:	68fb      	ldr	r3, [r7, #12]
}
    1df8:	4618      	mov	r0, r3
    1dfa:	f107 0710 	add.w	r7, r7, #16
    1dfe:	46bd      	mov	sp, r7
    1e00:	bd80      	pop	{r7, pc}
    1e02:	bf00      	nop

00001e04 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1e04:	b480      	push	{r7}
    1e06:	b085      	sub	sp, #20
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1e10:	2b00      	cmp	r3, #0
    1e12:	bf14      	ite	ne
    1e14:	2300      	movne	r3, #0
    1e16:	2301      	moveq	r3, #1
    1e18:	60fb      	str	r3, [r7, #12]

	return xReturn;
    1e1a:	68fb      	ldr	r3, [r7, #12]
}
    1e1c:	4618      	mov	r0, r3
    1e1e:	f107 0714 	add.w	r7, r7, #20
    1e22:	46bd      	mov	sp, r7
    1e24:	bc80      	pop	{r7}
    1e26:	4770      	bx	lr

00001e28 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	b084      	sub	sp, #16
    1e2c:	af00      	add	r7, sp, #0
    1e2e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1e30:	f7ff fa44 	bl	12bc <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e3c:	429a      	cmp	r2, r3
    1e3e:	bf14      	ite	ne
    1e40:	2300      	movne	r3, #0
    1e42:	2301      	moveq	r3, #1
    1e44:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    1e46:	f7ff fa4f 	bl	12e8 <vPortExitCritical>

	return xReturn;
    1e4a:	68fb      	ldr	r3, [r7, #12]
}
    1e4c:	4618      	mov	r0, r3
    1e4e:	f107 0710 	add.w	r7, r7, #16
    1e52:	46bd      	mov	sp, r7
    1e54:	bd80      	pop	{r7, pc}
    1e56:	bf00      	nop

00001e58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1e58:	b480      	push	{r7}
    1e5a:	b085      	sub	sp, #20
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1e60:	687b      	ldr	r3, [r7, #4]
    1e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e68:	429a      	cmp	r2, r3
    1e6a:	bf14      	ite	ne
    1e6c:	2300      	movne	r3, #0
    1e6e:	2301      	moveq	r3, #1
    1e70:	60fb      	str	r3, [r7, #12]

	return xReturn;
    1e72:	68fb      	ldr	r3, [r7, #12]
}
    1e74:	4618      	mov	r0, r3
    1e76:	f107 0714 	add.w	r7, r7, #20
    1e7a:	46bd      	mov	sp, r7
    1e7c:	bc80      	pop	{r7}
    1e7e:	4770      	bx	lr

00001e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
    1e80:	b480      	push	{r7}
    1e82:	b085      	sub	sp, #20
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1e8a:	f04f 0300 	mov.w	r3, #0
    1e8e:	60fb      	str	r3, [r7, #12]
    1e90:	e01f      	b.n	1ed2 <vQueueAddToRegistry+0x52>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    1e92:	68fa      	ldr	r2, [r7, #12]
    1e94:	f644 73fc 	movw	r3, #20476	; 0x4ffc
    1e98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1e9c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d112      	bne.n	1eca <vQueueAddToRegistry+0x4a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    1ea4:	68fa      	ldr	r2, [r7, #12]
    1ea6:	f644 73fc 	movw	r3, #20476	; 0x4ffc
    1eaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1eae:	6839      	ldr	r1, [r7, #0]
    1eb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    1eb4:	68fb      	ldr	r3, [r7, #12]
    1eb6:	f644 72fc 	movw	r2, #20476	; 0x4ffc
    1eba:	f2c1 0200 	movt	r2, #4096	; 0x1000
    1ebe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1ec2:	4413      	add	r3, r2
    1ec4:	687a      	ldr	r2, [r7, #4]
    1ec6:	605a      	str	r2, [r3, #4]
				break;
    1ec8:	e006      	b.n	1ed8 <vQueueAddToRegistry+0x58>
	{
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	f103 0301 	add.w	r3, r3, #1
    1ed0:	60fb      	str	r3, [r7, #12]
    1ed2:	68fb      	ldr	r3, [r7, #12]
    1ed4:	2b09      	cmp	r3, #9
    1ed6:	d9dc      	bls.n	1e92 <vQueueAddToRegistry+0x12>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
				break;
			}
		}
	}
    1ed8:	f107 0714 	add.w	r7, r7, #20
    1edc:	46bd      	mov	sp, r7
    1ede:	bc80      	pop	{r7}
    1ee0:	4770      	bx	lr
    1ee2:	bf00      	nop

00001ee4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	static void vQueueUnregisterQueue( xQueueHandle xQueue )
	{
    1ee4:	b480      	push	{r7}
    1ee6:	b085      	sub	sp, #20
    1ee8:	af00      	add	r7, sp, #0
    1eea:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1eec:	f04f 0300 	mov.w	r3, #0
    1ef0:	60fb      	str	r3, [r7, #12]
    1ef2:	e019      	b.n	1f28 <vQueueUnregisterQueue+0x44>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    1ef4:	68fb      	ldr	r3, [r7, #12]
    1ef6:	f644 72fc 	movw	r2, #20476	; 0x4ffc
    1efa:	f2c1 0200 	movt	r2, #4096	; 0x1000
    1efe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1f02:	4413      	add	r3, r2
    1f04:	685a      	ldr	r2, [r3, #4]
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	429a      	cmp	r2, r3
    1f0a:	d109      	bne.n	1f20 <vQueueUnregisterQueue+0x3c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    1f0c:	68fa      	ldr	r2, [r7, #12]
    1f0e:	f644 73fc 	movw	r3, #20476	; 0x4ffc
    1f12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1f16:	f04f 0100 	mov.w	r1, #0
    1f1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				break;
    1f1e:	e006      	b.n	1f2e <vQueueUnregisterQueue+0x4a>
	{
	unsigned portBASE_TYPE ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
    1f20:	68fb      	ldr	r3, [r7, #12]
    1f22:	f103 0301 	add.w	r3, r3, #1
    1f26:	60fb      	str	r3, [r7, #12]
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	2b09      	cmp	r3, #9
    1f2c:	d9e2      	bls.n	1ef4 <vQueueUnregisterQueue+0x10>
				xQueueRegistry[ ux ].pcQueueName = NULL;
				break;
			}
		}

	}
    1f2e:	f107 0714 	add.w	r7, r7, #20
    1f32:	46bd      	mov	sp, r7
    1f34:	bc80      	pop	{r7}
    1f36:	4770      	bx	lr

00001f38 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b08a      	sub	sp, #40	; 0x28
    1f3c:	af02      	add	r7, sp, #8
    1f3e:	60f8      	str	r0, [r7, #12]
    1f40:	60b9      	str	r1, [r7, #8]
    1f42:	603b      	str	r3, [r7, #0]
    1f44:	4613      	mov	r3, r2
    1f46:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1f48:	88fb      	ldrh	r3, [r7, #6]
    1f4a:	4618      	mov	r0, r3
    1f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    1f4e:	f001 fa4d 	bl	33ec <prvAllocateTCBAndStack>
    1f52:	4603      	mov	r3, r0
    1f54:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
    1f56:	69bb      	ldr	r3, [r7, #24]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	f000 80af 	beq.w	20bc <xTaskGenericCreate+0x184>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1f5e:	69bb      	ldr	r3, [r7, #24]
    1f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1f62:	88fb      	ldrh	r3, [r7, #6]
    1f64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1f68:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1f6c:	4413      	add	r3, r2
    1f6e:	61fb      	str	r3, [r7, #28]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    1f70:	69fb      	ldr	r3, [r7, #28]
    1f72:	f023 0307 	bic.w	r3, r3, #7
    1f76:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1f78:	88fb      	ldrh	r3, [r7, #6]
    1f7a:	9300      	str	r3, [sp, #0]
    1f7c:	69b8      	ldr	r0, [r7, #24]
    1f7e:	68b9      	ldr	r1, [r7, #8]
    1f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f84:	f001 f90c 	bl	31a0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f88:	69f8      	ldr	r0, [r7, #28]
    1f8a:	68f9      	ldr	r1, [r7, #12]
    1f8c:	683a      	ldr	r2, [r7, #0]
    1f8e:	f7ff f911 	bl	11b4 <pxPortInitialiseStack>
    1f92:	4603      	mov	r3, r0
    1f94:	461a      	mov	r2, r3
    1f96:	69bb      	ldr	r3, [r7, #24]
    1f98:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d002      	beq.n	1fa6 <xTaskGenericCreate+0x6e>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1fa2:	69ba      	ldr	r2, [r7, #24]
    1fa4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1fa6:	f7ff f989 	bl	12bc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    1faa:	f644 5308 	movw	r3, #19720	; 0x4d08
    1fae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	f103 0201 	add.w	r2, r3, #1
    1fb8:	f644 5308 	movw	r3, #19720	; 0x4d08
    1fbc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1fc0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    1fc2:	f644 4330 	movw	r3, #19504	; 0x4c30
    1fc6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d10f      	bne.n	1ff0 <xTaskGenericCreate+0xb8>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1fd0:	f644 4330 	movw	r3, #19504	; 0x4c30
    1fd4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1fd8:	69ba      	ldr	r2, [r7, #24]
    1fda:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1fdc:	f644 5308 	movw	r3, #19720	; 0x4d08
    1fe0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	2b01      	cmp	r3, #1
    1fe8:	d119      	bne.n	201e <xTaskGenericCreate+0xe6>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1fea:	f001 f91b 	bl	3224 <prvInitialiseTaskLists>
    1fee:	e017      	b.n	2020 <xTaskGenericCreate+0xe8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1ff0:	f644 5318 	movw	r3, #19736	; 0x4d18
    1ff4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d110      	bne.n	2020 <xTaskGenericCreate+0xe8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1ffe:	f644 4330 	movw	r3, #19504	; 0x4c30
    2002:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    200c:	429a      	cmp	r2, r3
    200e:	d807      	bhi.n	2020 <xTaskGenericCreate+0xe8>
					{
						pxCurrentTCB = pxNewTCB;
    2010:	f644 4330 	movw	r3, #19504	; 0x4c30
    2014:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2018:	69ba      	ldr	r2, [r7, #24]
    201a:	601a      	str	r2, [r3, #0]
    201c:	e000      	b.n	2020 <xTaskGenericCreate+0xe8>
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    201e:	bf00      	nop
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2020:	69bb      	ldr	r3, [r7, #24]
    2022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2024:	f644 5310 	movw	r3, #19728	; 0x4d10
    2028:	f2c1 0300 	movt	r3, #4096	; 0x1000
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	429a      	cmp	r2, r3
    2030:	d906      	bls.n	2040 <xTaskGenericCreate+0x108>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2032:	69bb      	ldr	r3, [r7, #24]
    2034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2036:	f644 5310 	movw	r3, #19728	; 0x4d10
    203a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    203e:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
    2040:	f644 532c 	movw	r3, #19756	; 0x4d2c
    2044:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2048:	681a      	ldr	r2, [r3, #0]
    204a:	69bb      	ldr	r3, [r7, #24]
    204c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
    204e:	f644 532c 	movw	r3, #19756	; 0x4d2c
    2052:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	f103 0201 	add.w	r2, r3, #1
    205c:	f644 532c 	movw	r3, #19756	; 0x4d2c
    2060:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2064:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    2066:	69bb      	ldr	r3, [r7, #24]
    2068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    206a:	f644 5314 	movw	r3, #19732	; 0x4d14
    206e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	429a      	cmp	r2, r3
    2076:	d906      	bls.n	2086 <xTaskGenericCreate+0x14e>
    2078:	69bb      	ldr	r3, [r7, #24]
    207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    207c:	f644 5314 	movw	r3, #19732	; 0x4d14
    2080:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2084:	601a      	str	r2, [r3, #0]
    2086:	69bb      	ldr	r3, [r7, #24]
    2088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    208a:	4613      	mov	r3, r2
    208c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2090:	4413      	add	r3, r2
    2092:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2096:	461a      	mov	r2, r3
    2098:	f644 4334 	movw	r3, #19508	; 0x4c34
    209c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    20a0:	441a      	add	r2, r3
    20a2:	69bb      	ldr	r3, [r7, #24]
    20a4:	f103 0304 	add.w	r3, r3, #4
    20a8:	4610      	mov	r0, r2
    20aa:	4619      	mov	r1, r3
    20ac:	f7ff f9bc 	bl	1428 <vListInsertEnd>

			xReturn = pdPASS;
    20b0:	f04f 0301 	mov.w	r3, #1
    20b4:	617b      	str	r3, [r7, #20]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    20b6:	f7ff f917 	bl	12e8 <vPortExitCritical>
    20ba:	e002      	b.n	20c2 <xTaskGenericCreate+0x18a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    20bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    20c0:	617b      	str	r3, [r7, #20]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    20c2:	697b      	ldr	r3, [r7, #20]
    20c4:	2b01      	cmp	r3, #1
    20c6:	d111      	bne.n	20ec <xTaskGenericCreate+0x1b4>
	{
		if( xSchedulerRunning != pdFALSE )
    20c8:	f644 5318 	movw	r3, #19736	; 0x4d18
    20cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d00a      	beq.n	20ec <xTaskGenericCreate+0x1b4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    20d6:	f644 4330 	movw	r3, #19504	; 0x4c30
    20da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    20e4:	429a      	cmp	r2, r3
    20e6:	d201      	bcs.n	20ec <xTaskGenericCreate+0x1b4>
			{
				portYIELD_WITHIN_API();
    20e8:	f7ff f8dc 	bl	12a4 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    20ec:	697b      	ldr	r3, [r7, #20]
}
    20ee:	4618      	mov	r0, r3
    20f0:	f107 0720 	add.w	r7, r7, #32
    20f4:	46bd      	mov	sp, r7
    20f6:	bd80      	pop	{r7, pc}

000020f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    20f8:	b580      	push	{r7, lr}
    20fa:	b084      	sub	sp, #16
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2100:	f7ff f8dc 	bl	12bc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2104:	f644 4330 	movw	r3, #19504	; 0x4c30
    2108:	f2c1 0300 	movt	r3, #4096	; 0x1000
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	687a      	ldr	r2, [r7, #4]
    2110:	429a      	cmp	r2, r3
    2112:	d102      	bne.n	211a <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    2114:	f04f 0300 	mov.w	r3, #0
    2118:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    211a:	687b      	ldr	r3, [r7, #4]
    211c:	2b00      	cmp	r3, #0
    211e:	d105      	bne.n	212c <vTaskDelete+0x34>
    2120:	f644 4330 	movw	r3, #19504	; 0x4c30
    2124:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	e000      	b.n	212e <vTaskDelete+0x36>
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	f103 0304 	add.w	r3, r3, #4
    2136:	4618      	mov	r0, r3
    2138:	f7ff f9d8 	bl	14ec <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2140:	2b00      	cmp	r3, #0
    2142:	d005      	beq.n	2150 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2144:	68fb      	ldr	r3, [r7, #12]
    2146:	f103 0318 	add.w	r3, r3, #24
    214a:	4618      	mov	r0, r3
    214c:	f7ff f9ce 	bl	14ec <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	f103 0304 	add.w	r3, r3, #4
    2156:	f644 40dc 	movw	r0, #19676	; 0x4cdc
    215a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    215e:	4619      	mov	r1, r3
    2160:	f7ff f962 	bl	1428 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2164:	f644 43f0 	movw	r3, #19696	; 0x4cf0
    2168:	f2c1 0300 	movt	r3, #4096	; 0x1000
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	f103 0201 	add.w	r2, r3, #1
    2172:	f644 43f0 	movw	r3, #19696	; 0x4cf0
    2176:	f2c1 0300 	movt	r3, #4096	; 0x1000
    217a:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTCBNumber++;
    217c:	f644 532c 	movw	r3, #19756	; 0x4d2c
    2180:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	f103 0201 	add.w	r2, r3, #1
    218a:	f644 532c 	movw	r3, #19756	; 0x4d2c
    218e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2192:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2194:	f7ff f8a8 	bl	12e8 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2198:	f644 5318 	movw	r3, #19736	; 0x4d18
    219c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	2b00      	cmp	r3, #0
    21a4:	d004      	beq.n	21b0 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d101      	bne.n	21b0 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    21ac:	f7ff f87a 	bl	12a4 <vPortYieldFromISR>
			}
		}
	}
    21b0:	f107 0710 	add.w	r7, r7, #16
    21b4:	46bd      	mov	sp, r7
    21b6:	bd80      	pop	{r7, pc}

000021b8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    21b8:	b580      	push	{r7, lr}
    21ba:	b086      	sub	sp, #24
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
    21c0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    21c2:	f04f 0300 	mov.w	r3, #0
    21c6:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    21c8:	f000 facc 	bl	2764 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	681a      	ldr	r2, [r3, #0]
    21d0:	683b      	ldr	r3, [r7, #0]
    21d2:	4413      	add	r3, r2
    21d4:	60fb      	str	r3, [r7, #12]

			if( xTickCount < *pxPreviousWakeTime )
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	681a      	ldr	r2, [r3, #0]
    21da:	f644 530c 	movw	r3, #19724	; 0x4d0c
    21de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	429a      	cmp	r2, r3
    21e6:	d910      	bls.n	220a <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	681a      	ldr	r2, [r3, #0]
    21ec:	68fb      	ldr	r3, [r7, #12]
    21ee:	429a      	cmp	r2, r3
    21f0:	d91c      	bls.n	222c <vTaskDelayUntil+0x74>
    21f2:	f644 530c 	movw	r3, #19724	; 0x4d0c
    21f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    21fa:	681b      	ldr	r3, [r3, #0]
    21fc:	68fa      	ldr	r2, [r7, #12]
    21fe:	429a      	cmp	r2, r3
    2200:	d916      	bls.n	2230 <vTaskDelayUntil+0x78>
				{
					xShouldDelay = pdTRUE;
    2202:	f04f 0301 	mov.w	r3, #1
    2206:	617b      	str	r3, [r7, #20]
    2208:	e013      	b.n	2232 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    220a:	687b      	ldr	r3, [r7, #4]
    220c:	681a      	ldr	r2, [r3, #0]
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	429a      	cmp	r2, r3
    2212:	d807      	bhi.n	2224 <vTaskDelayUntil+0x6c>
    2214:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2218:	f2c1 0300 	movt	r3, #4096	; 0x1000
    221c:	681b      	ldr	r3, [r3, #0]
    221e:	68fa      	ldr	r2, [r7, #12]
    2220:	429a      	cmp	r2, r3
    2222:	d906      	bls.n	2232 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    2224:	f04f 0301 	mov.w	r3, #1
    2228:	617b      	str	r3, [r7, #20]
    222a:	e002      	b.n	2232 <vTaskDelayUntil+0x7a>
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
				{
					xShouldDelay = pdTRUE;
    222c:	bf00      	nop
    222e:	e000      	b.n	2232 <vTaskDelayUntil+0x7a>
    2230:	bf00      	nop
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	68fa      	ldr	r2, [r7, #12]
    2236:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    2238:	697b      	ldr	r3, [r7, #20]
    223a:	2b00      	cmp	r3, #0
    223c:	d00c      	beq.n	2258 <vTaskDelayUntil+0xa0>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    223e:	f644 4330 	movw	r3, #19504	; 0x4c30
    2242:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2246:	681b      	ldr	r3, [r3, #0]
    2248:	f103 0304 	add.w	r3, r3, #4
    224c:	4618      	mov	r0, r3
    224e:	f7ff f94d 	bl	14ec <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2252:	68f8      	ldr	r0, [r7, #12]
    2254:	f001 f884 	bl	3360 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2258:	f000 fa96 	bl	2788 <xTaskResumeAll>
    225c:	4603      	mov	r3, r0
    225e:	613b      	str	r3, [r7, #16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2260:	693b      	ldr	r3, [r7, #16]
    2262:	2b00      	cmp	r3, #0
    2264:	d101      	bne.n	226a <vTaskDelayUntil+0xb2>
		{
			portYIELD_WITHIN_API();
    2266:	f7ff f81d 	bl	12a4 <vPortYieldFromISR>
		}
	}
    226a:	f107 0718 	add.w	r7, r7, #24
    226e:	46bd      	mov	sp, r7
    2270:	bd80      	pop	{r7, pc}
    2272:	bf00      	nop

00002274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2274:	b580      	push	{r7, lr}
    2276:	b084      	sub	sp, #16
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    227c:	f04f 0300 	mov.w	r3, #0
    2280:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	2b00      	cmp	r3, #0
    2286:	d01a      	beq.n	22be <vTaskDelay+0x4a>
		{
			vTaskSuspendAll();
    2288:	f000 fa6c 	bl	2764 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    228c:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2290:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2294:	681a      	ldr	r2, [r3, #0]
    2296:	687b      	ldr	r3, [r7, #4]
    2298:	4413      	add	r3, r2
    229a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    229c:	f644 4330 	movw	r3, #19504	; 0x4c30
    22a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	f103 0304 	add.w	r3, r3, #4
    22aa:	4618      	mov	r0, r3
    22ac:	f7ff f91e 	bl	14ec <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    22b0:	68b8      	ldr	r0, [r7, #8]
    22b2:	f001 f855 	bl	3360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    22b6:	f000 fa67 	bl	2788 <xTaskResumeAll>
    22ba:	4603      	mov	r3, r0
    22bc:	60fb      	str	r3, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    22be:	68fb      	ldr	r3, [r7, #12]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d101      	bne.n	22c8 <vTaskDelay+0x54>
		{
			portYIELD_WITHIN_API();
    22c4:	f7fe ffee 	bl	12a4 <vPortYieldFromISR>
		}
	}
    22c8:	f107 0710 	add.w	r7, r7, #16
    22cc:	46bd      	mov	sp, r7
    22ce:	bd80      	pop	{r7, pc}

000022d0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    22d0:	b580      	push	{r7, lr}
    22d2:	b084      	sub	sp, #16
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    22d8:	f7fe fff0 	bl	12bc <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	2b00      	cmp	r3, #0
    22e0:	d105      	bne.n	22ee <uxTaskPriorityGet+0x1e>
    22e2:	f644 4330 	movw	r3, #19504	; 0x4c30
    22e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    22ea:	681b      	ldr	r3, [r3, #0]
    22ec:	e000      	b.n	22f0 <uxTaskPriorityGet+0x20>
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
    22f2:	68bb      	ldr	r3, [r7, #8]
    22f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22f6:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
    22f8:	f7fe fff6 	bl	12e8 <vPortExitCritical>

		return uxReturn;
    22fc:	68fb      	ldr	r3, [r7, #12]
	}
    22fe:	4618      	mov	r0, r3
    2300:	f107 0710 	add.w	r7, r7, #16
    2304:	46bd      	mov	sp, r7
    2306:	bd80      	pop	{r7, pc}

00002308 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    2308:	b580      	push	{r7, lr}
    230a:	b086      	sub	sp, #24
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
    2310:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    2312:	f04f 0300 	mov.w	r3, #0
    2316:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    2318:	683b      	ldr	r3, [r7, #0]
    231a:	2b04      	cmp	r3, #4
    231c:	d902      	bls.n	2324 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    231e:	f04f 0304 	mov.w	r3, #4
    2322:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    2324:	f7fe ffca 	bl	12bc <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    2328:	f644 4330 	movw	r3, #19504	; 0x4c30
    232c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2330:	681b      	ldr	r3, [r3, #0]
    2332:	687a      	ldr	r2, [r7, #4]
    2334:	429a      	cmp	r2, r3
    2336:	d102      	bne.n	233e <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    2338:	f04f 0300 	mov.w	r3, #0
    233c:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	2b00      	cmp	r3, #0
    2342:	d105      	bne.n	2350 <vTaskPrioritySet+0x48>
    2344:	f644 4330 	movw	r3, #19504	; 0x4c30
    2348:	f2c1 0300 	movt	r3, #4096	; 0x1000
    234c:	681b      	ldr	r3, [r3, #0]
    234e:	e000      	b.n	2352 <vTaskPrioritySet+0x4a>
    2350:	687b      	ldr	r3, [r7, #4]
    2352:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2358:	613b      	str	r3, [r7, #16]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    235a:	693a      	ldr	r2, [r7, #16]
    235c:	683b      	ldr	r3, [r7, #0]
    235e:	429a      	cmp	r2, r3
    2360:	d064      	beq.n	242c <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    2362:	683a      	ldr	r2, [r7, #0]
    2364:	693b      	ldr	r3, [r7, #16]
    2366:	429a      	cmp	r2, r3
    2368:	d906      	bls.n	2378 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	2b00      	cmp	r3, #0
    236e:	d00a      	beq.n	2386 <vTaskPrioritySet+0x7e>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    2370:	f04f 0301 	mov.w	r3, #1
    2374:	617b      	str	r3, [r7, #20]
    2376:	e007      	b.n	2388 <vTaskPrioritySet+0x80>
					}
				}
				else if( pxTask == NULL )
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	2b00      	cmp	r3, #0
    237c:	d104      	bne.n	2388 <vTaskPrioritySet+0x80>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    237e:	f04f 0301 	mov.w	r3, #1
    2382:	617b      	str	r3, [r7, #20]
    2384:	e000      	b.n	2388 <vTaskPrioritySet+0x80>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    2386:	bf00      	nop

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    2388:	68fb      	ldr	r3, [r7, #12]
    238a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    238c:	68fb      	ldr	r3, [r7, #12]
    238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2390:	429a      	cmp	r2, r3
    2392:	d102      	bne.n	239a <vTaskPrioritySet+0x92>
					{
						pxTCB->uxPriority = uxNewPriority;
    2394:	68fb      	ldr	r3, [r7, #12]
    2396:	683a      	ldr	r2, [r7, #0]
    2398:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    239a:	68fb      	ldr	r3, [r7, #12]
    239c:	683a      	ldr	r2, [r7, #0]
    239e:	649a      	str	r2, [r3, #72]	; 0x48
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    23a0:	683b      	ldr	r3, [r7, #0]
    23a2:	f1c3 0205 	rsb	r2, r3, #5
    23a6:	68fb      	ldr	r3, [r7, #12]
    23a8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    23aa:	68fb      	ldr	r3, [r7, #12]
    23ac:	6959      	ldr	r1, [r3, #20]
    23ae:	693a      	ldr	r2, [r7, #16]
    23b0:	4613      	mov	r3, r2
    23b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    23b6:	4413      	add	r3, r2
    23b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    23bc:	461a      	mov	r2, r3
    23be:	f644 4334 	movw	r3, #19508	; 0x4c34
    23c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    23c6:	4413      	add	r3, r2
    23c8:	4299      	cmp	r1, r3
    23ca:	d12a      	bne.n	2422 <vTaskPrioritySet+0x11a>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	f103 0304 	add.w	r3, r3, #4
    23d2:	4618      	mov	r0, r3
    23d4:	f7ff f88a 	bl	14ec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23dc:	f644 5314 	movw	r3, #19732	; 0x4d14
    23e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    23e4:	681b      	ldr	r3, [r3, #0]
    23e6:	429a      	cmp	r2, r3
    23e8:	d906      	bls.n	23f8 <vTaskPrioritySet+0xf0>
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23ee:	f644 5314 	movw	r3, #19732	; 0x4d14
    23f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    23f6:	601a      	str	r2, [r3, #0]
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    23fc:	4613      	mov	r3, r2
    23fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2402:	4413      	add	r3, r2
    2404:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2408:	461a      	mov	r2, r3
    240a:	f644 4334 	movw	r3, #19508	; 0x4c34
    240e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2412:	441a      	add	r2, r3
    2414:	68fb      	ldr	r3, [r7, #12]
    2416:	f103 0304 	add.w	r3, r3, #4
    241a:	4610      	mov	r0, r2
    241c:	4619      	mov	r1, r3
    241e:	f7ff f803 	bl	1428 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    2422:	697b      	ldr	r3, [r7, #20]
    2424:	2b01      	cmp	r3, #1
    2426:	d101      	bne.n	242c <vTaskPrioritySet+0x124>
				{
					portYIELD_WITHIN_API();
    2428:	f7fe ff3c 	bl	12a4 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    242c:	f7fe ff5c 	bl	12e8 <vPortExitCritical>
	}
    2430:	f107 0718 	add.w	r7, r7, #24
    2434:	46bd      	mov	sp, r7
    2436:	bd80      	pop	{r7, pc}

00002438 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    2438:	b580      	push	{r7, lr}
    243a:	b084      	sub	sp, #16
    243c:	af00      	add	r7, sp, #0
    243e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2440:	f7fe ff3c 	bl	12bc <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    2444:	f644 4330 	movw	r3, #19504	; 0x4c30
    2448:	f2c1 0300 	movt	r3, #4096	; 0x1000
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	687a      	ldr	r2, [r7, #4]
    2450:	429a      	cmp	r2, r3
    2452:	d102      	bne.n	245a <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    2454:	f04f 0300 	mov.w	r3, #0
    2458:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    245a:	687b      	ldr	r3, [r7, #4]
    245c:	2b00      	cmp	r3, #0
    245e:	d105      	bne.n	246c <vTaskSuspend+0x34>
    2460:	f644 4330 	movw	r3, #19504	; 0x4c30
    2464:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2468:	681b      	ldr	r3, [r3, #0]
    246a:	e000      	b.n	246e <vTaskSuspend+0x36>
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2470:	68fb      	ldr	r3, [r7, #12]
    2472:	f103 0304 	add.w	r3, r3, #4
    2476:	4618      	mov	r0, r3
    2478:	f7ff f838 	bl	14ec <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    247c:	68fb      	ldr	r3, [r7, #12]
    247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2480:	2b00      	cmp	r3, #0
    2482:	d005      	beq.n	2490 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2484:	68fb      	ldr	r3, [r7, #12]
    2486:	f103 0318 	add.w	r3, r3, #24
    248a:	4618      	mov	r0, r3
    248c:	f7ff f82e 	bl	14ec <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	f103 0304 	add.w	r3, r3, #4
    2496:	f644 40f4 	movw	r0, #19700	; 0x4cf4
    249a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    249e:	4619      	mov	r1, r3
    24a0:	f7fe ffc2 	bl	1428 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    24a4:	f7fe ff20 	bl	12e8 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d11f      	bne.n	24ee <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    24ae:	f644 5318 	movw	r3, #19736	; 0x4d18
    24b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d002      	beq.n	24c2 <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    24bc:	f7fe fef2 	bl	12a4 <vPortYieldFromISR>
    24c0:	e015      	b.n	24ee <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    24c2:	f644 43f4 	movw	r3, #19700	; 0x4cf4
    24c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    24ca:	681a      	ldr	r2, [r3, #0]
    24cc:	f644 5308 	movw	r3, #19720	; 0x4d08
    24d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    24d4:	681b      	ldr	r3, [r3, #0]
    24d6:	429a      	cmp	r2, r3
    24d8:	d107      	bne.n	24ea <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    24da:	f644 4330 	movw	r3, #19504	; 0x4c30
    24de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    24e2:	f04f 0200 	mov.w	r2, #0
    24e6:	601a      	str	r2, [r3, #0]
    24e8:	e001      	b.n	24ee <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    24ea:	f000 fc4d 	bl	2d88 <vTaskSwitchContext>
				}
			}
		}
	}
    24ee:	f107 0710 	add.w	r7, r7, #16
    24f2:	46bd      	mov	sp, r7
    24f4:	bd80      	pop	{r7, pc}
    24f6:	bf00      	nop

000024f8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    24f8:	b480      	push	{r7}
    24fa:	b085      	sub	sp, #20
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    2500:	f04f 0300 	mov.w	r3, #0
    2504:	60bb      	str	r3, [r7, #8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    2506:	687b      	ldr	r3, [r7, #4]
    2508:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    250a:	68fb      	ldr	r3, [r7, #12]
    250c:	695a      	ldr	r2, [r3, #20]
    250e:	f644 43f4 	movw	r3, #19700	; 0x4cf4
    2512:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2516:	429a      	cmp	r2, r3
    2518:	d10e      	bne.n	2538 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    251a:	68fb      	ldr	r3, [r7, #12]
    251c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    251e:	f644 43c8 	movw	r3, #19656	; 0x4cc8
    2522:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2526:	429a      	cmp	r2, r3
    2528:	d006      	beq.n	2538 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    252a:	68fb      	ldr	r3, [r7, #12]
    252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    252e:	2b00      	cmp	r3, #0
    2530:	d102      	bne.n	2538 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    2532:	f04f 0301 	mov.w	r3, #1
    2536:	60bb      	str	r3, [r7, #8]
				}
			}
		}

		return xReturn;
    2538:	68bb      	ldr	r3, [r7, #8]
	}
    253a:	4618      	mov	r0, r3
    253c:	f107 0714 	add.w	r7, r7, #20
    2540:	46bd      	mov	sp, r7
    2542:	bc80      	pop	{r7}
    2544:	4770      	bx	lr
    2546:	bf00      	nop

00002548 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    2548:	b580      	push	{r7, lr}
    254a:	b084      	sub	sp, #16
    254c:	af00      	add	r7, sp, #0
    254e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2554:	68fb      	ldr	r3, [r7, #12]
    2556:	2b00      	cmp	r3, #0
    2558:	d048      	beq.n	25ec <vTaskResume+0xa4>
    255a:	f644 4330 	movw	r3, #19504	; 0x4c30
    255e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2562:	681b      	ldr	r3, [r3, #0]
    2564:	68fa      	ldr	r2, [r7, #12]
    2566:	429a      	cmp	r2, r3
    2568:	d040      	beq.n	25ec <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    256a:	f7fe fea7 	bl	12bc <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    256e:	68f8      	ldr	r0, [r7, #12]
    2570:	f7ff ffc2 	bl	24f8 <xTaskIsTaskSuspended>
    2574:	4603      	mov	r3, r0
    2576:	2b01      	cmp	r3, #1
    2578:	d136      	bne.n	25e8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    257a:	68fb      	ldr	r3, [r7, #12]
    257c:	f103 0304 	add.w	r3, r3, #4
    2580:	4618      	mov	r0, r3
    2582:	f7fe ffb3 	bl	14ec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2586:	68fb      	ldr	r3, [r7, #12]
    2588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    258a:	f644 5314 	movw	r3, #19732	; 0x4d14
    258e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	429a      	cmp	r2, r3
    2596:	d906      	bls.n	25a6 <vTaskResume+0x5e>
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    259c:	f644 5314 	movw	r3, #19732	; 0x4d14
    25a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    25a4:	601a      	str	r2, [r3, #0]
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25aa:	4613      	mov	r3, r2
    25ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    25b0:	4413      	add	r3, r2
    25b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    25b6:	461a      	mov	r2, r3
    25b8:	f644 4334 	movw	r3, #19508	; 0x4c34
    25bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    25c0:	441a      	add	r2, r3
    25c2:	68fb      	ldr	r3, [r7, #12]
    25c4:	f103 0304 	add.w	r3, r3, #4
    25c8:	4610      	mov	r0, r2
    25ca:	4619      	mov	r1, r3
    25cc:	f7fe ff2c 	bl	1428 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    25d0:	68fb      	ldr	r3, [r7, #12]
    25d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25d4:	f644 4330 	movw	r3, #19504	; 0x4c30
    25d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    25dc:	681b      	ldr	r3, [r3, #0]
    25de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25e0:	429a      	cmp	r2, r3
    25e2:	d301      	bcc.n	25e8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    25e4:	f7fe fe5e 	bl	12a4 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    25e8:	f7fe fe7e 	bl	12e8 <vPortExitCritical>
		}
	}
    25ec:	f107 0710 	add.w	r7, r7, #16
    25f0:	46bd      	mov	sp, r7
    25f2:	bd80      	pop	{r7, pc}

000025f4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    25f4:	b580      	push	{r7, lr}
    25f6:	b086      	sub	sp, #24
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    25fc:	f04f 0300 	mov.w	r3, #0
    2600:	60fb      	str	r3, [r7, #12]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2606:	f04f 0300 	mov.w	r3, #0
    260a:	617b      	str	r3, [r7, #20]
    260c:	f04f 0028 	mov.w	r0, #40	; 0x28
    2610:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2614:	6938      	ldr	r0, [r7, #16]
    2616:	f7ff ff6f 	bl	24f8 <xTaskIsTaskSuspended>
    261a:	4603      	mov	r3, r0
    261c:	2b01      	cmp	r3, #1
    261e:	d149      	bne.n	26b4 <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2620:	f644 531c 	movw	r3, #19740	; 0x4d1c
    2624:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	2b00      	cmp	r3, #0
    262c:	d138      	bne.n	26a0 <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    262e:	693b      	ldr	r3, [r7, #16]
    2630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2632:	f644 4330 	movw	r3, #19504	; 0x4c30
    2636:	f2c1 0300 	movt	r3, #4096	; 0x1000
    263a:	681b      	ldr	r3, [r3, #0]
    263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    263e:	429a      	cmp	r2, r3
    2640:	bf34      	ite	cc
    2642:	2300      	movcc	r3, #0
    2644:	2301      	movcs	r3, #1
    2646:	60fb      	str	r3, [r7, #12]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    2648:	693b      	ldr	r3, [r7, #16]
    264a:	f103 0304 	add.w	r3, r3, #4
    264e:	4618      	mov	r0, r3
    2650:	f7fe ff4c 	bl	14ec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2654:	693b      	ldr	r3, [r7, #16]
    2656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2658:	f644 5314 	movw	r3, #19732	; 0x4d14
    265c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2660:	681b      	ldr	r3, [r3, #0]
    2662:	429a      	cmp	r2, r3
    2664:	d906      	bls.n	2674 <xTaskResumeFromISR+0x80>
    2666:	693b      	ldr	r3, [r7, #16]
    2668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    266a:	f644 5314 	movw	r3, #19732	; 0x4d14
    266e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2672:	601a      	str	r2, [r3, #0]
    2674:	693b      	ldr	r3, [r7, #16]
    2676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2678:	4613      	mov	r3, r2
    267a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    267e:	4413      	add	r3, r2
    2680:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2684:	461a      	mov	r2, r3
    2686:	f644 4334 	movw	r3, #19508	; 0x4c34
    268a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    268e:	441a      	add	r2, r3
    2690:	693b      	ldr	r3, [r7, #16]
    2692:	f103 0304 	add.w	r3, r3, #4
    2696:	4610      	mov	r0, r2
    2698:	4619      	mov	r1, r3
    269a:	f7fe fec5 	bl	1428 <vListInsertEnd>
    269e:	e009      	b.n	26b4 <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    26a0:	693b      	ldr	r3, [r7, #16]
    26a2:	f103 0318 	add.w	r3, r3, #24
    26a6:	f644 40c8 	movw	r0, #19656	; 0x4cc8
    26aa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    26ae:	4619      	mov	r1, r3
    26b0:	f7fe feba 	bl	1428 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    26b4:	f04f 0000 	mov.w	r0, #0
    26b8:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    26bc:	68fb      	ldr	r3, [r7, #12]
	}
    26be:	4618      	mov	r0, r3
    26c0:	f107 0718 	add.w	r7, r7, #24
    26c4:	46bd      	mov	sp, r7
    26c6:	bd80      	pop	{r7, pc}

000026c8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b086      	sub	sp, #24
    26cc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    26ce:	f24b 23bc 	movw	r3, #45756	; 0xb2bc
    26d2:	f2c0 0300 	movt	r3, #0
    26d6:	f04f 0200 	mov.w	r2, #0
    26da:	9200      	str	r2, [sp, #0]
    26dc:	f04f 0200 	mov.w	r2, #0
    26e0:	9201      	str	r2, [sp, #4]
    26e2:	f04f 0200 	mov.w	r2, #0
    26e6:	9202      	str	r2, [sp, #8]
    26e8:	f04f 0200 	mov.w	r2, #0
    26ec:	9203      	str	r2, [sp, #12]
    26ee:	f243 1091 	movw	r0, #12689	; 0x3191
    26f2:	f2c0 0000 	movt	r0, #0
    26f6:	4619      	mov	r1, r3
    26f8:	f04f 0250 	mov.w	r2, #80	; 0x50
    26fc:	f04f 0300 	mov.w	r3, #0
    2700:	f7ff fc1a 	bl	1f38 <xTaskGenericCreate>
    2704:	4603      	mov	r3, r0
    2706:	607b      	str	r3, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	2b01      	cmp	r3, #1
    270c:	d115      	bne.n	273a <vTaskStartScheduler+0x72>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    270e:	f04f 0028 	mov.w	r0, #40	; 0x28
    2712:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    2716:	f644 5318 	movw	r3, #19736	; 0x4d18
    271a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    271e:	f04f 0201 	mov.w	r2, #1
    2722:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    2724:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2728:	f2c1 0300 	movt	r3, #4096	; 0x1000
    272c:	f04f 0200 	mov.w	r2, #0
    2730:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    2732:	f7fe f851 	bl	7d8 <vConfigureTimerForRunTimeStats>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2736:	f7fe fd85 	bl	1244 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    273a:	f107 0708 	add.w	r7, r7, #8
    273e:	46bd      	mov	sp, r7
    2740:	bd80      	pop	{r7, pc}
    2742:	bf00      	nop

00002744 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2744:	b580      	push	{r7, lr}
    2746:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2748:	f04f 0028 	mov.w	r0, #40	; 0x28
    274c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    2750:	f644 5318 	movw	r3, #19736	; 0x4d18
    2754:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2758:	f04f 0200 	mov.w	r2, #0
    275c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    275e:	f7fe fd9b 	bl	1298 <vPortEndScheduler>
}
    2762:	bd80      	pop	{r7, pc}

00002764 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2764:	b480      	push	{r7}
    2766:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2768:	f644 531c 	movw	r3, #19740	; 0x4d1c
    276c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	f103 0201 	add.w	r2, r3, #1
    2776:	f644 531c 	movw	r3, #19740	; 0x4d1c
    277a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    277e:	601a      	str	r2, [r3, #0]
}
    2780:	46bd      	mov	sp, r7
    2782:	bc80      	pop	{r7}
    2784:	4770      	bx	lr
    2786:	bf00      	nop

00002788 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2788:	b590      	push	{r4, r7, lr}
    278a:	b083      	sub	sp, #12
    278c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    278e:	f04f 0300 	mov.w	r3, #0
    2792:	603b      	str	r3, [r7, #0]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2794:	f7fe fd92 	bl	12bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    2798:	f644 531c 	movw	r3, #19740	; 0x4d1c
    279c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    27a0:	681b      	ldr	r3, [r3, #0]
    27a2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    27a6:	f644 531c 	movw	r3, #19740	; 0x4d1c
    27aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    27ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    27b0:	f644 531c 	movw	r3, #19740	; 0x4d1c
    27b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    27b8:	681b      	ldr	r3, [r3, #0]
    27ba:	2b00      	cmp	r3, #0
    27bc:	f040 8086 	bne.w	28cc <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    27c0:	f644 5308 	movw	r3, #19720	; 0x4d08
    27c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    27c8:	681b      	ldr	r3, [r3, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d07e      	beq.n	28cc <xTaskResumeAll+0x144>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    27ce:	f04f 0300 	mov.w	r3, #0
    27d2:	607b      	str	r3, [r7, #4]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    27d4:	e03d      	b.n	2852 <xTaskResumeAll+0xca>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    27d6:	f644 43c8 	movw	r3, #19656	; 0x4cc8
    27da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    27de:	68db      	ldr	r3, [r3, #12]
    27e0:	68db      	ldr	r3, [r3, #12]
    27e2:	461c      	mov	r4, r3
					vListRemove( &( pxTCB->xEventListItem ) );
    27e4:	f104 0318 	add.w	r3, r4, #24
    27e8:	4618      	mov	r0, r3
    27ea:	f7fe fe7f 	bl	14ec <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    27ee:	f104 0304 	add.w	r3, r4, #4
    27f2:	4618      	mov	r0, r3
    27f4:	f7fe fe7a 	bl	14ec <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    27f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    27fa:	f644 5314 	movw	r3, #19732	; 0x4d14
    27fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	429a      	cmp	r2, r3
    2806:	d905      	bls.n	2814 <xTaskResumeAll+0x8c>
    2808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    280a:	f644 5314 	movw	r3, #19732	; 0x4d14
    280e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2812:	601a      	str	r2, [r3, #0]
    2814:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2816:	4613      	mov	r3, r2
    2818:	ea4f 0383 	mov.w	r3, r3, lsl #2
    281c:	4413      	add	r3, r2
    281e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2822:	461a      	mov	r2, r3
    2824:	f644 4334 	movw	r3, #19508	; 0x4c34
    2828:	f2c1 0300 	movt	r3, #4096	; 0x1000
    282c:	441a      	add	r2, r3
    282e:	f104 0304 	add.w	r3, r4, #4
    2832:	4610      	mov	r0, r2
    2834:	4619      	mov	r1, r3
    2836:	f7fe fdf7 	bl	1428 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    283a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    283c:	f644 4330 	movw	r3, #19504	; 0x4c30
    2840:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2844:	681b      	ldr	r3, [r3, #0]
    2846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2848:	429a      	cmp	r2, r3
    284a:	d302      	bcc.n	2852 <xTaskResumeAll+0xca>
					{
						xYieldRequired = pdTRUE;
    284c:	f04f 0301 	mov.w	r3, #1
    2850:	607b      	str	r3, [r7, #4]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2852:	f644 43c8 	movw	r3, #19656	; 0x4cc8
    2856:	f2c1 0300 	movt	r3, #4096	; 0x1000
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	2b00      	cmp	r3, #0
    285e:	d1ba      	bne.n	27d6 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2860:	f644 5320 	movw	r3, #19744	; 0x4d20
    2864:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2868:	681b      	ldr	r3, [r3, #0]
    286a:	2b00      	cmp	r3, #0
    286c:	d018      	beq.n	28a0 <xTaskResumeAll+0x118>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    286e:	e00d      	b.n	288c <xTaskResumeAll+0x104>
					{
						vTaskIncrementTick();
    2870:	f000 f9aa 	bl	2bc8 <vTaskIncrementTick>
						--uxMissedTicks;
    2874:	f644 5320 	movw	r3, #19744	; 0x4d20
    2878:	f2c1 0300 	movt	r3, #4096	; 0x1000
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2882:	f644 5320 	movw	r3, #19744	; 0x4d20
    2886:	f2c1 0300 	movt	r3, #4096	; 0x1000
    288a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    288c:	f644 5320 	movw	r3, #19744	; 0x4d20
    2890:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	2b00      	cmp	r3, #0
    2898:	d1ea      	bne.n	2870 <xTaskResumeAll+0xe8>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    289a:	f04f 0301 	mov.w	r3, #1
    289e:	607b      	str	r3, [r7, #4]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	2b01      	cmp	r3, #1
    28a4:	d006      	beq.n	28b4 <xTaskResumeAll+0x12c>
    28a6:	f644 5324 	movw	r3, #19748	; 0x4d24
    28aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    28ae:	681b      	ldr	r3, [r3, #0]
    28b0:	2b01      	cmp	r3, #1
    28b2:	d10b      	bne.n	28cc <xTaskResumeAll+0x144>
				{
					xAlreadyYielded = pdTRUE;
    28b4:	f04f 0301 	mov.w	r3, #1
    28b8:	603b      	str	r3, [r7, #0]
					xMissedYield = pdFALSE;
    28ba:	f644 5324 	movw	r3, #19748	; 0x4d24
    28be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    28c2:	f04f 0200 	mov.w	r2, #0
    28c6:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    28c8:	f7fe fcec 	bl	12a4 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    28cc:	f7fe fd0c 	bl	12e8 <vPortExitCritical>

	return xAlreadyYielded;
    28d0:	683b      	ldr	r3, [r7, #0]
}
    28d2:	4618      	mov	r0, r3
    28d4:	f107 070c 	add.w	r7, r7, #12
    28d8:	46bd      	mov	sp, r7
    28da:	bd90      	pop	{r4, r7, pc}

000028dc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    28dc:	b580      	push	{r7, lr}
    28de:	b082      	sub	sp, #8
    28e0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    28e2:	f7fe fceb 	bl	12bc <vPortEnterCritical>
	{
		xTicks = xTickCount;
    28e6:	f644 530c 	movw	r3, #19724	; 0x4d0c
    28ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    28ee:	681b      	ldr	r3, [r3, #0]
    28f0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    28f2:	f7fe fcf9 	bl	12e8 <vPortExitCritical>

	return xTicks;
    28f6:	687b      	ldr	r3, [r7, #4]
}
    28f8:	4618      	mov	r0, r3
    28fa:	f107 0708 	add.w	r7, r7, #8
    28fe:	46bd      	mov	sp, r7
    2900:	bd80      	pop	{r7, pc}
    2902:	bf00      	nop

00002904 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    2904:	b480      	push	{r7}
    2906:	b083      	sub	sp, #12
    2908:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    290a:	f04f 0300 	mov.w	r3, #0
    290e:	607b      	str	r3, [r7, #4]
    2910:	f04f 0028 	mov.w	r0, #40	; 0x28
    2914:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    2918:	f644 530c 	movw	r3, #19724	; 0x4d0c
    291c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2924:	f04f 0000 	mov.w	r0, #0
    2928:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    292c:	683b      	ldr	r3, [r7, #0]
}
    292e:	4618      	mov	r0, r3
    2930:	f107 070c 	add.w	r7, r7, #12
    2934:	46bd      	mov	sp, r7
    2936:	bc80      	pop	{r7}
    2938:	4770      	bx	lr
    293a:	bf00      	nop

0000293c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    293c:	b480      	push	{r7}
    293e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2940:	f644 5308 	movw	r3, #19720	; 0x4d08
    2944:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2948:	681b      	ldr	r3, [r3, #0]
}
    294a:	4618      	mov	r0, r3
    294c:	46bd      	mov	sp, r7
    294e:	bc80      	pop	{r7}
    2950:	4770      	bx	lr
    2952:	bf00      	nop

00002954 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    2954:	b590      	push	{r4, r7, lr}
    2956:	b085      	sub	sp, #20
    2958:	af00      	add	r7, sp, #0
    295a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    295c:	f7ff ff02 	bl	2764 <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	f04f 0200 	mov.w	r2, #0
    2966:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    2968:	687c      	ldr	r4, [r7, #4]
    296a:	4620      	mov	r0, r4
    296c:	f008 fc7c 	bl	b268 <strlen>
    2970:	4603      	mov	r3, r0
    2972:	4423      	add	r3, r4
    2974:	4618      	mov	r0, r3
    2976:	f24b 21c4 	movw	r1, #45764	; 0xb2c4
    297a:	f2c0 0100 	movt	r1, #0
    297e:	f04f 0203 	mov.w	r2, #3
    2982:	f008 fc4e 	bl	b222 <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    2986:	f644 5310 	movw	r3, #19728	; 0x4d10
    298a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	f103 0301 	add.w	r3, r3, #1
    2994:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    2996:	68fb      	ldr	r3, [r7, #12]
    2998:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    299c:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	4613      	mov	r3, r2
    29a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29a6:	4413      	add	r3, r2
    29a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29ac:	461a      	mov	r2, r3
    29ae:	f644 4334 	movw	r3, #19508	; 0x4c34
    29b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    29b6:	4413      	add	r3, r2
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	2b00      	cmp	r3, #0
    29bc:	d012      	beq.n	29e4 <vTaskList+0x90>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    29be:	68fa      	ldr	r2, [r7, #12]
    29c0:	4613      	mov	r3, r2
    29c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29c6:	4413      	add	r3, r2
    29c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29cc:	461a      	mov	r2, r3
    29ce:	f644 4334 	movw	r3, #19508	; 0x4c34
    29d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    29d6:	4413      	add	r3, r2
    29d8:	6878      	ldr	r0, [r7, #4]
    29da:	4619      	mov	r1, r3
    29dc:	f04f 0252 	mov.w	r2, #82	; 0x52
    29e0:	f000 fd3e 	bl	3460 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    29e4:	68fb      	ldr	r3, [r7, #12]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d1d5      	bne.n	2996 <vTaskList+0x42>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    29ea:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    29ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	2b00      	cmp	r3, #0
    29f8:	d00a      	beq.n	2a10 <vTaskList+0xbc>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    29fa:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    29fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	4619      	mov	r1, r3
    2a08:	f04f 0242 	mov.w	r2, #66	; 0x42
    2a0c:	f000 fd28 	bl	3460 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    2a10:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2a14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2a18:	681b      	ldr	r3, [r3, #0]
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d00a      	beq.n	2a36 <vTaskList+0xe2>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    2a20:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2a24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	6878      	ldr	r0, [r7, #4]
    2a2c:	4619      	mov	r1, r3
    2a2e:	f04f 0242 	mov.w	r2, #66	; 0x42
    2a32:	f000 fd15 	bl	3460 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    2a36:	f644 43dc 	movw	r3, #19676	; 0x4cdc
    2a3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d008      	beq.n	2a56 <vTaskList+0x102>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
    2a44:	6878      	ldr	r0, [r7, #4]
    2a46:	f644 41dc 	movw	r1, #19676	; 0x4cdc
    2a4a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    2a4e:	f04f 0244 	mov.w	r2, #68	; 0x44
    2a52:	f000 fd05 	bl	3460 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    2a56:	f644 43f4 	movw	r3, #19700	; 0x4cf4
    2a5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d008      	beq.n	2a76 <vTaskList+0x122>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
    2a64:	6878      	ldr	r0, [r7, #4]
    2a66:	f644 41f4 	movw	r1, #19700	; 0x4cf4
    2a6a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    2a6e:	f04f 0253 	mov.w	r2, #83	; 0x53
    2a72:	f000 fcf5 	bl	3460 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    2a76:	f7ff fe87 	bl	2788 <xTaskResumeAll>
	}
    2a7a:	f107 0714 	add.w	r7, r7, #20
    2a7e:	46bd      	mov	sp, r7
    2a80:	bd90      	pop	{r4, r7, pc}
    2a82:	bf00      	nop

00002a84 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
	{
    2a84:	b590      	push	{r4, r7, lr}
    2a86:	b085      	sub	sp, #20
    2a88:	af00      	add	r7, sp, #0
    2a8a:	6078      	str	r0, [r7, #4]
	unsigned long ulTotalRunTime;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    2a8c:	f7ff fe6a 	bl	2764 <vTaskSuspendAll>
		{
			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
			#else
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    2a90:	f244 0300 	movw	r3, #16384	; 0x4000
    2a94:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2a98:	689b      	ldr	r3, [r3, #8]
    2a9a:	60fb      	str	r3, [r7, #12]
			#endif

			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
			ulTotalRunTime /= 100UL;
    2a9c:	68fa      	ldr	r2, [r7, #12]
    2a9e:	f248 531f 	movw	r3, #34079	; 0x851f
    2aa2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    2aa6:	fba3 1302 	umull	r1, r3, r3, r2
    2aaa:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2aae:	60fb      	str	r3, [r7, #12]
			
			/* Run through all the lists that could potentially contain a TCB,
			generating a table of run timer percentages in the provided
			buffer. */

			*pcWriteBuffer = ( signed char ) 0x00;
    2ab0:	687b      	ldr	r3, [r7, #4]
    2ab2:	f04f 0200 	mov.w	r2, #0
    2ab6:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    2ab8:	687c      	ldr	r4, [r7, #4]
    2aba:	4620      	mov	r0, r4
    2abc:	f008 fbd4 	bl	b268 <strlen>
    2ac0:	4603      	mov	r3, r0
    2ac2:	4423      	add	r3, r4
    2ac4:	4618      	mov	r0, r3
    2ac6:	f24b 21c4 	movw	r1, #45764	; 0xb2c4
    2aca:	f2c0 0100 	movt	r1, #0
    2ace:	f04f 0203 	mov.w	r2, #3
    2ad2:	f008 fba6 	bl	b222 <memcpy>

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    2ad6:	f644 5310 	movw	r3, #19728	; 0x4d10
    2ada:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	f103 0301 	add.w	r3, r3, #1
    2ae4:	60bb      	str	r3, [r7, #8]

			do
			{
				uxQueue--;
    2ae6:	68bb      	ldr	r3, [r7, #8]
    2ae8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2aec:	60bb      	str	r3, [r7, #8]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    2aee:	68ba      	ldr	r2, [r7, #8]
    2af0:	4613      	mov	r3, r2
    2af2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2af6:	4413      	add	r3, r2
    2af8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2afc:	461a      	mov	r2, r3
    2afe:	f644 4334 	movw	r3, #19508	; 0x4c34
    2b02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b06:	4413      	add	r3, r2
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d011      	beq.n	2b32 <vTaskGetRunTimeStats+0xae>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), ulTotalRunTime );
    2b0e:	68ba      	ldr	r2, [r7, #8]
    2b10:	4613      	mov	r3, r2
    2b12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b16:	4413      	add	r3, r2
    2b18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b1c:	461a      	mov	r2, r3
    2b1e:	f644 4334 	movw	r3, #19508	; 0x4c34
    2b22:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b26:	4413      	add	r3, r2
    2b28:	6878      	ldr	r0, [r7, #4]
    2b2a:	4619      	mov	r1, r3
    2b2c:	68fa      	ldr	r2, [r7, #12]
    2b2e:	f000 fcfd 	bl	352c <prvGenerateRunTimeStatsForTasksInList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    2b32:	68bb      	ldr	r3, [r7, #8]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d1d6      	bne.n	2ae6 <vTaskGetRunTimeStats+0x62>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    2b38:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2b3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b40:	681b      	ldr	r3, [r3, #0]
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	2b00      	cmp	r3, #0
    2b46:	d009      	beq.n	2b5c <vTaskGetRunTimeStats+0xd8>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRunTime );
    2b48:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2b4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	6878      	ldr	r0, [r7, #4]
    2b54:	4619      	mov	r1, r3
    2b56:	68fa      	ldr	r2, [r7, #12]
    2b58:	f000 fce8 	bl	352c <prvGenerateRunTimeStatsForTasksInList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    2b5c:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2b60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	681b      	ldr	r3, [r3, #0]
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d009      	beq.n	2b80 <vTaskGetRunTimeStats+0xfc>
			{
				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ulTotalRunTime );
    2b6c:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2b70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b74:	681b      	ldr	r3, [r3, #0]
    2b76:	6878      	ldr	r0, [r7, #4]
    2b78:	4619      	mov	r1, r3
    2b7a:	68fa      	ldr	r2, [r7, #12]
    2b7c:	f000 fcd6 	bl	352c <prvGenerateRunTimeStatsForTasksInList>
			}

			#if ( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    2b80:	f644 43dc 	movw	r3, #19676	; 0x4cdc
    2b84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2b88:	681b      	ldr	r3, [r3, #0]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d007      	beq.n	2b9e <vTaskGetRunTimeStats+0x11a>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTime );
    2b8e:	6878      	ldr	r0, [r7, #4]
    2b90:	f644 41dc 	movw	r1, #19676	; 0x4cdc
    2b94:	f2c1 0100 	movt	r1, #4096	; 0x1000
    2b98:	68fa      	ldr	r2, [r7, #12]
    2b9a:	f000 fcc7 	bl	352c <prvGenerateRunTimeStatsForTasksInList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    2b9e:	f644 43f4 	movw	r3, #19700	; 0x4cf4
    2ba2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d007      	beq.n	2bbc <vTaskGetRunTimeStats+0x138>
				{
					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime );
    2bac:	6878      	ldr	r0, [r7, #4]
    2bae:	f644 41f4 	movw	r1, #19700	; 0x4cf4
    2bb2:	f2c1 0100 	movt	r1, #4096	; 0x1000
    2bb6:	68fa      	ldr	r2, [r7, #12]
    2bb8:	f000 fcb8 	bl	352c <prvGenerateRunTimeStatsForTasksInList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    2bbc:	f7ff fde4 	bl	2788 <xTaskResumeAll>
	}
    2bc0:	f107 0714 	add.w	r7, r7, #20
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd90      	pop	{r4, r7, pc}

00002bc8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b084      	sub	sp, #16
    2bcc:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2bce:	f644 531c 	movw	r3, #19740	; 0x4d1c
    2bd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2bd6:	681b      	ldr	r3, [r3, #0]
    2bd8:	2b00      	cmp	r3, #0
    2bda:	f040 80c0 	bne.w	2d5e <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    2bde:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2be2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	f103 0201 	add.w	r2, r3, #1
    2bec:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2bf0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2bf4:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    2bf6:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2bfa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	2b00      	cmp	r3, #0
    2c02:	d140      	bne.n	2c86 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2c04:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2c08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	60bb      	str	r3, [r7, #8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2c10:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2c14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c18:	681a      	ldr	r2, [r3, #0]
    2c1a:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2c1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c22:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    2c24:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    2c28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c2c:	68ba      	ldr	r2, [r7, #8]
    2c2e:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    2c30:	f644 5328 	movw	r3, #19752	; 0x4d28
    2c34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	f103 0201 	add.w	r2, r3, #1
    2c3e:	f644 5328 	movw	r3, #19752	; 0x4d28
    2c42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c46:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2c48:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2c4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	2b00      	cmp	r3, #0
    2c56:	d107      	bne.n	2c68 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2c58:	f240 0308 	movw	r3, #8
    2c5c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c64:	601a      	str	r2, [r3, #0]
    2c66:	e00e      	b.n	2c86 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2c68:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2c6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c70:	681b      	ldr	r3, [r3, #0]
    2c72:	68db      	ldr	r3, [r3, #12]
    2c74:	68db      	ldr	r3, [r3, #12]
    2c76:	607b      	str	r3, [r7, #4]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	685a      	ldr	r2, [r3, #4]
    2c7c:	f240 0308 	movw	r3, #8
    2c80:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c84:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2c86:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2c8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	f240 0308 	movw	r3, #8
    2c94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	429a      	cmp	r2, r3
    2c9c:	d36b      	bcc.n	2d76 <vTaskIncrementTick+0x1ae>
    2c9e:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2ca2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ca6:	681b      	ldr	r3, [r3, #0]
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d107      	bne.n	2cbe <vTaskIncrementTick+0xf6>
    2cae:	f240 0308 	movw	r3, #8
    2cb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cba:	601a      	str	r2, [r3, #0]
    2cbc:	e05b      	b.n	2d76 <vTaskIncrementTick+0x1ae>
    2cbe:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    2cc2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	68db      	ldr	r3, [r3, #12]
    2cca:	68db      	ldr	r3, [r3, #12]
    2ccc:	607b      	str	r3, [r7, #4]
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	685b      	ldr	r3, [r3, #4]
    2cd2:	60fb      	str	r3, [r7, #12]
    2cd4:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2cd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2cdc:	681a      	ldr	r2, [r3, #0]
    2cde:	68fb      	ldr	r3, [r7, #12]
    2ce0:	429a      	cmp	r2, r3
    2ce2:	d206      	bcs.n	2cf2 <vTaskIncrementTick+0x12a>
    2ce4:	f240 0308 	movw	r3, #8
    2ce8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2cec:	68fa      	ldr	r2, [r7, #12]
    2cee:	601a      	str	r2, [r3, #0]
    2cf0:	e041      	b.n	2d76 <vTaskIncrementTick+0x1ae>
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	f103 0304 	add.w	r3, r3, #4
    2cf8:	4618      	mov	r0, r3
    2cfa:	f7fe fbf7 	bl	14ec <vListRemove>
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d02:	2b00      	cmp	r3, #0
    2d04:	d005      	beq.n	2d12 <vTaskIncrementTick+0x14a>
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	f103 0318 	add.w	r3, r3, #24
    2d0c:	4618      	mov	r0, r3
    2d0e:	f7fe fbed 	bl	14ec <vListRemove>
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d16:	f644 5314 	movw	r3, #19732	; 0x4d14
    2d1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d1e:	681b      	ldr	r3, [r3, #0]
    2d20:	429a      	cmp	r2, r3
    2d22:	d906      	bls.n	2d32 <vTaskIncrementTick+0x16a>
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d28:	f644 5314 	movw	r3, #19732	; 0x4d14
    2d2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d30:	601a      	str	r2, [r3, #0]
    2d32:	687b      	ldr	r3, [r7, #4]
    2d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2d36:	4613      	mov	r3, r2
    2d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d3c:	4413      	add	r3, r2
    2d3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2d42:	461a      	mov	r2, r3
    2d44:	f644 4334 	movw	r3, #19508	; 0x4c34
    2d48:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d4c:	441a      	add	r2, r3
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	f103 0304 	add.w	r3, r3, #4
    2d54:	4610      	mov	r0, r2
    2d56:	4619      	mov	r1, r3
    2d58:	f7fe fb66 	bl	1428 <vListInsertEnd>
    2d5c:	e79f      	b.n	2c9e <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    2d5e:	f644 5320 	movw	r3, #19744	; 0x4d20
    2d62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	f103 0201 	add.w	r2, r3, #1
    2d6c:	f644 5320 	movw	r3, #19744	; 0x4d20
    2d70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d74:	601a      	str	r2, [r3, #0]

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    2d76:	f644 5320 	movw	r3, #19744	; 0x4d20
    2d7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d7e:	681b      	ldr	r3, [r3, #0]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2d80:	f107 0710 	add.w	r7, r7, #16
    2d84:	46bd      	mov	sp, r7
    2d86:	bd80      	pop	{r7, pc}

00002d88 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	b082      	sub	sp, #8
    2d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2d8e:	f644 531c 	movw	r3, #19740	; 0x4d1c
    2d92:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2d96:	681b      	ldr	r3, [r3, #0]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d007      	beq.n	2dac <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2d9c:	f644 5324 	movw	r3, #19748	; 0x4d24
    2da0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2da4:	f04f 0201 	mov.w	r2, #1
    2da8:	601a      	str	r2, [r3, #0]
    2daa:	e0ac      	b.n	2f06 <vTaskSwitchContext+0x17e>
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
    2dac:	f244 0300 	movw	r3, #16384	; 0x4000
    2db0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2db4:	689b      	ldr	r3, [r3, #8]
    2db6:	603b      	str	r3, [r7, #0]
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
    2db8:	f644 4330 	movw	r3, #19504	; 0x4c30
    2dbc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2dc0:	681a      	ldr	r2, [r3, #0]
    2dc2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    2dc4:	f644 5364 	movw	r3, #19812	; 0x4d64
    2dc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	6838      	ldr	r0, [r7, #0]
    2dd0:	ebc3 0300 	rsb	r3, r3, r0
    2dd4:	440b      	add	r3, r1
    2dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
    2dd8:	f644 5364 	movw	r3, #19812	; 0x4d64
    2ddc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2de0:	683a      	ldr	r2, [r7, #0]
    2de2:	601a      	str	r2, [r3, #0]
		}
		#endif
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    2de4:	f644 4330 	movw	r3, #19504	; 0x4c30
    2de8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	681a      	ldr	r2, [r3, #0]
    2df0:	f644 4330 	movw	r3, #19504	; 0x4c30
    2df4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2dfc:	429a      	cmp	r2, r3
    2dfe:	d810      	bhi.n	2e22 <vTaskSwitchContext+0x9a>
    2e00:	f644 4330 	movw	r3, #19504	; 0x4c30
    2e04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e08:	681b      	ldr	r3, [r3, #0]
    2e0a:	461a      	mov	r2, r3
    2e0c:	f644 4330 	movw	r3, #19504	; 0x4c30
    2e10:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e14:	681b      	ldr	r3, [r3, #0]
    2e16:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2e1a:	4610      	mov	r0, r2
    2e1c:	4619      	mov	r1, r3
    2e1e:	f7fd fcd5 	bl	7cc <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    2e22:	f644 4330 	movw	r3, #19504	; 0x4c30
    2e26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2e2e:	4618      	mov	r0, r3
    2e30:	f24b 310c 	movw	r1, #45836	; 0xb30c
    2e34:	f2c0 0100 	movt	r1, #0
    2e38:	f04f 0214 	mov.w	r2, #20
    2e3c:	f008 f9e0 	bl	b200 <memcmp>
    2e40:	4603      	mov	r3, r0
    2e42:	2b00      	cmp	r3, #0
    2e44:	d01e      	beq.n	2e84 <vTaskSwitchContext+0xfc>
    2e46:	f644 4330 	movw	r3, #19504	; 0x4c30
    2e4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	461a      	mov	r2, r3
    2e52:	f644 4330 	movw	r3, #19504	; 0x4c30
    2e56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e5a:	681b      	ldr	r3, [r3, #0]
    2e5c:	f103 0334 	add.w	r3, r3, #52	; 0x34
    2e60:	4610      	mov	r0, r2
    2e62:	4619      	mov	r1, r3
    2e64:	f7fd fcb2 	bl	7cc <vApplicationStackOverflowHook>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2e68:	e00d      	b.n	2e86 <vTaskSwitchContext+0xfe>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2e6a:	f644 5314 	movw	r3, #19732	; 0x4d14
    2e6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e72:	681b      	ldr	r3, [r3, #0]
    2e74:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    2e78:	f644 5314 	movw	r3, #19732	; 0x4d14
    2e7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e80:	601a      	str	r2, [r3, #0]
    2e82:	e000      	b.n	2e86 <vTaskSwitchContext+0xfe>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2e84:	bf00      	nop
    2e86:	f644 5314 	movw	r3, #19732	; 0x4d14
    2e8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2e8e:	681a      	ldr	r2, [r3, #0]
    2e90:	4613      	mov	r3, r2
    2e92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e96:	4413      	add	r3, r2
    2e98:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2e9c:	461a      	mov	r2, r3
    2e9e:	f644 4334 	movw	r3, #19508	; 0x4c34
    2ea2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ea6:	4413      	add	r3, r2
    2ea8:	681b      	ldr	r3, [r3, #0]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d0dd      	beq.n	2e6a <vTaskSwitchContext+0xe2>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2eae:	f644 5314 	movw	r3, #19732	; 0x4d14
    2eb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2eb6:	681a      	ldr	r2, [r3, #0]
    2eb8:	4613      	mov	r3, r2
    2eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ebe:	4413      	add	r3, r2
    2ec0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ec4:	461a      	mov	r2, r3
    2ec6:	f644 4334 	movw	r3, #19508	; 0x4c34
    2eca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ece:	4413      	add	r3, r2
    2ed0:	607b      	str	r3, [r7, #4]
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	685b      	ldr	r3, [r3, #4]
    2ed6:	685a      	ldr	r2, [r3, #4]
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	605a      	str	r2, [r3, #4]
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	685a      	ldr	r2, [r3, #4]
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	f103 0308 	add.w	r3, r3, #8
    2ee6:	429a      	cmp	r2, r3
    2ee8:	d104      	bne.n	2ef4 <vTaskSwitchContext+0x16c>
    2eea:	687b      	ldr	r3, [r7, #4]
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	685a      	ldr	r2, [r3, #4]
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	605a      	str	r2, [r3, #4]
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	685b      	ldr	r3, [r3, #4]
    2ef8:	68db      	ldr	r3, [r3, #12]
    2efa:	461a      	mov	r2, r3
    2efc:	f644 4330 	movw	r3, #19504	; 0x4c30
    2f00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2f04:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    2f06:	f107 0708 	add.w	r7, r7, #8
    2f0a:	46bd      	mov	sp, r7
    2f0c:	bd80      	pop	{r7, pc}
    2f0e:	bf00      	nop

00002f10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2f10:	b580      	push	{r7, lr}
    2f12:	b084      	sub	sp, #16
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
    2f18:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2f1a:	f644 4330 	movw	r3, #19504	; 0x4c30
    2f1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2f22:	681b      	ldr	r3, [r3, #0]
    2f24:	f103 0318 	add.w	r3, r3, #24
    2f28:	6878      	ldr	r0, [r7, #4]
    2f2a:	4619      	mov	r1, r3
    2f2c:	f7fe faa4 	bl	1478 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2f30:	f644 4330 	movw	r3, #19504	; 0x4c30
    2f34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	f103 0304 	add.w	r3, r3, #4
    2f3e:	4618      	mov	r0, r3
    2f40:	f7fe fad4 	bl	14ec <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f4a:	d10e      	bne.n	2f6a <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2f4c:	f644 4330 	movw	r3, #19504	; 0x4c30
    2f50:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2f54:	681b      	ldr	r3, [r3, #0]
    2f56:	f103 0304 	add.w	r3, r3, #4
    2f5a:	f644 40f4 	movw	r0, #19700	; 0x4cf4
    2f5e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    2f62:	4619      	mov	r1, r3
    2f64:	f7fe fa60 	bl	1428 <vListInsertEnd>
    2f68:	e00a      	b.n	2f80 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2f6a:	f644 530c 	movw	r3, #19724	; 0x4d0c
    2f6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2f72:	681a      	ldr	r2, [r3, #0]
    2f74:	683b      	ldr	r3, [r7, #0]
    2f76:	4413      	add	r3, r2
    2f78:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f7a:	68f8      	ldr	r0, [r7, #12]
    2f7c:	f000 f9f0 	bl	3360 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    2f80:	f107 0710 	add.w	r7, r7, #16
    2f84:	46bd      	mov	sp, r7
    2f86:	bd80      	pop	{r7, pc}

00002f88 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2f88:	b580      	push	{r7, lr}
    2f8a:	b084      	sub	sp, #16
    2f8c:	af00      	add	r7, sp, #0
    2f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	68db      	ldr	r3, [r3, #12]
    2f94:	68db      	ldr	r3, [r3, #12]
    2f96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2f98:	68bb      	ldr	r3, [r7, #8]
    2f9a:	f103 0318 	add.w	r3, r3, #24
    2f9e:	4618      	mov	r0, r3
    2fa0:	f7fe faa4 	bl	14ec <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2fa4:	f644 531c 	movw	r3, #19740	; 0x4d1c
    2fa8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d12b      	bne.n	300a <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2fb2:	68bb      	ldr	r3, [r7, #8]
    2fb4:	f103 0304 	add.w	r3, r3, #4
    2fb8:	4618      	mov	r0, r3
    2fba:	f7fe fa97 	bl	14ec <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2fbe:	68bb      	ldr	r3, [r7, #8]
    2fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2fc2:	f644 5314 	movw	r3, #19732	; 0x4d14
    2fc6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	429a      	cmp	r2, r3
    2fce:	d906      	bls.n	2fde <xTaskRemoveFromEventList+0x56>
    2fd0:	68bb      	ldr	r3, [r7, #8]
    2fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2fd4:	f644 5314 	movw	r3, #19732	; 0x4d14
    2fd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2fdc:	601a      	str	r2, [r3, #0]
    2fde:	68bb      	ldr	r3, [r7, #8]
    2fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2fe2:	4613      	mov	r3, r2
    2fe4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2fe8:	4413      	add	r3, r2
    2fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2fee:	461a      	mov	r2, r3
    2ff0:	f644 4334 	movw	r3, #19508	; 0x4c34
    2ff4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    2ff8:	441a      	add	r2, r3
    2ffa:	68bb      	ldr	r3, [r7, #8]
    2ffc:	f103 0304 	add.w	r3, r3, #4
    3000:	4610      	mov	r0, r2
    3002:	4619      	mov	r1, r3
    3004:	f7fe fa10 	bl	1428 <vListInsertEnd>
    3008:	e009      	b.n	301e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    300a:	68bb      	ldr	r3, [r7, #8]
    300c:	f103 0318 	add.w	r3, r3, #24
    3010:	f644 40c8 	movw	r0, #19656	; 0x4cc8
    3014:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3018:	4619      	mov	r1, r3
    301a:	f7fe fa05 	bl	1428 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    301e:	68bb      	ldr	r3, [r7, #8]
    3020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3022:	f644 4330 	movw	r3, #19504	; 0x4c30
    3026:	f2c1 0300 	movt	r3, #4096	; 0x1000
    302a:	681b      	ldr	r3, [r3, #0]
    302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    302e:	429a      	cmp	r2, r3
    3030:	d303      	bcc.n	303a <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3032:	f04f 0301 	mov.w	r3, #1
    3036:	60fb      	str	r3, [r7, #12]
    3038:	e002      	b.n	3040 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    303a:	f04f 0300 	mov.w	r3, #0
    303e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3040:	68fb      	ldr	r3, [r7, #12]
}
    3042:	4618      	mov	r0, r3
    3044:	f107 0710 	add.w	r7, r7, #16
    3048:	46bd      	mov	sp, r7
    304a:	bd80      	pop	{r7, pc}

0000304c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    304c:	b480      	push	{r7}
    304e:	b083      	sub	sp, #12
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3054:	f644 5328 	movw	r3, #19752	; 0x4d28
    3058:	f2c1 0300 	movt	r3, #4096	; 0x1000
    305c:	681a      	ldr	r2, [r3, #0]
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3062:	f644 530c 	movw	r3, #19724	; 0x4d0c
    3066:	f2c1 0300 	movt	r3, #4096	; 0x1000
    306a:	681a      	ldr	r2, [r3, #0]
    306c:	687b      	ldr	r3, [r7, #4]
    306e:	605a      	str	r2, [r3, #4]
}
    3070:	f107 070c 	add.w	r7, r7, #12
    3074:	46bd      	mov	sp, r7
    3076:	bc80      	pop	{r7}
    3078:	4770      	bx	lr
    307a:	bf00      	nop

0000307c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    307c:	b580      	push	{r7, lr}
    307e:	b084      	sub	sp, #16
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
    3084:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3086:	f7fe f919 	bl	12bc <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    308a:	683b      	ldr	r3, [r7, #0]
    308c:	681b      	ldr	r3, [r3, #0]
    308e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3092:	d103      	bne.n	309c <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    3094:	f04f 0300 	mov.w	r3, #0
    3098:	60fb      	str	r3, [r7, #12]
    309a:	e03a      	b.n	3112 <xTaskCheckForTimeOut+0x96>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	681a      	ldr	r2, [r3, #0]
    30a0:	f644 5328 	movw	r3, #19752	; 0x4d28
    30a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	429a      	cmp	r2, r3
    30ac:	d00c      	beq.n	30c8 <xTaskCheckForTimeOut+0x4c>
    30ae:	687b      	ldr	r3, [r7, #4]
    30b0:	685a      	ldr	r2, [r3, #4]
    30b2:	f644 530c 	movw	r3, #19724	; 0x4d0c
    30b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    30ba:	681b      	ldr	r3, [r3, #0]
    30bc:	429a      	cmp	r2, r3
    30be:	d803      	bhi.n	30c8 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    30c0:	f04f 0301 	mov.w	r3, #1
    30c4:	60fb      	str	r3, [r7, #12]
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    30c6:	e024      	b.n	3112 <xTaskCheckForTimeOut+0x96>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    30c8:	f644 530c 	movw	r3, #19724	; 0x4d0c
    30cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    30d0:	681a      	ldr	r2, [r3, #0]
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	685b      	ldr	r3, [r3, #4]
    30d6:	ebc3 0202 	rsb	r2, r3, r2
    30da:	683b      	ldr	r3, [r7, #0]
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	429a      	cmp	r2, r3
    30e0:	d214      	bcs.n	310c <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    30e2:	683b      	ldr	r3, [r7, #0]
    30e4:	681a      	ldr	r2, [r3, #0]
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	6859      	ldr	r1, [r3, #4]
    30ea:	f644 530c 	movw	r3, #19724	; 0x4d0c
    30ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    30f2:	681b      	ldr	r3, [r3, #0]
    30f4:	ebc3 0301 	rsb	r3, r3, r1
    30f8:	441a      	add	r2, r3
    30fa:	683b      	ldr	r3, [r7, #0]
    30fc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    30fe:	6878      	ldr	r0, [r7, #4]
    3100:	f7ff ffa4 	bl	304c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3104:	f04f 0300 	mov.w	r3, #0
    3108:	60fb      	str	r3, [r7, #12]
    310a:	e002      	b.n	3112 <xTaskCheckForTimeOut+0x96>
		}
		else
		{
			xReturn = pdTRUE;
    310c:	f04f 0301 	mov.w	r3, #1
    3110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    3112:	f7fe f8e9 	bl	12e8 <vPortExitCritical>

	return xReturn;
    3116:	68fb      	ldr	r3, [r7, #12]
}
    3118:	4618      	mov	r0, r3
    311a:	f107 0710 	add.w	r7, r7, #16
    311e:	46bd      	mov	sp, r7
    3120:	bd80      	pop	{r7, pc}
    3122:	bf00      	nop

00003124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3124:	b480      	push	{r7}
    3126:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    3128:	f644 5324 	movw	r3, #19748	; 0x4d24
    312c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3130:	f04f 0201 	mov.w	r2, #1
    3134:	601a      	str	r2, [r3, #0]
}
    3136:	46bd      	mov	sp, r7
    3138:	bc80      	pop	{r7}
    313a:	4770      	bx	lr

0000313c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
    313c:	b480      	push	{r7}
    313e:	b085      	sub	sp, #20
    3140:	af00      	add	r7, sp, #0
    3142:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	2b00      	cmp	r3, #0
    3148:	d005      	beq.n	3156 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxTaskNumber;
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3152:	60bb      	str	r3, [r7, #8]
    3154:	e002      	b.n	315c <uxTaskGetTaskNumber+0x20>
		}
		else
		{
			uxReturn = 0U;
    3156:	f04f 0300 	mov.w	r3, #0
    315a:	60bb      	str	r3, [r7, #8]
		}
		
		return uxReturn;
    315c:	68bb      	ldr	r3, [r7, #8]
	}
    315e:	4618      	mov	r0, r3
    3160:	f107 0714 	add.w	r7, r7, #20
    3164:	46bd      	mov	sp, r7
    3166:	bc80      	pop	{r7}
    3168:	4770      	bx	lr
    316a:	bf00      	nop

0000316c <vTaskSetTaskNumber>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
	{
    316c:	b480      	push	{r7}
    316e:	b085      	sub	sp, #20
    3170:	af00      	add	r7, sp, #0
    3172:	6078      	str	r0, [r7, #4]
    3174:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	2b00      	cmp	r3, #0
    317a:	d004      	beq.n	3186 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    3180:	68fb      	ldr	r3, [r7, #12]
    3182:	683a      	ldr	r2, [r7, #0]
    3184:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
    3186:	f107 0714 	add.w	r7, r7, #20
    318a:	46bd      	mov	sp, r7
    318c:	bc80      	pop	{r7}
    318e:	4770      	bx	lr

00003190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3190:	b580      	push	{r7, lr}
    3192:	b082      	sub	sp, #8
    3194:	af00      	add	r7, sp, #0
    3196:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3198:	f000 f896 	bl	32c8 <prvCheckTasksWaitingTermination>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    319c:	e7fc      	b.n	3198 <prvIdleTask+0x8>
    319e:	bf00      	nop

000031a0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    31a0:	b580      	push	{r7, lr}
    31a2:	b084      	sub	sp, #16
    31a4:	af00      	add	r7, sp, #0
    31a6:	60f8      	str	r0, [r7, #12]
    31a8:	60b9      	str	r1, [r7, #8]
    31aa:	607a      	str	r2, [r7, #4]
    31ac:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	f103 0334 	add.w	r3, r3, #52	; 0x34
    31b4:	461a      	mov	r2, r3
    31b6:	68bb      	ldr	r3, [r7, #8]
    31b8:	4610      	mov	r0, r2
    31ba:	4619      	mov	r1, r3
    31bc:	f04f 020c 	mov.w	r2, #12
    31c0:	f008 f85a 	bl	b278 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	f04f 0200 	mov.w	r2, #0
    31ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    31ce:	687b      	ldr	r3, [r7, #4]
    31d0:	2b04      	cmp	r3, #4
    31d2:	d902      	bls.n	31da <prvInitialiseTCBVariables+0x3a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    31d4:	f04f 0304 	mov.w	r3, #4
    31d8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	687a      	ldr	r2, [r7, #4]
    31de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    31e0:	68fb      	ldr	r3, [r7, #12]
    31e2:	687a      	ldr	r2, [r7, #4]
    31e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    31e6:	68fb      	ldr	r3, [r7, #12]
    31e8:	f103 0304 	add.w	r3, r3, #4
    31ec:	4618      	mov	r0, r3
    31ee:	f7fe f90d 	bl	140c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    31f2:	68fb      	ldr	r3, [r7, #12]
    31f4:	f103 0318 	add.w	r3, r3, #24
    31f8:	4618      	mov	r0, r3
    31fa:	f7fe f907 	bl	140c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    31fe:	68fb      	ldr	r3, [r7, #12]
    3200:	68fa      	ldr	r2, [r7, #12]
    3202:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	f1c3 0205 	rsb	r2, r3, #5
    320a:	68fb      	ldr	r3, [r7, #12]
    320c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	68fa      	ldr	r2, [r7, #12]
    3212:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
    3214:	68fb      	ldr	r3, [r7, #12]
    3216:	f04f 0200 	mov.w	r2, #0
    321a:	64da      	str	r2, [r3, #76]	; 0x4c
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    321c:	f107 0710 	add.w	r7, r7, #16
    3220:	46bd      	mov	sp, r7
    3222:	bd80      	pop	{r7, pc}

00003224 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    3224:	b580      	push	{r7, lr}
    3226:	b082      	sub	sp, #8
    3228:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    322a:	f04f 0300 	mov.w	r3, #0
    322e:	607b      	str	r3, [r7, #4]
    3230:	e013      	b.n	325a <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    3232:	687a      	ldr	r2, [r7, #4]
    3234:	4613      	mov	r3, r2
    3236:	ea4f 0383 	mov.w	r3, r3, lsl #2
    323a:	4413      	add	r3, r2
    323c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3240:	461a      	mov	r2, r3
    3242:	f644 4334 	movw	r3, #19508	; 0x4c34
    3246:	f2c1 0300 	movt	r3, #4096	; 0x1000
    324a:	4413      	add	r3, r2
    324c:	4618      	mov	r0, r3
    324e:	f7fe f8b9 	bl	13c4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	f103 0301 	add.w	r3, r3, #1
    3258:	607b      	str	r3, [r7, #4]
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	2b04      	cmp	r3, #4
    325e:	d9e8      	bls.n	3232 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    3260:	f644 4098 	movw	r0, #19608	; 0x4c98
    3264:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3268:	f7fe f8ac 	bl	13c4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    326c:	f644 40ac 	movw	r0, #19628	; 0x4cac
    3270:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3274:	f7fe f8a6 	bl	13c4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3278:	f644 40c8 	movw	r0, #19656	; 0x4cc8
    327c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3280:	f7fe f8a0 	bl	13c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    3284:	f644 40dc 	movw	r0, #19676	; 0x4cdc
    3288:	f2c1 0000 	movt	r0, #4096	; 0x1000
    328c:	f7fe f89a 	bl	13c4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    3290:	f644 40f4 	movw	r0, #19700	; 0x4cf4
    3294:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3298:	f7fe f894 	bl	13c4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    329c:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    32a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    32a4:	f644 4298 	movw	r2, #19608	; 0x4c98
    32a8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    32ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    32ae:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    32b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    32b6:	f644 42ac 	movw	r2, #19628	; 0x4cac
    32ba:	f2c1 0200 	movt	r2, #4096	; 0x1000
    32be:	601a      	str	r2, [r3, #0]
}
    32c0:	f107 0708 	add.w	r7, r7, #8
    32c4:	46bd      	mov	sp, r7
    32c6:	bd80      	pop	{r7, pc}

000032c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b082      	sub	sp, #8
    32cc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    32ce:	f644 43f0 	movw	r3, #19696	; 0x4cf0
    32d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	2b00      	cmp	r3, #0
    32da:	d03c      	beq.n	3356 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    32dc:	f7ff fa42 	bl	2764 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    32e0:	f644 43dc 	movw	r3, #19676	; 0x4cdc
    32e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	2b00      	cmp	r3, #0
    32ec:	bf14      	ite	ne
    32ee:	2300      	movne	r3, #0
    32f0:	2301      	moveq	r3, #1
    32f2:	603b      	str	r3, [r7, #0]
			xTaskResumeAll();
    32f4:	f7ff fa48 	bl	2788 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    32f8:	683b      	ldr	r3, [r7, #0]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d12b      	bne.n	3356 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    32fe:	f7fd ffdd 	bl	12bc <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3302:	f644 43dc 	movw	r3, #19676	; 0x4cdc
    3306:	f2c1 0300 	movt	r3, #4096	; 0x1000
    330a:	68db      	ldr	r3, [r3, #12]
    330c:	68db      	ldr	r3, [r3, #12]
    330e:	607b      	str	r3, [r7, #4]
					vListRemove( &( pxTCB->xGenericListItem ) );
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	f103 0304 	add.w	r3, r3, #4
    3316:	4618      	mov	r0, r3
    3318:	f7fe f8e8 	bl	14ec <vListRemove>
					--uxCurrentNumberOfTasks;
    331c:	f644 5308 	movw	r3, #19720	; 0x4d08
    3320:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    332a:	f644 5308 	movw	r3, #19720	; 0x4d08
    332e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3332:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    3334:	f644 43f0 	movw	r3, #19696	; 0x4cf0
    3338:	f2c1 0300 	movt	r3, #4096	; 0x1000
    333c:	681b      	ldr	r3, [r3, #0]
    333e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    3342:	f644 43f0 	movw	r3, #19696	; 0x4cf0
    3346:	f2c1 0300 	movt	r3, #4096	; 0x1000
    334a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    334c:	f7fd ffcc 	bl	12e8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    3350:	6878      	ldr	r0, [r7, #4]
    3352:	f000 f9ab 	bl	36ac <prvDeleteTCB>
			}
		}
	}
	#endif
}
    3356:	f107 0708 	add.w	r7, r7, #8
    335a:	46bd      	mov	sp, r7
    335c:	bd80      	pop	{r7, pc}
    335e:	bf00      	nop

00003360 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    3360:	b580      	push	{r7, lr}
    3362:	b082      	sub	sp, #8
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3368:	f644 4330 	movw	r3, #19504	; 0x4c30
    336c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3370:	681b      	ldr	r3, [r3, #0]
    3372:	687a      	ldr	r2, [r7, #4]
    3374:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    3376:	f644 530c 	movw	r3, #19724	; 0x4d0c
    337a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	687a      	ldr	r2, [r7, #4]
    3382:	429a      	cmp	r2, r3
    3384:	d210      	bcs.n	33a8 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3386:	f644 43c4 	movw	r3, #19652	; 0x4cc4
    338a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    338e:	681a      	ldr	r2, [r3, #0]
    3390:	f644 4330 	movw	r3, #19504	; 0x4c30
    3394:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3398:	681b      	ldr	r3, [r3, #0]
    339a:	f103 0304 	add.w	r3, r3, #4
    339e:	4610      	mov	r0, r2
    33a0:	4619      	mov	r1, r3
    33a2:	f7fe f869 	bl	1478 <vListInsert>
    33a6:	e01d      	b.n	33e4 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    33a8:	f644 43c0 	movw	r3, #19648	; 0x4cc0
    33ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    33b0:	681a      	ldr	r2, [r3, #0]
    33b2:	f644 4330 	movw	r3, #19504	; 0x4c30
    33b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	f103 0304 	add.w	r3, r3, #4
    33c0:	4610      	mov	r0, r2
    33c2:	4619      	mov	r1, r3
    33c4:	f7fe f858 	bl	1478 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    33c8:	f240 0308 	movw	r3, #8
    33cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	687a      	ldr	r2, [r7, #4]
    33d4:	429a      	cmp	r2, r3
    33d6:	d205      	bcs.n	33e4 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    33d8:	f240 0308 	movw	r3, #8
    33dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    33e0:	687a      	ldr	r2, [r7, #4]
    33e2:	601a      	str	r2, [r3, #0]
		}
	}
}
    33e4:	f107 0708 	add.w	r7, r7, #8
    33e8:	46bd      	mov	sp, r7
    33ea:	bd80      	pop	{r7, pc}

000033ec <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    33ec:	b580      	push	{r7, lr}
    33ee:	b084      	sub	sp, #16
    33f0:	af00      	add	r7, sp, #0
    33f2:	4603      	mov	r3, r0
    33f4:	6039      	str	r1, [r7, #0]
    33f6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    33f8:	f04f 0050 	mov.w	r0, #80	; 0x50
    33fc:	f7fd fda8 	bl	f50 <pvPortMalloc>
    3400:	4603      	mov	r3, r0
    3402:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    3404:	68fb      	ldr	r3, [r7, #12]
    3406:	2b00      	cmp	r3, #0
    3408:	d023      	beq.n	3452 <prvAllocateTCBAndStack+0x66>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    340a:	683b      	ldr	r3, [r7, #0]
    340c:	2b00      	cmp	r3, #0
    340e:	d107      	bne.n	3420 <prvAllocateTCBAndStack+0x34>
    3410:	88fb      	ldrh	r3, [r7, #6]
    3412:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3416:	4618      	mov	r0, r3
    3418:	f7fd fd9a 	bl	f50 <pvPortMalloc>
    341c:	4603      	mov	r3, r0
    341e:	e000      	b.n	3422 <prvAllocateTCBAndStack+0x36>
    3420:	683b      	ldr	r3, [r7, #0]
    3422:	68fa      	ldr	r2, [r7, #12]
    3424:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3426:	68fb      	ldr	r3, [r7, #12]
    3428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    342a:	2b00      	cmp	r3, #0
    342c:	d106      	bne.n	343c <prvAllocateTCBAndStack+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    342e:	68f8      	ldr	r0, [r7, #12]
    3430:	f7fd fe6a 	bl	1108 <vPortFree>
			pxNewTCB = NULL;
    3434:	f04f 0300 	mov.w	r3, #0
    3438:	60fb      	str	r3, [r7, #12]
    343a:	e00a      	b.n	3452 <prvAllocateTCBAndStack+0x66>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    343c:	68fb      	ldr	r3, [r7, #12]
    343e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3440:	88fb      	ldrh	r3, [r7, #6]
    3442:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3446:	4610      	mov	r0, r2
    3448:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    344c:	461a      	mov	r2, r3
    344e:	f007 fef5 	bl	b23c <memset>
		}
	}

	return pxNewTCB;
    3452:	68fb      	ldr	r3, [r7, #12]
}
    3454:	4618      	mov	r0, r3
    3456:	f107 0710 	add.w	r7, r7, #16
    345a:	46bd      	mov	sp, r7
    345c:	bd80      	pop	{r7, pc}
    345e:	bf00      	nop

00003460 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    3460:	b580      	push	{r7, lr}
    3462:	b08e      	sub	sp, #56	; 0x38
    3464:	af04      	add	r7, sp, #16
    3466:	60f8      	str	r0, [r7, #12]
    3468:	60b9      	str	r1, [r7, #8]
    346a:	4613      	mov	r3, r2
    346c:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ 50 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    346e:	68bb      	ldr	r3, [r7, #8]
    3470:	623b      	str	r3, [r7, #32]
    3472:	6a3b      	ldr	r3, [r7, #32]
    3474:	685b      	ldr	r3, [r3, #4]
    3476:	685a      	ldr	r2, [r3, #4]
    3478:	6a3b      	ldr	r3, [r7, #32]
    347a:	605a      	str	r2, [r3, #4]
    347c:	6a3b      	ldr	r3, [r7, #32]
    347e:	685a      	ldr	r2, [r3, #4]
    3480:	6a3b      	ldr	r3, [r7, #32]
    3482:	f103 0308 	add.w	r3, r3, #8
    3486:	429a      	cmp	r2, r3
    3488:	d104      	bne.n	3494 <prvListTaskWithinSingleList+0x34>
    348a:	6a3b      	ldr	r3, [r7, #32]
    348c:	685b      	ldr	r3, [r3, #4]
    348e:	685a      	ldr	r2, [r3, #4]
    3490:	6a3b      	ldr	r3, [r7, #32]
    3492:	605a      	str	r2, [r3, #4]
    3494:	6a3b      	ldr	r3, [r7, #32]
    3496:	685b      	ldr	r3, [r3, #4]
    3498:	68db      	ldr	r3, [r3, #12]
    349a:	61bb      	str	r3, [r7, #24]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    349c:	68bb      	ldr	r3, [r7, #8]
    349e:	627b      	str	r3, [r7, #36]	; 0x24
    34a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34a2:	685b      	ldr	r3, [r3, #4]
    34a4:	685a      	ldr	r2, [r3, #4]
    34a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34a8:	605a      	str	r2, [r3, #4]
    34aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34ac:	685a      	ldr	r2, [r3, #4]
    34ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34b0:	f103 0308 	add.w	r3, r3, #8
    34b4:	429a      	cmp	r2, r3
    34b6:	d104      	bne.n	34c2 <prvListTaskWithinSingleList+0x62>
    34b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34ba:	685b      	ldr	r3, [r3, #4]
    34bc:	685a      	ldr	r2, [r3, #4]
    34be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34c0:	605a      	str	r2, [r3, #4]
    34c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    34c4:	685b      	ldr	r3, [r3, #4]
    34c6:	68db      	ldr	r3, [r3, #12]
    34c8:	617b      	str	r3, [r7, #20]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    34ca:	697b      	ldr	r3, [r7, #20]
    34cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    34ce:	4618      	mov	r0, r3
    34d0:	f000 f8b2 	bl	3638 <usTaskCheckFreeStackSpace>
    34d4:	4603      	mov	r3, r0
    34d6:	83fb      	strh	r3, [r7, #30]
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    34d8:	697b      	ldr	r3, [r7, #20]
    34da:	f103 0334 	add.w	r3, r3, #52	; 0x34
    34de:	461a      	mov	r2, r3
    34e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    34e4:	6979      	ldr	r1, [r7, #20]
    34e6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
    34ea:	8bf8      	ldrh	r0, [r7, #30]
    34ec:	6979      	ldr	r1, [r7, #20]
    34ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
    34f0:	f8cd c000 	str.w	ip, [sp]
    34f4:	9001      	str	r0, [sp, #4]
    34f6:	9102      	str	r1, [sp, #8]
    34f8:	f644 5068 	movw	r0, #19816	; 0x4d68
    34fc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3500:	f24b 21c8 	movw	r1, #45768	; 0xb2c8
    3504:	f2c0 0100 	movt	r1, #0
    3508:	f7fd fce2 	bl	ed0 <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    350c:	68fb      	ldr	r3, [r7, #12]
    350e:	4618      	mov	r0, r3
    3510:	f644 5168 	movw	r1, #19816	; 0x4d68
    3514:	f2c1 0100 	movt	r1, #4096	; 0x1000
    3518:	f007 fe99 	bl	b24e <strcat>

		} while( pxNextTCB != pxFirstTCB );
    351c:	697a      	ldr	r2, [r7, #20]
    351e:	69bb      	ldr	r3, [r7, #24]
    3520:	429a      	cmp	r2, r3
    3522:	d1bb      	bne.n	349c <prvListTaskWithinSingleList+0x3c>
	}
    3524:	f107 0728 	add.w	r7, r7, #40	; 0x28
    3528:	46bd      	mov	sp, r7
    352a:	bd80      	pop	{r7, pc}

0000352c <prvGenerateRunTimeStatsForTasksInList>:
/*-----------------------------------------------------------*/

#if ( configGENERATE_RUN_TIME_STATS == 1 )

	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList, unsigned long ulTotalRunTime )
	{
    352c:	b580      	push	{r7, lr}
    352e:	b08c      	sub	sp, #48	; 0x30
    3530:	af02      	add	r7, sp, #8
    3532:	60f8      	str	r0, [r7, #12]
    3534:	60b9      	str	r1, [r7, #8]
    3536:	607a      	str	r2, [r7, #4]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned long ulStatsAsPercentage;

		/* Write the run time stats of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    3538:	68bb      	ldr	r3, [r7, #8]
    353a:	623b      	str	r3, [r7, #32]
    353c:	6a3b      	ldr	r3, [r7, #32]
    353e:	685b      	ldr	r3, [r3, #4]
    3540:	685a      	ldr	r2, [r3, #4]
    3542:	6a3b      	ldr	r3, [r7, #32]
    3544:	605a      	str	r2, [r3, #4]
    3546:	6a3b      	ldr	r3, [r7, #32]
    3548:	685a      	ldr	r2, [r3, #4]
    354a:	6a3b      	ldr	r3, [r7, #32]
    354c:	f103 0308 	add.w	r3, r3, #8
    3550:	429a      	cmp	r2, r3
    3552:	d104      	bne.n	355e <prvGenerateRunTimeStatsForTasksInList+0x32>
    3554:	6a3b      	ldr	r3, [r7, #32]
    3556:	685b      	ldr	r3, [r3, #4]
    3558:	685a      	ldr	r2, [r3, #4]
    355a:	6a3b      	ldr	r3, [r7, #32]
    355c:	605a      	str	r2, [r3, #4]
    355e:	6a3b      	ldr	r3, [r7, #32]
    3560:	685b      	ldr	r3, [r3, #4]
    3562:	68db      	ldr	r3, [r3, #12]
    3564:	61bb      	str	r3, [r7, #24]
		do
		{
			/* Get next TCB in from the list. */
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    3566:	68bb      	ldr	r3, [r7, #8]
    3568:	627b      	str	r3, [r7, #36]	; 0x24
    356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    356c:	685b      	ldr	r3, [r3, #4]
    356e:	685a      	ldr	r2, [r3, #4]
    3570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3572:	605a      	str	r2, [r3, #4]
    3574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3576:	685a      	ldr	r2, [r3, #4]
    3578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    357a:	f103 0308 	add.w	r3, r3, #8
    357e:	429a      	cmp	r2, r3
    3580:	d104      	bne.n	358c <prvGenerateRunTimeStatsForTasksInList+0x60>
    3582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3584:	685b      	ldr	r3, [r3, #4]
    3586:	685a      	ldr	r2, [r3, #4]
    3588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    358a:	605a      	str	r2, [r3, #4]
    358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    358e:	685b      	ldr	r3, [r3, #4]
    3590:	68db      	ldr	r3, [r3, #12]
    3592:	617b      	str	r3, [r7, #20]

			/* Divide by zero check. */
			if( ulTotalRunTime > 0UL )
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	2b00      	cmp	r3, #0
    3598:	d046      	beq.n	3628 <prvGenerateRunTimeStatsForTasksInList+0xfc>
			{
				/* Has the task run at all? */
				if( pxNextTCB->ulRunTimeCounter == 0UL )
    359a:	697b      	ldr	r3, [r7, #20]
    359c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    359e:	2b00      	cmp	r3, #0
    35a0:	d10e      	bne.n	35c0 <prvGenerateRunTimeStatsForTasksInList+0x94>
				{
					/* The task has used no CPU time at all. */
					sprintf( pcStatsString, ( char * ) "%s\t\t0\t\t0%%\r\n", pxNextTCB->pcTaskName );
    35a2:	697b      	ldr	r3, [r7, #20]
    35a4:	f103 0334 	add.w	r3, r3, #52	; 0x34
    35a8:	f644 5030 	movw	r0, #19760	; 0x4d30
    35ac:	f2c1 0000 	movt	r0, #4096	; 0x1000
    35b0:	f24b 21dc 	movw	r1, #45788	; 0xb2dc
    35b4:	f2c0 0100 	movt	r1, #0
    35b8:	461a      	mov	r2, r3
    35ba:	f7fd fc89 	bl	ed0 <sprintf>
    35be:	e02b      	b.n	3618 <prvGenerateRunTimeStatsForTasksInList+0xec>
				else
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTime has already been divided by 100. */
					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
    35c0:	697b      	ldr	r3, [r7, #20]
    35c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    35c4:	687b      	ldr	r3, [r7, #4]
    35c6:	fbb2 f3f3 	udiv	r3, r2, r3
    35ca:	61fb      	str	r3, [r7, #28]

					if( ulStatsAsPercentage > 0UL )
    35cc:	69fb      	ldr	r3, [r7, #28]
    35ce:	2b00      	cmp	r3, #0
    35d0:	d012      	beq.n	35f8 <prvGenerateRunTimeStatsForTasksInList+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t%u%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
    35d2:	697b      	ldr	r3, [r7, #20]
    35d4:	f103 0334 	add.w	r3, r3, #52	; 0x34
    35d8:	461a      	mov	r2, r3
    35da:	697b      	ldr	r3, [r7, #20]
    35dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    35de:	69f9      	ldr	r1, [r7, #28]
    35e0:	9100      	str	r1, [sp, #0]
    35e2:	f644 5030 	movw	r0, #19760	; 0x4d30
    35e6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    35ea:	f24b 21ec 	movw	r1, #45804	; 0xb2ec
    35ee:	f2c0 0100 	movt	r1, #0
    35f2:	f7fd fc6d 	bl	ed0 <sprintf>
    35f6:	e00f      	b.n	3618 <prvGenerateRunTimeStatsForTasksInList+0xec>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcStatsString, ( char * ) "%s\t\t%u\t\t<1%%\r\n", pxNextTCB->pcTaskName, ( unsigned int ) pxNextTCB->ulRunTimeCounter );
    35f8:	697b      	ldr	r3, [r7, #20]
    35fa:	f103 0334 	add.w	r3, r3, #52	; 0x34
    35fe:	461a      	mov	r2, r3
    3600:	697b      	ldr	r3, [r7, #20]
    3602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3604:	f644 5030 	movw	r0, #19760	; 0x4d30
    3608:	f2c1 0000 	movt	r0, #4096	; 0x1000
    360c:	f24b 21fc 	movw	r1, #45820	; 0xb2fc
    3610:	f2c0 0100 	movt	r1, #0
    3614:	f7fd fc5c 	bl	ed0 <sprintf>
						}
						#endif
					}
				}

				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
    3618:	68fb      	ldr	r3, [r7, #12]
    361a:	4618      	mov	r0, r3
    361c:	f644 5130 	movw	r1, #19760	; 0x4d30
    3620:	f2c1 0100 	movt	r1, #4096	; 0x1000
    3624:	f007 fe13 	bl	b24e <strcat>
			}

		} while( pxNextTCB != pxFirstTCB );
    3628:	697a      	ldr	r2, [r7, #20]
    362a:	69bb      	ldr	r3, [r7, #24]
    362c:	429a      	cmp	r2, r3
    362e:	d19a      	bne.n	3566 <prvGenerateRunTimeStatsForTasksInList+0x3a>
	}
    3630:	f107 0728 	add.w	r7, r7, #40	; 0x28
    3634:	46bd      	mov	sp, r7
    3636:	bd80      	pop	{r7, pc}

00003638 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    3638:	b490      	push	{r4, r7}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
    3640:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3644:	e006      	b.n	3654 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	f103 0301 	add.w	r3, r3, #1
    364c:	607b      	str	r3, [r7, #4]
			usCount++;
    364e:	f104 0301 	add.w	r3, r4, #1
    3652:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	2ba5      	cmp	r3, #165	; 0xa5
    365a:	d0f4      	beq.n	3646 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
    365c:	ea4f 0394 	mov.w	r3, r4, lsr #2
    3660:	b29c      	uxth	r4, r3

		return usCount;
    3662:	4623      	mov	r3, r4
	}
    3664:	4618      	mov	r0, r3
    3666:	f107 0708 	add.w	r7, r7, #8
    366a:	46bd      	mov	sp, r7
    366c:	bc90      	pop	{r4, r7}
    366e:	4770      	bx	lr

00003670 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
	{
    3670:	b580      	push	{r7, lr}
    3672:	b086      	sub	sp, #24
    3674:	af00      	add	r7, sp, #0
    3676:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	2b00      	cmp	r3, #0
    367c:	d105      	bne.n	368a <uxTaskGetStackHighWaterMark+0x1a>
    367e:	f644 4330 	movw	r3, #19504	; 0x4c30
    3682:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3686:	681b      	ldr	r3, [r3, #0]
    3688:	e000      	b.n	368c <uxTaskGetStackHighWaterMark+0x1c>
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	60fb      	str	r3, [r7, #12]

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    368e:	68fb      	ldr	r3, [r7, #12]
    3690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3692:	613b      	str	r3, [r7, #16]
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
    3694:	6938      	ldr	r0, [r7, #16]
    3696:	f7ff ffcf 	bl	3638 <usTaskCheckFreeStackSpace>
    369a:	4603      	mov	r3, r0
    369c:	617b      	str	r3, [r7, #20]

		return uxReturn;
    369e:	697b      	ldr	r3, [r7, #20]
	}
    36a0:	4618      	mov	r0, r3
    36a2:	f107 0718 	add.w	r7, r7, #24
    36a6:	46bd      	mov	sp, r7
    36a8:	bd80      	pop	{r7, pc}
    36aa:	bf00      	nop

000036ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    36ac:	b580      	push	{r7, lr}
    36ae:	b082      	sub	sp, #8
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    36b8:	4618      	mov	r0, r3
    36ba:	f7fd fd25 	bl	1108 <vPortFree>
		vPortFree( pxTCB );
    36be:	6878      	ldr	r0, [r7, #4]
    36c0:	f7fd fd22 	bl	1108 <vPortFree>
	}
    36c4:	f107 0708 	add.w	r7, r7, #8
    36c8:	46bd      	mov	sp, r7
    36ca:	bd80      	pop	{r7, pc}

000036cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    36cc:	b480      	push	{r7}
    36ce:	b083      	sub	sp, #12
    36d0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    36d2:	f644 4330 	movw	r3, #19504	; 0x4c30
    36d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    36da:	681b      	ldr	r3, [r3, #0]
    36dc:	607b      	str	r3, [r7, #4]

		return xReturn;
    36de:	687b      	ldr	r3, [r7, #4]
	}
    36e0:	4618      	mov	r0, r3
    36e2:	f107 070c 	add.w	r7, r7, #12
    36e6:	46bd      	mov	sp, r7
    36e8:	bc80      	pop	{r7}
    36ea:	4770      	bx	lr

000036ec <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    36ec:	b580      	push	{r7, lr}
    36ee:	b084      	sub	sp, #16
    36f0:	af00      	add	r7, sp, #0
    36f2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    36f8:	68fb      	ldr	r3, [r7, #12]
    36fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36fc:	f644 4330 	movw	r3, #19504	; 0x4c30
    3700:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3704:	681b      	ldr	r3, [r3, #0]
    3706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3708:	429a      	cmp	r2, r3
    370a:	d257      	bcs.n	37bc <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    370c:	f644 4330 	movw	r3, #19504	; 0x4c30
    3710:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3718:	f1c3 0205 	rsb	r2, r3, #5
    371c:	68fb      	ldr	r3, [r7, #12]
    371e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3720:	68fb      	ldr	r3, [r7, #12]
    3722:	6959      	ldr	r1, [r3, #20]
    3724:	68fb      	ldr	r3, [r7, #12]
    3726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3728:	4613      	mov	r3, r2
    372a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    372e:	4413      	add	r3, r2
    3730:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3734:	461a      	mov	r2, r3
    3736:	f644 4334 	movw	r3, #19508	; 0x4c34
    373a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    373e:	4413      	add	r3, r2
    3740:	4299      	cmp	r1, r3
    3742:	d133      	bne.n	37ac <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    3744:	68fb      	ldr	r3, [r7, #12]
    3746:	f103 0304 	add.w	r3, r3, #4
    374a:	4618      	mov	r0, r3
    374c:	f7fd fece 	bl	14ec <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3750:	f644 4330 	movw	r3, #19504	; 0x4c30
    3754:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3758:	681b      	ldr	r3, [r3, #0]
    375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    375c:	68fb      	ldr	r3, [r7, #12]
    375e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    3760:	68fb      	ldr	r3, [r7, #12]
    3762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3764:	f644 5314 	movw	r3, #19732	; 0x4d14
    3768:	f2c1 0300 	movt	r3, #4096	; 0x1000
    376c:	681b      	ldr	r3, [r3, #0]
    376e:	429a      	cmp	r2, r3
    3770:	d906      	bls.n	3780 <vTaskPriorityInherit+0x94>
    3772:	68fb      	ldr	r3, [r7, #12]
    3774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3776:	f644 5314 	movw	r3, #19732	; 0x4d14
    377a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    377e:	601a      	str	r2, [r3, #0]
    3780:	68fb      	ldr	r3, [r7, #12]
    3782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3784:	4613      	mov	r3, r2
    3786:	ea4f 0383 	mov.w	r3, r3, lsl #2
    378a:	4413      	add	r3, r2
    378c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3790:	461a      	mov	r2, r3
    3792:	f644 4334 	movw	r3, #19508	; 0x4c34
    3796:	f2c1 0300 	movt	r3, #4096	; 0x1000
    379a:	441a      	add	r2, r3
    379c:	68fb      	ldr	r3, [r7, #12]
    379e:	f103 0304 	add.w	r3, r3, #4
    37a2:	4610      	mov	r0, r2
    37a4:	4619      	mov	r1, r3
    37a6:	f7fd fe3f 	bl	1428 <vListInsertEnd>
    37aa:	e007      	b.n	37bc <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    37ac:	f644 4330 	movw	r3, #19504	; 0x4c30
    37b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    37b4:	681b      	ldr	r3, [r3, #0]
    37b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37b8:	68fb      	ldr	r3, [r7, #12]
    37ba:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    37bc:	f107 0710 	add.w	r7, r7, #16
    37c0:	46bd      	mov	sp, r7
    37c2:	bd80      	pop	{r7, pc}

000037c4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    37c4:	b580      	push	{r7, lr}
    37c6:	b084      	sub	sp, #16
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d03a      	beq.n	384c <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37da:	68fb      	ldr	r3, [r7, #12]
    37dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    37de:	429a      	cmp	r2, r3
    37e0:	d034      	beq.n	384c <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	f103 0304 	add.w	r3, r3, #4
    37e8:	4618      	mov	r0, r3
    37ea:	f7fd fe7f 	bl	14ec <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    37ee:	68fb      	ldr	r3, [r7, #12]
    37f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    37f2:	68fb      	ldr	r3, [r7, #12]
    37f4:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    37fa:	f1c3 0205 	rsb	r2, r3, #5
    37fe:	68fb      	ldr	r3, [r7, #12]
    3800:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    3802:	68fb      	ldr	r3, [r7, #12]
    3804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3806:	f644 5314 	movw	r3, #19732	; 0x4d14
    380a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	429a      	cmp	r2, r3
    3812:	d906      	bls.n	3822 <vTaskPriorityDisinherit+0x5e>
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3818:	f644 5314 	movw	r3, #19732	; 0x4d14
    381c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3820:	601a      	str	r2, [r3, #0]
    3822:	68fb      	ldr	r3, [r7, #12]
    3824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3826:	4613      	mov	r3, r2
    3828:	ea4f 0383 	mov.w	r3, r3, lsl #2
    382c:	4413      	add	r3, r2
    382e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3832:	461a      	mov	r2, r3
    3834:	f644 4334 	movw	r3, #19508	; 0x4c34
    3838:	f2c1 0300 	movt	r3, #4096	; 0x1000
    383c:	441a      	add	r2, r3
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	f103 0304 	add.w	r3, r3, #4
    3844:	4610      	mov	r0, r2
    3846:	4619      	mov	r1, r3
    3848:	f7fd fdee 	bl	1428 <vListInsertEnd>
			}
		}
	}
    384c:	f107 0710 	add.w	r7, r7, #16
    3850:	46bd      	mov	sp, r7
    3852:	bd80      	pop	{r7, pc}

00003854 <UARTPutChar>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	ch		Character to put
 * @return		None
 **********************************************************************/
void UARTPutChar (LPC_UART_TypeDef *UARTx, uint8_t ch)
{
    3854:	b580      	push	{r7, lr}
    3856:	b082      	sub	sp, #8
    3858:	af00      	add	r7, sp, #0
    385a:	6078      	str	r0, [r7, #4]
    385c:	460b      	mov	r3, r1
    385e:	70fb      	strb	r3, [r7, #3]
	UART_Send(UARTx, &ch, 1, BLOCKING);
    3860:	f107 0303 	add.w	r3, r7, #3
    3864:	6878      	ldr	r0, [r7, #4]
    3866:	4619      	mov	r1, r3
    3868:	f04f 0201 	mov.w	r2, #1
    386c:	f04f 0301 	mov.w	r3, #1
    3870:	f005 fd7a 	bl	9368 <UART_Send>
}
    3874:	f107 0708 	add.w	r7, r7, #8
    3878:	46bd      	mov	sp, r7
    387a:	bd80      	pop	{r7, pc}

0000387c <UARTGetChar>:
 * @brief		Get a character to UART port
 * @param[in]	UARTx	Pointer to UART peripheral
 * @return		character value that returned
 **********************************************************************/
uint8_t UARTGetChar (LPC_UART_TypeDef *UARTx)
{
    387c:	b580      	push	{r7, lr}
    387e:	b084      	sub	sp, #16
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
    3884:	f04f 0300 	mov.w	r3, #0
    3888:	73fb      	strb	r3, [r7, #15]
	UART_Receive(UARTx, &tmp, 1, BLOCKING);
    388a:	f107 030f 	add.w	r3, r7, #15
    388e:	6878      	ldr	r0, [r7, #4]
    3890:	4619      	mov	r1, r3
    3892:	f04f 0201 	mov.w	r2, #1
    3896:	f04f 0301 	mov.w	r3, #1
    389a:	f005 fdeb 	bl	9474 <UART_Receive>
	return(tmp);
    389e:	7bfb      	ldrb	r3, [r7, #15]
}
    38a0:	4618      	mov	r0, r3
    38a2:	f107 0710 	add.w	r7, r7, #16
    38a6:	46bd      	mov	sp, r7
    38a8:	bd80      	pop	{r7, pc}
    38aa:	bf00      	nop

000038ac <UARTPuts>:
 * @param[in]	UARTx 	Pointer to UART peripheral
 * @param[in]	str 	string to put
 * @return		None
 **********************************************************************/
void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b084      	sub	sp, #16
    38b0:	af00      	add	r7, sp, #0
    38b2:	6078      	str	r0, [r7, #4]
    38b4:	6039      	str	r1, [r7, #0]
	uint8_t *s = (uint8_t *) str;
    38b6:	683b      	ldr	r3, [r7, #0]
    38b8:	60fb      	str	r3, [r7, #12]

	while (*s)
    38ba:	e009      	b.n	38d0 <UARTPuts+0x24>
	{
		UARTPutChar(UARTx, *s++);
    38bc:	68fb      	ldr	r3, [r7, #12]
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	68fa      	ldr	r2, [r7, #12]
    38c2:	f102 0201 	add.w	r2, r2, #1
    38c6:	60fa      	str	r2, [r7, #12]
    38c8:	6878      	ldr	r0, [r7, #4]
    38ca:	4619      	mov	r1, r3
    38cc:	f7ff ffc2 	bl	3854 <UARTPutChar>
 **********************************************************************/
void UARTPuts(LPC_UART_TypeDef *UARTx, const void *str)
{
	uint8_t *s = (uint8_t *) str;

	while (*s)
    38d0:	68fb      	ldr	r3, [r7, #12]
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d1f1      	bne.n	38bc <UARTPuts+0x10>
	{
		UARTPutChar(UARTx, *s++);
	}
}
    38d8:	f107 0710 	add.w	r7, r7, #16
    38dc:	46bd      	mov	sp, r7
    38de:	bd80      	pop	{r7, pc}

000038e0 <UARTPuts_>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	str		String to put
 * @return		None
 **********************************************************************/
void UARTPuts_(LPC_UART_TypeDef *UARTx, const void *str)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
    38e8:	6039      	str	r1, [r7, #0]
	UARTPuts (UARTx, str);
    38ea:	6878      	ldr	r0, [r7, #4]
    38ec:	6839      	ldr	r1, [r7, #0]
    38ee:	f7ff ffdd 	bl	38ac <UARTPuts>
	UARTPuts (UARTx, "\n\r");
    38f2:	6878      	ldr	r0, [r7, #4]
    38f4:	f24b 3120 	movw	r1, #45856	; 0xb320
    38f8:	f2c0 0100 	movt	r1, #0
    38fc:	f7ff ffd6 	bl	38ac <UARTPuts>
}
    3900:	f107 0708 	add.w	r7, r7, #8
    3904:	46bd      	mov	sp, r7
    3906:	bd80      	pop	{r7, pc}

00003908 <UARTPutDec>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec(LPC_UART_TypeDef *UARTx, uint8_t decnum)
{
    3908:	b580      	push	{r7, lr}
    390a:	b084      	sub	sp, #16
    390c:	af00      	add	r7, sp, #0
    390e:	6078      	str	r0, [r7, #4]
    3910:	460b      	mov	r3, r1
    3912:	70fb      	strb	r3, [r7, #3]
	uint8_t c1=decnum%10;
    3914:	78fa      	ldrb	r2, [r7, #3]
    3916:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    391a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    391e:	fba3 1302 	umull	r1, r3, r3, r2
    3922:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3926:	460b      	mov	r3, r1
    3928:	ea4f 0383 	mov.w	r3, r3, lsl #2
    392c:	440b      	add	r3, r1
    392e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3932:	ebc3 0302 	rsb	r3, r3, r2
    3936:	737b      	strb	r3, [r7, #13]
	uint8_t c2=(decnum/10)%10;
    3938:	78fa      	ldrb	r2, [r7, #3]
    393a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    393e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3942:	fba3 1302 	umull	r1, r3, r3, r2
    3946:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    394a:	b2da      	uxtb	r2, r3
    394c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3950:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3954:	fba3 1302 	umull	r1, r3, r3, r2
    3958:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    395c:	460b      	mov	r3, r1
    395e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3962:	440b      	add	r3, r1
    3964:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3968:	ebc3 0302 	rsb	r3, r3, r2
    396c:	73bb      	strb	r3, [r7, #14]
	uint8_t c3=(decnum/100)%10;
    396e:	78fa      	ldrb	r2, [r7, #3]
    3970:	f248 531f 	movw	r3, #34079	; 0x851f
    3974:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    3978:	fba3 1302 	umull	r1, r3, r3, r2
    397c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3980:	b2da      	uxtb	r2, r3
    3982:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3986:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    398a:	fba3 1302 	umull	r1, r3, r3, r2
    398e:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3992:	460b      	mov	r3, r1
    3994:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3998:	440b      	add	r3, r1
    399a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    399e:	ebc3 0302 	rsb	r3, r3, r2
    39a2:	73fb      	strb	r3, [r7, #15]
	UARTPutChar(UARTx, '0'+c3);
    39a4:	7bfb      	ldrb	r3, [r7, #15]
    39a6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    39aa:	b2db      	uxtb	r3, r3
    39ac:	6878      	ldr	r0, [r7, #4]
    39ae:	4619      	mov	r1, r3
    39b0:	f7ff ff50 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    39b4:	7bbb      	ldrb	r3, [r7, #14]
    39b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    39ba:	b2db      	uxtb	r3, r3
    39bc:	6878      	ldr	r0, [r7, #4]
    39be:	4619      	mov	r1, r3
    39c0:	f7ff ff48 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    39c4:	7b7b      	ldrb	r3, [r7, #13]
    39c6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    39ca:	b2db      	uxtb	r3, r3
    39cc:	6878      	ldr	r0, [r7, #4]
    39ce:	4619      	mov	r1, r3
    39d0:	f7ff ff40 	bl	3854 <UARTPutChar>
}
    39d4:	f107 0710 	add.w	r7, r7, #16
    39d8:	46bd      	mov	sp, r7
    39da:	bd80      	pop	{r7, pc}

000039dc <UARTPutDec16>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec16(LPC_UART_TypeDef *UARTx, uint16_t decnum)
{
    39dc:	b580      	push	{r7, lr}
    39de:	b084      	sub	sp, #16
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	460b      	mov	r3, r1
    39e6:	807b      	strh	r3, [r7, #2]
	uint8_t c1=decnum%10;
    39e8:	887a      	ldrh	r2, [r7, #2]
    39ea:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    39ee:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    39f2:	fba3 1302 	umull	r1, r3, r3, r2
    39f6:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    39fa:	460b      	mov	r3, r1
    39fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a00:	440b      	add	r3, r1
    3a02:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3a06:	ebc3 0302 	rsb	r3, r3, r2
    3a0a:	b29b      	uxth	r3, r3
    3a0c:	72fb      	strb	r3, [r7, #11]
	uint8_t c2=(decnum/10)%10;
    3a0e:	887a      	ldrh	r2, [r7, #2]
    3a10:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3a14:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3a18:	fba3 1302 	umull	r1, r3, r3, r2
    3a1c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    3a20:	b29a      	uxth	r2, r3
    3a22:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3a26:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3a2a:	fba3 1302 	umull	r1, r3, r3, r2
    3a2e:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3a32:	460b      	mov	r3, r1
    3a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a38:	440b      	add	r3, r1
    3a3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3a3e:	ebc3 0302 	rsb	r3, r3, r2
    3a42:	b29b      	uxth	r3, r3
    3a44:	733b      	strb	r3, [r7, #12]
	uint8_t c3=(decnum/100)%10;
    3a46:	887a      	ldrh	r2, [r7, #2]
    3a48:	f248 531f 	movw	r3, #34079	; 0x851f
    3a4c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    3a50:	fba3 1302 	umull	r1, r3, r3, r2
    3a54:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3a58:	b29a      	uxth	r2, r3
    3a5a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3a5e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3a62:	fba3 1302 	umull	r1, r3, r3, r2
    3a66:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3a6a:	460b      	mov	r3, r1
    3a6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a70:	440b      	add	r3, r1
    3a72:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3a76:	ebc3 0302 	rsb	r3, r3, r2
    3a7a:	b29b      	uxth	r3, r3
    3a7c:	737b      	strb	r3, [r7, #13]
	uint8_t c4=(decnum/1000)%10;
    3a7e:	887a      	ldrh	r2, [r7, #2]
    3a80:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    3a84:	f2c1 0362 	movt	r3, #4194	; 0x1062
    3a88:	fba3 1302 	umull	r1, r3, r3, r2
    3a8c:	ea4f 1393 	mov.w	r3, r3, lsr #6
    3a90:	b29a      	uxth	r2, r3
    3a92:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3a96:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3a9a:	fba3 1302 	umull	r1, r3, r3, r2
    3a9e:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3aa2:	460b      	mov	r3, r1
    3aa4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3aa8:	440b      	add	r3, r1
    3aaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3aae:	ebc3 0302 	rsb	r3, r3, r2
    3ab2:	b29b      	uxth	r3, r3
    3ab4:	73bb      	strb	r3, [r7, #14]
	uint8_t c5=(decnum/10000)%10;
    3ab6:	887a      	ldrh	r2, [r7, #2]
    3ab8:	f241 7359 	movw	r3, #5977	; 0x1759
    3abc:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
    3ac0:	fba3 1302 	umull	r1, r3, r3, r2
    3ac4:	ea4f 3353 	mov.w	r3, r3, lsr #13
    3ac8:	b29a      	uxth	r2, r3
    3aca:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3ace:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3ad2:	fba3 1302 	umull	r1, r3, r3, r2
    3ad6:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3ada:	460b      	mov	r3, r1
    3adc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ae0:	440b      	add	r3, r1
    3ae2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3ae6:	ebc3 0302 	rsb	r3, r3, r2
    3aea:	b29b      	uxth	r3, r3
    3aec:	73fb      	strb	r3, [r7, #15]
	UARTPutChar(UARTx, '0'+c5);
    3aee:	7bfb      	ldrb	r3, [r7, #15]
    3af0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3af4:	b2db      	uxtb	r3, r3
    3af6:	6878      	ldr	r0, [r7, #4]
    3af8:	4619      	mov	r1, r3
    3afa:	f7ff feab 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c4);
    3afe:	7bbb      	ldrb	r3, [r7, #14]
    3b00:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3b04:	b2db      	uxtb	r3, r3
    3b06:	6878      	ldr	r0, [r7, #4]
    3b08:	4619      	mov	r1, r3
    3b0a:	f7ff fea3 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c3);
    3b0e:	7b7b      	ldrb	r3, [r7, #13]
    3b10:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3b14:	b2db      	uxtb	r3, r3
    3b16:	6878      	ldr	r0, [r7, #4]
    3b18:	4619      	mov	r1, r3
    3b1a:	f7ff fe9b 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    3b1e:	7b3b      	ldrb	r3, [r7, #12]
    3b20:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3b24:	b2db      	uxtb	r3, r3
    3b26:	6878      	ldr	r0, [r7, #4]
    3b28:	4619      	mov	r1, r3
    3b2a:	f7ff fe93 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    3b2e:	7afb      	ldrb	r3, [r7, #11]
    3b30:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3b34:	b2db      	uxtb	r3, r3
    3b36:	6878      	ldr	r0, [r7, #4]
    3b38:	4619      	mov	r1, r3
    3b3a:	f7ff fe8b 	bl	3854 <UARTPutChar>
}
    3b3e:	f107 0710 	add.w	r7, r7, #16
    3b42:	46bd      	mov	sp, r7
    3b44:	bd80      	pop	{r7, pc}
    3b46:	bf00      	nop

00003b48 <UARTPutDec32>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	decnum	Decimal number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutDec32(LPC_UART_TypeDef *UARTx, uint32_t decnum)
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b086      	sub	sp, #24
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
    3b50:	6039      	str	r1, [r7, #0]
	uint8_t c1=decnum%10;
    3b52:	6839      	ldr	r1, [r7, #0]
    3b54:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3b58:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3b5c:	fba3 2301 	umull	r2, r3, r3, r1
    3b60:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3b64:	4613      	mov	r3, r2
    3b66:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b6a:	4413      	add	r3, r2
    3b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3b70:	ebc3 0201 	rsb	r2, r3, r1
    3b74:	4613      	mov	r3, r2
    3b76:	73bb      	strb	r3, [r7, #14]
	uint8_t c2=(decnum/10)%10;
    3b78:	683a      	ldr	r2, [r7, #0]
    3b7a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3b7e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3b82:	fba3 1302 	umull	r1, r3, r3, r2
    3b86:	ea4f 01d3 	mov.w	r1, r3, lsr #3
    3b8a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3b8e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3b92:	fba3 2301 	umull	r2, r3, r3, r1
    3b96:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3b9a:	4613      	mov	r3, r2
    3b9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ba0:	4413      	add	r3, r2
    3ba2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3ba6:	ebc3 0201 	rsb	r2, r3, r1
    3baa:	4613      	mov	r3, r2
    3bac:	73fb      	strb	r3, [r7, #15]
	uint8_t c3=(decnum/100)%10;
    3bae:	683a      	ldr	r2, [r7, #0]
    3bb0:	f248 531f 	movw	r3, #34079	; 0x851f
    3bb4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    3bb8:	fba3 1302 	umull	r1, r3, r3, r2
    3bbc:	ea4f 1153 	mov.w	r1, r3, lsr #5
    3bc0:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3bc4:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3bc8:	fba3 2301 	umull	r2, r3, r3, r1
    3bcc:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3bd0:	4613      	mov	r3, r2
    3bd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3bd6:	4413      	add	r3, r2
    3bd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3bdc:	ebc3 0201 	rsb	r2, r3, r1
    3be0:	4613      	mov	r3, r2
    3be2:	743b      	strb	r3, [r7, #16]
	uint8_t c4=(decnum/1000)%10;
    3be4:	683a      	ldr	r2, [r7, #0]
    3be6:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    3bea:	f2c1 0362 	movt	r3, #4194	; 0x1062
    3bee:	fba3 1302 	umull	r1, r3, r3, r2
    3bf2:	ea4f 1193 	mov.w	r1, r3, lsr #6
    3bf6:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3bfa:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3bfe:	fba3 2301 	umull	r2, r3, r3, r1
    3c02:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3c06:	4613      	mov	r3, r2
    3c08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c0c:	4413      	add	r3, r2
    3c0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3c12:	ebc3 0201 	rsb	r2, r3, r1
    3c16:	4613      	mov	r3, r2
    3c18:	747b      	strb	r3, [r7, #17]
	uint8_t c5=(decnum/10000)%10;
    3c1a:	683a      	ldr	r2, [r7, #0]
    3c1c:	f241 7359 	movw	r3, #5977	; 0x1759
    3c20:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
    3c24:	fba3 1302 	umull	r1, r3, r3, r2
    3c28:	ea4f 3153 	mov.w	r1, r3, lsr #13
    3c2c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3c30:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3c34:	fba3 2301 	umull	r2, r3, r3, r1
    3c38:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3c3c:	4613      	mov	r3, r2
    3c3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c42:	4413      	add	r3, r2
    3c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3c48:	ebc3 0201 	rsb	r2, r3, r1
    3c4c:	4613      	mov	r3, r2
    3c4e:	74bb      	strb	r3, [r7, #18]
	uint8_t c6=(decnum/100000)%10;
    3c50:	683b      	ldr	r3, [r7, #0]
    3c52:	ea4f 1253 	mov.w	r2, r3, lsr #5
    3c56:	f645 23c5 	movw	r3, #23237	; 0x5ac5
    3c5a:	f6c0 237c 	movt	r3, #2684	; 0xa7c
    3c5e:	fba3 1302 	umull	r1, r3, r3, r2
    3c62:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    3c66:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3c6a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3c6e:	fba3 2301 	umull	r2, r3, r3, r1
    3c72:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3c76:	4613      	mov	r3, r2
    3c78:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c7c:	4413      	add	r3, r2
    3c7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3c82:	ebc3 0201 	rsb	r2, r3, r1
    3c86:	4613      	mov	r3, r2
    3c88:	74fb      	strb	r3, [r7, #19]
	uint8_t c7=(decnum/1000000)%10;
    3c8a:	683a      	ldr	r2, [r7, #0]
    3c8c:	f64d 6383 	movw	r3, #56963	; 0xde83
    3c90:	f2c4 331b 	movt	r3, #17179	; 0x431b
    3c94:	fba3 1302 	umull	r1, r3, r3, r2
    3c98:	ea4f 4193 	mov.w	r1, r3, lsr #18
    3c9c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3ca0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3ca4:	fba3 2301 	umull	r2, r3, r3, r1
    3ca8:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3cac:	4613      	mov	r3, r2
    3cae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3cb2:	4413      	add	r3, r2
    3cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3cb8:	ebc3 0201 	rsb	r2, r3, r1
    3cbc:	4613      	mov	r3, r2
    3cbe:	753b      	strb	r3, [r7, #20]
	uint8_t c8=(decnum/10000000)%10;
    3cc0:	683a      	ldr	r2, [r7, #0]
    3cc2:	f64c 236b 	movw	r3, #51819	; 0xca6b
    3cc6:	f6c6 335f 	movt	r3, #27487	; 0x6b5f
    3cca:	fba3 1302 	umull	r1, r3, r3, r2
    3cce:	ea4f 5193 	mov.w	r1, r3, lsr #22
    3cd2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3cd6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3cda:	fba3 2301 	umull	r2, r3, r3, r1
    3cde:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3ce2:	4613      	mov	r3, r2
    3ce4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ce8:	4413      	add	r3, r2
    3cea:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3cee:	ebc3 0201 	rsb	r2, r3, r1
    3cf2:	4613      	mov	r3, r2
    3cf4:	757b      	strb	r3, [r7, #21]
	uint8_t c9=(decnum/100000000)%10;
    3cf6:	683a      	ldr	r2, [r7, #0]
    3cf8:	f643 3389 	movw	r3, #15241	; 0x3b89
    3cfc:	f2c5 53e6 	movt	r3, #21990	; 0x55e6
    3d00:	fba3 1302 	umull	r1, r3, r3, r2
    3d04:	ea4f 6153 	mov.w	r1, r3, lsr #25
    3d08:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3d0c:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3d10:	fba3 2301 	umull	r2, r3, r3, r1
    3d14:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3d18:	4613      	mov	r3, r2
    3d1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d1e:	4413      	add	r3, r2
    3d20:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d24:	ebc3 0201 	rsb	r2, r3, r1
    3d28:	4613      	mov	r3, r2
    3d2a:	75bb      	strb	r3, [r7, #22]
	uint8_t c10=(decnum/1000000000)%10;
    3d2c:	683b      	ldr	r3, [r7, #0]
    3d2e:	ea4f 2253 	mov.w	r2, r3, lsr #9
    3d32:	f644 3383 	movw	r3, #19331	; 0x4b83
    3d36:	f2c0 0304 	movt	r3, #4
    3d3a:	fba3 1302 	umull	r1, r3, r3, r2
    3d3e:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    3d42:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    3d46:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    3d4a:	fba3 2301 	umull	r2, r3, r3, r1
    3d4e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    3d52:	4613      	mov	r3, r2
    3d54:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d58:	4413      	add	r3, r2
    3d5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3d5e:	ebc3 0201 	rsb	r2, r3, r1
    3d62:	4613      	mov	r3, r2
    3d64:	75fb      	strb	r3, [r7, #23]
	UARTPutChar(UARTx, '0'+c10);
    3d66:	7dfb      	ldrb	r3, [r7, #23]
    3d68:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3d6c:	b2db      	uxtb	r3, r3
    3d6e:	6878      	ldr	r0, [r7, #4]
    3d70:	4619      	mov	r1, r3
    3d72:	f7ff fd6f 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c9);
    3d76:	7dbb      	ldrb	r3, [r7, #22]
    3d78:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3d7c:	b2db      	uxtb	r3, r3
    3d7e:	6878      	ldr	r0, [r7, #4]
    3d80:	4619      	mov	r1, r3
    3d82:	f7ff fd67 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c8);
    3d86:	7d7b      	ldrb	r3, [r7, #21]
    3d88:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3d8c:	b2db      	uxtb	r3, r3
    3d8e:	6878      	ldr	r0, [r7, #4]
    3d90:	4619      	mov	r1, r3
    3d92:	f7ff fd5f 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c7);
    3d96:	7d3b      	ldrb	r3, [r7, #20]
    3d98:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3d9c:	b2db      	uxtb	r3, r3
    3d9e:	6878      	ldr	r0, [r7, #4]
    3da0:	4619      	mov	r1, r3
    3da2:	f7ff fd57 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c6);
    3da6:	7cfb      	ldrb	r3, [r7, #19]
    3da8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3dac:	b2db      	uxtb	r3, r3
    3dae:	6878      	ldr	r0, [r7, #4]
    3db0:	4619      	mov	r1, r3
    3db2:	f7ff fd4f 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c5);
    3db6:	7cbb      	ldrb	r3, [r7, #18]
    3db8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3dbc:	b2db      	uxtb	r3, r3
    3dbe:	6878      	ldr	r0, [r7, #4]
    3dc0:	4619      	mov	r1, r3
    3dc2:	f7ff fd47 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c4);
    3dc6:	7c7b      	ldrb	r3, [r7, #17]
    3dc8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3dcc:	b2db      	uxtb	r3, r3
    3dce:	6878      	ldr	r0, [r7, #4]
    3dd0:	4619      	mov	r1, r3
    3dd2:	f7ff fd3f 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c3);
    3dd6:	7c3b      	ldrb	r3, [r7, #16]
    3dd8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3ddc:	b2db      	uxtb	r3, r3
    3dde:	6878      	ldr	r0, [r7, #4]
    3de0:	4619      	mov	r1, r3
    3de2:	f7ff fd37 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c2);
    3de6:	7bfb      	ldrb	r3, [r7, #15]
    3de8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3dec:	b2db      	uxtb	r3, r3
    3dee:	6878      	ldr	r0, [r7, #4]
    3df0:	4619      	mov	r1, r3
    3df2:	f7ff fd2f 	bl	3854 <UARTPutChar>
	UARTPutChar(UARTx, '0'+c1);
    3df6:	7bbb      	ldrb	r3, [r7, #14]
    3df8:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3dfc:	b2db      	uxtb	r3, r3
    3dfe:	6878      	ldr	r0, [r7, #4]
    3e00:	4619      	mov	r1, r3
    3e02:	f7ff fd27 	bl	3854 <UARTPutChar>
}
    3e06:	f107 0718 	add.w	r7, r7, #24
    3e0a:	46bd      	mov	sp, r7
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	bf00      	nop

00003e10 <UARTPutHex>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (8-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex (LPC_UART_TypeDef *UARTx, uint8_t hexnum)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b084      	sub	sp, #16
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
    3e18:	460b      	mov	r3, r1
    3e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    3e1c:	6878      	ldr	r0, [r7, #4]
    3e1e:	f24b 3124 	movw	r1, #45860	; 0xb324
    3e22:	f2c0 0100 	movt	r1, #0
    3e26:	f7ff fd41 	bl	38ac <UARTPuts>
	i = 1;
    3e2a:	f04f 0301 	mov.w	r3, #1
    3e2e:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    3e30:	78fa      	ldrb	r2, [r7, #3]
    3e32:	7bfb      	ldrb	r3, [r7, #15]
    3e34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3e38:	fa42 f303 	asr.w	r3, r2, r3
    3e3c:	b2db      	uxtb	r3, r3
    3e3e:	f003 030f 	and.w	r3, r3, #15
    3e42:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    3e44:	7bbb      	ldrb	r3, [r7, #14]
    3e46:	2b09      	cmp	r3, #9
    3e48:	d904      	bls.n	3e54 <UARTPutHex+0x44>
    3e4a:	7bbb      	ldrb	r3, [r7, #14]
    3e4c:	f103 0337 	add.w	r3, r3, #55	; 0x37
    3e50:	b2db      	uxtb	r3, r3
    3e52:	e003      	b.n	3e5c <UARTPutHex+0x4c>
    3e54:	7bbb      	ldrb	r3, [r7, #14]
    3e56:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3e5a:	b2db      	uxtb	r3, r3
    3e5c:	6878      	ldr	r0, [r7, #4]
    3e5e:	4619      	mov	r1, r3
    3e60:	f7ff fcf8 	bl	3854 <UARTPutChar>
	} while (i--);
    3e64:	7bfb      	ldrb	r3, [r7, #15]
    3e66:	2b00      	cmp	r3, #0
    3e68:	bf0c      	ite	eq
    3e6a:	2300      	moveq	r3, #0
    3e6c:	2301      	movne	r3, #1
    3e6e:	b2db      	uxtb	r3, r3
    3e70:	7bfa      	ldrb	r2, [r7, #15]
    3e72:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    3e76:	73fa      	strb	r2, [r7, #15]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d1d9      	bne.n	3e30 <UARTPutHex+0x20>
}
    3e7c:	f107 0710 	add.w	r7, r7, #16
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}

00003e84 <UARTPutHex16>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (16-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex16 (LPC_UART_TypeDef *UARTx, uint16_t hexnum)
{
    3e84:	b580      	push	{r7, lr}
    3e86:	b084      	sub	sp, #16
    3e88:	af00      	add	r7, sp, #0
    3e8a:	6078      	str	r0, [r7, #4]
    3e8c:	460b      	mov	r3, r1
    3e8e:	807b      	strh	r3, [r7, #2]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    3e90:	6878      	ldr	r0, [r7, #4]
    3e92:	f24b 3124 	movw	r1, #45860	; 0xb324
    3e96:	f2c0 0100 	movt	r1, #0
    3e9a:	f7ff fd07 	bl	38ac <UARTPuts>
	i = 3;
    3e9e:	f04f 0303 	mov.w	r3, #3
    3ea2:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    3ea4:	887a      	ldrh	r2, [r7, #2]
    3ea6:	7bfb      	ldrb	r3, [r7, #15]
    3ea8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3eac:	fa42 f303 	asr.w	r3, r2, r3
    3eb0:	b2db      	uxtb	r3, r3
    3eb2:	f003 030f 	and.w	r3, r3, #15
    3eb6:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    3eb8:	7bbb      	ldrb	r3, [r7, #14]
    3eba:	2b09      	cmp	r3, #9
    3ebc:	d904      	bls.n	3ec8 <UARTPutHex16+0x44>
    3ebe:	7bbb      	ldrb	r3, [r7, #14]
    3ec0:	f103 0337 	add.w	r3, r3, #55	; 0x37
    3ec4:	b2db      	uxtb	r3, r3
    3ec6:	e003      	b.n	3ed0 <UARTPutHex16+0x4c>
    3ec8:	7bbb      	ldrb	r3, [r7, #14]
    3eca:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3ece:	b2db      	uxtb	r3, r3
    3ed0:	6878      	ldr	r0, [r7, #4]
    3ed2:	4619      	mov	r1, r3
    3ed4:	f7ff fcbe 	bl	3854 <UARTPutChar>
	} while (i--);
    3ed8:	7bfb      	ldrb	r3, [r7, #15]
    3eda:	2b00      	cmp	r3, #0
    3edc:	bf0c      	ite	eq
    3ede:	2300      	moveq	r3, #0
    3ee0:	2301      	movne	r3, #1
    3ee2:	b2db      	uxtb	r3, r3
    3ee4:	7bfa      	ldrb	r2, [r7, #15]
    3ee6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    3eea:	73fa      	strb	r2, [r7, #15]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d1d9      	bne.n	3ea4 <UARTPutHex16+0x20>
}
    3ef0:	f107 0710 	add.w	r7, r7, #16
    3ef4:	46bd      	mov	sp, r7
    3ef6:	bd80      	pop	{r7, pc}

00003ef8 <UARTPutHex32>:
 * @param[in]	UARTx	Pointer to UART peripheral
 * @param[in]	hexnum	Hex number (32-bit long)
 * @return		None
 **********************************************************************/
void UARTPutHex32 (LPC_UART_TypeDef *UARTx, uint32_t hexnum)
{
    3ef8:	b580      	push	{r7, lr}
    3efa:	b084      	sub	sp, #16
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
    3f00:	6039      	str	r1, [r7, #0]
	uint8_t nibble, i;

	UARTPuts(UARTx, "0x");
    3f02:	6878      	ldr	r0, [r7, #4]
    3f04:	f24b 3124 	movw	r1, #45860	; 0xb324
    3f08:	f2c0 0100 	movt	r1, #0
    3f0c:	f7ff fcce 	bl	38ac <UARTPuts>
	i = 7;
    3f10:	f04f 0307 	mov.w	r3, #7
    3f14:	73fb      	strb	r3, [r7, #15]
	do {
		nibble = (hexnum >> (4*i)) & 0x0F;
    3f16:	7bfb      	ldrb	r3, [r7, #15]
    3f18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f1c:	683a      	ldr	r2, [r7, #0]
    3f1e:	fa22 f303 	lsr.w	r3, r2, r3
    3f22:	b2db      	uxtb	r3, r3
    3f24:	f003 030f 	and.w	r3, r3, #15
    3f28:	73bb      	strb	r3, [r7, #14]
		UARTPutChar(UARTx, (nibble > 9) ? ('A' + nibble - 10) : ('0' + nibble));
    3f2a:	7bbb      	ldrb	r3, [r7, #14]
    3f2c:	2b09      	cmp	r3, #9
    3f2e:	d904      	bls.n	3f3a <UARTPutHex32+0x42>
    3f30:	7bbb      	ldrb	r3, [r7, #14]
    3f32:	f103 0337 	add.w	r3, r3, #55	; 0x37
    3f36:	b2db      	uxtb	r3, r3
    3f38:	e003      	b.n	3f42 <UARTPutHex32+0x4a>
    3f3a:	7bbb      	ldrb	r3, [r7, #14]
    3f3c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3f40:	b2db      	uxtb	r3, r3
    3f42:	6878      	ldr	r0, [r7, #4]
    3f44:	4619      	mov	r1, r3
    3f46:	f7ff fc85 	bl	3854 <UARTPutChar>
	} while (i--);
    3f4a:	7bfb      	ldrb	r3, [r7, #15]
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	bf0c      	ite	eq
    3f50:	2300      	moveq	r3, #0
    3f52:	2301      	movne	r3, #1
    3f54:	b2db      	uxtb	r3, r3
    3f56:	7bfa      	ldrb	r2, [r7, #15]
    3f58:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    3f5c:	73fa      	strb	r2, [r7, #15]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1d9      	bne.n	3f16 <UARTPutHex32+0x1e>
}
    3f62:	f107 0710 	add.w	r7, r7, #16
    3f66:	46bd      	mov	sp, r7
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	bf00      	nop

00003f6c <debug_frmwrk_init>:
 * @brief		Initialize Debug frame work through initializing UART port
 * @param[in]	None
 * @return		None
 **********************************************************************/
void debug_frmwrk_init(void)
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b084      	sub	sp, #16
    3f70:	af00      	add	r7, sp, #0

#if (USED_UART_DEBUG_PORT==0)
	/*
	 * Initialize UART0 pin connect
	 */
	PinCfg.Funcnum = 1;
    3f72:	f04f 0301 	mov.w	r3, #1
    3f76:	70bb      	strb	r3, [r7, #2]
	PinCfg.OpenDrain = 0;
    3f78:	f04f 0300 	mov.w	r3, #0
    3f7c:	713b      	strb	r3, [r7, #4]
	PinCfg.Pinmode = 0;
    3f7e:	f04f 0300 	mov.w	r3, #0
    3f82:	70fb      	strb	r3, [r7, #3]
	PinCfg.Pinnum = 2;
    3f84:	f04f 0302 	mov.w	r3, #2
    3f88:	707b      	strb	r3, [r7, #1]
	PinCfg.Portnum = 0;
    3f8a:	f04f 0300 	mov.w	r3, #0
    3f8e:	703b      	strb	r3, [r7, #0]
	PINSEL_ConfigPin(&PinCfg);
    3f90:	463b      	mov	r3, r7
    3f92:	4618      	mov	r0, r3
    3f94:	f002 fe62 	bl	6c5c <PINSEL_ConfigPin>
	PinCfg.Pinnum = 3;
    3f98:	f04f 0303 	mov.w	r3, #3
    3f9c:	707b      	strb	r3, [r7, #1]
	PINSEL_ConfigPin(&PinCfg);
    3f9e:	463b      	mov	r3, r7
    3fa0:	4618      	mov	r0, r3
    3fa2:	f002 fe5b 	bl	6c5c <PINSEL_ConfigPin>
	 * Baudrate = 9600bps
	 * 8 data bit
	 * 1 Stop bit
	 * None parity
	 */
	UART_ConfigStructInit(&UARTConfigStruct);
    3fa6:	f107 0308 	add.w	r3, r7, #8
    3faa:	4618      	mov	r0, r3
    3fac:	f005 f94a 	bl	9244 <UART_ConfigStructInit>

	// Re-configure baudrate to 115200bps
	UARTConfigStruct.Baud_rate = 115200;
    3fb0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    3fb4:	60bb      	str	r3, [r7, #8]

	// Initialize DEBUG_UART_PORT peripheral with given to corresponding parameter
	UART_Init(DEBUG_UART_PORT, &UARTConfigStruct);
    3fb6:	f107 0308 	add.w	r3, r7, #8
    3fba:	f24c 0000 	movw	r0, #49152	; 0xc000
    3fbe:	f2c4 0000 	movt	r0, #16384	; 0x4000
    3fc2:	4619      	mov	r1, r3
    3fc4:	f004 ff2a 	bl	8e1c <UART_Init>

	// Enable UART Transmit
	UART_TxCmd(DEBUG_UART_PORT, ENABLE);
    3fc8:	f24c 0000 	movw	r0, #49152	; 0xc000
    3fcc:	f2c4 0000 	movt	r0, #16384	; 0x4000
    3fd0:	f04f 0101 	mov.w	r1, #1
    3fd4:	f005 fe44 	bl	9c60 <UART_TxCmd>

	_db_msg	= UARTPuts;
    3fd8:	f245 035c 	movw	r3, #20572	; 0x505c
    3fdc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3fe0:	f643 02ad 	movw	r2, #14509	; 0x38ad
    3fe4:	f2c0 0200 	movt	r2, #0
    3fe8:	601a      	str	r2, [r3, #0]
	_db_msg_ = UARTPuts_;
    3fea:	f245 0364 	movw	r3, #20580	; 0x5064
    3fee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3ff2:	f643 02e1 	movw	r2, #14561	; 0x38e1
    3ff6:	f2c0 0200 	movt	r2, #0
    3ffa:	601a      	str	r2, [r3, #0]
	_db_char = UARTPutChar;
    3ffc:	f245 0368 	movw	r3, #20584	; 0x5068
    4000:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4004:	f643 0255 	movw	r2, #14421	; 0x3855
    4008:	f2c0 0200 	movt	r2, #0
    400c:	601a      	str	r2, [r3, #0]
	_db_hex = UARTPutHex;
    400e:	f245 036c 	movw	r3, #20588	; 0x506c
    4012:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4016:	f643 6211 	movw	r2, #15889	; 0x3e11
    401a:	f2c0 0200 	movt	r2, #0
    401e:	601a      	str	r2, [r3, #0]
	_db_hex_16 = UARTPutHex16;
    4020:	f245 0370 	movw	r3, #20592	; 0x5070
    4024:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4028:	f643 6285 	movw	r2, #16005	; 0x3e85
    402c:	f2c0 0200 	movt	r2, #0
    4030:	601a      	str	r2, [r3, #0]
	_db_hex_32 = UARTPutHex32;
    4032:	f245 0354 	movw	r3, #20564	; 0x5054
    4036:	f2c1 0300 	movt	r3, #4096	; 0x1000
    403a:	f643 62f9 	movw	r2, #16121	; 0x3ef9
    403e:	f2c0 0200 	movt	r2, #0
    4042:	601a      	str	r2, [r3, #0]
	_db_dec = UARTPutDec;
    4044:	f245 034c 	movw	r3, #20556	; 0x504c
    4048:	f2c1 0300 	movt	r3, #4096	; 0x1000
    404c:	f643 1209 	movw	r2, #14601	; 0x3909
    4050:	f2c0 0200 	movt	r2, #0
    4054:	601a      	str	r2, [r3, #0]
	_db_dec_16 = UARTPutDec16;
    4056:	f245 0358 	movw	r3, #20568	; 0x5058
    405a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    405e:	f643 12dd 	movw	r2, #14813	; 0x39dd
    4062:	f2c0 0200 	movt	r2, #0
    4066:	601a      	str	r2, [r3, #0]
	_db_dec_32 = UARTPutDec32;
    4068:	f245 0350 	movw	r3, #20560	; 0x5050
    406c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4070:	f643 3249 	movw	r2, #15177	; 0x3b49
    4074:	f2c0 0200 	movt	r2, #0
    4078:	601a      	str	r2, [r3, #0]
	_db_get_char = UARTGetChar;
    407a:	f245 0360 	movw	r3, #20576	; 0x5060
    407e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4082:	f643 027d 	movw	r2, #14461	; 0x387d
    4086:	f2c0 0200 	movt	r2, #0
    408a:	601a      	str	r2, [r3, #0]
}
    408c:	f107 0710 	add.w	r7, r7, #16
    4090:	46bd      	mov	sp, r7
    4092:	bd80      	pop	{r7, pc}

00004094 <CLKPWR_SetPCLKDiv>:
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
    4094:	b480      	push	{r7}
    4096:	b085      	sub	sp, #20
    4098:	af00      	add	r7, sp, #0
    409a:	6078      	str	r0, [r7, #4]
    409c:	6039      	str	r1, [r7, #0]
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	2b1f      	cmp	r3, #31
    40a2:	d903      	bls.n	40ac <CLKPWR_SetPCLKDiv+0x18>
    40a4:	687b      	ldr	r3, [r7, #4]
    40a6:	f1a3 0320 	sub.w	r3, r3, #32
    40aa:	e000      	b.n	40ae <CLKPWR_SetPCLKDiv+0x1a>
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	60fb      	str	r3, [r7, #12]

	/* PCLKSEL0 selected */
	if (ClkType < 32)
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	2b1f      	cmp	r3, #31
    40b4:	d827      	bhi.n	4106 <CLKPWR_SetPCLKDiv+0x72>
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
    40b6:	f24c 0300 	movw	r3, #49152	; 0xc000
    40ba:	f2c4 030f 	movt	r3, #16399	; 0x400f
    40be:	f24c 0200 	movw	r2, #49152	; 0xc000
    40c2:	f2c4 020f 	movt	r2, #16399	; 0x400f
    40c6:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
    40ca:	68fa      	ldr	r2, [r7, #12]
    40cc:	f04f 0003 	mov.w	r0, #3
    40d0:	fa00 f202 	lsl.w	r2, r0, r2
    40d4:	ea6f 0202 	mvn.w	r2, r2
    40d8:	ea01 0202 	and.w	r2, r1, r2
    40dc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    40e0:	f24c 0300 	movw	r3, #49152	; 0xc000
    40e4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    40e8:	f24c 0200 	movw	r2, #49152	; 0xc000
    40ec:	f2c4 020f 	movt	r2, #16399	; 0x400f
    40f0:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
    40f4:	68fa      	ldr	r2, [r7, #12]
    40f6:	6838      	ldr	r0, [r7, #0]
    40f8:	fa00 f202 	lsl.w	r2, r0, r2
    40fc:	ea41 0202 	orr.w	r2, r1, r2
    4100:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    4104:	e026      	b.n	4154 <CLKPWR_SetPCLKDiv+0xc0>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    4106:	f24c 0300 	movw	r3, #49152	; 0xc000
    410a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    410e:	f24c 0200 	movw	r2, #49152	; 0xc000
    4112:	f2c4 020f 	movt	r2, #16399	; 0x400f
    4116:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
    411a:	68fa      	ldr	r2, [r7, #12]
    411c:	f04f 0003 	mov.w	r0, #3
    4120:	fa00 f202 	lsl.w	r2, r0, r2
    4124:	ea6f 0202 	mvn.w	r2, r2
    4128:	ea01 0202 	and.w	r2, r1, r2
    412c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    4130:	f24c 0300 	movw	r3, #49152	; 0xc000
    4134:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4138:	f24c 0200 	movw	r2, #49152	; 0xc000
    413c:	f2c4 020f 	movt	r2, #16399	; 0x400f
    4140:	f8d2 11ac 	ldr.w	r1, [r2, #428]	; 0x1ac
    4144:	68fa      	ldr	r2, [r7, #12]
    4146:	6838      	ldr	r0, [r7, #0]
    4148:	fa00 f202 	lsl.w	r2, r0, r2
    414c:	ea41 0202 	orr.w	r2, r1, r2
    4150:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}
}
    4154:	f107 0714 	add.w	r7, r7, #20
    4158:	46bd      	mov	sp, r7
    415a:	bc80      	pop	{r7}
    415c:	4770      	bx	lr
    415e:	bf00      	nop

00004160 <CLKPWR_GetPCLKSEL>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock Selection
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
    4160:	b480      	push	{r7}
    4162:	b085      	sub	sp, #20
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	uint32_t bitpos, retval;

	if (ClkType < 32)
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	2b1f      	cmp	r3, #31
    416c:	d809      	bhi.n	4182 <CLKPWR_GetPCLKSEL+0x22>
	{
		bitpos = ClkType;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	60bb      	str	r3, [r7, #8]
		retval = LPC_SC->PCLKSEL0;
    4172:	f24c 0300 	movw	r3, #49152	; 0xc000
    4176:	f2c4 030f 	movt	r3, #16399	; 0x400f
    417a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    417e:	60fb      	str	r3, [r7, #12]
    4180:	e00a      	b.n	4198 <CLKPWR_GetPCLKSEL+0x38>
	}
	else
	{
		bitpos = ClkType - 32;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	f1a3 0320 	sub.w	r3, r3, #32
    4188:	60bb      	str	r3, [r7, #8]
		retval = LPC_SC->PCLKSEL1;
    418a:	f24c 0300 	movw	r3, #49152	; 0xc000
    418e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4192:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
    4196:	60fb      	str	r3, [r7, #12]
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
    4198:	68bb      	ldr	r3, [r7, #8]
    419a:	68fa      	ldr	r2, [r7, #12]
    419c:	fa22 f303 	lsr.w	r3, r2, r3
    41a0:	f003 0303 	and.w	r3, r3, #3
    41a4:	60fb      	str	r3, [r7, #12]
	return retval;
    41a6:	68fb      	ldr	r3, [r7, #12]
}
    41a8:	4618      	mov	r0, r3
    41aa:	f107 0714 	add.w	r7, r7, #20
    41ae:	46bd      	mov	sp, r7
    41b0:	bc80      	pop	{r7}
    41b2:	4770      	bx	lr

000041b4 <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
    41b4:	b580      	push	{r7, lr}
    41b6:	b084      	sub	sp, #16
    41b8:	af00      	add	r7, sp, #0
    41ba:	6078      	str	r0, [r7, #4]
	uint32_t retval, div;

	retval = SystemCoreClock;
    41bc:	f240 030c 	movw	r3, #12
    41c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    41c4:	681b      	ldr	r3, [r3, #0]
    41c6:	60bb      	str	r3, [r7, #8]
	div = CLKPWR_GetPCLKSEL(ClkType);
    41c8:	6878      	ldr	r0, [r7, #4]
    41ca:	f7ff ffc9 	bl	4160 <CLKPWR_GetPCLKSEL>
    41ce:	4603      	mov	r3, r0
    41d0:	60fb      	str	r3, [r7, #12]

	switch (div)
    41d2:	68fb      	ldr	r3, [r7, #12]
    41d4:	2b03      	cmp	r3, #3
    41d6:	d81a      	bhi.n	420e <CLKPWR_GetPCLK+0x5a>
    41d8:	a201      	add	r2, pc, #4	; (adr r2, 41e0 <CLKPWR_GetPCLK+0x2c>)
    41da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    41de:	bf00      	nop
    41e0:	000041f1 	.word	0x000041f1
    41e4:	000041f9 	.word	0x000041f9
    41e8:	00004201 	.word	0x00004201
    41ec:	00004209 	.word	0x00004209
	{
	case 0:
		div = 4;
    41f0:	f04f 0304 	mov.w	r3, #4
    41f4:	60fb      	str	r3, [r7, #12]
		break;
    41f6:	e00a      	b.n	420e <CLKPWR_GetPCLK+0x5a>

	case 1:
		div = 1;
    41f8:	f04f 0301 	mov.w	r3, #1
    41fc:	60fb      	str	r3, [r7, #12]
		break;
    41fe:	e006      	b.n	420e <CLKPWR_GetPCLK+0x5a>

	case 2:
		div = 2;
    4200:	f04f 0302 	mov.w	r3, #2
    4204:	60fb      	str	r3, [r7, #12]
		break;
    4206:	e002      	b.n	420e <CLKPWR_GetPCLK+0x5a>

	case 3:
		div = 8;
    4208:	f04f 0308 	mov.w	r3, #8
    420c:	60fb      	str	r3, [r7, #12]
		break;
	}
	retval /= div;
    420e:	68ba      	ldr	r2, [r7, #8]
    4210:	68fb      	ldr	r3, [r7, #12]
    4212:	fbb2 f3f3 	udiv	r3, r2, r3
    4216:	60bb      	str	r3, [r7, #8]

	return retval;
    4218:	68bb      	ldr	r3, [r7, #8]
}
    421a:	4618      	mov	r0, r3
    421c:	f107 0710 	add.w	r7, r7, #16
    4220:	46bd      	mov	sp, r7
    4222:	bd80      	pop	{r7, pc}

00004224 <CLKPWR_ConfigPPWR>:
 * 				- DISABLE	: Disable power for this peripheral
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
    4224:	b480      	push	{r7}
    4226:	b083      	sub	sp, #12
    4228:	af00      	add	r7, sp, #0
    422a:	6078      	str	r0, [r7, #4]
    422c:	460b      	mov	r3, r1
    422e:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE)
    4230:	78fb      	ldrb	r3, [r7, #3]
    4232:	2b01      	cmp	r3, #1
    4234:	d115      	bne.n	4262 <CLKPWR_ConfigPPWR+0x3e>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
    4236:	f24c 0200 	movw	r2, #49152	; 0xc000
    423a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    423e:	f24c 0300 	movw	r3, #49152	; 0xc000
    4242:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4246:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    424a:	6878      	ldr	r0, [r7, #4]
    424c:	f24f 73de 	movw	r3, #63454	; 0xf7de
    4250:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    4254:	ea00 0303 	and.w	r3, r0, r3
    4258:	ea41 0303 	orr.w	r3, r1, r3
    425c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    4260:	e019      	b.n	4296 <CLKPWR_ConfigPPWR+0x72>
	}
	else if (NewState == DISABLE)
    4262:	78fb      	ldrb	r3, [r7, #3]
    4264:	2b00      	cmp	r3, #0
    4266:	d116      	bne.n	4296 <CLKPWR_ConfigPPWR+0x72>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
    4268:	f24c 0200 	movw	r2, #49152	; 0xc000
    426c:	f2c4 020f 	movt	r2, #16399	; 0x400f
    4270:	f24c 0300 	movw	r3, #49152	; 0xc000
    4274:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4278:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	ea6f 0303 	mvn.w	r3, r3
    4282:	ea01 0103 	and.w	r1, r1, r3
    4286:	f24f 73de 	movw	r3, #63454	; 0xf7de
    428a:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    428e:	ea01 0303 	and.w	r3, r1, r3
    4292:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	}
}
    4296:	f107 070c 	add.w	r7, r7, #12
    429a:	46bd      	mov	sp, r7
    429c:	bc80      	pop	{r7}
    429e:	4770      	bx	lr

000042a0 <CLKPWR_Sleep>:
 * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
    42a0:	b480      	push	{r7}
    42a2:	af00      	add	r7, sp, #0
	LPC_SC->PCON = 0x00;
    42a4:	f24c 0300 	movw	r3, #49152	; 0xc000
    42a8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    42ac:	f04f 0200 	mov.w	r2, #0
    42b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    42b4:	bf30      	wfi
	/* Sleep Mode*/
	__WFI();
}
    42b6:	46bd      	mov	sp, r7
    42b8:	bc80      	pop	{r7}
    42ba:	4770      	bx	lr

000042bc <CLKPWR_DeepSleep>:
 * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    42bc:	b480      	push	{r7}
    42be:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    42c0:	f64e 5300 	movw	r3, #60672	; 0xed00
    42c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    42c8:	f04f 0204 	mov.w	r2, #4
    42cc:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
    42ce:	f24c 0300 	movw	r3, #49152	; 0xc000
    42d2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    42d6:	f04f 0208 	mov.w	r2, #8
    42da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    42de:	bf30      	wfi
	/* Deep Sleep Mode*/
	__WFI();
}
    42e0:	46bd      	mov	sp, r7
    42e2:	bc80      	pop	{r7}
    42e4:	4770      	bx	lr
    42e6:	bf00      	nop

000042e8 <CLKPWR_PowerDown>:
 * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    42e8:	b480      	push	{r7}
    42ea:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    42ec:	f64e 5300 	movw	r3, #60672	; 0xed00
    42f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    42f4:	f04f 0204 	mov.w	r2, #4
    42f8:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
    42fa:	f24c 0300 	movw	r3, #49152	; 0xc000
    42fe:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4302:	f04f 0209 	mov.w	r2, #9
    4306:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    430a:	bf30      	wfi
	/* Power Down Mode*/
	__WFI();
}
    430c:	46bd      	mov	sp, r7
    430e:	bc80      	pop	{r7}
    4310:	4770      	bx	lr
    4312:	bf00      	nop

00004314 <CLKPWR_DeepPowerDown>:
 * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    4314:	b480      	push	{r7}
    4316:	af00      	add	r7, sp, #0
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    4318:	f64e 5300 	movw	r3, #60672	; 0xed00
    431c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4320:	f04f 0204 	mov.w	r2, #4
    4324:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
    4326:	f24c 0300 	movw	r3, #49152	; 0xc000
    432a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    432e:	f04f 0203 	mov.w	r2, #3
    4332:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    4336:	bf30      	wfi
	/* Deep Power Down Mode*/
	__WFI();
}
    4338:	46bd      	mov	sp, r7
    433a:	bc80      	pop	{r7}
    433c:	4770      	bx	lr
    433e:	bf00      	nop

00004340 <EXTI_Init>:
 * 				- Set EXTINT, EXTMODE, EXTPOLAR registers to default value
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void EXTI_Init(void)
{
    4340:	b480      	push	{r7}
    4342:	af00      	add	r7, sp, #0
	LPC_SC->EXTINT = 0xF;
    4344:	f24c 0300 	movw	r3, #49152	; 0xc000
    4348:	f2c4 030f 	movt	r3, #16399	; 0x400f
    434c:	f04f 020f 	mov.w	r2, #15
    4350:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	LPC_SC->EXTMODE = 0x0;
    4354:	f24c 0300 	movw	r3, #49152	; 0xc000
    4358:	f2c4 030f 	movt	r3, #16399	; 0x400f
    435c:	f04f 0200 	mov.w	r2, #0
    4360:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	LPC_SC->EXTPOLAR = 0x0;
    4364:	f24c 0300 	movw	r3, #49152	; 0xc000
    4368:	f2c4 030f 	movt	r3, #16399	; 0x400f
    436c:	f04f 0200 	mov.w	r2, #0
    4370:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
    4374:	46bd      	mov	sp, r7
    4376:	bc80      	pop	{r7}
    4378:	4770      	bx	lr
    437a:	bf00      	nop

0000437c <EXTI_DeInit>:
* @brief 		Close EXT
* @param[in]	None
* @return 		None
**********************************************************************/
void	EXTI_DeInit(void)
{
    437c:	b480      	push	{r7}
    437e:	af00      	add	r7, sp, #0
	;
}
    4380:	46bd      	mov	sp, r7
    4382:	bc80      	pop	{r7}
    4384:	4770      	bx	lr
    4386:	bf00      	nop

00004388 <EXTI_Config>:
 *              that contains the configuration information for the
 *              specified external interrupt
 * @return 		None
 **********************************************************************/
void EXTI_Config(EXTI_InitTypeDef *EXTICfg)
{
    4388:	b580      	push	{r7, lr}
    438a:	b082      	sub	sp, #8
    438c:	af00      	add	r7, sp, #0
    438e:	6078      	str	r0, [r7, #4]
	LPC_SC->EXTINT = 0x0;
    4390:	f24c 0300 	movw	r3, #49152	; 0xc000
    4394:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4398:	f04f 0200 	mov.w	r2, #0
    439c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	EXTI_SetMode(EXTICfg->EXTI_Line, EXTICfg->EXTI_Mode);
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	781a      	ldrb	r2, [r3, #0]
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	785b      	ldrb	r3, [r3, #1]
    43a8:	4610      	mov	r0, r2
    43aa:	4619      	mov	r1, r3
    43ac:	f000 f80c 	bl	43c8 <EXTI_SetMode>
	EXTI_SetPolarity(EXTICfg->EXTI_Line, EXTICfg->EXTI_polarity);
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	687b      	ldr	r3, [r7, #4]
    43b6:	789b      	ldrb	r3, [r3, #2]
    43b8:	4610      	mov	r0, r2
    43ba:	4619      	mov	r1, r3
    43bc:	f000 f840 	bl	4440 <EXTI_SetPolarity>
}
    43c0:	f107 0708 	add.w	r7, r7, #8
    43c4:	46bd      	mov	sp, r7
    43c6:	bd80      	pop	{r7, pc}

000043c8 <EXTI_SetMode>:
* 				- EXTI_MODE_LEVEL_SENSITIVE
* 				- EXTI_MODE_EDGE_SENSITIVE
* @return 		None
*********************************************************************/
void EXTI_SetMode(EXTI_LINE_ENUM EXTILine, EXTI_MODE_ENUM mode)
{
    43c8:	b480      	push	{r7}
    43ca:	b083      	sub	sp, #12
    43cc:	af00      	add	r7, sp, #0
    43ce:	4602      	mov	r2, r0
    43d0:	460b      	mov	r3, r1
    43d2:	71fa      	strb	r2, [r7, #7]
    43d4:	71bb      	strb	r3, [r7, #6]
	if(mode == EXTI_MODE_EDGE_SENSITIVE)
    43d6:	79bb      	ldrb	r3, [r7, #6]
    43d8:	2b01      	cmp	r3, #1
    43da:	d113      	bne.n	4404 <EXTI_SetMode+0x3c>
	{
		LPC_SC->EXTMODE |= (1 << EXTILine);
    43dc:	f24c 0300 	movw	r3, #49152	; 0xc000
    43e0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    43e4:	f24c 0200 	movw	r2, #49152	; 0xc000
    43e8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    43ec:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
    43f0:	79fa      	ldrb	r2, [r7, #7]
    43f2:	f04f 0001 	mov.w	r0, #1
    43f6:	fa00 f202 	lsl.w	r2, r0, r2
    43fa:	ea41 0202 	orr.w	r2, r1, r2
    43fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    4402:	e017      	b.n	4434 <EXTI_SetMode+0x6c>
	}
	else if(mode == EXTI_MODE_LEVEL_SENSITIVE)
    4404:	79bb      	ldrb	r3, [r7, #6]
    4406:	2b00      	cmp	r3, #0
    4408:	d114      	bne.n	4434 <EXTI_SetMode+0x6c>
	{
		LPC_SC->EXTMODE &= ~(1 << EXTILine);
    440a:	f24c 0300 	movw	r3, #49152	; 0xc000
    440e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    4412:	f24c 0200 	movw	r2, #49152	; 0xc000
    4416:	f2c4 020f 	movt	r2, #16399	; 0x400f
    441a:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
    441e:	79fa      	ldrb	r2, [r7, #7]
    4420:	f04f 0001 	mov.w	r0, #1
    4424:	fa00 f202 	lsl.w	r2, r0, r2
    4428:	ea6f 0202 	mvn.w	r2, r2
    442c:	ea01 0202 	and.w	r2, r1, r2
    4430:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
}
    4434:	f107 070c 	add.w	r7, r7, #12
    4438:	46bd      	mov	sp, r7
    443a:	bc80      	pop	{r7}
    443c:	4770      	bx	lr
    443e:	bf00      	nop

00004440 <EXTI_SetPolarity>:
* 				- EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE
* 				- EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE
* @return 		None
*********************************************************************/
void EXTI_SetPolarity(EXTI_LINE_ENUM EXTILine, EXTI_POLARITY_ENUM polarity)
{
    4440:	b480      	push	{r7}
    4442:	b083      	sub	sp, #12
    4444:	af00      	add	r7, sp, #0
    4446:	4602      	mov	r2, r0
    4448:	460b      	mov	r3, r1
    444a:	71fa      	strb	r2, [r7, #7]
    444c:	71bb      	strb	r3, [r7, #6]
	if(polarity == EXTI_POLARITY_HIGH_ACTIVE_OR_RISING_EDGE)
    444e:	79bb      	ldrb	r3, [r7, #6]
    4450:	2b01      	cmp	r3, #1
    4452:	d113      	bne.n	447c <EXTI_SetPolarity+0x3c>
	{
		LPC_SC->EXTPOLAR |= (1 << EXTILine);
    4454:	f24c 0300 	movw	r3, #49152	; 0xc000
    4458:	f2c4 030f 	movt	r3, #16399	; 0x400f
    445c:	f24c 0200 	movw	r2, #49152	; 0xc000
    4460:	f2c4 020f 	movt	r2, #16399	; 0x400f
    4464:	f8d2 114c 	ldr.w	r1, [r2, #332]	; 0x14c
    4468:	79fa      	ldrb	r2, [r7, #7]
    446a:	f04f 0001 	mov.w	r0, #1
    446e:	fa00 f202 	lsl.w	r2, r0, r2
    4472:	ea41 0202 	orr.w	r2, r1, r2
    4476:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    447a:	e017      	b.n	44ac <EXTI_SetPolarity+0x6c>
	}
	else if(polarity == EXTI_POLARITY_LOW_ACTIVE_OR_FALLING_EDGE)
    447c:	79bb      	ldrb	r3, [r7, #6]
    447e:	2b00      	cmp	r3, #0
    4480:	d114      	bne.n	44ac <EXTI_SetPolarity+0x6c>
	{
		LPC_SC->EXTPOLAR &= ~(1 << EXTILine);
    4482:	f24c 0300 	movw	r3, #49152	; 0xc000
    4486:	f2c4 030f 	movt	r3, #16399	; 0x400f
    448a:	f24c 0200 	movw	r2, #49152	; 0xc000
    448e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    4492:	f8d2 114c 	ldr.w	r1, [r2, #332]	; 0x14c
    4496:	79fa      	ldrb	r2, [r7, #7]
    4498:	f04f 0001 	mov.w	r0, #1
    449c:	fa00 f202 	lsl.w	r2, r0, r2
    44a0:	ea6f 0202 	mvn.w	r2, r2
    44a4:	ea01 0202 	and.w	r2, r1, r2
    44a8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
}
    44ac:	f107 070c 	add.w	r7, r7, #12
    44b0:	46bd      	mov	sp, r7
    44b2:	bc80      	pop	{r7}
    44b4:	4770      	bx	lr
    44b6:	bf00      	nop

000044b8 <EXTI_ClearEXTIFlag>:
* 				- EXTI_EINT2: external interrupt line 2
* 				- EXTI_EINT3: external interrupt line 3
* @return 		None
*********************************************************************/
void EXTI_ClearEXTIFlag(EXTI_LINE_ENUM EXTILine)
{
    44b8:	b480      	push	{r7}
    44ba:	b083      	sub	sp, #12
    44bc:	af00      	add	r7, sp, #0
    44be:	4603      	mov	r3, r0
    44c0:	71fb      	strb	r3, [r7, #7]
		LPC_SC->EXTINT |= (1 << EXTILine);
    44c2:	f24c 0300 	movw	r3, #49152	; 0xc000
    44c6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    44ca:	f24c 0200 	movw	r2, #49152	; 0xc000
    44ce:	f2c4 020f 	movt	r2, #16399	; 0x400f
    44d2:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
    44d6:	79fa      	ldrb	r2, [r7, #7]
    44d8:	f04f 0001 	mov.w	r0, #1
    44dc:	fa00 f202 	lsl.w	r2, r0, r2
    44e0:	ea41 0202 	orr.w	r2, r1, r2
    44e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
    44e8:	f107 070c 	add.w	r7, r7, #12
    44ec:	46bd      	mov	sp, r7
    44ee:	bc80      	pop	{r7}
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop

000044f4 <GPIO_GetPointer>:
 * @brief		Get pointer to GPIO peripheral due to GPIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to GPIO peripheral
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
    44f4:	b480      	push	{r7}
    44f6:	b085      	sub	sp, #20
    44f8:	af00      	add	r7, sp, #0
    44fa:	4603      	mov	r3, r0
    44fc:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = NULL;
    44fe:	f04f 0300 	mov.w	r3, #0
    4502:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    4504:	79fb      	ldrb	r3, [r7, #7]
    4506:	2b04      	cmp	r3, #4
    4508:	d829      	bhi.n	455e <GPIO_GetPointer+0x6a>
    450a:	a201      	add	r2, pc, #4	; (adr r2, 4510 <GPIO_GetPointer+0x1c>)
    450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4510:	00004525 	.word	0x00004525
    4514:	00004531 	.word	0x00004531
    4518:	0000453d 	.word	0x0000453d
    451c:	00004549 	.word	0x00004549
    4520:	00004555 	.word	0x00004555
	case 0:
		pGPIO = LPC_GPIO0;
    4524:	f24c 0300 	movw	r3, #49152	; 0xc000
    4528:	f2c2 0309 	movt	r3, #8201	; 0x2009
    452c:	60fb      	str	r3, [r7, #12]
		break;
    452e:	e016      	b.n	455e <GPIO_GetPointer+0x6a>
	case 1:
		pGPIO = LPC_GPIO1;
    4530:	f24c 0320 	movw	r3, #49184	; 0xc020
    4534:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4538:	60fb      	str	r3, [r7, #12]
		break;
    453a:	e010      	b.n	455e <GPIO_GetPointer+0x6a>
	case 2:
		pGPIO = LPC_GPIO2;
    453c:	f24c 0340 	movw	r3, #49216	; 0xc040
    4540:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4544:	60fb      	str	r3, [r7, #12]
		break;
    4546:	e00a      	b.n	455e <GPIO_GetPointer+0x6a>
	case 3:
		pGPIO = LPC_GPIO3;
    4548:	f24c 0360 	movw	r3, #49248	; 0xc060
    454c:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4550:	60fb      	str	r3, [r7, #12]
		break;
    4552:	e004      	b.n	455e <GPIO_GetPointer+0x6a>
	case 4:
		pGPIO = LPC_GPIO4;
    4554:	f24c 0380 	movw	r3, #49280	; 0xc080
    4558:	f2c2 0309 	movt	r3, #8201	; 0x2009
    455c:	60fb      	str	r3, [r7, #12]
		break;
	default:
		break;
	}

	return pGPIO;
    455e:	68fb      	ldr	r3, [r7, #12]
}
    4560:	4618      	mov	r0, r3
    4562:	f107 0714 	add.w	r7, r7, #20
    4566:	46bd      	mov	sp, r7
    4568:	bc80      	pop	{r7}
    456a:	4770      	bx	lr

0000456c <FIO_HalfWordGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_HalfWord_TypeDef *FIO_HalfWordGetPointer(uint8_t portNum)
{
    456c:	b480      	push	{r7}
    456e:	b085      	sub	sp, #20
    4570:	af00      	add	r7, sp, #0
    4572:	4603      	mov	r3, r0
    4574:	71fb      	strb	r3, [r7, #7]
	GPIO_HalfWord_TypeDef *pFIO = NULL;
    4576:	f04f 0300 	mov.w	r3, #0
    457a:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    457c:	79fb      	ldrb	r3, [r7, #7]
    457e:	2b04      	cmp	r3, #4
    4580:	d829      	bhi.n	45d6 <FIO_HalfWordGetPointer+0x6a>
    4582:	a201      	add	r2, pc, #4	; (adr r2, 4588 <FIO_HalfWordGetPointer+0x1c>)
    4584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4588:	0000459d 	.word	0x0000459d
    458c:	000045a9 	.word	0x000045a9
    4590:	000045b5 	.word	0x000045b5
    4594:	000045c1 	.word	0x000045c1
    4598:	000045cd 	.word	0x000045cd
	case 0:
		pFIO = GPIO0_HalfWord;
    459c:	f24c 0300 	movw	r3, #49152	; 0xc000
    45a0:	f2c2 0309 	movt	r3, #8201	; 0x2009
    45a4:	60fb      	str	r3, [r7, #12]
		break;
    45a6:	e016      	b.n	45d6 <FIO_HalfWordGetPointer+0x6a>
	case 1:
		pFIO = GPIO1_HalfWord;
    45a8:	f24c 0320 	movw	r3, #49184	; 0xc020
    45ac:	f2c2 0309 	movt	r3, #8201	; 0x2009
    45b0:	60fb      	str	r3, [r7, #12]
		break;
    45b2:	e010      	b.n	45d6 <FIO_HalfWordGetPointer+0x6a>
	case 2:
		pFIO = GPIO2_HalfWord;
    45b4:	f24c 0340 	movw	r3, #49216	; 0xc040
    45b8:	f2c2 0309 	movt	r3, #8201	; 0x2009
    45bc:	60fb      	str	r3, [r7, #12]
		break;
    45be:	e00a      	b.n	45d6 <FIO_HalfWordGetPointer+0x6a>
	case 3:
		pFIO = GPIO3_HalfWord;
    45c0:	f24c 0360 	movw	r3, #49248	; 0xc060
    45c4:	f2c2 0309 	movt	r3, #8201	; 0x2009
    45c8:	60fb      	str	r3, [r7, #12]
		break;
    45ca:	e004      	b.n	45d6 <FIO_HalfWordGetPointer+0x6a>
	case 4:
		pFIO = GPIO4_HalfWord;
    45cc:	f24c 0380 	movw	r3, #49280	; 0xc080
    45d0:	f2c2 0309 	movt	r3, #8201	; 0x2009
    45d4:	60fb      	str	r3, [r7, #12]
		break;
	default:
		break;
	}

	return pFIO;
    45d6:	68fb      	ldr	r3, [r7, #12]
}
    45d8:	4618      	mov	r0, r3
    45da:	f107 0714 	add.w	r7, r7, #20
    45de:	46bd      	mov	sp, r7
    45e0:	bc80      	pop	{r7}
    45e2:	4770      	bx	lr

000045e4 <FIO_ByteGetPointer>:
 * 				due to FIO port
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to FIO peripheral
 **********************************************************************/
static GPIO_Byte_TypeDef *FIO_ByteGetPointer(uint8_t portNum)
{
    45e4:	b480      	push	{r7}
    45e6:	b085      	sub	sp, #20
    45e8:	af00      	add	r7, sp, #0
    45ea:	4603      	mov	r3, r0
    45ec:	71fb      	strb	r3, [r7, #7]
	GPIO_Byte_TypeDef *pFIO = NULL;
    45ee:	f04f 0300 	mov.w	r3, #0
    45f2:	60fb      	str	r3, [r7, #12]

	switch (portNum) {
    45f4:	79fb      	ldrb	r3, [r7, #7]
    45f6:	2b04      	cmp	r3, #4
    45f8:	d829      	bhi.n	464e <FIO_ByteGetPointer+0x6a>
    45fa:	a201      	add	r2, pc, #4	; (adr r2, 4600 <FIO_ByteGetPointer+0x1c>)
    45fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4600:	00004615 	.word	0x00004615
    4604:	00004621 	.word	0x00004621
    4608:	0000462d 	.word	0x0000462d
    460c:	00004639 	.word	0x00004639
    4610:	00004645 	.word	0x00004645
	case 0:
		pFIO = GPIO0_Byte;
    4614:	f24c 0300 	movw	r3, #49152	; 0xc000
    4618:	f2c2 0309 	movt	r3, #8201	; 0x2009
    461c:	60fb      	str	r3, [r7, #12]
		break;
    461e:	e016      	b.n	464e <FIO_ByteGetPointer+0x6a>
	case 1:
		pFIO = GPIO1_Byte;
    4620:	f24c 0320 	movw	r3, #49184	; 0xc020
    4624:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4628:	60fb      	str	r3, [r7, #12]
		break;
    462a:	e010      	b.n	464e <FIO_ByteGetPointer+0x6a>
	case 2:
		pFIO = GPIO2_Byte;
    462c:	f24c 0340 	movw	r3, #49216	; 0xc040
    4630:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4634:	60fb      	str	r3, [r7, #12]
		break;
    4636:	e00a      	b.n	464e <FIO_ByteGetPointer+0x6a>
	case 3:
		pFIO = GPIO3_Byte;
    4638:	f24c 0360 	movw	r3, #49248	; 0xc060
    463c:	f2c2 0309 	movt	r3, #8201	; 0x2009
    4640:	60fb      	str	r3, [r7, #12]
		break;
    4642:	e004      	b.n	464e <FIO_ByteGetPointer+0x6a>
	case 4:
		pFIO = GPIO4_Byte;
    4644:	f24c 0380 	movw	r3, #49280	; 0xc080
    4648:	f2c2 0309 	movt	r3, #8201	; 0x2009
    464c:	60fb      	str	r3, [r7, #12]
		break;
	default:
		break;
	}

	return pFIO;
    464e:	68fb      	ldr	r3, [r7, #12]
}
    4650:	4618      	mov	r0, r3
    4652:	f107 0714 	add.w	r7, r7, #20
    4656:	46bd      	mov	sp, r7
    4658:	bc80      	pop	{r7}
    465a:	4770      	bx	lr

0000465c <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    465c:	b580      	push	{r7, lr}
    465e:	b086      	sub	sp, #24
    4660:	af00      	add	r7, sp, #0
    4662:	60b9      	str	r1, [r7, #8]
    4664:	4613      	mov	r3, r2
    4666:	4602      	mov	r2, r0
    4668:	73fa      	strb	r2, [r7, #15]
    466a:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    466c:	7bfb      	ldrb	r3, [r7, #15]
    466e:	4618      	mov	r0, r3
    4670:	f7ff ff40 	bl	44f4 <GPIO_GetPointer>
    4674:	4603      	mov	r3, r0
    4676:	617b      	str	r3, [r7, #20]

	if (pGPIO != NULL) {
    4678:	697b      	ldr	r3, [r7, #20]
    467a:	2b00      	cmp	r3, #0
    467c:	d013      	beq.n	46a6 <GPIO_SetDir+0x4a>
		// Enable Output
		if (dir) {
    467e:	79fb      	ldrb	r3, [r7, #7]
    4680:	2b00      	cmp	r3, #0
    4682:	d007      	beq.n	4694 <GPIO_SetDir+0x38>
			pGPIO->FIODIR |= bitValue;
    4684:	697b      	ldr	r3, [r7, #20]
    4686:	681a      	ldr	r2, [r3, #0]
    4688:	68bb      	ldr	r3, [r7, #8]
    468a:	ea42 0203 	orr.w	r2, r2, r3
    468e:	697b      	ldr	r3, [r7, #20]
    4690:	601a      	str	r2, [r3, #0]
    4692:	e008      	b.n	46a6 <GPIO_SetDir+0x4a>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
    4694:	697b      	ldr	r3, [r7, #20]
    4696:	681a      	ldr	r2, [r3, #0]
    4698:	68bb      	ldr	r3, [r7, #8]
    469a:	ea6f 0303 	mvn.w	r3, r3
    469e:	ea02 0203 	and.w	r2, r2, r3
    46a2:	697b      	ldr	r3, [r7, #20]
    46a4:	601a      	str	r2, [r3, #0]
		}
	}
}
    46a6:	f107 0718 	add.w	r7, r7, #24
    46aa:	46bd      	mov	sp, r7
    46ac:	bd80      	pop	{r7, pc}
    46ae:	bf00      	nop

000046b0 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b084      	sub	sp, #16
    46b4:	af00      	add	r7, sp, #0
    46b6:	4603      	mov	r3, r0
    46b8:	6039      	str	r1, [r7, #0]
    46ba:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    46bc:	79fb      	ldrb	r3, [r7, #7]
    46be:	4618      	mov	r0, r3
    46c0:	f7ff ff18 	bl	44f4 <GPIO_GetPointer>
    46c4:	4603      	mov	r3, r0
    46c6:	60fb      	str	r3, [r7, #12]

	if (pGPIO != NULL) {
    46c8:	68fb      	ldr	r3, [r7, #12]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d002      	beq.n	46d4 <GPIO_SetValue+0x24>
		pGPIO->FIOSET = bitValue;
    46ce:	68fb      	ldr	r3, [r7, #12]
    46d0:	683a      	ldr	r2, [r7, #0]
    46d2:	619a      	str	r2, [r3, #24]
	}
}
    46d4:	f107 0710 	add.w	r7, r7, #16
    46d8:	46bd      	mov	sp, r7
    46da:	bd80      	pop	{r7, pc}

000046dc <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b084      	sub	sp, #16
    46e0:	af00      	add	r7, sp, #0
    46e2:	4603      	mov	r3, r0
    46e4:	6039      	str	r1, [r7, #0]
    46e6:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    46e8:	79fb      	ldrb	r3, [r7, #7]
    46ea:	4618      	mov	r0, r3
    46ec:	f7ff ff02 	bl	44f4 <GPIO_GetPointer>
    46f0:	4603      	mov	r3, r0
    46f2:	60fb      	str	r3, [r7, #12]

	if (pGPIO != NULL) {
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d002      	beq.n	4700 <GPIO_ClearValue+0x24>
		pGPIO->FIOCLR = bitValue;
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	683a      	ldr	r2, [r7, #0]
    46fe:	61da      	str	r2, [r3, #28]
	}
}
    4700:	f107 0710 	add.w	r7, r7, #16
    4704:	46bd      	mov	sp, r7
    4706:	bd80      	pop	{r7, pc}

00004708 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
    4708:	b580      	push	{r7, lr}
    470a:	b084      	sub	sp, #16
    470c:	af00      	add	r7, sp, #0
    470e:	4603      	mov	r3, r0
    4710:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    4712:	79fb      	ldrb	r3, [r7, #7]
    4714:	4618      	mov	r0, r3
    4716:	f7ff feed 	bl	44f4 <GPIO_GetPointer>
    471a:	4603      	mov	r3, r0
    471c:	60fb      	str	r3, [r7, #12]

	if (pGPIO != NULL) {
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	2b00      	cmp	r3, #0
    4722:	d002      	beq.n	472a <GPIO_ReadValue+0x22>
		return pGPIO->FIOPIN;
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	695b      	ldr	r3, [r3, #20]
    4728:	e001      	b.n	472e <GPIO_ReadValue+0x26>
	}

	return (0);
    472a:	f04f 0300 	mov.w	r3, #0
}
    472e:	4618      	mov	r0, r3
    4730:	f107 0710 	add.w	r7, r7, #16
    4734:	46bd      	mov	sp, r7
    4736:	bd80      	pop	{r7, pc}

00004738 <GPIO_IntCmd>:
 * 							- 0: Rising edge
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
    4738:	b480      	push	{r7}
    473a:	b085      	sub	sp, #20
    473c:	af00      	add	r7, sp, #0
    473e:	60b9      	str	r1, [r7, #8]
    4740:	4613      	mov	r3, r2
    4742:	4602      	mov	r2, r0
    4744:	73fa      	strb	r2, [r7, #15]
    4746:	71fb      	strb	r3, [r7, #7]
	if((portNum == 0)&&(edgeState == 0))
    4748:	7bfb      	ldrb	r3, [r7, #15]
    474a:	2b00      	cmp	r3, #0
    474c:	d109      	bne.n	4762 <GPIO_IntCmd+0x2a>
    474e:	79fb      	ldrb	r3, [r7, #7]
    4750:	2b00      	cmp	r3, #0
    4752:	d106      	bne.n	4762 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnR = bitValue;
    4754:	f248 0380 	movw	r3, #32896	; 0x8080
    4758:	f2c4 0302 	movt	r3, #16386	; 0x4002
    475c:	68ba      	ldr	r2, [r7, #8]
    475e:	611a      	str	r2, [r3, #16]
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
    4760:	e028      	b.n	47b4 <GPIO_IntCmd+0x7c>
		LPC_GPIOINT->IO0IntEnR = bitValue;
	else if ((portNum == 2)&&(edgeState == 0))
    4762:	7bfb      	ldrb	r3, [r7, #15]
    4764:	2b02      	cmp	r3, #2
    4766:	d109      	bne.n	477c <GPIO_IntCmd+0x44>
    4768:	79fb      	ldrb	r3, [r7, #7]
    476a:	2b00      	cmp	r3, #0
    476c:	d106      	bne.n	477c <GPIO_IntCmd+0x44>
		LPC_GPIOINT->IO2IntEnR = bitValue;
    476e:	f248 0380 	movw	r3, #32896	; 0x8080
    4772:	f2c4 0302 	movt	r3, #16386	; 0x4002
    4776:	68ba      	ldr	r2, [r7, #8]
    4778:	631a      	str	r2, [r3, #48]	; 0x30
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
		LPC_GPIOINT->IO0IntEnR = bitValue;
	else if ((portNum == 2)&&(edgeState == 0))
    477a:	e01b      	b.n	47b4 <GPIO_IntCmd+0x7c>
		LPC_GPIOINT->IO2IntEnR = bitValue;
	else if ((portNum == 0)&&(edgeState == 1))
    477c:	7bfb      	ldrb	r3, [r7, #15]
    477e:	2b00      	cmp	r3, #0
    4780:	d109      	bne.n	4796 <GPIO_IntCmd+0x5e>
    4782:	79fb      	ldrb	r3, [r7, #7]
    4784:	2b01      	cmp	r3, #1
    4786:	d106      	bne.n	4796 <GPIO_IntCmd+0x5e>
		LPC_GPIOINT->IO0IntEnF = bitValue;
    4788:	f248 0380 	movw	r3, #32896	; 0x8080
    478c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    4790:	68ba      	ldr	r2, [r7, #8]
    4792:	615a      	str	r2, [r3, #20]
{
	if((portNum == 0)&&(edgeState == 0))
		LPC_GPIOINT->IO0IntEnR = bitValue;
	else if ((portNum == 2)&&(edgeState == 0))
		LPC_GPIOINT->IO2IntEnR = bitValue;
	else if ((portNum == 0)&&(edgeState == 1))
    4794:	e00e      	b.n	47b4 <GPIO_IntCmd+0x7c>
		LPC_GPIOINT->IO0IntEnF = bitValue;
	else if ((portNum == 2)&&(edgeState == 1))
    4796:	7bfb      	ldrb	r3, [r7, #15]
    4798:	2b02      	cmp	r3, #2
    479a:	d10a      	bne.n	47b2 <GPIO_IntCmd+0x7a>
    479c:	79fb      	ldrb	r3, [r7, #7]
    479e:	2b01      	cmp	r3, #1
    47a0:	d107      	bne.n	47b2 <GPIO_IntCmd+0x7a>
		LPC_GPIOINT->IO2IntEnF = bitValue;
    47a2:	f248 0380 	movw	r3, #32896	; 0x8080
    47a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    47aa:	68ba      	ldr	r2, [r7, #8]
    47ac:	635a      	str	r2, [r3, #52]	; 0x34
		LPC_GPIOINT->IO0IntEnR = bitValue;
	else if ((portNum == 2)&&(edgeState == 0))
		LPC_GPIOINT->IO2IntEnR = bitValue;
	else if ((portNum == 0)&&(edgeState == 1))
		LPC_GPIOINT->IO0IntEnF = bitValue;
	else if ((portNum == 2)&&(edgeState == 1))
    47ae:	bf00      	nop
    47b0:	e000      	b.n	47b4 <GPIO_IntCmd+0x7c>
		LPC_GPIOINT->IO2IntEnF = bitValue;
	else
		//Error
		while(1);
    47b2:	e7fe      	b.n	47b2 <GPIO_IntCmd+0x7a>
}
    47b4:	f107 0714 	add.w	r7, r7, #20
    47b8:	46bd      	mov	sp, r7
    47ba:	bc80      	pop	{r7}
    47bc:	4770      	bx	lr
    47be:	bf00      	nop

000047c0 <GPIO_GetIntStatus>:
 * 						- ENABLE: Interrupt has been generated due to a rising
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
    47c0:	b480      	push	{r7}
    47c2:	b085      	sub	sp, #20
    47c4:	af00      	add	r7, sp, #0
    47c6:	60b9      	str	r1, [r7, #8]
    47c8:	4613      	mov	r3, r2
    47ca:	4602      	mov	r2, r0
    47cc:	73fa      	strb	r2, [r7, #15]
    47ce:	71fb      	strb	r3, [r7, #7]
	if((portNum == 0) && (edgeState == 0))//Rising Edge
    47d0:	7bfb      	ldrb	r3, [r7, #15]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d10e      	bne.n	47f4 <GPIO_GetIntStatus+0x34>
    47d6:	79fb      	ldrb	r3, [r7, #7]
    47d8:	2b00      	cmp	r3, #0
    47da:	d10b      	bne.n	47f4 <GPIO_GetIntStatus+0x34>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
    47dc:	f248 0380 	movw	r3, #32896	; 0x8080
    47e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    47e4:	685a      	ldr	r2, [r3, #4]
    47e6:	68bb      	ldr	r3, [r7, #8]
    47e8:	fa22 f303 	lsr.w	r3, r2, r3
    47ec:	b2db      	uxtb	r3, r3
    47ee:	f003 0301 	and.w	r3, r3, #1
    47f2:	e036      	b.n	4862 <GPIO_GetIntStatus+0xa2>
	else if ((portNum == 2) && (edgeState == 0))
    47f4:	7bfb      	ldrb	r3, [r7, #15]
    47f6:	2b02      	cmp	r3, #2
    47f8:	d10e      	bne.n	4818 <GPIO_GetIntStatus+0x58>
    47fa:	79fb      	ldrb	r3, [r7, #7]
    47fc:	2b00      	cmp	r3, #0
    47fe:	d10b      	bne.n	4818 <GPIO_GetIntStatus+0x58>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
    4800:	f248 0380 	movw	r3, #32896	; 0x8080
    4804:	f2c4 0302 	movt	r3, #16386	; 0x4002
    4808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    480a:	68bb      	ldr	r3, [r7, #8]
    480c:	fa22 f303 	lsr.w	r3, r2, r3
    4810:	b2db      	uxtb	r3, r3
    4812:	f003 0301 	and.w	r3, r3, #1
    4816:	e024      	b.n	4862 <GPIO_GetIntStatus+0xa2>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
    4818:	7bfb      	ldrb	r3, [r7, #15]
    481a:	2b00      	cmp	r3, #0
    481c:	d10e      	bne.n	483c <GPIO_GetIntStatus+0x7c>
    481e:	79fb      	ldrb	r3, [r7, #7]
    4820:	2b01      	cmp	r3, #1
    4822:	d10b      	bne.n	483c <GPIO_GetIntStatus+0x7c>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
    4824:	f248 0380 	movw	r3, #32896	; 0x8080
    4828:	f2c4 0302 	movt	r3, #16386	; 0x4002
    482c:	689a      	ldr	r2, [r3, #8]
    482e:	68bb      	ldr	r3, [r7, #8]
    4830:	fa22 f303 	lsr.w	r3, r2, r3
    4834:	b2db      	uxtb	r3, r3
    4836:	f003 0301 	and.w	r3, r3, #1
    483a:	e012      	b.n	4862 <GPIO_GetIntStatus+0xa2>
	else if ((portNum == 2) && (edgeState == 1))
    483c:	7bfb      	ldrb	r3, [r7, #15]
    483e:	2b02      	cmp	r3, #2
    4840:	d10e      	bne.n	4860 <GPIO_GetIntStatus+0xa0>
    4842:	79fb      	ldrb	r3, [r7, #7]
    4844:	2b01      	cmp	r3, #1
    4846:	d10b      	bne.n	4860 <GPIO_GetIntStatus+0xa0>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
    4848:	f248 0380 	movw	r3, #32896	; 0x8080
    484c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    4850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4852:	68bb      	ldr	r3, [r7, #8]
    4854:	fa22 f303 	lsr.w	r3, r2, r3
    4858:	b2db      	uxtb	r3, r3
    485a:	f003 0301 	and.w	r3, r3, #1
    485e:	e000      	b.n	4862 <GPIO_GetIntStatus+0xa2>
	else
		//Error
		while(1);
    4860:	e7fe      	b.n	4860 <GPIO_GetIntStatus+0xa0>
}
    4862:	4618      	mov	r0, r3
    4864:	f107 0714 	add.w	r7, r7, #20
    4868:	46bd      	mov	sp, r7
    486a:	bc80      	pop	{r7}
    486c:	4770      	bx	lr
    486e:	bf00      	nop

00004870 <GPIO_ClearInt>:
 * @param[in]	bitValue	Value that contains all bits on GPIO to enable,
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
    4870:	b480      	push	{r7}
    4872:	b083      	sub	sp, #12
    4874:	af00      	add	r7, sp, #0
    4876:	4603      	mov	r3, r0
    4878:	6039      	str	r1, [r7, #0]
    487a:	71fb      	strb	r3, [r7, #7]
	if(portNum == 0)
    487c:	79fb      	ldrb	r3, [r7, #7]
    487e:	2b00      	cmp	r3, #0
    4880:	d106      	bne.n	4890 <GPIO_ClearInt+0x20>
		LPC_GPIOINT->IO0IntClr = bitValue;
    4882:	f248 0380 	movw	r3, #32896	; 0x8080
    4886:	f2c4 0302 	movt	r3, #16386	; 0x4002
    488a:	683a      	ldr	r2, [r7, #0]
    488c:	60da      	str	r2, [r3, #12]
    488e:	e00a      	b.n	48a6 <GPIO_ClearInt+0x36>
	else if (portNum == 2)
    4890:	79fb      	ldrb	r3, [r7, #7]
    4892:	2b02      	cmp	r3, #2
    4894:	d106      	bne.n	48a4 <GPIO_ClearInt+0x34>
		LPC_GPIOINT->IO2IntClr = bitValue;
    4896:	f248 0380 	movw	r3, #32896	; 0x8080
    489a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    489e:	683a      	ldr	r2, [r7, #0]
    48a0:	62da      	str	r2, [r3, #44]	; 0x2c
    48a2:	e000      	b.n	48a6 <GPIO_ClearInt+0x36>
	else
		//Invalid portNum
		while(1);
    48a4:	e7fe      	b.n	48a4 <GPIO_ClearInt+0x34>
}
    48a6:	f107 070c 	add.w	r7, r7, #12
    48aa:	46bd      	mov	sp, r7
    48ac:	bc80      	pop	{r7}
    48ae:	4770      	bx	lr

000048b0 <FIO_SetDir>:

/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    48b0:	b580      	push	{r7, lr}
    48b2:	b084      	sub	sp, #16
    48b4:	af00      	add	r7, sp, #0
    48b6:	60b9      	str	r1, [r7, #8]
    48b8:	4613      	mov	r3, r2
    48ba:	4602      	mov	r2, r0
    48bc:	73fa      	strb	r2, [r7, #15]
    48be:	71fb      	strb	r3, [r7, #7]
	GPIO_SetDir(portNum, bitValue, dir);
    48c0:	7bfa      	ldrb	r2, [r7, #15]
    48c2:	79fb      	ldrb	r3, [r7, #7]
    48c4:	4610      	mov	r0, r2
    48c6:	68b9      	ldr	r1, [r7, #8]
    48c8:	461a      	mov	r2, r3
    48ca:	f7ff fec7 	bl	465c <GPIO_SetDir>
}
    48ce:	f107 0710 	add.w	r7, r7, #16
    48d2:	46bd      	mov	sp, r7
    48d4:	bd80      	pop	{r7, pc}
    48d6:	bf00      	nop

000048d8 <FIO_SetValue>:

/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	4603      	mov	r3, r0
    48e0:	6039      	str	r1, [r7, #0]
    48e2:	71fb      	strb	r3, [r7, #7]
	GPIO_SetValue(portNum, bitValue);
    48e4:	79fb      	ldrb	r3, [r7, #7]
    48e6:	4618      	mov	r0, r3
    48e8:	6839      	ldr	r1, [r7, #0]
    48ea:	f7ff fee1 	bl	46b0 <GPIO_SetValue>
}
    48ee:	f107 0708 	add.w	r7, r7, #8
    48f2:	46bd      	mov	sp, r7
    48f4:	bd80      	pop	{r7, pc}
    48f6:	bf00      	nop

000048f8 <FIO_ClearValue>:

/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    48f8:	b580      	push	{r7, lr}
    48fa:	b082      	sub	sp, #8
    48fc:	af00      	add	r7, sp, #0
    48fe:	4603      	mov	r3, r0
    4900:	6039      	str	r1, [r7, #0]
    4902:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearValue(portNum, bitValue);
    4904:	79fb      	ldrb	r3, [r7, #7]
    4906:	4618      	mov	r0, r3
    4908:	6839      	ldr	r1, [r7, #0]
    490a:	f7ff fee7 	bl	46dc <GPIO_ClearValue>
}
    490e:	f107 0708 	add.w	r7, r7, #8
    4912:	46bd      	mov	sp, r7
    4914:	bd80      	pop	{r7, pc}
    4916:	bf00      	nop

00004918 <FIO_ReadValue>:

/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
    4918:	b580      	push	{r7, lr}
    491a:	b082      	sub	sp, #8
    491c:	af00      	add	r7, sp, #0
    491e:	4603      	mov	r3, r0
    4920:	71fb      	strb	r3, [r7, #7]
	return (GPIO_ReadValue(portNum));
    4922:	79fb      	ldrb	r3, [r7, #7]
    4924:	4618      	mov	r0, r3
    4926:	f7ff feef 	bl	4708 <GPIO_ReadValue>
    492a:	4603      	mov	r3, r0
}
    492c:	4618      	mov	r0, r3
    492e:	f107 0708 	add.w	r7, r7, #8
    4932:	46bd      	mov	sp, r7
    4934:	bd80      	pop	{r7, pc}
    4936:	bf00      	nop

00004938 <FIO_IntCmd>:

/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
    4938:	b580      	push	{r7, lr}
    493a:	b084      	sub	sp, #16
    493c:	af00      	add	r7, sp, #0
    493e:	60b9      	str	r1, [r7, #8]
    4940:	4613      	mov	r3, r2
    4942:	4602      	mov	r2, r0
    4944:	73fa      	strb	r2, [r7, #15]
    4946:	71fb      	strb	r3, [r7, #7]
	GPIO_IntCmd(portNum, bitValue, edgeState);
    4948:	7bfa      	ldrb	r2, [r7, #15]
    494a:	79fb      	ldrb	r3, [r7, #7]
    494c:	4610      	mov	r0, r2
    494e:	68b9      	ldr	r1, [r7, #8]
    4950:	461a      	mov	r2, r3
    4952:	f7ff fef1 	bl	4738 <GPIO_IntCmd>
}
    4956:	f107 0710 	add.w	r7, r7, #16
    495a:	46bd      	mov	sp, r7
    495c:	bd80      	pop	{r7, pc}
    495e:	bf00      	nop

00004960 <FIO_GetIntStatus>:

/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
    4960:	b580      	push	{r7, lr}
    4962:	b084      	sub	sp, #16
    4964:	af00      	add	r7, sp, #0
    4966:	60b9      	str	r1, [r7, #8]
    4968:	4613      	mov	r3, r2
    496a:	4602      	mov	r2, r0
    496c:	73fa      	strb	r2, [r7, #15]
    496e:	71fb      	strb	r3, [r7, #7]
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
    4970:	7bfa      	ldrb	r2, [r7, #15]
    4972:	79fb      	ldrb	r3, [r7, #7]
    4974:	4610      	mov	r0, r2
    4976:	68b9      	ldr	r1, [r7, #8]
    4978:	461a      	mov	r2, r3
    497a:	f7ff ff21 	bl	47c0 <GPIO_GetIntStatus>
    497e:	4603      	mov	r3, r0
}
    4980:	4618      	mov	r0, r3
    4982:	f107 0710 	add.w	r7, r7, #16
    4986:	46bd      	mov	sp, r7
    4988:	bd80      	pop	{r7, pc}
    498a:	bf00      	nop

0000498c <FIO_ClearInt>:

/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
    498c:	b580      	push	{r7, lr}
    498e:	b082      	sub	sp, #8
    4990:	af00      	add	r7, sp, #0
    4992:	4603      	mov	r3, r0
    4994:	6039      	str	r1, [r7, #0]
    4996:	71fb      	strb	r3, [r7, #7]
	GPIO_ClearInt(portNum, bitValue);
    4998:	79fb      	ldrb	r3, [r7, #7]
    499a:	4618      	mov	r0, r3
    499c:	6839      	ldr	r1, [r7, #0]
    499e:	f7ff ff67 	bl	4870 <GPIO_ClearInt>
}
    49a2:	f107 0708 	add.w	r7, r7, #8
    49a6:	46bd      	mov	sp, r7
    49a8:	bd80      	pop	{r7, pc}
    49aa:	bf00      	nop

000049ac <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
    49ac:	b580      	push	{r7, lr}
    49ae:	b086      	sub	sp, #24
    49b0:	af00      	add	r7, sp, #0
    49b2:	60b9      	str	r1, [r7, #8]
    49b4:	4613      	mov	r3, r2
    49b6:	4602      	mov	r2, r0
    49b8:	73fa      	strb	r2, [r7, #15]
    49ba:	71fb      	strb	r3, [r7, #7]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
    49bc:	7bfb      	ldrb	r3, [r7, #15]
    49be:	4618      	mov	r0, r3
    49c0:	f7ff fd98 	bl	44f4 <GPIO_GetPointer>
    49c4:	4603      	mov	r3, r0
    49c6:	617b      	str	r3, [r7, #20]
	if(pFIO != NULL) {
    49c8:	697b      	ldr	r3, [r7, #20]
    49ca:	2b00      	cmp	r3, #0
    49cc:	d013      	beq.n	49f6 <FIO_SetMask+0x4a>
		// Mask
		if (maskValue){
    49ce:	79fb      	ldrb	r3, [r7, #7]
    49d0:	2b00      	cmp	r3, #0
    49d2:	d007      	beq.n	49e4 <FIO_SetMask+0x38>
			pFIO->FIOMASK |= bitValue;
    49d4:	697b      	ldr	r3, [r7, #20]
    49d6:	691a      	ldr	r2, [r3, #16]
    49d8:	68bb      	ldr	r3, [r7, #8]
    49da:	ea42 0203 	orr.w	r2, r2, r3
    49de:	697b      	ldr	r3, [r7, #20]
    49e0:	611a      	str	r2, [r3, #16]
    49e2:	e008      	b.n	49f6 <FIO_SetMask+0x4a>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
    49e4:	697b      	ldr	r3, [r7, #20]
    49e6:	691a      	ldr	r2, [r3, #16]
    49e8:	68bb      	ldr	r3, [r7, #8]
    49ea:	ea6f 0303 	mvn.w	r3, r3
    49ee:	ea02 0203 	and.w	r2, r2, r3
    49f2:	697b      	ldr	r3, [r7, #20]
    49f4:	611a      	str	r2, [r3, #16]
		}
	}
}
    49f6:	f107 0718 	add.w	r7, r7, #24
    49fa:	46bd      	mov	sp, r7
    49fc:	bd80      	pop	{r7, pc}
    49fe:	bf00      	nop

00004a00 <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	b084      	sub	sp, #16
    4a04:	af00      	add	r7, sp, #0
    4a06:	71f8      	strb	r0, [r7, #7]
    4a08:	71b9      	strb	r1, [r7, #6]
    4a0a:	80ba      	strh	r2, [r7, #4]
    4a0c:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    4a0e:	79fb      	ldrb	r3, [r7, #7]
    4a10:	4618      	mov	r0, r3
    4a12:	f7ff fdab 	bl	456c <FIO_HalfWordGetPointer>
    4a16:	4603      	mov	r3, r0
    4a18:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4a1a:	68fb      	ldr	r3, [r7, #12]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d039      	beq.n	4a94 <FIO_HalfWordSetDir+0x94>
		// Output direction
		if (dir) {
    4a20:	78fb      	ldrb	r3, [r7, #3]
    4a22:	2b00      	cmp	r3, #0
    4a24:	d016      	beq.n	4a54 <FIO_HalfWordSetDir+0x54>
			// Upper
			if(halfwordNum) {
    4a26:	79bb      	ldrb	r3, [r7, #6]
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d009      	beq.n	4a40 <FIO_HalfWordSetDir+0x40>
				pFIO->FIODIRU |= bitValue;
    4a2c:	68fb      	ldr	r3, [r7, #12]
    4a2e:	885b      	ldrh	r3, [r3, #2]
    4a30:	b29a      	uxth	r2, r3
    4a32:	88bb      	ldrh	r3, [r7, #4]
    4a34:	ea42 0303 	orr.w	r3, r2, r3
    4a38:	b29a      	uxth	r2, r3
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	805a      	strh	r2, [r3, #2]
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
    4a3e:	e029      	b.n	4a94 <FIO_HalfWordSetDir+0x94>
    4a40:	68fb      	ldr	r3, [r7, #12]
    4a42:	881b      	ldrh	r3, [r3, #0]
    4a44:	b29a      	uxth	r2, r3
    4a46:	88bb      	ldrh	r3, [r7, #4]
    4a48:	ea42 0303 	orr.w	r3, r2, r3
    4a4c:	b29a      	uxth	r2, r3
    4a4e:	68fb      	ldr	r3, [r7, #12]
    4a50:	801a      	strh	r2, [r3, #0]
    4a52:	e01f      	b.n	4a94 <FIO_HalfWordSetDir+0x94>
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
    4a54:	79bb      	ldrb	r3, [r7, #6]
    4a56:	2b00      	cmp	r3, #0
    4a58:	d00e      	beq.n	4a78 <FIO_HalfWordSetDir+0x78>
				pFIO->FIODIRU &= ~bitValue;
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	885b      	ldrh	r3, [r3, #2]
    4a5e:	b29b      	uxth	r3, r3
    4a60:	461a      	mov	r2, r3
    4a62:	88bb      	ldrh	r3, [r7, #4]
    4a64:	ea6f 0303 	mvn.w	r3, r3
    4a68:	b29b      	uxth	r3, r3
    4a6a:	ea02 0303 	and.w	r3, r2, r3
    4a6e:	b29b      	uxth	r3, r3
    4a70:	b29a      	uxth	r2, r3
    4a72:	68fb      	ldr	r3, [r7, #12]
    4a74:	805a      	strh	r2, [r3, #2]
    4a76:	e00d      	b.n	4a94 <FIO_HalfWordSetDir+0x94>
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
    4a78:	68fb      	ldr	r3, [r7, #12]
    4a7a:	881b      	ldrh	r3, [r3, #0]
    4a7c:	b29b      	uxth	r3, r3
    4a7e:	461a      	mov	r2, r3
    4a80:	88bb      	ldrh	r3, [r7, #4]
    4a82:	ea6f 0303 	mvn.w	r3, r3
    4a86:	b29b      	uxth	r3, r3
    4a88:	ea02 0303 	and.w	r3, r2, r3
    4a8c:	b29b      	uxth	r3, r3
    4a8e:	b29a      	uxth	r2, r3
    4a90:	68fb      	ldr	r3, [r7, #12]
    4a92:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
    4a94:	f107 0710 	add.w	r7, r7, #16
    4a98:	46bd      	mov	sp, r7
    4a9a:	bd80      	pop	{r7, pc}

00004a9c <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b084      	sub	sp, #16
    4aa0:	af00      	add	r7, sp, #0
    4aa2:	71f8      	strb	r0, [r7, #7]
    4aa4:	71b9      	strb	r1, [r7, #6]
    4aa6:	80ba      	strh	r2, [r7, #4]
    4aa8:	70fb      	strb	r3, [r7, #3]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    4aaa:	79fb      	ldrb	r3, [r7, #7]
    4aac:	4618      	mov	r0, r3
    4aae:	f7ff fd5d 	bl	456c <FIO_HalfWordGetPointer>
    4ab2:	4603      	mov	r3, r0
    4ab4:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4ab6:	68fb      	ldr	r3, [r7, #12]
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d039      	beq.n	4b30 <FIO_HalfWordSetMask+0x94>
		// Mask
		if (maskValue){
    4abc:	78fb      	ldrb	r3, [r7, #3]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d016      	beq.n	4af0 <FIO_HalfWordSetMask+0x54>
			// Upper
			if(halfwordNum) {
    4ac2:	79bb      	ldrb	r3, [r7, #6]
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d009      	beq.n	4adc <FIO_HalfWordSetMask+0x40>
				pFIO->FIOMASKU |= bitValue;
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	8a5b      	ldrh	r3, [r3, #18]
    4acc:	b29a      	uxth	r2, r3
    4ace:	88bb      	ldrh	r3, [r7, #4]
    4ad0:	ea42 0303 	orr.w	r3, r2, r3
    4ad4:	b29a      	uxth	r2, r3
    4ad6:	68fb      	ldr	r3, [r7, #12]
    4ad8:	825a      	strh	r2, [r3, #18]
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
    4ada:	e029      	b.n	4b30 <FIO_HalfWordSetMask+0x94>
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29a      	uxth	r2, r3
    4ae2:	88bb      	ldrh	r3, [r7, #4]
    4ae4:	ea42 0303 	orr.w	r3, r2, r3
    4ae8:	b29a      	uxth	r2, r3
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	821a      	strh	r2, [r3, #16]
    4aee:	e01f      	b.n	4b30 <FIO_HalfWordSetMask+0x94>
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
    4af0:	79bb      	ldrb	r3, [r7, #6]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d00e      	beq.n	4b14 <FIO_HalfWordSetMask+0x78>
				pFIO->FIOMASKU &= ~bitValue;
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	8a5b      	ldrh	r3, [r3, #18]
    4afa:	b29b      	uxth	r3, r3
    4afc:	461a      	mov	r2, r3
    4afe:	88bb      	ldrh	r3, [r7, #4]
    4b00:	ea6f 0303 	mvn.w	r3, r3
    4b04:	b29b      	uxth	r3, r3
    4b06:	ea02 0303 	and.w	r3, r2, r3
    4b0a:	b29b      	uxth	r3, r3
    4b0c:	b29a      	uxth	r2, r3
    4b0e:	68fb      	ldr	r3, [r7, #12]
    4b10:	825a      	strh	r2, [r3, #18]
    4b12:	e00d      	b.n	4b30 <FIO_HalfWordSetMask+0x94>
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
    4b14:	68fb      	ldr	r3, [r7, #12]
    4b16:	8a1b      	ldrh	r3, [r3, #16]
    4b18:	b29b      	uxth	r3, r3
    4b1a:	461a      	mov	r2, r3
    4b1c:	88bb      	ldrh	r3, [r7, #4]
    4b1e:	ea6f 0303 	mvn.w	r3, r3
    4b22:	b29b      	uxth	r3, r3
    4b24:	ea02 0303 	and.w	r3, r2, r3
    4b28:	b29b      	uxth	r3, r3
    4b2a:	b29a      	uxth	r2, r3
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	821a      	strh	r2, [r3, #16]
			}
		}
	}
}
    4b30:	f107 0710 	add.w	r7, r7, #16
    4b34:	46bd      	mov	sp, r7
    4b36:	bd80      	pop	{r7, pc}

00004b38 <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    4b38:	b580      	push	{r7, lr}
    4b3a:	b084      	sub	sp, #16
    4b3c:	af00      	add	r7, sp, #0
    4b3e:	4613      	mov	r3, r2
    4b40:	4602      	mov	r2, r0
    4b42:	71fa      	strb	r2, [r7, #7]
    4b44:	460a      	mov	r2, r1
    4b46:	71ba      	strb	r2, [r7, #6]
    4b48:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    4b4a:	79fb      	ldrb	r3, [r7, #7]
    4b4c:	4618      	mov	r0, r3
    4b4e:	f7ff fd0d 	bl	456c <FIO_HalfWordGetPointer>
    4b52:	4603      	mov	r3, r0
    4b54:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d009      	beq.n	4b70 <FIO_HalfWordSetValue+0x38>
		// Upper
		if(halfwordNum) {
    4b5c:	79bb      	ldrb	r3, [r7, #6]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d003      	beq.n	4b6a <FIO_HalfWordSetValue+0x32>
			pFIO->FIOSETU = bitValue;
    4b62:	68fb      	ldr	r3, [r7, #12]
    4b64:	88ba      	ldrh	r2, [r7, #4]
    4b66:	835a      	strh	r2, [r3, #26]
    4b68:	e002      	b.n	4b70 <FIO_HalfWordSetValue+0x38>
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
    4b6a:	68fb      	ldr	r3, [r7, #12]
    4b6c:	88ba      	ldrh	r2, [r7, #4]
    4b6e:	831a      	strh	r2, [r3, #24]
		}
	}
}
    4b70:	f107 0710 	add.w	r7, r7, #16
    4b74:	46bd      	mov	sp, r7
    4b76:	bd80      	pop	{r7, pc}

00004b78 <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b084      	sub	sp, #16
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	4613      	mov	r3, r2
    4b80:	4602      	mov	r2, r0
    4b82:	71fa      	strb	r2, [r7, #7]
    4b84:	460a      	mov	r2, r1
    4b86:	71ba      	strb	r2, [r7, #6]
    4b88:	80bb      	strh	r3, [r7, #4]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    4b8a:	79fb      	ldrb	r3, [r7, #7]
    4b8c:	4618      	mov	r0, r3
    4b8e:	f7ff fced 	bl	456c <FIO_HalfWordGetPointer>
    4b92:	4603      	mov	r3, r0
    4b94:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4b96:	68fb      	ldr	r3, [r7, #12]
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d009      	beq.n	4bb0 <FIO_HalfWordClearValue+0x38>
		// Upper
		if(halfwordNum) {
    4b9c:	79bb      	ldrb	r3, [r7, #6]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d003      	beq.n	4baa <FIO_HalfWordClearValue+0x32>
			pFIO->FIOCLRU = bitValue;
    4ba2:	68fb      	ldr	r3, [r7, #12]
    4ba4:	88ba      	ldrh	r2, [r7, #4]
    4ba6:	83da      	strh	r2, [r3, #30]
    4ba8:	e002      	b.n	4bb0 <FIO_HalfWordClearValue+0x38>
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
    4baa:	68fb      	ldr	r3, [r7, #12]
    4bac:	88ba      	ldrh	r2, [r7, #4]
    4bae:	839a      	strh	r2, [r3, #28]
		}
	}
}
    4bb0:	f107 0710 	add.w	r7, r7, #16
    4bb4:	46bd      	mov	sp, r7
    4bb6:	bd80      	pop	{r7, pc}

00004bb8 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
    4bb8:	b580      	push	{r7, lr}
    4bba:	b084      	sub	sp, #16
    4bbc:	af00      	add	r7, sp, #0
    4bbe:	4602      	mov	r2, r0
    4bc0:	460b      	mov	r3, r1
    4bc2:	71fa      	strb	r2, [r7, #7]
    4bc4:	71bb      	strb	r3, [r7, #6]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
    4bc6:	79fb      	ldrb	r3, [r7, #7]
    4bc8:	4618      	mov	r0, r3
    4bca:	f7ff fccf 	bl	456c <FIO_HalfWordGetPointer>
    4bce:	4603      	mov	r3, r0
    4bd0:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d00a      	beq.n	4bee <FIO_HalfWordReadValue+0x36>
		// Upper
		if(halfwordNum) {
    4bd8:	79bb      	ldrb	r3, [r7, #6]
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d003      	beq.n	4be6 <FIO_HalfWordReadValue+0x2e>
			return (pFIO->FIOPINU);
    4bde:	68fb      	ldr	r3, [r7, #12]
    4be0:	8adb      	ldrh	r3, [r3, #22]
    4be2:	b29b      	uxth	r3, r3
    4be4:	e005      	b.n	4bf2 <FIO_HalfWordReadValue+0x3a>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	8a9b      	ldrh	r3, [r3, #20]
    4bea:	b29b      	uxth	r3, r3
    4bec:	e001      	b.n	4bf2 <FIO_HalfWordReadValue+0x3a>
		}
	}
	return (0);
    4bee:	f04f 0300 	mov.w	r3, #0
}
    4bf2:	4618      	mov	r0, r3
    4bf4:	f107 0710 	add.w	r7, r7, #16
    4bf8:	46bd      	mov	sp, r7
    4bfa:	bd80      	pop	{r7, pc}

00004bfc <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b084      	sub	sp, #16
    4c00:	af00      	add	r7, sp, #0
    4c02:	71f8      	strb	r0, [r7, #7]
    4c04:	71b9      	strb	r1, [r7, #6]
    4c06:	717a      	strb	r2, [r7, #5]
    4c08:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4c0a:	79fb      	ldrb	r3, [r7, #7]
    4c0c:	4618      	mov	r0, r3
    4c0e:	f7ff fce9 	bl	45e4 <FIO_ByteGetPointer>
    4c12:	4603      	mov	r3, r0
    4c14:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4c16:	68fb      	ldr	r3, [r7, #12]
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d026      	beq.n	4c6a <FIO_ByteSetDir+0x6e>
		// Output direction
		if (dir) {
    4c1c:	793b      	ldrb	r3, [r7, #4]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d00e      	beq.n	4c40 <FIO_ByteSetDir+0x44>
			if (byteNum <= 3) {
    4c22:	79bb      	ldrb	r3, [r7, #6]
    4c24:	2b03      	cmp	r3, #3
    4c26:	d81f      	bhi.n	4c68 <FIO_ByteSetDir+0x6c>
				pFIO->FIODIR[byteNum] |= bitValue;
    4c28:	79bb      	ldrb	r3, [r7, #6]
    4c2a:	79ba      	ldrb	r2, [r7, #6]
    4c2c:	68f9      	ldr	r1, [r7, #12]
    4c2e:	5c8a      	ldrb	r2, [r1, r2]
    4c30:	b2d1      	uxtb	r1, r2
    4c32:	797a      	ldrb	r2, [r7, #5]
    4c34:	ea41 0202 	orr.w	r2, r1, r2
    4c38:	b2d1      	uxtb	r1, r2
    4c3a:	68fa      	ldr	r2, [r7, #12]
    4c3c:	54d1      	strb	r1, [r2, r3]
    4c3e:	e014      	b.n	4c6a <FIO_ByteSetDir+0x6e>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
    4c40:	79bb      	ldrb	r3, [r7, #6]
    4c42:	2b03      	cmp	r3, #3
    4c44:	d811      	bhi.n	4c6a <FIO_ByteSetDir+0x6e>
				pFIO->FIODIR[byteNum] &= ~bitValue;
    4c46:	79bb      	ldrb	r3, [r7, #6]
    4c48:	79ba      	ldrb	r2, [r7, #6]
    4c4a:	68f9      	ldr	r1, [r7, #12]
    4c4c:	5c8a      	ldrb	r2, [r1, r2]
    4c4e:	b2d2      	uxtb	r2, r2
    4c50:	4611      	mov	r1, r2
    4c52:	797a      	ldrb	r2, [r7, #5]
    4c54:	ea6f 0202 	mvn.w	r2, r2
    4c58:	b2d2      	uxtb	r2, r2
    4c5a:	ea01 0202 	and.w	r2, r1, r2
    4c5e:	b2d2      	uxtb	r2, r2
    4c60:	b2d1      	uxtb	r1, r2
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	54d1      	strb	r1, [r2, r3]
    4c66:	e000      	b.n	4c6a <FIO_ByteSetDir+0x6e>
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
		// Output direction
		if (dir) {
			if (byteNum <= 3) {
				pFIO->FIODIR[byteNum] |= bitValue;
    4c68:	bf00      	nop
			if (byteNum <= 3) {
				pFIO->FIODIR[byteNum] &= ~bitValue;
			}
		}
	}
}
    4c6a:	f107 0710 	add.w	r7, r7, #16
    4c6e:	46bd      	mov	sp, r7
    4c70:	bd80      	pop	{r7, pc}
    4c72:	bf00      	nop

00004c74 <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
    4c74:	b580      	push	{r7, lr}
    4c76:	b084      	sub	sp, #16
    4c78:	af00      	add	r7, sp, #0
    4c7a:	71f8      	strb	r0, [r7, #7]
    4c7c:	71b9      	strb	r1, [r7, #6]
    4c7e:	717a      	strb	r2, [r7, #5]
    4c80:	713b      	strb	r3, [r7, #4]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4c82:	79fb      	ldrb	r3, [r7, #7]
    4c84:	4618      	mov	r0, r3
    4c86:	f7ff fcad 	bl	45e4 <FIO_ByteGetPointer>
    4c8a:	4603      	mov	r3, r0
    4c8c:	60fb      	str	r3, [r7, #12]
	if(pFIO != NULL) {
    4c8e:	68fb      	ldr	r3, [r7, #12]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d02a      	beq.n	4cea <FIO_ByteSetMask+0x76>
		// Mask
		if (maskValue) {
    4c94:	793b      	ldrb	r3, [r7, #4]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d010      	beq.n	4cbc <FIO_ByteSetMask+0x48>
			if (byteNum <= 3) {
    4c9a:	79bb      	ldrb	r3, [r7, #6]
    4c9c:	2b03      	cmp	r3, #3
    4c9e:	d823      	bhi.n	4ce8 <FIO_ByteSetMask+0x74>
				pFIO->FIOMASK[byteNum] |= bitValue;
    4ca0:	79b9      	ldrb	r1, [r7, #6]
    4ca2:	79ba      	ldrb	r2, [r7, #6]
    4ca4:	68fb      	ldr	r3, [r7, #12]
    4ca6:	4413      	add	r3, r2
    4ca8:	7c1b      	ldrb	r3, [r3, #16]
    4caa:	b2da      	uxtb	r2, r3
    4cac:	797b      	ldrb	r3, [r7, #5]
    4cae:	ea42 0303 	orr.w	r3, r2, r3
    4cb2:	b2da      	uxtb	r2, r3
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	440b      	add	r3, r1
    4cb8:	741a      	strb	r2, [r3, #16]
    4cba:	e016      	b.n	4cea <FIO_ByteSetMask+0x76>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
    4cbc:	79bb      	ldrb	r3, [r7, #6]
    4cbe:	2b03      	cmp	r3, #3
    4cc0:	d813      	bhi.n	4cea <FIO_ByteSetMask+0x76>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
    4cc2:	79b9      	ldrb	r1, [r7, #6]
    4cc4:	79ba      	ldrb	r2, [r7, #6]
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	4413      	add	r3, r2
    4cca:	7c1b      	ldrb	r3, [r3, #16]
    4ccc:	b2db      	uxtb	r3, r3
    4cce:	461a      	mov	r2, r3
    4cd0:	797b      	ldrb	r3, [r7, #5]
    4cd2:	ea6f 0303 	mvn.w	r3, r3
    4cd6:	b2db      	uxtb	r3, r3
    4cd8:	ea02 0303 	and.w	r3, r2, r3
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	b2da      	uxtb	r2, r3
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	440b      	add	r3, r1
    4ce4:	741a      	strb	r2, [r3, #16]
    4ce6:	e000      	b.n	4cea <FIO_ByteSetMask+0x76>
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
		// Mask
		if (maskValue) {
			if (byteNum <= 3) {
				pFIO->FIOMASK[byteNum] |= bitValue;
    4ce8:	bf00      	nop
			if (byteNum <= 3) {
				pFIO->FIOMASK[byteNum] &= ~bitValue;
			}
		}
	}
}
    4cea:	f107 0710 	add.w	r7, r7, #16
    4cee:	46bd      	mov	sp, r7
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	bf00      	nop

00004cf4 <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	b084      	sub	sp, #16
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	4613      	mov	r3, r2
    4cfc:	4602      	mov	r2, r0
    4cfe:	71fa      	strb	r2, [r7, #7]
    4d00:	460a      	mov	r2, r1
    4d02:	71ba      	strb	r2, [r7, #6]
    4d04:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4d06:	79fb      	ldrb	r3, [r7, #7]
    4d08:	4618      	mov	r0, r3
    4d0a:	f7ff fc6b 	bl	45e4 <FIO_ByteGetPointer>
    4d0e:	4603      	mov	r3, r0
    4d10:	60fb      	str	r3, [r7, #12]
	if (pFIO != NULL) {
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	2b00      	cmp	r3, #0
    4d16:	d007      	beq.n	4d28 <FIO_ByteSetValue+0x34>
		if (byteNum <= 3){
    4d18:	79bb      	ldrb	r3, [r7, #6]
    4d1a:	2b03      	cmp	r3, #3
    4d1c:	d804      	bhi.n	4d28 <FIO_ByteSetValue+0x34>
			pFIO->FIOSET[byteNum] = bitValue;
    4d1e:	79ba      	ldrb	r2, [r7, #6]
    4d20:	68fb      	ldr	r3, [r7, #12]
    4d22:	4413      	add	r3, r2
    4d24:	797a      	ldrb	r2, [r7, #5]
    4d26:	761a      	strb	r2, [r3, #24]
		}
	}
}
    4d28:	f107 0710 	add.w	r7, r7, #16
    4d2c:	46bd      	mov	sp, r7
    4d2e:	bd80      	pop	{r7, pc}

00004d30 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b084      	sub	sp, #16
    4d34:	af00      	add	r7, sp, #0
    4d36:	4613      	mov	r3, r2
    4d38:	4602      	mov	r2, r0
    4d3a:	71fa      	strb	r2, [r7, #7]
    4d3c:	460a      	mov	r2, r1
    4d3e:	71ba      	strb	r2, [r7, #6]
    4d40:	717b      	strb	r3, [r7, #5]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4d42:	79fb      	ldrb	r3, [r7, #7]
    4d44:	4618      	mov	r0, r3
    4d46:	f7ff fc4d 	bl	45e4 <FIO_ByteGetPointer>
    4d4a:	4603      	mov	r3, r0
    4d4c:	60fb      	str	r3, [r7, #12]
	if (pFIO != NULL) {
    4d4e:	68fb      	ldr	r3, [r7, #12]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d007      	beq.n	4d64 <FIO_ByteClearValue+0x34>
		if (byteNum <= 3){
    4d54:	79bb      	ldrb	r3, [r7, #6]
    4d56:	2b03      	cmp	r3, #3
    4d58:	d804      	bhi.n	4d64 <FIO_ByteClearValue+0x34>
			pFIO->FIOCLR[byteNum] = bitValue;
    4d5a:	79ba      	ldrb	r2, [r7, #6]
    4d5c:	68fb      	ldr	r3, [r7, #12]
    4d5e:	4413      	add	r3, r2
    4d60:	797a      	ldrb	r2, [r7, #5]
    4d62:	771a      	strb	r2, [r3, #28]
		}
	}
}
    4d64:	f107 0710 	add.w	r7, r7, #16
    4d68:	46bd      	mov	sp, r7
    4d6a:	bd80      	pop	{r7, pc}

00004d6c <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
    4d6c:	b580      	push	{r7, lr}
    4d6e:	b084      	sub	sp, #16
    4d70:	af00      	add	r7, sp, #0
    4d72:	4602      	mov	r2, r0
    4d74:	460b      	mov	r3, r1
    4d76:	71fa      	strb	r2, [r7, #7]
    4d78:	71bb      	strb	r3, [r7, #6]
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
    4d7a:	79fb      	ldrb	r3, [r7, #7]
    4d7c:	4618      	mov	r0, r3
    4d7e:	f7ff fc31 	bl	45e4 <FIO_ByteGetPointer>
    4d82:	4603      	mov	r3, r0
    4d84:	60fb      	str	r3, [r7, #12]
	if (pFIO != NULL) {
    4d86:	68fb      	ldr	r3, [r7, #12]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d008      	beq.n	4d9e <FIO_ByteReadValue+0x32>
		if (byteNum <= 3){
    4d8c:	79bb      	ldrb	r3, [r7, #6]
    4d8e:	2b03      	cmp	r3, #3
    4d90:	d805      	bhi.n	4d9e <FIO_ByteReadValue+0x32>
			return (pFIO->FIOPIN[byteNum]);
    4d92:	79ba      	ldrb	r2, [r7, #6]
    4d94:	68fb      	ldr	r3, [r7, #12]
    4d96:	4413      	add	r3, r2
    4d98:	7d1b      	ldrb	r3, [r3, #20]
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	e001      	b.n	4da2 <FIO_ByteReadValue+0x36>
		}
	}
	return (0);
    4d9e:	f04f 0300 	mov.w	r3, #0
}
    4da2:	4618      	mov	r0, r3
    4da4:	f107 0710 	add.w	r7, r7, #16
    4da8:	46bd      	mov	sp, r7
    4daa:	bd80      	pop	{r7, pc}

00004dac <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	4603      	mov	r3, r0
    4db4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4db6:	f24e 1300 	movw	r3, #57600	; 0xe100
    4dba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4dbe:	f997 2007 	ldrsb.w	r2, [r7, #7]
    4dc2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4dc6:	79f9      	ldrb	r1, [r7, #7]
    4dc8:	f001 011f 	and.w	r1, r1, #31
    4dcc:	f04f 0001 	mov.w	r0, #1
    4dd0:	fa00 f101 	lsl.w	r1, r0, r1
    4dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4dd8:	f107 070c 	add.w	r7, r7, #12
    4ddc:	46bd      	mov	sp, r7
    4dde:	bc80      	pop	{r7}
    4de0:	4770      	bx	lr
    4de2:	bf00      	nop

00004de4 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4de4:	b480      	push	{r7}
    4de6:	b083      	sub	sp, #12
    4de8:	af00      	add	r7, sp, #0
    4dea:	4603      	mov	r3, r0
    4dec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    4dee:	f24e 1300 	movw	r3, #57600	; 0xe100
    4df2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4df6:	f997 2007 	ldrsb.w	r2, [r7, #7]
    4dfa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4dfe:	79f9      	ldrb	r1, [r7, #7]
    4e00:	f001 011f 	and.w	r1, r1, #31
    4e04:	f04f 0001 	mov.w	r0, #1
    4e08:	fa00 f101 	lsl.w	r1, r0, r1
    4e0c:	f102 0220 	add.w	r2, r2, #32
    4e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4e14:	f107 070c 	add.w	r7, r7, #12
    4e18:	46bd      	mov	sp, r7
    4e1a:	bc80      	pop	{r7}
    4e1c:	4770      	bx	lr
    4e1e:	bf00      	nop

00004e20 <I2C_getNum>:
 * 				- LPC_I2C0
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx){
    4e20:	b480      	push	{r7}
    4e22:	b083      	sub	sp, #12
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
	if (I2Cx == LPC_I2C0) {
    4e28:	687a      	ldr	r2, [r7, #4]
    4e2a:	f24c 0300 	movw	r3, #49152	; 0xc000
    4e2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4e32:	429a      	cmp	r2, r3
    4e34:	d102      	bne.n	4e3c <I2C_getNum+0x1c>
		return (0);
    4e36:	f04f 0300 	mov.w	r3, #0
    4e3a:	e015      	b.n	4e68 <I2C_getNum+0x48>
	} else if (I2Cx == LPC_I2C1) {
    4e3c:	687a      	ldr	r2, [r7, #4]
    4e3e:	f24c 0300 	movw	r3, #49152	; 0xc000
    4e42:	f2c4 0305 	movt	r3, #16389	; 0x4005
    4e46:	429a      	cmp	r2, r3
    4e48:	d102      	bne.n	4e50 <I2C_getNum+0x30>
		return (1);
    4e4a:	f04f 0301 	mov.w	r3, #1
    4e4e:	e00b      	b.n	4e68 <I2C_getNum+0x48>
	} else if (I2Cx == LPC_I2C2) {
    4e50:	687a      	ldr	r2, [r7, #4]
    4e52:	f240 0300 	movw	r3, #0
    4e56:	f2c4 030a 	movt	r3, #16394	; 0x400a
    4e5a:	429a      	cmp	r2, r3
    4e5c:	d102      	bne.n	4e64 <I2C_getNum+0x44>
		return (2);
    4e5e:	f04f 0302 	mov.w	r3, #2
    4e62:	e001      	b.n	4e68 <I2C_getNum+0x48>
	}
	return (-1);
    4e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    4e68:	4618      	mov	r0, r3
    4e6a:	f107 070c 	add.w	r7, r7, #12
    4e6e:	46bd      	mov	sp, r7
    4e70:	bc80      	pop	{r7}
    4e72:	4770      	bx	lr

00004e74 <I2C_Start>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
    4e74:	b480      	push	{r7}
    4e76:	b083      	sub	sp, #12
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	f04f 0220 	mov.w	r2, #32
    4e82:	601a      	str	r2, [r3, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	f04f 0208 	mov.w	r2, #8
    4e8a:	619a      	str	r2, [r3, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	681b      	ldr	r3, [r3, #0]
    4e90:	f003 0308 	and.w	r3, r3, #8
    4e94:	2b00      	cmp	r3, #0
    4e96:	d0f9      	beq.n	4e8c <I2C_Start+0x18>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	f04f 0220 	mov.w	r2, #32
    4e9e:	619a      	str	r2, [r3, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	685b      	ldr	r3, [r3, #4]
    4ea4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    4ea8:	4618      	mov	r0, r3
    4eaa:	f107 070c 	add.w	r7, r7, #12
    4eae:	46bd      	mov	sp, r7
    4eb0:	bc80      	pop	{r7}
    4eb2:	4770      	bx	lr

00004eb4 <I2C_Stop>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
    4eb4:	b480      	push	{r7}
    4eb6:	b083      	sub	sp, #12
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]

	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	f003 0320 	and.w	r3, r3, #32
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d003      	beq.n	4ed0 <I2C_Stop+0x1c>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	f04f 0220 	mov.w	r2, #32
    4ece:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	f04f 0210 	mov.w	r2, #16
    4ed6:	601a      	str	r2, [r3, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	f04f 0208 	mov.w	r2, #8
    4ede:	619a      	str	r2, [r3, #24]
}
    4ee0:	f107 070c 	add.w	r7, r7, #12
    4ee4:	46bd      	mov	sp, r7
    4ee6:	bc80      	pop	{r7}
    4ee8:	4770      	bx	lr
    4eea:	bf00      	nop

00004eec <I2C_SendByte>:
 * 				- LPC_I2C2
 * @param[in]	databyte: number of byte
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
    4eec:	b480      	push	{r7}
    4eee:	b083      	sub	sp, #12
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	6078      	str	r0, [r7, #4]
    4ef4:	460b      	mov	r3, r1
    4ef6:	70fb      	strb	r3, [r7, #3]
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	f003 0320 	and.w	r3, r3, #32
    4f00:	2b00      	cmp	r3, #0
    4f02:	d003      	beq.n	4f0c <I2C_SendByte+0x20>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	f04f 0220 	mov.w	r2, #32
    4f0a:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
    4f0c:	78fa      	ldrb	r2, [r7, #3]
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	609a      	str	r2, [r3, #8]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	f04f 0208 	mov.w	r2, #8
    4f18:	619a      	str	r2, [r3, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	f003 0308 	and.w	r3, r3, #8
    4f22:	2b00      	cmp	r3, #0
    4f24:	d0f9      	beq.n	4f1a <I2C_SendByte+0x2e>
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	685b      	ldr	r3, [r3, #4]
    4f2a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    4f2e:	4618      	mov	r0, r3
    4f30:	f107 070c 	add.w	r7, r7, #12
    4f34:	46bd      	mov	sp, r7
    4f36:	bc80      	pop	{r7}
    4f38:	4770      	bx	lr
    4f3a:	bf00      	nop

00004f3c <I2C_GetByte>:
 * @param[out]	retdat	pointer to return data
 * @param[in]	ack		assert acknowledge or not, should be: TRUE/FALSE
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
{
    4f3c:	b480      	push	{r7}
    4f3e:	b085      	sub	sp, #20
    4f40:	af00      	add	r7, sp, #0
    4f42:	60f8      	str	r0, [r7, #12]
    4f44:	60b9      	str	r1, [r7, #8]
    4f46:	4613      	mov	r3, r2
    4f48:	71fb      	strb	r3, [r7, #7]
	if (ack == TRUE)
    4f4a:	79fb      	ldrb	r3, [r7, #7]
    4f4c:	2b01      	cmp	r3, #1
    4f4e:	d104      	bne.n	4f5a <I2C_GetByte+0x1e>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4f50:	68fb      	ldr	r3, [r7, #12]
    4f52:	f04f 0204 	mov.w	r2, #4
    4f56:	601a      	str	r2, [r3, #0]
    4f58:	e003      	b.n	4f62 <I2C_GetByte+0x26>
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    4f5a:	68fb      	ldr	r3, [r7, #12]
    4f5c:	f04f 0204 	mov.w	r2, #4
    4f60:	619a      	str	r2, [r3, #24]
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	f04f 0208 	mov.w	r2, #8
    4f68:	619a      	str	r2, [r3, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    4f6a:	68fb      	ldr	r3, [r7, #12]
    4f6c:	681b      	ldr	r3, [r3, #0]
    4f6e:	f003 0308 	and.w	r3, r3, #8
    4f72:	2b00      	cmp	r3, #0
    4f74:	d0f9      	beq.n	4f6a <I2C_GetByte+0x2e>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    4f76:	68fb      	ldr	r3, [r7, #12]
    4f78:	689b      	ldr	r3, [r3, #8]
    4f7a:	b2da      	uxtb	r2, r3
    4f7c:	68bb      	ldr	r3, [r7, #8]
    4f7e:	701a      	strb	r2, [r3, #0]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4f80:	68fb      	ldr	r3, [r7, #12]
    4f82:	685b      	ldr	r3, [r3, #4]
    4f84:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    4f88:	4618      	mov	r0, r3
    4f8a:	f107 0714 	add.w	r7, r7, #20
    4f8e:	46bd      	mov	sp, r7
    4f90:	bc80      	pop	{r7}
    4f92:	4770      	bx	lr

00004f94 <I2C_SetClock>:
 * 				- LPC_I2C2
 * @param[in]	target_clock : clock of SSP (Hz)
 * @return 		None
 ***********************************************************************/
static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock)
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b084      	sub	sp, #16
    4f98:	af00      	add	r7, sp, #0
    4f9a:	6078      	str	r0, [r7, #4]
    4f9c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	f24c 0300 	movw	r3, #49152	; 0xc000
    4fa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4fa8:	429a      	cmp	r2, r3
    4faa:	d015      	beq.n	4fd8 <I2C_SetClock+0x44>
    4fac:	687a      	ldr	r2, [r7, #4]
    4fae:	f24c 0300 	movw	r3, #49152	; 0xc000
    4fb2:	f2c4 0305 	movt	r3, #16389	; 0x4005
    4fb6:	429a      	cmp	r2, r3
    4fb8:	d00e      	beq.n	4fd8 <I2C_SetClock+0x44>
    4fba:	687a      	ldr	r2, [r7, #4]
    4fbc:	f240 0300 	movw	r3, #0
    4fc0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    4fc4:	429a      	cmp	r2, r3
    4fc6:	d007      	beq.n	4fd8 <I2C_SetClock+0x44>
    4fc8:	f24b 3028 	movw	r0, #45864	; 0xb328
    4fcc:	f2c0 0000 	movt	r0, #0
    4fd0:	f04f 01df 	mov.w	r1, #223	; 0xdf
    4fd4:	f001 f91c 	bl	6210 <check_failed>

	// Get PCLK of I2C controller
	if (I2Cx == LPC_I2C0)
    4fd8:	687a      	ldr	r2, [r7, #4]
    4fda:	f24c 0300 	movw	r3, #49152	; 0xc000
    4fde:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4fe2:	429a      	cmp	r2, r3
    4fe4:	d109      	bne.n	4ffa <I2C_SetClock+0x66>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
    4fe6:	f04f 000e 	mov.w	r0, #14
    4fea:	f7ff f8e3 	bl	41b4 <CLKPWR_GetPCLK>
    4fee:	4602      	mov	r2, r0
    4ff0:	683b      	ldr	r3, [r7, #0]
    4ff2:	fbb2 f3f3 	udiv	r3, r2, r3
    4ff6:	60fb      	str	r3, [r7, #12]
    4ff8:	e020      	b.n	503c <I2C_SetClock+0xa8>
	}
	else if (I2Cx == LPC_I2C1)
    4ffa:	687a      	ldr	r2, [r7, #4]
    4ffc:	f24c 0300 	movw	r3, #49152	; 0xc000
    5000:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5004:	429a      	cmp	r2, r3
    5006:	d109      	bne.n	501c <I2C_SetClock+0x88>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
    5008:	f04f 0026 	mov.w	r0, #38	; 0x26
    500c:	f7ff f8d2 	bl	41b4 <CLKPWR_GetPCLK>
    5010:	4602      	mov	r2, r0
    5012:	683b      	ldr	r3, [r7, #0]
    5014:	fbb2 f3f3 	udiv	r3, r2, r3
    5018:	60fb      	str	r3, [r7, #12]
    501a:	e00f      	b.n	503c <I2C_SetClock+0xa8>
	}
	else if (I2Cx == LPC_I2C2)
    501c:	687a      	ldr	r2, [r7, #4]
    501e:	f240 0300 	movw	r3, #0
    5022:	f2c4 030a 	movt	r3, #16394	; 0x400a
    5026:	429a      	cmp	r2, r3
    5028:	d108      	bne.n	503c <I2C_SetClock+0xa8>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
    502a:	f04f 0034 	mov.w	r0, #52	; 0x34
    502e:	f7ff f8c1 	bl	41b4 <CLKPWR_GetPCLK>
    5032:	4602      	mov	r2, r0
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	fbb2 f3f3 	udiv	r3, r2, r3
    503a:	60fb      	str	r3, [r7, #12]
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
    503c:	68fb      	ldr	r3, [r7, #12]
    503e:	ea4f 0253 	mov.w	r2, r3, lsr #1
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	611a      	str	r2, [r3, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	691b      	ldr	r3, [r3, #16]
    504a:	68fa      	ldr	r2, [r7, #12]
    504c:	ebc3 0202 	rsb	r2, r3, r2
    5050:	687b      	ldr	r3, [r7, #4]
    5052:	615a      	str	r2, [r3, #20]
}
    5054:	f107 0710 	add.w	r7, r7, #16
    5058:	46bd      	mov	sp, r7
    505a:	bd80      	pop	{r7, pc}

0000505c <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
    505c:	b580      	push	{r7, lr}
    505e:	b082      	sub	sp, #8
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
    5064:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5066:	687a      	ldr	r2, [r7, #4]
    5068:	f24c 0300 	movw	r3, #49152	; 0xc000
    506c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5070:	429a      	cmp	r2, r3
    5072:	d015      	beq.n	50a0 <I2C_Init+0x44>
    5074:	687a      	ldr	r2, [r7, #4]
    5076:	f24c 0300 	movw	r3, #49152	; 0xc000
    507a:	f2c4 0305 	movt	r3, #16389	; 0x4005
    507e:	429a      	cmp	r2, r3
    5080:	d00e      	beq.n	50a0 <I2C_Init+0x44>
    5082:	687a      	ldr	r2, [r7, #4]
    5084:	f240 0300 	movw	r3, #0
    5088:	f2c4 030a 	movt	r3, #16394	; 0x400a
    508c:	429a      	cmp	r2, r3
    508e:	d007      	beq.n	50a0 <I2C_Init+0x44>
    5090:	f24b 3028 	movw	r0, #45864	; 0xb328
    5094:	f2c0 0000 	movt	r0, #0
    5098:	f240 1107 	movw	r1, #263	; 0x107
    509c:	f001 f8b8 	bl	6210 <check_failed>

	if (I2Cx==LPC_I2C0)
    50a0:	687a      	ldr	r2, [r7, #4]
    50a2:	f24c 0300 	movw	r3, #49152	; 0xc000
    50a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    50aa:	429a      	cmp	r2, r3
    50ac:	d10c      	bne.n	50c8 <I2C_Init+0x6c>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
    50ae:	f04f 0080 	mov.w	r0, #128	; 0x80
    50b2:	f04f 0101 	mov.w	r1, #1
    50b6:	f7ff f8b5 	bl	4224 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
    50ba:	f04f 000e 	mov.w	r0, #14
    50be:	f04f 0102 	mov.w	r1, #2
    50c2:	f7fe ffe7 	bl	4094 <CLKPWR_SetPCLKDiv>
    50c6:	e026      	b.n	5116 <I2C_Init+0xba>
	}
	else if (I2Cx==LPC_I2C1)
    50c8:	687a      	ldr	r2, [r7, #4]
    50ca:	f24c 0300 	movw	r3, #49152	; 0xc000
    50ce:	f2c4 0305 	movt	r3, #16389	; 0x4005
    50d2:	429a      	cmp	r2, r3
    50d4:	d10c      	bne.n	50f0 <I2C_Init+0x94>
	{
		/* Set up clock and power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
    50d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    50da:	f04f 0101 	mov.w	r1, #1
    50de:	f7ff f8a1 	bl	4224 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
    50e2:	f04f 0026 	mov.w	r0, #38	; 0x26
    50e6:	f04f 0102 	mov.w	r1, #2
    50ea:	f7fe ffd3 	bl	4094 <CLKPWR_SetPCLKDiv>
    50ee:	e012      	b.n	5116 <I2C_Init+0xba>
	}
	else if (I2Cx==LPC_I2C2)
    50f0:	687a      	ldr	r2, [r7, #4]
    50f2:	f240 0300 	movw	r3, #0
    50f6:	f2c4 030a 	movt	r3, #16394	; 0x400a
    50fa:	429a      	cmp	r2, r3
    50fc:	d114      	bne.n	5128 <I2C_Init+0xcc>
	{
		/* Set up clock and power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
    50fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    5102:	f04f 0101 	mov.w	r1, #1
    5106:	f7ff f88d 	bl	4224 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C2 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
    510a:	f04f 0034 	mov.w	r0, #52	; 0x34
    510e:	f04f 0102 	mov.w	r1, #2
    5112:	f7fe ffbf 	bl	4094 <CLKPWR_SetPCLKDiv>
		// Up-Support this device
		return;
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    5116:	6878      	ldr	r0, [r7, #4]
    5118:	6839      	ldr	r1, [r7, #0]
    511a:	f7ff ff3b 	bl	4f94 <I2C_SetClock>
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	f04f 0264 	mov.w	r2, #100	; 0x64
    5124:	619a      	str	r2, [r3, #24]
    5126:	e000      	b.n	512a <I2C_Init+0xce>
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else {
		// Up-Support this device
		return;
    5128:	bf00      	nop

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
}
    512a:	f107 0708 	add.w	r7, r7, #8
    512e:	46bd      	mov	sp, r7
    5130:	bd80      	pop	{r7, pc}
    5132:	bf00      	nop

00005134 <I2C_DeInit>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
    5134:	b580      	push	{r7, lr}
    5136:	b082      	sub	sp, #8
    5138:	af00      	add	r7, sp, #0
    513a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    513c:	687a      	ldr	r2, [r7, #4]
    513e:	f24c 0300 	movw	r3, #49152	; 0xc000
    5142:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5146:	429a      	cmp	r2, r3
    5148:	d015      	beq.n	5176 <I2C_DeInit+0x42>
    514a:	687a      	ldr	r2, [r7, #4]
    514c:	f24c 0300 	movw	r3, #49152	; 0xc000
    5150:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5154:	429a      	cmp	r2, r3
    5156:	d00e      	beq.n	5176 <I2C_DeInit+0x42>
    5158:	687a      	ldr	r2, [r7, #4]
    515a:	f240 0300 	movw	r3, #0
    515e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    5162:	429a      	cmp	r2, r3
    5164:	d007      	beq.n	5176 <I2C_DeInit+0x42>
    5166:	f24b 3028 	movw	r0, #45864	; 0xb328
    516a:	f2c0 0000 	movt	r0, #0
    516e:	f240 1137 	movw	r1, #311	; 0x137
    5172:	f001 f84d 	bl	6210 <check_failed>

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	f04f 0240 	mov.w	r2, #64	; 0x40
    517c:	619a      	str	r2, [r3, #24]

	if (I2Cx==LPC_I2C0)
    517e:	687a      	ldr	r2, [r7, #4]
    5180:	f24c 0300 	movw	r3, #49152	; 0xc000
    5184:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5188:	429a      	cmp	r2, r3
    518a:	d106      	bne.n	519a <I2C_DeInit+0x66>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
    518c:	f04f 0080 	mov.w	r0, #128	; 0x80
    5190:	f04f 0100 	mov.w	r1, #0
    5194:	f7ff f846 	bl	4224 <CLKPWR_ConfigPPWR>
    5198:	e01a      	b.n	51d0 <I2C_DeInit+0x9c>
	}
	else if (I2Cx==LPC_I2C1)
    519a:	687a      	ldr	r2, [r7, #4]
    519c:	f24c 0300 	movw	r3, #49152	; 0xc000
    51a0:	f2c4 0305 	movt	r3, #16389	; 0x4005
    51a4:	429a      	cmp	r2, r3
    51a6:	d106      	bne.n	51b6 <I2C_DeInit+0x82>
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
    51a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    51ac:	f04f 0100 	mov.w	r1, #0
    51b0:	f7ff f838 	bl	4224 <CLKPWR_ConfigPPWR>
    51b4:	e00c      	b.n	51d0 <I2C_DeInit+0x9c>
	}
	else if (I2Cx==LPC_I2C2)
    51b6:	687a      	ldr	r2, [r7, #4]
    51b8:	f240 0300 	movw	r3, #0
    51bc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    51c0:	429a      	cmp	r2, r3
    51c2:	d105      	bne.n	51d0 <I2C_DeInit+0x9c>
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
    51c4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    51c8:	f04f 0100 	mov.w	r1, #0
    51cc:	f7ff f82a 	bl	4224 <CLKPWR_ConfigPPWR>
	}
}
    51d0:	f107 0708 	add.w	r7, r7, #8
    51d4:	46bd      	mov	sp, r7
    51d6:	bd80      	pop	{r7, pc}

000051d8 <I2C_Cmd>:
 * 				- LPC_I2C2
 * @param[in]	NewState New State of I2Cx peripheral's operation
 * @return 		none
 **********************************************************************/
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
{
    51d8:	b580      	push	{r7, lr}
    51da:	b082      	sub	sp, #8
    51dc:	af00      	add	r7, sp, #0
    51de:	6078      	str	r0, [r7, #4]
    51e0:	460b      	mov	r3, r1
    51e2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    51e4:	78fb      	ldrb	r3, [r7, #3]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d00a      	beq.n	5200 <I2C_Cmd+0x28>
    51ea:	78fb      	ldrb	r3, [r7, #3]
    51ec:	2b01      	cmp	r3, #1
    51ee:	d007      	beq.n	5200 <I2C_Cmd+0x28>
    51f0:	f24b 3028 	movw	r0, #45864	; 0xb328
    51f4:	f2c0 0000 	movt	r0, #0
    51f8:	f44f 71ac 	mov.w	r1, #344	; 0x158
    51fc:	f001 f808 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5200:	687a      	ldr	r2, [r7, #4]
    5202:	f24c 0300 	movw	r3, #49152	; 0xc000
    5206:	f2c4 0301 	movt	r3, #16385	; 0x4001
    520a:	429a      	cmp	r2, r3
    520c:	d015      	beq.n	523a <I2C_Cmd+0x62>
    520e:	687a      	ldr	r2, [r7, #4]
    5210:	f24c 0300 	movw	r3, #49152	; 0xc000
    5214:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5218:	429a      	cmp	r2, r3
    521a:	d00e      	beq.n	523a <I2C_Cmd+0x62>
    521c:	687a      	ldr	r2, [r7, #4]
    521e:	f240 0300 	movw	r3, #0
    5222:	f2c4 030a 	movt	r3, #16394	; 0x400a
    5226:	429a      	cmp	r2, r3
    5228:	d007      	beq.n	523a <I2C_Cmd+0x62>
    522a:	f24b 3028 	movw	r0, #45864	; 0xb328
    522e:	f2c0 0000 	movt	r0, #0
    5232:	f240 1159 	movw	r1, #345	; 0x159
    5236:	f000 ffeb 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    523a:	78fb      	ldrb	r3, [r7, #3]
    523c:	2b01      	cmp	r3, #1
    523e:	d104      	bne.n	524a <I2C_Cmd+0x72>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	f04f 0240 	mov.w	r2, #64	; 0x40
    5246:	601a      	str	r2, [r3, #0]
    5248:	e003      	b.n	5252 <I2C_Cmd+0x7a>
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    524a:	687b      	ldr	r3, [r7, #4]
    524c:	f04f 0240 	mov.w	r2, #64	; 0x40
    5250:	619a      	str	r2, [r3, #24]
	}
}
    5252:	f107 0708 	add.w	r7, r7, #8
    5256:	46bd      	mov	sp, r7
    5258:	bd80      	pop	{r7, pc}
    525a:	bf00      	nop

0000525c <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
    525c:	b580      	push	{r7, lr}
    525e:	b082      	sub	sp, #8
    5260:	af00      	add	r7, sp, #0
    5262:	6078      	str	r0, [r7, #4]
    5264:	460b      	mov	r3, r1
    5266:	70fb      	strb	r3, [r7, #3]
	if (NewState)
    5268:	78fb      	ldrb	r3, [r7, #3]
    526a:	2b00      	cmp	r3, #0
    526c:	d023      	beq.n	52b6 <I2C_IntCmd+0x5a>
	{
		if(I2Cx == LPC_I2C0)
    526e:	687a      	ldr	r2, [r7, #4]
    5270:	f24c 0300 	movw	r3, #49152	; 0xc000
    5274:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5278:	429a      	cmp	r2, r3
    527a:	d104      	bne.n	5286 <I2C_IntCmd+0x2a>
		{
			NVIC_EnableIRQ(I2C0_IRQn);
    527c:	f04f 000a 	mov.w	r0, #10
    5280:	f7ff fd94 	bl	4dac <NVIC_EnableIRQ>
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
		{
			NVIC_EnableIRQ(I2C2_IRQn);
    5284:	e03c      	b.n	5300 <I2C_IntCmd+0xa4>
	{
		if(I2Cx == LPC_I2C0)
		{
			NVIC_EnableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
    5286:	687a      	ldr	r2, [r7, #4]
    5288:	f24c 0300 	movw	r3, #49152	; 0xc000
    528c:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5290:	429a      	cmp	r2, r3
    5292:	d104      	bne.n	529e <I2C_IntCmd+0x42>
		{
			NVIC_EnableIRQ(I2C1_IRQn);
    5294:	f04f 000b 	mov.w	r0, #11
    5298:	f7ff fd88 	bl	4dac <NVIC_EnableIRQ>
		}
		else if (I2Cx == LPC_I2C2)
		{
			NVIC_EnableIRQ(I2C2_IRQn);
    529c:	e030      	b.n	5300 <I2C_IntCmd+0xa4>
		}
		else if (I2Cx == LPC_I2C1)
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
    529e:	687a      	ldr	r2, [r7, #4]
    52a0:	f240 0300 	movw	r3, #0
    52a4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    52a8:	429a      	cmp	r2, r3
    52aa:	d128      	bne.n	52fe <I2C_IntCmd+0xa2>
		{
			NVIC_EnableIRQ(I2C2_IRQn);
    52ac:	f04f 000c 	mov.w	r0, #12
    52b0:	f7ff fd7c 	bl	4dac <NVIC_EnableIRQ>
    52b4:	e024      	b.n	5300 <I2C_IntCmd+0xa4>
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
    52b6:	687a      	ldr	r2, [r7, #4]
    52b8:	f24c 0300 	movw	r3, #49152	; 0xc000
    52bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    52c0:	429a      	cmp	r2, r3
    52c2:	d104      	bne.n	52ce <I2C_IntCmd+0x72>
		{
			NVIC_DisableIRQ(I2C0_IRQn);
    52c4:	f04f 000a 	mov.w	r0, #10
    52c8:	f7ff fd8c 	bl	4de4 <NVIC_DisableIRQ>
    52cc:	e018      	b.n	5300 <I2C_IntCmd+0xa4>
		}
		else if (I2Cx == LPC_I2C1)
    52ce:	687a      	ldr	r2, [r7, #4]
    52d0:	f24c 0300 	movw	r3, #49152	; 0xc000
    52d4:	f2c4 0305 	movt	r3, #16389	; 0x4005
    52d8:	429a      	cmp	r2, r3
    52da:	d104      	bne.n	52e6 <I2C_IntCmd+0x8a>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
    52dc:	f04f 000b 	mov.w	r0, #11
    52e0:	f7ff fd80 	bl	4de4 <NVIC_DisableIRQ>
    52e4:	e00c      	b.n	5300 <I2C_IntCmd+0xa4>
		}
		else if (I2Cx == LPC_I2C2)
    52e6:	687a      	ldr	r2, [r7, #4]
    52e8:	f240 0300 	movw	r3, #0
    52ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
    52f0:	429a      	cmp	r2, r3
    52f2:	d105      	bne.n	5300 <I2C_IntCmd+0xa4>
		{
			NVIC_DisableIRQ(I2C2_IRQn);
    52f4:	f04f 000c 	mov.w	r0, #12
    52f8:	f7ff fd74 	bl	4de4 <NVIC_DisableIRQ>
    52fc:	e000      	b.n	5300 <I2C_IntCmd+0xa4>
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
		{
			NVIC_EnableIRQ(I2C2_IRQn);
    52fe:	bf00      	nop
		{
			NVIC_DisableIRQ(I2C2_IRQn);
		}
	}
    return;
}
    5300:	f107 0708 	add.w	r7, r7, #8
    5304:	46bd      	mov	sp, r7
    5306:	bd80      	pop	{r7, pc}

00005308 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
{
    5308:	b580      	push	{r7, lr}
    530a:	b086      	sub	sp, #24
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
    5310:	6878      	ldr	r0, [r7, #4]
    5312:	f7ff fd85 	bl	4e20 <I2C_getNum>
    5316:	4603      	mov	r3, r0
    5318:	60fb      	str	r3, [r7, #12]
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
    531a:	68fa      	ldr	r2, [r7, #12]
    531c:	f644 539c 	movw	r3, #19868	; 0x4d9c
    5320:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5324:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5328:	617b      	str	r3, [r7, #20]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	685b      	ldr	r3, [r3, #4]
    532e:	b2db      	uxtb	r3, r3
    5330:	f023 0307 	bic.w	r3, r3, #7
    5334:	74fb      	strb	r3, [r7, #19]
	// Save current status
	txrx_setup->status = returnCode;
    5336:	7cfa      	ldrb	r2, [r7, #19]
    5338:	697b      	ldr	r3, [r7, #20]
    533a:	625a      	str	r2, [r3, #36]	; 0x24
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF){
    533c:	7cfb      	ldrb	r3, [r7, #19]
    533e:	2bf8      	cmp	r3, #248	; 0xf8
    5340:	d104      	bne.n	534c <I2C_MasterHandler+0x44>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5342:	687b      	ldr	r3, [r7, #4]
    5344:	f04f 0208 	mov.w	r2, #8
    5348:	619a      	str	r2, [r3, #24]
		return;
    534a:	e1c6      	b.n	56da <I2C_MasterHandler+0x3d2>
	}

	/* ----------------------------- TRANSMIT PHASE --------------------------*/
	if (i2cdat[tmp].dir == 0){
    534c:	68fb      	ldr	r3, [r7, #12]
    534e:	f644 529c 	movw	r2, #19868	; 0x4d9c
    5352:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5356:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    535a:	4413      	add	r3, r2
    535c:	685b      	ldr	r3, [r3, #4]
    535e:	2b00      	cmp	r3, #0
    5360:	f040 80dc 	bne.w	551c <I2C_MasterHandler+0x214>
		switch (returnCode)
    5364:	7cfb      	ldrb	r3, [r7, #19]
    5366:	f1a3 0308 	sub.w	r3, r3, #8
    536a:	2b30      	cmp	r3, #48	; 0x30
    536c:	f200 818a 	bhi.w	5684 <I2C_MasterHandler+0x37c>
    5370:	a201      	add	r2, pc, #4	; (adr r2, 5378 <I2C_MasterHandler+0x70>)
    5372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5376:	bf00      	nop
    5378:	0000543d 	.word	0x0000543d
    537c:	00005685 	.word	0x00005685
    5380:	00005685 	.word	0x00005685
    5384:	00005685 	.word	0x00005685
    5388:	00005685 	.word	0x00005685
    538c:	00005685 	.word	0x00005685
    5390:	00005685 	.word	0x00005685
    5394:	00005685 	.word	0x00005685
    5398:	0000543d 	.word	0x0000543d
    539c:	00005685 	.word	0x00005685
    53a0:	00005685 	.word	0x00005685
    53a4:	00005685 	.word	0x00005685
    53a8:	00005685 	.word	0x00005685
    53ac:	00005685 	.word	0x00005685
    53b0:	00005685 	.word	0x00005685
    53b4:	00005685 	.word	0x00005685
    53b8:	0000546b 	.word	0x0000546b
    53bc:	00005685 	.word	0x00005685
    53c0:	00005685 	.word	0x00005685
    53c4:	00005685 	.word	0x00005685
    53c8:	00005685 	.word	0x00005685
    53cc:	00005685 	.word	0x00005685
    53d0:	00005685 	.word	0x00005685
    53d4:	00005685 	.word	0x00005685
    53d8:	00005501 	.word	0x00005501
    53dc:	00005685 	.word	0x00005685
    53e0:	00005685 	.word	0x00005685
    53e4:	00005685 	.word	0x00005685
    53e8:	00005685 	.word	0x00005685
    53ec:	00005685 	.word	0x00005685
    53f0:	00005685 	.word	0x00005685
    53f4:	00005685 	.word	0x00005685
    53f8:	0000546b 	.word	0x0000546b
    53fc:	00005685 	.word	0x00005685
    5400:	00005685 	.word	0x00005685
    5404:	00005685 	.word	0x00005685
    5408:	00005685 	.word	0x00005685
    540c:	00005685 	.word	0x00005685
    5410:	00005685 	.word	0x00005685
    5414:	00005685 	.word	0x00005685
    5418:	00005501 	.word	0x00005501
    541c:	00005685 	.word	0x00005685
    5420:	00005685 	.word	0x00005685
    5424:	00005685 	.word	0x00005685
    5428:	00005685 	.word	0x00005685
    542c:	00005685 	.word	0x00005685
    5430:	00005685 	.word	0x00005685
    5434:	00005685 	.word	0x00005685
    5438:	0000550f 	.word	0x0000550f
		{
		/* A start/repeat start condition has been transmitted -------------------*/
		case I2C_I2STAT_M_TX_START:
		case I2C_I2STAT_M_TX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    543c:	687b      	ldr	r3, [r7, #4]
    543e:	f04f 0220 	mov.w	r2, #32
    5442:	619a      	str	r2, [r3, #24]
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0)){
    5444:	697b      	ldr	r3, [r7, #20]
    5446:	685b      	ldr	r3, [r3, #4]
    5448:	2b00      	cmp	r3, #0
    544a:	d02c      	beq.n	54a6 <I2C_MasterHandler+0x19e>
    544c:	697b      	ldr	r3, [r7, #20]
    544e:	689b      	ldr	r3, [r3, #8]
    5450:	2b00      	cmp	r3, #0
    5452:	d028      	beq.n	54a6 <I2C_MasterHandler+0x19e>
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
    5454:	697b      	ldr	r3, [r7, #20]
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	ea4f 0243 	mov.w	r2, r3, lsl #1
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	609a      	str	r2, [r3, #8]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	f04f 0208 	mov.w	r2, #8
    5466:	619a      	str	r2, [r3, #24]
			} else {
				goto next_stage;
			}
			break;
    5468:	e137      	b.n	56da <I2C_MasterHandler+0x3d2>
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    546a:	697b      	ldr	r3, [r7, #20]
    546c:	68da      	ldr	r2, [r3, #12]
    546e:	697b      	ldr	r3, [r7, #20]
    5470:	689b      	ldr	r3, [r3, #8]
    5472:	429a      	cmp	r2, r3
    5474:	d217      	bcs.n	54a6 <I2C_MasterHandler+0x19e>
					&& (txrx_setup->tx_data != NULL)){
    5476:	697b      	ldr	r3, [r7, #20]
    5478:	685b      	ldr	r3, [r3, #4]
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    547a:	2b00      	cmp	r3, #0
    547c:	d013      	beq.n	54a6 <I2C_MasterHandler+0x19e>
					&& (txrx_setup->tx_data != NULL)){
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
    547e:	697b      	ldr	r3, [r7, #20]
    5480:	685a      	ldr	r2, [r3, #4]
    5482:	697b      	ldr	r3, [r7, #20]
    5484:	68db      	ldr	r3, [r3, #12]
    5486:	4413      	add	r3, r2
    5488:	781b      	ldrb	r3, [r3, #0]
    548a:	461a      	mov	r2, r3
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	609a      	str	r2, [r3, #8]
				txrx_setup->tx_count++;
    5490:	697b      	ldr	r3, [r7, #20]
    5492:	68db      	ldr	r3, [r3, #12]
    5494:	f103 0201 	add.w	r2, r3, #1
    5498:	697b      	ldr	r3, [r7, #20]
    549a:	60da      	str	r2, [r3, #12]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    549c:	687b      	ldr	r3, [r7, #4]
    549e:	f04f 0208 	mov.w	r2, #8
    54a2:	619a      	str	r2, [r3, #24]
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    54a4:	e02a      	b.n	54fc <I2C_MasterHandler+0x1f4>
			}
			// no more data, switch to next stage
			else {
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
    54a6:	68fb      	ldr	r3, [r7, #12]
    54a8:	f644 529c 	movw	r2, #19868	; 0x4d9c
    54ac:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    54b4:	4413      	add	r3, r2
    54b6:	f04f 0201 	mov.w	r2, #1
    54ba:	605a      	str	r2, [r3, #4]
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
    54bc:	697b      	ldr	r3, [r7, #20]
    54be:	695b      	ldr	r3, [r3, #20]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d014      	beq.n	54ee <I2C_MasterHandler+0x1e6>
    54c4:	697b      	ldr	r3, [r7, #20]
    54c6:	691b      	ldr	r3, [r3, #16]
    54c8:	2b00      	cmp	r3, #0
    54ca:	d010      	beq.n	54ee <I2C_MasterHandler+0x1e6>
						// check whether if we need to issue an repeat start
						if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL)){
    54cc:	697b      	ldr	r3, [r7, #20]
    54ce:	689b      	ldr	r3, [r3, #8]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d050      	beq.n	5576 <I2C_MasterHandler+0x26e>
    54d4:	697b      	ldr	r3, [r7, #20]
    54d6:	685b      	ldr	r3, [r3, #4]
    54d8:	2b00      	cmp	r3, #0
    54da:	d04c      	beq.n	5576 <I2C_MasterHandler+0x26e>
							// Send out an repeat start command
							I2Cx->I2CONSET = I2C_I2CONSET_STA;
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	f04f 0220 	mov.w	r2, #32
    54e2:	601a      	str	r2, [r3, #0]
							I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
    54e4:	687b      	ldr	r3, [r7, #4]
    54e6:	f04f 020c 	mov.w	r2, #12
    54ea:	619a      	str	r2, [r3, #24]
			else {
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL)){
    54ec:	e006      	b.n	54fc <I2C_MasterHandler+0x1f4>
						}
				}
				// no more data send, the go to end stage now
				else {
					// success, goto end stage
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    54ee:	697b      	ldr	r3, [r7, #20]
    54f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    54f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    54f6:	697b      	ldr	r3, [r7, #20]
    54f8:	625a      	str	r2, [r3, #36]	; 0x24
					goto end_stage;
    54fa:	e0dd      	b.n	56b8 <I2C_MasterHandler+0x3b0>
				}
			}
			break;
    54fc:	bf00      	nop
    54fe:	e0ec      	b.n	56da <I2C_MasterHandler+0x3d2>
		/* SLA+W has been transmitted, NACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_NACK:
		/* Data has been transmitted, NACK has been received -----------------------*/
		case I2C_I2STAT_M_TX_DAT_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
    5500:	697b      	ldr	r3, [r7, #20]
    5502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    5508:	697b      	ldr	r3, [r7, #20]
    550a:	625a      	str	r2, [r3, #36]	; 0x24
			goto retry;
    550c:	e0bb      	b.n	5686 <I2C_MasterHandler+0x37e>
		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
		case I2C_I2STAT_M_TX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
    550e:	697b      	ldr	r3, [r7, #20]
    5510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5516:	697b      	ldr	r3, [r7, #20]
    5518:	625a      	str	r2, [r3, #36]	; 0x24
		default:
			goto retry;
    551a:	e0b4      	b.n	5686 <I2C_MasterHandler+0x37e>
		}
	}

	/* ----------------------------- RECEIVE PHASE --------------------------*/
	else if (i2cdat[tmp].dir == 1){
    551c:	68fb      	ldr	r3, [r7, #12]
    551e:	f644 529c 	movw	r2, #19868	; 0x4d9c
    5522:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5526:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    552a:	4413      	add	r3, r2
    552c:	685b      	ldr	r3, [r3, #4]
    552e:	2b01      	cmp	r3, #1
    5530:	f040 80d3 	bne.w	56da <I2C_MasterHandler+0x3d2>
		switch (returnCode){
    5534:	7cfb      	ldrb	r3, [r7, #19]
    5536:	2b40      	cmp	r3, #64	; 0x40
    5538:	d031      	beq.n	559e <I2C_MasterHandler+0x296>
    553a:	2b40      	cmp	r3, #64	; 0x40
    553c:	dc07      	bgt.n	554e <I2C_MasterHandler+0x246>
    553e:	2b10      	cmp	r3, #16
    5540:	d00d      	beq.n	555e <I2C_MasterHandler+0x256>
    5542:	2b38      	cmp	r3, #56	; 0x38
    5544:	f000 8097 	beq.w	5676 <I2C_MasterHandler+0x36e>
    5548:	2b08      	cmp	r3, #8
    554a:	d008      	beq.n	555e <I2C_MasterHandler+0x256>
    554c:	e09b      	b.n	5686 <I2C_MasterHandler+0x37e>
    554e:	2b50      	cmp	r3, #80	; 0x50
    5550:	d03b      	beq.n	55ca <I2C_MasterHandler+0x2c2>
    5552:	2b58      	cmp	r3, #88	; 0x58
    5554:	d068      	beq.n	5628 <I2C_MasterHandler+0x320>
    5556:	2b48      	cmp	r3, #72	; 0x48
    5558:	f000 8086 	beq.w	5668 <I2C_MasterHandler+0x360>
    555c:	e093      	b.n	5686 <I2C_MasterHandler+0x37e>
			/* A start/repeat start condition has been transmitted ---------------------*/
		case I2C_I2STAT_M_RX_START:
		case I2C_I2STAT_M_RX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	f04f 0220 	mov.w	r2, #32
    5564:	619a      	str	r2, [r3, #24]
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0)){
    5566:	697b      	ldr	r3, [r7, #20]
    5568:	691b      	ldr	r3, [r3, #16]
    556a:	2b00      	cmp	r3, #0
    556c:	d010      	beq.n	5590 <I2C_MasterHandler+0x288>
    556e:	697b      	ldr	r3, [r7, #20]
    5570:	695b      	ldr	r3, [r3, #20]
    5572:	2b00      	cmp	r3, #0
    5574:	d00c      	beq.n	5590 <I2C_MasterHandler+0x288>
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
    5576:	697b      	ldr	r3, [r7, #20]
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    557e:	f043 0201 	orr.w	r2, r3, #1
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	609a      	str	r2, [r3, #8]
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	f04f 0208 	mov.w	r2, #8
    558c:	619a      	str	r2, [r3, #24]
			} else {
				// Success, goto end stage
				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
				goto end_stage;
			}
			break;
    558e:	e0a4      	b.n	56da <I2C_MasterHandler+0x3d2>
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
			} else {
				// Success, goto end stage
				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    5590:	697b      	ldr	r3, [r7, #20]
    5592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5594:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    5598:	697b      	ldr	r3, [r7, #20]
    559a:	625a      	str	r2, [r3, #36]	; 0x24
				goto end_stage;
    559c:	e08c      	b.n	56b8 <I2C_MasterHandler+0x3b0>
			}
			break;

		/* SLA+R has been transmitted, ACK has been received -----------------*/
		case I2C_I2STAT_M_RX_SLAR_ACK:
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
    559e:	697b      	ldr	r3, [r7, #20]
    55a0:	699a      	ldr	r2, [r3, #24]
    55a2:	697b      	ldr	r3, [r7, #20]
    55a4:	695b      	ldr	r3, [r3, #20]
    55a6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    55aa:	429a      	cmp	r2, r3
    55ac:	d204      	bcs.n	55b8 <I2C_MasterHandler+0x2b0>
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	f04f 0204 	mov.w	r2, #4
    55b4:	601a      	str	r2, [r3, #0]
    55b6:	e003      	b.n	55c0 <I2C_MasterHandler+0x2b8>
			}
			else {
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	f04f 0204 	mov.w	r2, #4
    55be:	619a      	str	r2, [r3, #24]
			}
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	f04f 0208 	mov.w	r2, #8
    55c6:	619a      	str	r2, [r3, #24]
			break;
    55c8:	e087      	b.n	56da <I2C_MasterHandler+0x3d2>

		/* Data has been received, ACK has been returned ----------------------*/
		case I2C_I2STAT_M_RX_DAT_ACK:
			// Note save data and increase counter first, then check later
			/* Save data  */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
    55ca:	697b      	ldr	r3, [r7, #20]
    55cc:	691b      	ldr	r3, [r3, #16]
    55ce:	2b00      	cmp	r3, #0
    55d0:	d014      	beq.n	55fc <I2C_MasterHandler+0x2f4>
    55d2:	697b      	ldr	r3, [r7, #20]
    55d4:	699a      	ldr	r2, [r3, #24]
    55d6:	697b      	ldr	r3, [r7, #20]
    55d8:	695b      	ldr	r3, [r3, #20]
    55da:	429a      	cmp	r2, r3
    55dc:	d20e      	bcs.n	55fc <I2C_MasterHandler+0x2f4>
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    55de:	697b      	ldr	r3, [r7, #20]
    55e0:	691a      	ldr	r2, [r3, #16]
    55e2:	697b      	ldr	r3, [r7, #20]
    55e4:	699b      	ldr	r3, [r3, #24]
    55e6:	4413      	add	r3, r2
    55e8:	687a      	ldr	r2, [r7, #4]
    55ea:	6892      	ldr	r2, [r2, #8]
    55ec:	b2d2      	uxtb	r2, r2
    55ee:	701a      	strb	r2, [r3, #0]
				txrx_setup->rx_count++;
    55f0:	697b      	ldr	r3, [r7, #20]
    55f2:	699b      	ldr	r3, [r3, #24]
    55f4:	f103 0201 	add.w	r2, r3, #1
    55f8:	697b      	ldr	r3, [r7, #20]
    55fa:	619a      	str	r2, [r3, #24]
			}
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1)) {
    55fc:	697b      	ldr	r3, [r7, #20]
    55fe:	699a      	ldr	r2, [r3, #24]
    5600:	697b      	ldr	r3, [r7, #20]
    5602:	695b      	ldr	r3, [r3, #20]
    5604:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5608:	429a      	cmp	r2, r3
    560a:	d204      	bcs.n	5616 <I2C_MasterHandler+0x30e>
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	f04f 0204 	mov.w	r2, #4
    5612:	601a      	str	r2, [r3, #0]
    5614:	e003      	b.n	561e <I2C_MasterHandler+0x316>
			}
			else {
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
    5616:	687b      	ldr	r3, [r7, #4]
    5618:	f04f 0204 	mov.w	r2, #4
    561c:	619a      	str	r2, [r3, #24]
			}

			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	f04f 0208 	mov.w	r2, #8
    5624:	619a      	str	r2, [r3, #24]
			break;
    5626:	e058      	b.n	56da <I2C_MasterHandler+0x3d2>

		/* Data has been received, NACK has been return -------------------------*/
		case I2C_I2STAT_M_RX_DAT_NACK:
			/* Save the last data */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length)){
    5628:	697b      	ldr	r3, [r7, #20]
    562a:	691b      	ldr	r3, [r3, #16]
    562c:	2b00      	cmp	r3, #0
    562e:	d014      	beq.n	565a <I2C_MasterHandler+0x352>
    5630:	697b      	ldr	r3, [r7, #20]
    5632:	699a      	ldr	r2, [r3, #24]
    5634:	697b      	ldr	r3, [r7, #20]
    5636:	695b      	ldr	r3, [r3, #20]
    5638:	429a      	cmp	r2, r3
    563a:	d20e      	bcs.n	565a <I2C_MasterHandler+0x352>
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    563c:	697b      	ldr	r3, [r7, #20]
    563e:	691a      	ldr	r2, [r3, #16]
    5640:	697b      	ldr	r3, [r7, #20]
    5642:	699b      	ldr	r3, [r3, #24]
    5644:	4413      	add	r3, r2
    5646:	687a      	ldr	r2, [r7, #4]
    5648:	6892      	ldr	r2, [r2, #8]
    564a:	b2d2      	uxtb	r2, r2
    564c:	701a      	strb	r2, [r3, #0]
				txrx_setup->rx_count++;
    564e:	697b      	ldr	r3, [r7, #20]
    5650:	699b      	ldr	r3, [r3, #24]
    5652:	f103 0201 	add.w	r2, r3, #1
    5656:	697b      	ldr	r3, [r7, #20]
    5658:	619a      	str	r2, [r3, #24]
			}
			// success, go to end stage
			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    565a:	697b      	ldr	r3, [r7, #20]
    565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    565e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    5662:	697b      	ldr	r3, [r7, #20]
    5664:	625a      	str	r2, [r3, #36]	; 0x24
			goto end_stage;
    5666:	e027      	b.n	56b8 <I2C_MasterHandler+0x3b0>

		/* SLA+R has been transmitted, NACK has been received ------------------*/
		case I2C_I2STAT_M_RX_SLAR_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
    5668:	697b      	ldr	r3, [r7, #20]
    566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    566c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    5670:	697b      	ldr	r3, [r7, #20]
    5672:	625a      	str	r2, [r3, #36]	; 0x24
			goto retry;
    5674:	e007      	b.n	5686 <I2C_MasterHandler+0x37e>

		/* Arbitration lost ----------------------------------------------------*/
		case I2C_I2STAT_M_RX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
    5676:	697b      	ldr	r3, [r7, #20]
    5678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    567a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    567e:	697b      	ldr	r3, [r7, #20]
    5680:	625a      	str	r2, [r3, #36]	; 0x24
    5682:	e000      	b.n	5686 <I2C_MasterHandler+0x37e>
		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
		case I2C_I2STAT_M_TX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
		default:
			goto retry;
    5684:	bf00      	nop
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
		default:
retry:
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max){
    5686:	697b      	ldr	r3, [r7, #20]
    5688:	6a1a      	ldr	r2, [r3, #32]
    568a:	697b      	ldr	r3, [r7, #20]
    568c:	69db      	ldr	r3, [r3, #28]
    568e:	429a      	cmp	r2, r3
    5690:	d212      	bcs.n	56b8 <I2C_MasterHandler+0x3b0>
				// Clear tx count
				txrx_setup->tx_count = 0;
    5692:	697b      	ldr	r3, [r7, #20]
    5694:	f04f 0200 	mov.w	r2, #0
    5698:	60da      	str	r2, [r3, #12]
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	f04f 0220 	mov.w	r2, #32
    56a0:	601a      	str	r2, [r3, #0]
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	f04f 020c 	mov.w	r2, #12
    56a8:	619a      	str	r2, [r3, #24]
				txrx_setup->retransmissions_count++;
    56aa:	697b      	ldr	r3, [r7, #20]
    56ac:	6a1b      	ldr	r3, [r3, #32]
    56ae:	f103 0201 	add.w	r2, r3, #1
    56b2:	697b      	ldr	r3, [r7, #20]
    56b4:	621a      	str	r2, [r3, #32]
    56b6:	e010      	b.n	56da <I2C_MasterHandler+0x3d2>
			}
			// End of stage
			else {
end_stage:
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
    56b8:	6878      	ldr	r0, [r7, #4]
    56ba:	f04f 0100 	mov.w	r1, #0
    56be:	f7ff fdcd 	bl	525c <I2C_IntCmd>
				// Send stop
				I2C_Stop(I2Cx);
    56c2:	6878      	ldr	r0, [r7, #4]
    56c4:	f7ff fbf6 	bl	4eb4 <I2C_Stop>

				I2C_MasterComplete[tmp] = TRUE;
    56c8:	68fa      	ldr	r2, [r7, #12]
    56ca:	f644 53b4 	movw	r3, #19892	; 0x4db4
    56ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    56d2:	f04f 0101 	mov.w	r1, #1
    56d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			break;
		}
	}
}
    56da:	f107 0718 	add.w	r7, r7, #24
    56de:	46bd      	mov	sp, r7
    56e0:	bd80      	pop	{r7, pc}
    56e2:	bf00      	nop

000056e4 <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
    56e4:	b580      	push	{r7, lr}
    56e6:	b086      	sub	sp, #24
    56e8:	af00      	add	r7, sp, #0
    56ea:	6078      	str	r0, [r7, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
    56ec:	6878      	ldr	r0, [r7, #4]
    56ee:	f7ff fb97 	bl	4e20 <I2C_getNum>
    56f2:	4603      	mov	r3, r0
    56f4:	60bb      	str	r3, [r7, #8]
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
    56f6:	68ba      	ldr	r2, [r7, #8]
    56f8:	f644 539c 	movw	r3, #19868	; 0x4d9c
    56fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5700:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5704:	613b      	str	r3, [r7, #16]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	685b      	ldr	r3, [r3, #4]
    570a:	b2db      	uxtb	r3, r3
    570c:	f023 0307 	bic.w	r3, r3, #7
    5710:	73fb      	strb	r3, [r7, #15]
	// Save current status
	txrx_setup->status = returnCode;
    5712:	7bfa      	ldrb	r2, [r7, #15]
    5714:	693b      	ldr	r3, [r7, #16]
    5716:	619a      	str	r2, [r3, #24]
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF){
    5718:	7bfb      	ldrb	r3, [r7, #15]
    571a:	2bf8      	cmp	r3, #248	; 0xf8
    571c:	d104      	bne.n	5728 <I2C_SlaveHandler+0x44>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	f04f 0208 	mov.w	r2, #8
    5724:	619a      	str	r2, [r3, #24]
		return;
    5726:	e0c4      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	}


	switch (returnCode)
    5728:	7bfb      	ldrb	r3, [r7, #15]
    572a:	2b98      	cmp	r3, #152	; 0x98
    572c:	d052      	beq.n	57d4 <I2C_SlaveHandler+0xf0>
    572e:	2b98      	cmp	r3, #152	; 0x98
    5730:	dc0d      	bgt.n	574e <I2C_SlaveHandler+0x6a>
    5732:	2b80      	cmp	r3, #128	; 0x80
    5734:	d02c      	beq.n	5790 <I2C_SlaveHandler+0xac>
    5736:	2b80      	cmp	r3, #128	; 0x80
    5738:	dc04      	bgt.n	5744 <I2C_SlaveHandler+0x60>
    573a:	2b60      	cmp	r3, #96	; 0x60
    573c:	d01f      	beq.n	577e <I2C_SlaveHandler+0x9a>
    573e:	2b70      	cmp	r3, #112	; 0x70
    5740:	d01d      	beq.n	577e <I2C_SlaveHandler+0x9a>
    5742:	e0a4      	b.n	588e <I2C_SlaveHandler+0x1aa>
    5744:	2b88      	cmp	r3, #136	; 0x88
    5746:	d045      	beq.n	57d4 <I2C_SlaveHandler+0xf0>
    5748:	2b90      	cmp	r3, #144	; 0x90
    574a:	d021      	beq.n	5790 <I2C_SlaveHandler+0xac>
    574c:	e09f      	b.n	588e <I2C_SlaveHandler+0x1aa>
    574e:	2bb8      	cmp	r3, #184	; 0xb8
    5750:	d06d      	beq.n	582e <I2C_SlaveHandler+0x14a>
    5752:	2bb8      	cmp	r3, #184	; 0xb8
    5754:	dc04      	bgt.n	5760 <I2C_SlaveHandler+0x7c>
    5756:	2ba0      	cmp	r3, #160	; 0xa0
    5758:	d041      	beq.n	57de <I2C_SlaveHandler+0xfa>
    575a:	2ba8      	cmp	r3, #168	; 0xa8
    575c:	d067      	beq.n	582e <I2C_SlaveHandler+0x14a>
    575e:	e096      	b.n	588e <I2C_SlaveHandler+0x1aa>
    5760:	2bc0      	cmp	r3, #192	; 0xc0
    5762:	f000 8086 	beq.w	5872 <I2C_SlaveHandler+0x18e>
    5766:	2bf8      	cmp	r3, #248	; 0xf8
    5768:	f040 8091 	bne.w	588e <I2C_SlaveHandler+0x1aa>
	{

	/* No status information */
	case I2C_I2STAT_NO_INF:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	f04f 0204 	mov.w	r2, #4
    5772:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	f04f 0208 	mov.w	r2, #8
    577a:	619a      	str	r2, [r3, #24]
		break;
    577c:	e099      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	/* Reading phase -------------------------------------------------------- */
	/* Own SLA+R has been received, ACK has been returned */
	case I2C_I2STAT_S_RX_SLAW_ACK:
	/* General call address has been received, ACK has been returned */
	case I2C_I2STAT_S_RX_GENCALL_ACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	f04f 0204 	mov.w	r2, #4
    5784:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	f04f 0208 	mov.w	r2, #8
    578c:	619a      	str	r2, [r3, #24]
		break;
    578e:	e090      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) \
    5790:	693b      	ldr	r3, [r7, #16]
    5792:	695a      	ldr	r2, [r3, #20]
    5794:	693b      	ldr	r3, [r7, #16]
    5796:	691b      	ldr	r3, [r3, #16]
    5798:	429a      	cmp	r2, r3
    579a:	d212      	bcs.n	57c2 <I2C_SlaveHandler+0xde>
				&& (txrx_setup->rx_data != NULL)){
    579c:	693b      	ldr	r3, [r7, #16]
    579e:	68db      	ldr	r3, [r3, #12]
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) \
    57a0:	2b00      	cmp	r3, #0
    57a2:	d00e      	beq.n	57c2 <I2C_SlaveHandler+0xde>
				&& (txrx_setup->rx_data != NULL)){
			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
    57a4:	693b      	ldr	r3, [r7, #16]
    57a6:	68da      	ldr	r2, [r3, #12]
    57a8:	693b      	ldr	r3, [r7, #16]
    57aa:	695b      	ldr	r3, [r3, #20]
    57ac:	4413      	add	r3, r2
    57ae:	687a      	ldr	r2, [r7, #4]
    57b0:	6892      	ldr	r2, [r2, #8]
    57b2:	b2d2      	uxtb	r2, r2
    57b4:	701a      	strb	r2, [r3, #0]
			txrx_setup->rx_count++;
    57b6:	693b      	ldr	r3, [r7, #16]
    57b8:	695b      	ldr	r3, [r3, #20]
    57ba:	f103 0201 	add.w	r2, r3, #1
    57be:	693b      	ldr	r3, [r7, #16]
    57c0:	615a      	str	r2, [r3, #20]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	f04f 0204 	mov.w	r2, #4
    57c8:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	f04f 0208 	mov.w	r2, #8
    57d0:	619a      	str	r2, [r3, #24]
		break;
    57d2:	e06e      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	 * DATA byte has been received;
	 * NOT ACK has been returned */
	case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
	/* DATA has been received, NOT ACK has been returned */
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	f04f 0208 	mov.w	r2, #8
    57da:	619a      	str	r2, [r3, #24]
		break;
    57dc:	e069      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	 */

	/* A Stop or a repeat start condition */
	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, 0);
    57de:	6878      	ldr	r0, [r7, #4]
    57e0:	f04f 0100 	mov.w	r1, #0
    57e4:	f7ff fd3a 	bl	525c <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    57e8:	687b      	ldr	r3, [r7, #4]
    57ea:	f04f 0208 	mov.w	r2, #8
    57ee:	619a      	str	r2, [r3, #24]
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
    57f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57f4:	617b      	str	r3, [r7, #20]
    57f6:	e000      	b.n	57fa <I2C_SlaveHandler+0x116>
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
					goto s_int_end;
				}
			}
		}
    57f8:	bf00      	nop
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1){
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	f003 0308 	and.w	r3, r3, #8
    5802:	2b00      	cmp	r3, #0
    5804:	d005      	beq.n	5812 <I2C_SlaveHandler+0x12e>
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
    5806:	6878      	ldr	r0, [r7, #4]
    5808:	f04f 0101 	mov.w	r1, #1
    580c:	f7ff fd26 	bl	525c <I2C_IntCmd>
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
					goto s_int_end;
				}
			}
		}
		break;
    5810:	e04f      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI){
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
				break;
			} else {
				timeout--;
    5812:	697b      	ldr	r3, [r7, #20]
    5814:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5818:	617b      	str	r3, [r7, #20]
				if (timeout == 0){
    581a:	697b      	ldr	r3, [r7, #20]
    581c:	2b00      	cmp	r3, #0
    581e:	d1eb      	bne.n	57f8 <I2C_SlaveHandler+0x114>
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    5820:	693b      	ldr	r3, [r7, #16]
    5822:	699b      	ldr	r3, [r3, #24]
    5824:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    5828:	693b      	ldr	r3, [r7, #16]
    582a:	619a      	str	r2, [r3, #24]
					goto s_int_end;
    582c:	e02f      	b.n	588e <I2C_SlaveHandler+0x1aa>
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    582e:	693b      	ldr	r3, [r7, #16]
    5830:	689a      	ldr	r2, [r3, #8]
    5832:	693b      	ldr	r3, [r7, #16]
    5834:	685b      	ldr	r3, [r3, #4]
    5836:	429a      	cmp	r2, r3
    5838:	d212      	bcs.n	5860 <I2C_SlaveHandler+0x17c>
				&& (txrx_setup->tx_data != NULL)){
    583a:	693b      	ldr	r3, [r7, #16]
    583c:	681b      	ldr	r3, [r3, #0]
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) \
    583e:	2b00      	cmp	r3, #0
    5840:	d00e      	beq.n	5860 <I2C_SlaveHandler+0x17c>
				&& (txrx_setup->tx_data != NULL)){
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
    5842:	693b      	ldr	r3, [r7, #16]
    5844:	681a      	ldr	r2, [r3, #0]
    5846:	693b      	ldr	r3, [r7, #16]
    5848:	689b      	ldr	r3, [r3, #8]
    584a:	4413      	add	r3, r2
    584c:	781b      	ldrb	r3, [r3, #0]
    584e:	461a      	mov	r2, r3
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	609a      	str	r2, [r3, #8]
			txrx_setup->tx_count++;
    5854:	693b      	ldr	r3, [r7, #16]
    5856:	689b      	ldr	r3, [r3, #8]
    5858:	f103 0201 	add.w	r2, r3, #1
    585c:	693b      	ldr	r3, [r7, #16]
    585e:	609a      	str	r2, [r3, #8]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	f04f 0204 	mov.w	r2, #4
    5866:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	f04f 0208 	mov.w	r2, #8
    586e:	619a      	str	r2, [r3, #24]
		break;
    5870:	e01f      	b.n	58b2 <I2C_SlaveHandler+0x1ce>
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5872:	687b      	ldr	r3, [r7, #4]
    5874:	f04f 0204 	mov.w	r2, #4
    5878:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	f04f 0208 	mov.w	r2, #8
    5880:	619a      	str	r2, [r3, #24]
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    5882:	693b      	ldr	r3, [r7, #16]
    5884:	699b      	ldr	r3, [r3, #24]
    5886:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    588a:	693b      	ldr	r3, [r7, #16]
    588c:	619a      	str	r2, [r3, #24]

	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
    588e:	6878      	ldr	r0, [r7, #4]
    5890:	f04f 0100 	mov.w	r1, #0
    5894:	f7ff fce2 	bl	525c <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    5898:	687b      	ldr	r3, [r7, #4]
    589a:	f04f 022c 	mov.w	r2, #44	; 0x2c
    589e:	619a      	str	r2, [r3, #24]
		I2C_SlaveComplete[tmp] = TRUE;
    58a0:	68ba      	ldr	r2, [r7, #8]
    58a2:	f644 53c0 	movw	r3, #19904	; 0x4dc0
    58a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    58aa:	f04f 0101 	mov.w	r1, #1
    58ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		break;
	}
}
    58b2:	f107 0718 	add.w	r7, r7, #24
    58b6:	46bd      	mov	sp, r7
    58b8:	bd80      	pop	{r7, pc}
    58ba:	bf00      	nop

000058bc <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
    58bc:	b580      	push	{r7, lr}
    58be:	b088      	sub	sp, #32
    58c0:	af00      	add	r7, sp, #0
    58c2:	60f8      	str	r0, [r7, #12]
    58c4:	60b9      	str	r1, [r7, #8]
    58c6:	4613      	mov	r3, r2
    58c8:	71fb      	strb	r3, [r7, #7]
	uint8_t *rxdat;
	uint32_t CodeStatus;
	uint8_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
    58ca:	68bb      	ldr	r3, [r7, #8]
    58cc:	685b      	ldr	r3, [r3, #4]
    58ce:	617b      	str	r3, [r7, #20]
	rxdat = (uint8_t *) TransferCfg->rx_data;
    58d0:	68bb      	ldr	r3, [r7, #8]
    58d2:	691b      	ldr	r3, [r3, #16]
    58d4:	61bb      	str	r3, [r7, #24]
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    58d6:	68bb      	ldr	r3, [r7, #8]
    58d8:	f04f 0200 	mov.w	r2, #0
    58dc:	60da      	str	r2, [r3, #12]
	TransferCfg->rx_count = 0;
    58de:	68bb      	ldr	r3, [r7, #8]
    58e0:	f04f 0200 	mov.w	r2, #0
    58e4:	619a      	str	r2, [r3, #24]
	TransferCfg->status = 0;
    58e6:	68bb      	ldr	r3, [r7, #8]
    58e8:	f04f 0200 	mov.w	r2, #0
    58ec:	625a      	str	r2, [r3, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING){
    58ee:	79fb      	ldrb	r3, [r7, #7]
    58f0:	2b00      	cmp	r3, #0
    58f2:	f040 8156 	bne.w	5ba2 <I2C_MasterTransferData+0x2e6>

		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
    58f6:	68bb      	ldr	r3, [r7, #8]
    58f8:	f04f 0200 	mov.w	r2, #0
    58fc:	621a      	str	r2, [r3, #32]
    58fe:	e00c      	b.n	591a <I2C_MasterTransferData+0x5e>
			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
				// save status
				TransferCfg->status = CodeStatus;
				goto error;
			} else {
				goto retry;
    5900:	bf00      	nop
    5902:	e00a      	b.n	591a <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// save status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
					goto error;
				} else {
					goto retry;
    5904:	bf00      	nop
    5906:	e008      	b.n	591a <I2C_MasterTransferData+0x5e>
					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
						// save status
						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
						goto error;
					} else {
						goto retry;
    5908:	bf00      	nop
    590a:	e006      	b.n	591a <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// Update status
					TransferCfg->status = CodeStatus;
					goto error;
				} else {
					goto retry;
    590c:	bf00      	nop
    590e:	e004      	b.n	591a <I2C_MasterTransferData+0x5e>
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
					goto error;
				} else {
					goto retry;
    5910:	bf00      	nop
    5912:	e002      	b.n	591a <I2C_MasterTransferData+0x5e>
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
							// update status
							TransferCfg->status = CodeStatus;
							goto error;
						} else {
							goto retry;
    5914:	bf00      	nop
    5916:	e000      	b.n	591a <I2C_MasterTransferData+0x5e>
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
							// update status
							TransferCfg->status = CodeStatus;
							goto error;
						} else {
							goto retry;
    5918:	bf00      	nop

		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
    591a:	68bb      	ldr	r3, [r7, #8]
    591c:	685b      	ldr	r3, [r3, #4]
    591e:	617b      	str	r3, [r7, #20]
		rxdat = (uint8_t *) TransferCfg->rx_data;
    5920:	68bb      	ldr	r3, [r7, #8]
    5922:	691b      	ldr	r3, [r3, #16]
    5924:	61bb      	str	r3, [r7, #24]
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
    5926:	68bb      	ldr	r3, [r7, #8]
    5928:	f04f 0200 	mov.w	r2, #0
    592c:	60da      	str	r2, [r3, #12]
		TransferCfg->rx_count = 0;
    592e:	68bb      	ldr	r3, [r7, #8]
    5930:	f04f 0200 	mov.w	r2, #0
    5934:	619a      	str	r2, [r3, #24]
		CodeStatus = 0;
    5936:	f04f 0300 	mov.w	r3, #0
    593a:	61fb      	str	r3, [r7, #28]

		// Start command
		CodeStatus = I2C_Start(I2Cx);
    593c:	68f8      	ldr	r0, [r7, #12]
    593e:	f7ff fa99 	bl	4e74 <I2C_Start>
    5942:	4603      	mov	r3, r0
    5944:	61fb      	str	r3, [r7, #28]
		if ((CodeStatus != I2C_I2STAT_M_TX_START) \
    5946:	69fb      	ldr	r3, [r7, #28]
    5948:	2b08      	cmp	r3, #8
    594a:	d012      	beq.n	5972 <I2C_MasterTransferData+0xb6>
    594c:	69fb      	ldr	r3, [r7, #28]
    594e:	2b10      	cmp	r3, #16
    5950:	d00f      	beq.n	5972 <I2C_MasterTransferData+0xb6>
				&& (CodeStatus != I2C_I2STAT_M_TX_RESTART)){
			TransferCfg->retransmissions_count++;
    5952:	68bb      	ldr	r3, [r7, #8]
    5954:	6a1b      	ldr	r3, [r3, #32]
    5956:	f103 0201 	add.w	r2, r3, #1
    595a:	68bb      	ldr	r3, [r7, #8]
    595c:	621a      	str	r2, [r3, #32]
			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    595e:	68bb      	ldr	r3, [r7, #8]
    5960:	6a1a      	ldr	r2, [r3, #32]
    5962:	68bb      	ldr	r3, [r7, #8]
    5964:	69db      	ldr	r3, [r3, #28]
    5966:	429a      	cmp	r2, r3
    5968:	d9ca      	bls.n	5900 <I2C_MasterTransferData+0x44>
				// save status
				TransferCfg->status = CodeStatus;
    596a:	68bb      	ldr	r3, [r7, #8]
    596c:	69fa      	ldr	r2, [r7, #28]
    596e:	625a      	str	r2, [r3, #36]	; 0x24
				goto error;
    5970:	e111      	b.n	5b96 <I2C_MasterTransferData+0x2da>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL)){
    5972:	68bb      	ldr	r3, [r7, #8]
    5974:	689b      	ldr	r3, [r3, #8]
    5976:	2b00      	cmp	r3, #0
    5978:	d053      	beq.n	5a22 <I2C_MasterTransferData+0x166>
    597a:	68bb      	ldr	r3, [r7, #8]
    597c:	685b      	ldr	r3, [r3, #4]
    597e:	2b00      	cmp	r3, #0
    5980:	d04f      	beq.n	5a22 <I2C_MasterTransferData+0x166>

			/* Send slave address + WR direction bit = 0 ----------------------------------- */
			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
    5982:	68bb      	ldr	r3, [r7, #8]
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	b2db      	uxtb	r3, r3
    5988:	ea4f 0343 	mov.w	r3, r3, lsl #1
    598c:	b2db      	uxtb	r3, r3
    598e:	68f8      	ldr	r0, [r7, #12]
    5990:	4619      	mov	r1, r3
    5992:	f7ff faab 	bl	4eec <I2C_SendByte>
    5996:	4603      	mov	r3, r0
    5998:	61fb      	str	r3, [r7, #28]
			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK){
    599a:	69fb      	ldr	r3, [r7, #28]
    599c:	2b18      	cmp	r3, #24
    599e:	d039      	beq.n	5a14 <I2C_MasterTransferData+0x158>
				TransferCfg->retransmissions_count++;
    59a0:	68bb      	ldr	r3, [r7, #8]
    59a2:	6a1b      	ldr	r3, [r3, #32]
    59a4:	f103 0201 	add.w	r2, r3, #1
    59a8:	68bb      	ldr	r3, [r7, #8]
    59aa:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    59ac:	68bb      	ldr	r3, [r7, #8]
    59ae:	6a1a      	ldr	r2, [r3, #32]
    59b0:	68bb      	ldr	r3, [r7, #8]
    59b2:	69db      	ldr	r3, [r3, #28]
    59b4:	429a      	cmp	r2, r3
    59b6:	d9a5      	bls.n	5904 <I2C_MasterTransferData+0x48>
					// save status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    59b8:	69fb      	ldr	r3, [r7, #28]
    59ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    59be:	68bb      	ldr	r3, [r7, #8]
    59c0:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    59c2:	e0e8      	b.n	5b96 <I2C_MasterTransferData+0x2da>
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
			{
				CodeStatus = I2C_SendByte(I2Cx, *txdat);
    59c4:	697b      	ldr	r3, [r7, #20]
    59c6:	781b      	ldrb	r3, [r3, #0]
    59c8:	68f8      	ldr	r0, [r7, #12]
    59ca:	4619      	mov	r1, r3
    59cc:	f7ff fa8e 	bl	4eec <I2C_SendByte>
    59d0:	4603      	mov	r3, r0
    59d2:	61fb      	str	r3, [r7, #28]
				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK){
    59d4:	69fb      	ldr	r3, [r7, #28]
    59d6:	2b28      	cmp	r3, #40	; 0x28
    59d8:	d011      	beq.n	59fe <I2C_MasterTransferData+0x142>
					TransferCfg->retransmissions_count++;
    59da:	68bb      	ldr	r3, [r7, #8]
    59dc:	6a1b      	ldr	r3, [r3, #32]
    59de:	f103 0201 	add.w	r2, r3, #1
    59e2:	68bb      	ldr	r3, [r7, #8]
    59e4:	621a      	str	r2, [r3, #32]
					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    59e6:	68bb      	ldr	r3, [r7, #8]
    59e8:	6a1a      	ldr	r2, [r3, #32]
    59ea:	68bb      	ldr	r3, [r7, #8]
    59ec:	69db      	ldr	r3, [r3, #28]
    59ee:	429a      	cmp	r2, r3
    59f0:	d98a      	bls.n	5908 <I2C_MasterTransferData+0x4c>
						// save status
						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    59f2:	69fb      	ldr	r3, [r7, #28]
    59f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    59f8:	68bb      	ldr	r3, [r7, #8]
    59fa:	625a      	str	r2, [r3, #36]	; 0x24
						goto error;
    59fc:	e0cb      	b.n	5b96 <I2C_MasterTransferData+0x2da>
					} else {
						goto retry;
					}
				}

				txdat++;
    59fe:	697b      	ldr	r3, [r7, #20]
    5a00:	f103 0301 	add.w	r3, r3, #1
    5a04:	617b      	str	r3, [r7, #20]
				TransferCfg->tx_count++;
    5a06:	68bb      	ldr	r3, [r7, #8]
    5a08:	68db      	ldr	r3, [r3, #12]
    5a0a:	f103 0201 	add.w	r2, r3, #1
    5a0e:	68bb      	ldr	r3, [r7, #8]
    5a10:	60da      	str	r2, [r3, #12]
    5a12:	e000      	b.n	5a16 <I2C_MasterTransferData+0x15a>
					goto retry;
				}
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
    5a14:	bf00      	nop
    5a16:	68bb      	ldr	r3, [r7, #8]
    5a18:	68da      	ldr	r2, [r3, #12]
    5a1a:	68bb      	ldr	r3, [r7, #8]
    5a1c:	689b      	ldr	r3, [r3, #8]
    5a1e:	429a      	cmp	r2, r3
    5a20:	d3d0      	bcc.n	59c4 <I2C_MasterTransferData+0x108>
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
    5a22:	68bb      	ldr	r3, [r7, #8]
    5a24:	689b      	ldr	r3, [r3, #8]
    5a26:	2b00      	cmp	r3, #0
    5a28:	d027      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
    5a2a:	68bb      	ldr	r3, [r7, #8]
    5a2c:	685b      	ldr	r3, [r3, #4]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d023      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
    5a32:	68bb      	ldr	r3, [r7, #8]
    5a34:	695b      	ldr	r3, [r3, #20]
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
    5a36:	2b00      	cmp	r3, #0
    5a38:	d01f      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
    5a3a:	68bb      	ldr	r3, [r7, #8]
    5a3c:	691b      	ldr	r3, [r3, #16]
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d01b      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){

			CodeStatus = I2C_Start(I2Cx);
    5a42:	68f8      	ldr	r0, [r7, #12]
    5a44:	f7ff fa16 	bl	4e74 <I2C_Start>
    5a48:	4603      	mov	r3, r0
    5a4a:	61fb      	str	r3, [r7, #28]
			if ((CodeStatus != I2C_I2STAT_M_RX_START) \
    5a4c:	69fb      	ldr	r3, [r7, #28]
    5a4e:	2b08      	cmp	r3, #8
    5a50:	d013      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
    5a52:	69fb      	ldr	r3, [r7, #28]
    5a54:	2b10      	cmp	r3, #16
    5a56:	d010      	beq.n	5a7a <I2C_MasterTransferData+0x1be>
					&& (CodeStatus != I2C_I2STAT_M_RX_RESTART)){
				TransferCfg->retransmissions_count++;
    5a58:	68bb      	ldr	r3, [r7, #8]
    5a5a:	6a1b      	ldr	r3, [r3, #32]
    5a5c:	f103 0201 	add.w	r2, r3, #1
    5a60:	68bb      	ldr	r3, [r7, #8]
    5a62:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    5a64:	68bb      	ldr	r3, [r7, #8]
    5a66:	6a1a      	ldr	r2, [r3, #32]
    5a68:	68bb      	ldr	r3, [r7, #8]
    5a6a:	69db      	ldr	r3, [r3, #28]
    5a6c:	429a      	cmp	r2, r3
    5a6e:	f67f af4d 	bls.w	590c <I2C_MasterTransferData+0x50>
					// Update status
					TransferCfg->status = CodeStatus;
    5a72:	68bb      	ldr	r3, [r7, #8]
    5a74:	69fa      	ldr	r2, [r7, #28]
    5a76:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    5a78:	e08d      	b.n	5b96 <I2C_MasterTransferData+0x2da>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL)){
    5a7a:	68bb      	ldr	r3, [r7, #8]
    5a7c:	695b      	ldr	r3, [r3, #20]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	f000 8083 	beq.w	5b8a <I2C_MasterTransferData+0x2ce>
    5a84:	68bb      	ldr	r3, [r7, #8]
    5a86:	691b      	ldr	r3, [r3, #16]
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d07e      	beq.n	5b8a <I2C_MasterTransferData+0x2ce>
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
    5a8c:	68bb      	ldr	r3, [r7, #8]
    5a8e:	681b      	ldr	r3, [r3, #0]
    5a90:	b2db      	uxtb	r3, r3
    5a92:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5a96:	b2db      	uxtb	r3, r3
    5a98:	f043 0301 	orr.w	r3, r3, #1
    5a9c:	b2db      	uxtb	r3, r3
    5a9e:	68f8      	ldr	r0, [r7, #12]
    5aa0:	4619      	mov	r1, r3
    5aa2:	f7ff fa23 	bl	4eec <I2C_SendByte>
    5aa6:	4603      	mov	r3, r0
    5aa8:	61fb      	str	r3, [r7, #28]
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK){
    5aaa:	69fb      	ldr	r3, [r7, #28]
    5aac:	2b40      	cmp	r3, #64	; 0x40
    5aae:	d065      	beq.n	5b7c <I2C_MasterTransferData+0x2c0>
				TransferCfg->retransmissions_count++;
    5ab0:	68bb      	ldr	r3, [r7, #8]
    5ab2:	6a1b      	ldr	r3, [r3, #32]
    5ab4:	f103 0201 	add.w	r2, r3, #1
    5ab8:	68bb      	ldr	r3, [r7, #8]
    5aba:	621a      	str	r2, [r3, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    5abc:	68bb      	ldr	r3, [r7, #8]
    5abe:	6a1a      	ldr	r2, [r3, #32]
    5ac0:	68bb      	ldr	r3, [r7, #8]
    5ac2:	69db      	ldr	r3, [r3, #28]
    5ac4:	429a      	cmp	r2, r3
    5ac6:	f67f af23 	bls.w	5910 <I2C_MasterTransferData+0x54>
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    5aca:	69fb      	ldr	r3, [r7, #28]
    5acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    5ad0:	68bb      	ldr	r3, [r7, #8]
    5ad2:	625a      	str	r2, [r3, #36]	; 0x24
					goto error;
    5ad4:	e05f      	b.n	5b96 <I2C_MasterTransferData+0x2da>
				/*
				 * Note that: if data length is only one, the master should not
				 * issue an ACK signal on bus after reading to avoid of next data frame
				 * on slave side
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1)){
    5ad6:	68bb      	ldr	r3, [r7, #8]
    5ad8:	699a      	ldr	r2, [r3, #24]
    5ada:	68bb      	ldr	r3, [r7, #8]
    5adc:	695b      	ldr	r3, [r3, #20]
    5ade:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5ae2:	429a      	cmp	r2, r3
    5ae4:	d21d      	bcs.n	5b22 <I2C_MasterTransferData+0x266>
					// Issue an ACK signal for next data frame
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
    5ae6:	f107 0313 	add.w	r3, r7, #19
    5aea:	68f8      	ldr	r0, [r7, #12]
    5aec:	4619      	mov	r1, r3
    5aee:	f04f 0201 	mov.w	r2, #1
    5af2:	f7ff fa23 	bl	4f3c <I2C_GetByte>
    5af6:	4603      	mov	r3, r0
    5af8:	61fb      	str	r3, [r7, #28]
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK){
    5afa:	69fb      	ldr	r3, [r7, #28]
    5afc:	2b50      	cmp	r3, #80	; 0x50
    5afe:	d02e      	beq.n	5b5e <I2C_MasterTransferData+0x2a2>
						TransferCfg->retransmissions_count++;
    5b00:	68bb      	ldr	r3, [r7, #8]
    5b02:	6a1b      	ldr	r3, [r3, #32]
    5b04:	f103 0201 	add.w	r2, r3, #1
    5b08:	68bb      	ldr	r3, [r7, #8]
    5b0a:	621a      	str	r2, [r3, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    5b0c:	68bb      	ldr	r3, [r7, #8]
    5b0e:	6a1a      	ldr	r2, [r3, #32]
    5b10:	68bb      	ldr	r3, [r7, #8]
    5b12:	69db      	ldr	r3, [r3, #28]
    5b14:	429a      	cmp	r2, r3
    5b16:	f67f aefd 	bls.w	5914 <I2C_MasterTransferData+0x58>
							// update status
							TransferCfg->status = CodeStatus;
    5b1a:	68bb      	ldr	r3, [r7, #8]
    5b1c:	69fa      	ldr	r2, [r7, #28]
    5b1e:	625a      	str	r2, [r3, #36]	; 0x24
							goto error;
    5b20:	e039      	b.n	5b96 <I2C_MasterTransferData+0x2da>
							goto retry;
						}
					}
				} else {
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
    5b22:	f107 0313 	add.w	r3, r7, #19
    5b26:	68f8      	ldr	r0, [r7, #12]
    5b28:	4619      	mov	r1, r3
    5b2a:	f04f 0200 	mov.w	r2, #0
    5b2e:	f7ff fa05 	bl	4f3c <I2C_GetByte>
    5b32:	4603      	mov	r3, r0
    5b34:	61fb      	str	r3, [r7, #28]
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK){
    5b36:	69fb      	ldr	r3, [r7, #28]
    5b38:	2b58      	cmp	r3, #88	; 0x58
    5b3a:	d011      	beq.n	5b60 <I2C_MasterTransferData+0x2a4>
						TransferCfg->retransmissions_count++;
    5b3c:	68bb      	ldr	r3, [r7, #8]
    5b3e:	6a1b      	ldr	r3, [r3, #32]
    5b40:	f103 0201 	add.w	r2, r3, #1
    5b44:	68bb      	ldr	r3, [r7, #8]
    5b46:	621a      	str	r2, [r3, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    5b48:	68bb      	ldr	r3, [r7, #8]
    5b4a:	6a1a      	ldr	r2, [r3, #32]
    5b4c:	68bb      	ldr	r3, [r7, #8]
    5b4e:	69db      	ldr	r3, [r3, #28]
    5b50:	429a      	cmp	r2, r3
    5b52:	f67f aee1 	bls.w	5918 <I2C_MasterTransferData+0x5c>
							// update status
							TransferCfg->status = CodeStatus;
    5b56:	68bb      	ldr	r3, [r7, #8]
    5b58:	69fa      	ldr	r2, [r7, #28]
    5b5a:	625a      	str	r2, [r3, #36]	; 0x24
							goto error;
    5b5c:	e01b      	b.n	5b96 <I2C_MasterTransferData+0x2da>
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
							// update status
							TransferCfg->status = CodeStatus;
							goto error;
						} else {
							goto retry;
    5b5e:	bf00      	nop
						} else {
							goto retry;
						}
					}
				}
				*rxdat++ = tmp;
    5b60:	7cfa      	ldrb	r2, [r7, #19]
    5b62:	69bb      	ldr	r3, [r7, #24]
    5b64:	701a      	strb	r2, [r3, #0]
    5b66:	69bb      	ldr	r3, [r7, #24]
    5b68:	f103 0301 	add.w	r3, r3, #1
    5b6c:	61bb      	str	r3, [r7, #24]
				TransferCfg->rx_count++;
    5b6e:	68bb      	ldr	r3, [r7, #8]
    5b70:	699b      	ldr	r3, [r3, #24]
    5b72:	f103 0201 	add.w	r2, r3, #1
    5b76:	68bb      	ldr	r3, [r7, #8]
    5b78:	619a      	str	r2, [r3, #24]
    5b7a:	e000      	b.n	5b7e <I2C_MasterTransferData+0x2c2>
					goto retry;
				}
			}

			/* Receive a number of data bytes ------------------------------------------------- */
			while (TransferCfg->rx_count < TransferCfg->rx_length){
    5b7c:	bf00      	nop
    5b7e:	68bb      	ldr	r3, [r7, #8]
    5b80:	699a      	ldr	r2, [r3, #24]
    5b82:	68bb      	ldr	r3, [r7, #8]
    5b84:	695b      	ldr	r3, [r3, #20]
    5b86:	429a      	cmp	r2, r3
    5b88:	d3a5      	bcc.n	5ad6 <I2C_MasterTransferData+0x21a>
				TransferCfg->rx_count++;
			}
		}

		/* Send STOP condition ------------------------------------------------- */
		I2C_Stop(I2Cx);
    5b8a:	68f8      	ldr	r0, [r7, #12]
    5b8c:	f7ff f992 	bl	4eb4 <I2C_Stop>
		return SUCCESS;
    5b90:	f04f 0301 	mov.w	r3, #1
    5b94:	e034      	b.n	5c00 <I2C_MasterTransferData+0x344>

error:
		// Send stop condition
		I2C_Stop(I2Cx);
    5b96:	68f8      	ldr	r0, [r7, #12]
    5b98:	f7ff f98c 	bl	4eb4 <I2C_Stop>
		return ERROR;
    5b9c:	f04f 0300 	mov.w	r3, #0
    5ba0:	e02e      	b.n	5c00 <I2C_MasterTransferData+0x344>
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT){
    5ba2:	79fb      	ldrb	r3, [r7, #7]
    5ba4:	2b01      	cmp	r3, #1
    5ba6:	d129      	bne.n	5bfc <I2C_MasterTransferData+0x340>
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
    5ba8:	68f8      	ldr	r0, [r7, #12]
    5baa:	f7ff f939 	bl	4e20 <I2C_getNum>
    5bae:	4603      	mov	r3, r0
    5bb0:	b2db      	uxtb	r3, r3
    5bb2:	74fb      	strb	r3, [r7, #19]
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
    5bb4:	7cfb      	ldrb	r3, [r7, #19]
    5bb6:	461a      	mov	r2, r3
    5bb8:	68b9      	ldr	r1, [r7, #8]
    5bba:	f644 539c 	movw	r3, #19868	; 0x4d9c
    5bbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5bc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
    5bc6:	7cfb      	ldrb	r3, [r7, #19]
    5bc8:	f644 529c 	movw	r2, #19868	; 0x4d9c
    5bcc:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5bd0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5bd4:	4413      	add	r3, r2
    5bd6:	f04f 0200 	mov.w	r2, #0
    5bda:	605a      	str	r2, [r3, #4]

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5bdc:	68fb      	ldr	r3, [r7, #12]
    5bde:	f04f 0208 	mov.w	r2, #8
    5be2:	619a      	str	r2, [r3, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
    5be4:	68fb      	ldr	r3, [r7, #12]
    5be6:	f04f 0220 	mov.w	r2, #32
    5bea:	601a      	str	r2, [r3, #0]
		I2C_IntCmd(I2Cx, 1);
    5bec:	68f8      	ldr	r0, [r7, #12]
    5bee:	f04f 0101 	mov.w	r1, #1
    5bf2:	f7ff fb33 	bl	525c <I2C_IntCmd>

		return (SUCCESS);
    5bf6:	f04f 0301 	mov.w	r3, #1
    5bfa:	e001      	b.n	5c00 <I2C_MasterTransferData+0x344>
	}

	return ERROR;
    5bfc:	f04f 0300 	mov.w	r3, #0
}
    5c00:	4618      	mov	r0, r3
    5c02:	f107 0720 	add.w	r7, r7, #32
    5c06:	46bd      	mov	sp, r7
    5c08:	bd80      	pop	{r7, pc}
    5c0a:	bf00      	nop

00005c0c <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	b08a      	sub	sp, #40	; 0x28
    5c10:	af00      	add	r7, sp, #0
    5c12:	60f8      	str	r0, [r7, #12]
    5c14:	60b9      	str	r1, [r7, #8]
    5c16:	4613      	mov	r3, r2
    5c18:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout;
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
    5c1a:	68bb      	ldr	r3, [r7, #8]
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	613b      	str	r3, [r7, #16]
	rxdat = (uint8_t *) TransferCfg->rx_data;
    5c20:	68bb      	ldr	r3, [r7, #8]
    5c22:	68db      	ldr	r3, [r3, #12]
    5c24:	617b      	str	r3, [r7, #20]
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    5c26:	68bb      	ldr	r3, [r7, #8]
    5c28:	f04f 0200 	mov.w	r2, #0
    5c2c:	609a      	str	r2, [r3, #8]
	TransferCfg->rx_count = 0;
    5c2e:	68bb      	ldr	r3, [r7, #8]
    5c30:	f04f 0200 	mov.w	r2, #0
    5c34:	615a      	str	r2, [r3, #20]
	TransferCfg->status = 0;
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	f04f 0200 	mov.w	r2, #0
    5c3c:	619a      	str	r2, [r3, #24]


	// Polling option
	if (Opt == I2C_TRANSFER_POLLING){
    5c3e:	79fb      	ldrb	r3, [r7, #7]
    5c40:	2b00      	cmp	r3, #0
    5c42:	f040 80e5 	bne.w	5e10 <I2C_SlaveTransferData+0x204>

		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5c46:	68fb      	ldr	r3, [r7, #12]
    5c48:	f04f 0204 	mov.w	r2, #4
    5c4c:	601a      	str	r2, [r3, #0]
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
    5c4e:	68fb      	ldr	r3, [r7, #12]
    5c50:	f04f 0228 	mov.w	r2, #40	; 0x28
    5c54:	619a      	str	r2, [r3, #24]

		time_en = 0;
    5c56:	f04f 0300 	mov.w	r3, #0
    5c5a:	623b      	str	r3, [r7, #32]
		timeout = 0;
    5c5c:	f04f 0300 	mov.w	r3, #0
    5c60:	61fb      	str	r3, [r7, #28]
    5c62:	e002      	b.n	5c6a <I2C_SlaveTransferData+0x5e>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
					// it's really a stop condition, goto end stage
					goto s_end_stage;
				}
			}
		}
    5c64:	bf00      	nop
    5c66:	e000      	b.n	5c6a <I2C_SlaveTransferData+0x5e>
    5c68:	bf00      	nop
		timeout = 0;

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
    5c6a:	68fb      	ldr	r3, [r7, #12]
    5c6c:	681b      	ldr	r3, [r3, #0]
    5c6e:	f003 0308 	and.w	r3, r3, #8
    5c72:	2b00      	cmp	r3, #0
    5c74:	f000 80ad 	beq.w	5dd2 <I2C_SlaveTransferData+0x1c6>
			{
				time_en = 0;
    5c78:	f04f 0300 	mov.w	r3, #0
    5c7c:	623b      	str	r3, [r7, #32]

				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	685b      	ldr	r3, [r3, #4]
    5c82:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5c86:	61bb      	str	r3, [r7, #24]
    5c88:	69bb      	ldr	r3, [r7, #24]
    5c8a:	2b98      	cmp	r3, #152	; 0x98
    5c8c:	d050      	beq.n	5d30 <I2C_SlaveTransferData+0x124>
    5c8e:	2b98      	cmp	r3, #152	; 0x98
    5c90:	d80d      	bhi.n	5cae <I2C_SlaveTransferData+0xa2>
    5c92:	2b80      	cmp	r3, #128	; 0x80
    5c94:	d02a      	beq.n	5cec <I2C_SlaveTransferData+0xe0>
    5c96:	2b80      	cmp	r3, #128	; 0x80
    5c98:	d804      	bhi.n	5ca4 <I2C_SlaveTransferData+0x98>
    5c9a:	2b60      	cmp	r3, #96	; 0x60
    5c9c:	d01d      	beq.n	5cda <I2C_SlaveTransferData+0xce>
    5c9e:	2b70      	cmp	r3, #112	; 0x70
    5ca0:	d01b      	beq.n	5cda <I2C_SlaveTransferData+0xce>
    5ca2:	e086      	b.n	5db2 <I2C_SlaveTransferData+0x1a6>
    5ca4:	2b88      	cmp	r3, #136	; 0x88
    5ca6:	d043      	beq.n	5d30 <I2C_SlaveTransferData+0x124>
    5ca8:	2b90      	cmp	r3, #144	; 0x90
    5caa:	d01f      	beq.n	5cec <I2C_SlaveTransferData+0xe0>
    5cac:	e081      	b.n	5db2 <I2C_SlaveTransferData+0x1a6>
    5cae:	2bb8      	cmp	r3, #184	; 0xb8
    5cb0:	d04e      	beq.n	5d50 <I2C_SlaveTransferData+0x144>
    5cb2:	2bb8      	cmp	r3, #184	; 0xb8
    5cb4:	d804      	bhi.n	5cc0 <I2C_SlaveTransferData+0xb4>
    5cb6:	2ba0      	cmp	r3, #160	; 0xa0
    5cb8:	d03f      	beq.n	5d3a <I2C_SlaveTransferData+0x12e>
    5cba:	2ba8      	cmp	r3, #168	; 0xa8
    5cbc:	d048      	beq.n	5d50 <I2C_SlaveTransferData+0x144>
    5cbe:	e078      	b.n	5db2 <I2C_SlaveTransferData+0x1a6>
    5cc0:	2bc0      	cmp	r3, #192	; 0xc0
    5cc2:	d067      	beq.n	5d94 <I2C_SlaveTransferData+0x188>
    5cc4:	2bf8      	cmp	r3, #248	; 0xf8
    5cc6:	d174      	bne.n	5db2 <I2C_SlaveTransferData+0x1a6>
				{

				/* No status information */
				case I2C_I2STAT_NO_INF:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5cc8:	68fb      	ldr	r3, [r7, #12]
    5cca:	f04f 0204 	mov.w	r2, #4
    5cce:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5cd0:	68fb      	ldr	r3, [r7, #12]
    5cd2:	f04f 0208 	mov.w	r2, #8
    5cd6:	619a      	str	r2, [r3, #24]
					break;
    5cd8:	e07a      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				/* Reading phase -------------------------------------------------------- */
				/* Own SLA+R has been received, ACK has been returned */
				case I2C_I2STAT_S_RX_SLAW_ACK:
				/* General call address has been received, ACK has been returned */
				case I2C_I2STAT_S_RX_GENCALL_ACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5cda:	68fb      	ldr	r3, [r7, #12]
    5cdc:	f04f 0204 	mov.w	r2, #4
    5ce0:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5ce2:	68fb      	ldr	r3, [r7, #12]
    5ce4:	f04f 0208 	mov.w	r2, #8
    5ce8:	619a      	str	r2, [r3, #24]
					break;
    5cea:	e071      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
    5cec:	68bb      	ldr	r3, [r7, #8]
    5cee:	695a      	ldr	r2, [r3, #20]
    5cf0:	68bb      	ldr	r3, [r7, #8]
    5cf2:	691b      	ldr	r3, [r3, #16]
    5cf4:	429a      	cmp	r2, r3
    5cf6:	d212      	bcs.n	5d1e <I2C_SlaveTransferData+0x112>
							&& (TransferCfg->rx_data != NULL)){
    5cf8:	68bb      	ldr	r3, [r7, #8]
    5cfa:	68db      	ldr	r3, [r3, #12]
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	d00e      	beq.n	5d1e <I2C_SlaveTransferData+0x112>
							&& (TransferCfg->rx_data != NULL)){
						*rxdat++ = (uint8_t)I2Cx->I2DAT;
    5d00:	68fb      	ldr	r3, [r7, #12]
    5d02:	689b      	ldr	r3, [r3, #8]
    5d04:	b2da      	uxtb	r2, r3
    5d06:	697b      	ldr	r3, [r7, #20]
    5d08:	701a      	strb	r2, [r3, #0]
    5d0a:	697b      	ldr	r3, [r7, #20]
    5d0c:	f103 0301 	add.w	r3, r3, #1
    5d10:	617b      	str	r3, [r7, #20]
						TransferCfg->rx_count++;
    5d12:	68bb      	ldr	r3, [r7, #8]
    5d14:	695b      	ldr	r3, [r3, #20]
    5d16:	f103 0201 	add.w	r2, r3, #1
    5d1a:	68bb      	ldr	r3, [r7, #8]
    5d1c:	615a      	str	r2, [r3, #20]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	f04f 0204 	mov.w	r2, #4
    5d24:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	f04f 0208 	mov.w	r2, #8
    5d2c:	619a      	str	r2, [r3, #24]
					break;
    5d2e:	e04f      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				 * DATA byte has been received;
				 * NOT ACK has been returned */
				case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
				/* DATA has been received, NOT ACK has been returned */
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5d30:	68fb      	ldr	r3, [r7, #12]
    5d32:	f04f 0208 	mov.w	r2, #8
    5d36:	619a      	str	r2, [r3, #24]
					break;
    5d38:	e04a      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				 * next session that is slave receive data will be completed.
				 */

				/* A Stop or a repeat start condition */
				case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	f04f 0208 	mov.w	r2, #8
    5d40:	619a      	str	r2, [r3, #24]
					// enable time out
					time_en = 1;
    5d42:	f04f 0301 	mov.w	r3, #1
    5d46:	623b      	str	r3, [r7, #32]
					timeout = 0;
    5d48:	f04f 0300 	mov.w	r3, #0
    5d4c:	61fb      	str	r3, [r7, #28]
					break;
    5d4e:	e03f      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
    5d50:	68bb      	ldr	r3, [r7, #8]
    5d52:	689a      	ldr	r2, [r3, #8]
    5d54:	68bb      	ldr	r3, [r7, #8]
    5d56:	685b      	ldr	r3, [r3, #4]
    5d58:	429a      	cmp	r2, r3
    5d5a:	d212      	bcs.n	5d82 <I2C_SlaveTransferData+0x176>
							&& (TransferCfg->tx_data != NULL)){
    5d5c:	68bb      	ldr	r3, [r7, #8]
    5d5e:	681b      	ldr	r3, [r3, #0]
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
    5d60:	2b00      	cmp	r3, #0
    5d62:	d00e      	beq.n	5d82 <I2C_SlaveTransferData+0x176>
							&& (TransferCfg->tx_data != NULL)){
						I2Cx->I2DAT = *txdat++;
    5d64:	693b      	ldr	r3, [r7, #16]
    5d66:	781b      	ldrb	r3, [r3, #0]
    5d68:	461a      	mov	r2, r3
    5d6a:	68fb      	ldr	r3, [r7, #12]
    5d6c:	609a      	str	r2, [r3, #8]
    5d6e:	693b      	ldr	r3, [r7, #16]
    5d70:	f103 0301 	add.w	r3, r3, #1
    5d74:	613b      	str	r3, [r7, #16]
						TransferCfg->tx_count++;
    5d76:	68bb      	ldr	r3, [r7, #8]
    5d78:	689b      	ldr	r3, [r3, #8]
    5d7a:	f103 0201 	add.w	r2, r3, #1
    5d7e:	68bb      	ldr	r3, [r7, #8]
    5d80:	609a      	str	r2, [r3, #8]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5d82:	68fb      	ldr	r3, [r7, #12]
    5d84:	f04f 0204 	mov.w	r2, #4
    5d88:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5d8a:	68fb      	ldr	r3, [r7, #12]
    5d8c:	f04f 0208 	mov.w	r2, #8
    5d90:	619a      	str	r2, [r3, #24]
					break;
    5d92:	e01d      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>
				 * Note: Don't wait for stop event since in slave transmit mode,
				 * since there no proof lets us know when a stop signal has been received
				 * on slave side.
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5d94:	68fb      	ldr	r3, [r7, #12]
    5d96:	f04f 0204 	mov.w	r2, #4
    5d9a:	601a      	str	r2, [r3, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5d9c:	68fb      	ldr	r3, [r7, #12]
    5d9e:	f04f 0208 	mov.w	r2, #8
    5da2:	619a      	str	r2, [r3, #24]
					// enable time out
					time_en = 1;
    5da4:	f04f 0301 	mov.w	r3, #1
    5da8:	623b      	str	r3, [r7, #32]
					timeout = 0;
    5daa:	f04f 0300 	mov.w	r3, #0
    5dae:	61fb      	str	r3, [r7, #28]
					break;
    5db0:	e00e      	b.n	5dd0 <I2C_SlaveTransferData+0x1c4>

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	f04f 0208 	mov.w	r2, #8
    5db8:	619a      	str	r2, [r3, #24]
					goto s_error;
    5dba:	bf00      	nop
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    5dbc:	68fb      	ldr	r3, [r7, #12]
    5dbe:	f04f 0204 	mov.w	r2, #4
    5dc2:	619a      	str	r2, [r3, #24]
		// Update status
		TransferCfg->status = CodeStatus;
    5dc4:	68bb      	ldr	r3, [r7, #8]
    5dc6:	69ba      	ldr	r2, [r7, #24]
    5dc8:	619a      	str	r2, [r3, #24]
		return ERROR;
    5dca:	f04f 0300 	mov.w	r3, #0
    5dce:	e04c      	b.n	5e6a <I2C_SlaveTransferData+0x25e>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
					// it's really a stop condition, goto end stage
					goto s_end_stage;
				}
			}
		}
    5dd0:	e74b      	b.n	5c6a <I2C_SlaveTransferData+0x5e>
				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					goto s_error;
				}
			} else if (time_en){
    5dd2:	6a3b      	ldr	r3, [r7, #32]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	f43f af45 	beq.w	5c64 <I2C_SlaveTransferData+0x58>
				if (timeout++ > I2C_SLAVE_TIME_OUT){
    5dda:	69fb      	ldr	r3, [r7, #28]
    5ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5de0:	bf94      	ite	ls
    5de2:	2300      	movls	r3, #0
    5de4:	2301      	movhi	r3, #1
    5de6:	b2db      	uxtb	r3, r3
    5de8:	69fa      	ldr	r2, [r7, #28]
    5dea:	f102 0201 	add.w	r2, r2, #1
    5dee:	61fa      	str	r2, [r7, #28]
    5df0:	2b00      	cmp	r3, #0
    5df2:	f43f af39 	beq.w	5c68 <I2C_SlaveTransferData+0x5c>
					// it's really a stop condition, goto end stage
					goto s_end_stage;
    5df6:	bf00      	nop
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    5df8:	68fb      	ldr	r3, [r7, #12]
    5dfa:	f04f 0204 	mov.w	r2, #4
    5dfe:	619a      	str	r2, [r3, #24]
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
    5e00:	69bb      	ldr	r3, [r7, #24]
    5e02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    5e06:	68bb      	ldr	r3, [r7, #8]
    5e08:	619a      	str	r2, [r3, #24]
		return SUCCESS;
    5e0a:	f04f 0301 	mov.w	r3, #1
    5e0e:	e02c      	b.n	5e6a <I2C_SlaveTransferData+0x25e>
		// Update status
		TransferCfg->status = CodeStatus;
		return ERROR;
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT){
    5e10:	79fb      	ldrb	r3, [r7, #7]
    5e12:	2b01      	cmp	r3, #1
    5e14:	d127      	bne.n	5e66 <I2C_SlaveTransferData+0x25a>
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
    5e16:	68f8      	ldr	r0, [r7, #12]
    5e18:	f7ff f802 	bl	4e20 <I2C_getNum>
    5e1c:	4603      	mov	r3, r0
    5e1e:	627b      	str	r3, [r7, #36]	; 0x24
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
    5e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e22:	68b9      	ldr	r1, [r7, #8]
    5e24:	f644 539c 	movw	r3, #19868	; 0x4d9c
    5e28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;
    5e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e32:	f644 529c 	movw	r2, #19868	; 0x4d9c
    5e36:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5e3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    5e3e:	4413      	add	r3, r2
    5e40:	f04f 0201 	mov.w	r2, #1
    5e44:	605a      	str	r2, [r3, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    5e46:	68fb      	ldr	r3, [r7, #12]
    5e48:	f04f 0204 	mov.w	r2, #4
    5e4c:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	f04f 0228 	mov.w	r2, #40	; 0x28
    5e54:	619a      	str	r2, [r3, #24]
		I2C_IntCmd(I2Cx, 1);
    5e56:	68f8      	ldr	r0, [r7, #12]
    5e58:	f04f 0101 	mov.w	r1, #1
    5e5c:	f7ff f9fe 	bl	525c <I2C_IntCmd>

		return (SUCCESS);
    5e60:	f04f 0301 	mov.w	r3, #1
    5e64:	e001      	b.n	5e6a <I2C_SlaveTransferData+0x25e>
	}

	return ERROR;
    5e66:	f04f 0300 	mov.w	r3, #0
}
    5e6a:	4618      	mov	r0, r3
    5e6c:	f107 0728 	add.w	r7, r7, #40	; 0x28
    5e70:	46bd      	mov	sp, r7
    5e72:	bd80      	pop	{r7, pc}

00005e74 <I2C_SetOwnSlaveAddr>:
 * 				structure that contains the configuration information for the
*               specified I2C slave address.
 * @return 		None
 **********************************************************************/
void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct)
{
    5e74:	b580      	push	{r7, lr}
    5e76:	b084      	sub	sp, #16
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
    5e7c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5e7e:	687a      	ldr	r2, [r7, #4]
    5e80:	f24c 0300 	movw	r3, #49152	; 0xc000
    5e84:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5e88:	429a      	cmp	r2, r3
    5e8a:	d015      	beq.n	5eb8 <I2C_SetOwnSlaveAddr+0x44>
    5e8c:	687a      	ldr	r2, [r7, #4]
    5e8e:	f24c 0300 	movw	r3, #49152	; 0xc000
    5e92:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5e96:	429a      	cmp	r2, r3
    5e98:	d00e      	beq.n	5eb8 <I2C_SetOwnSlaveAddr+0x44>
    5e9a:	687a      	ldr	r2, [r7, #4]
    5e9c:	f240 0300 	movw	r3, #0
    5ea0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    5ea4:	429a      	cmp	r2, r3
    5ea6:	d007      	beq.n	5eb8 <I2C_SetOwnSlaveAddr+0x44>
    5ea8:	f24b 3028 	movw	r0, #45864	; 0xb328
    5eac:	f2c0 0000 	movt	r0, #0
    5eb0:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
    5eb4:	f000 f9ac 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
    5eb8:	683b      	ldr	r3, [r7, #0]
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	2b03      	cmp	r3, #3
    5ebe:	d907      	bls.n	5ed0 <I2C_SetOwnSlaveAddr+0x5c>
    5ec0:	f24b 3028 	movw	r0, #45864	; 0xb328
    5ec4:	f2c0 0000 	movt	r0, #0
    5ec8:	f240 41a1 	movw	r1, #1185	; 0x4a1
    5ecc:	f000 f9a0 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));
    5ed0:	683b      	ldr	r3, [r7, #0]
    5ed2:	789b      	ldrb	r3, [r3, #2]
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d00b      	beq.n	5ef0 <I2C_SetOwnSlaveAddr+0x7c>
    5ed8:	683b      	ldr	r3, [r7, #0]
    5eda:	789b      	ldrb	r3, [r3, #2]
    5edc:	2b01      	cmp	r3, #1
    5ede:	d007      	beq.n	5ef0 <I2C_SetOwnSlaveAddr+0x7c>
    5ee0:	f24b 3028 	movw	r0, #45864	; 0xb328
    5ee4:	f2c0 0000 	movt	r0, #0
    5ee8:	f240 41a2 	movw	r1, #1186	; 0x4a2
    5eec:	f000 f990 	bl	6210 <check_failed>

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    5ef0:	683b      	ldr	r3, [r7, #0]
    5ef2:	785b      	ldrb	r3, [r3, #1]
    5ef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5ef8:	461a      	mov	r2, r3
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
    5efa:	683b      	ldr	r3, [r7, #0]
    5efc:	789b      	ldrb	r3, [r3, #2]
    5efe:	2b01      	cmp	r3, #1
    5f00:	bf14      	ite	ne
    5f02:	2300      	movne	r3, #0
    5f04:	2301      	moveq	r3, #1
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    5f06:	ea42 0303 	orr.w	r3, r2, r3
    5f0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    5f0e:	60fb      	str	r3, [r7, #12]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
    5f10:	683b      	ldr	r3, [r7, #0]
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	2b03      	cmp	r3, #3
    5f16:	d832      	bhi.n	5f7e <I2C_SetOwnSlaveAddr+0x10a>
    5f18:	a201      	add	r2, pc, #4	; (adr r2, 5f20 <I2C_SetOwnSlaveAddr+0xac>)
    5f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f1e:	bf00      	nop
    5f20:	00005f31 	.word	0x00005f31
    5f24:	00005f45 	.word	0x00005f45
    5f28:	00005f59 	.word	0x00005f59
    5f2c:	00005f6d 	.word	0x00005f6d
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	68fa      	ldr	r2, [r7, #12]
    5f34:	60da      	str	r2, [r3, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
    5f36:	683b      	ldr	r3, [r7, #0]
    5f38:	78db      	ldrb	r3, [r3, #3]
    5f3a:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	631a      	str	r2, [r3, #48]	; 0x30
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    5f42:	e01c      	b.n	5f7e <I2C_SetOwnSlaveAddr+0x10a>
	case 1:
		I2Cx->I2ADR1 = tmp;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	68fa      	ldr	r2, [r7, #12]
    5f48:	621a      	str	r2, [r3, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
    5f4a:	683b      	ldr	r3, [r7, #0]
    5f4c:	78db      	ldrb	r3, [r3, #3]
    5f4e:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	635a      	str	r2, [r3, #52]	; 0x34
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    5f56:	e012      	b.n	5f7e <I2C_SetOwnSlaveAddr+0x10a>
	case 2:
		I2Cx->I2ADR2 = tmp;
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	68fa      	ldr	r2, [r7, #12]
    5f5c:	625a      	str	r2, [r3, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
    5f5e:	683b      	ldr	r3, [r7, #0]
    5f60:	78db      	ldrb	r3, [r3, #3]
    5f62:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	639a      	str	r2, [r3, #56]	; 0x38
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
    5f6a:	e008      	b.n	5f7e <I2C_SetOwnSlaveAddr+0x10a>
	case 3:
		I2Cx->I2ADR3 = tmp;
    5f6c:	687b      	ldr	r3, [r7, #4]
    5f6e:	68fa      	ldr	r2, [r7, #12]
    5f70:	629a      	str	r2, [r3, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
    5f72:	683b      	ldr	r3, [r7, #0]
    5f74:	78db      	ldrb	r3, [r3, #3]
    5f76:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
    5f7a:	687b      	ldr	r3, [r7, #4]
    5f7c:	63da      	str	r2, [r3, #60]	; 0x3c
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
	}
}
    5f7e:	f107 0710 	add.w	r7, r7, #16
    5f82:	46bd      	mov	sp, r7
    5f84:	bd80      	pop	{r7, pc}
    5f86:	bf00      	nop

00005f88 <I2C_MonitorModeConfig>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void I2C_MonitorModeConfig(LPC_I2C_TypeDef *I2Cx, uint32_t MonitorCfgType, FunctionalState NewState)
{
    5f88:	b580      	push	{r7, lr}
    5f8a:	b084      	sub	sp, #16
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	60f8      	str	r0, [r7, #12]
    5f90:	60b9      	str	r1, [r7, #8]
    5f92:	4613      	mov	r3, r2
    5f94:	71fb      	strb	r3, [r7, #7]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    5f96:	68fa      	ldr	r2, [r7, #12]
    5f98:	f24c 0300 	movw	r3, #49152	; 0xc000
    5f9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5fa0:	429a      	cmp	r2, r3
    5fa2:	d015      	beq.n	5fd0 <I2C_MonitorModeConfig+0x48>
    5fa4:	68fa      	ldr	r2, [r7, #12]
    5fa6:	f24c 0300 	movw	r3, #49152	; 0xc000
    5faa:	f2c4 0305 	movt	r3, #16389	; 0x4005
    5fae:	429a      	cmp	r2, r3
    5fb0:	d00e      	beq.n	5fd0 <I2C_MonitorModeConfig+0x48>
    5fb2:	68fa      	ldr	r2, [r7, #12]
    5fb4:	f240 0300 	movw	r3, #0
    5fb8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    5fbc:	429a      	cmp	r2, r3
    5fbe:	d007      	beq.n	5fd0 <I2C_MonitorModeConfig+0x48>
    5fc0:	f24b 3028 	movw	r0, #45864	; 0xb328
    5fc4:	f2c0 0000 	movt	r0, #0
    5fc8:	f240 41d4 	movw	r1, #1236	; 0x4d4
    5fcc:	f000 f920 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    5fd0:	79fb      	ldrb	r3, [r7, #7]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d00a      	beq.n	5fec <I2C_MonitorModeConfig+0x64>
    5fd6:	79fb      	ldrb	r3, [r7, #7]
    5fd8:	2b01      	cmp	r3, #1
    5fda:	d007      	beq.n	5fec <I2C_MonitorModeConfig+0x64>
    5fdc:	f24b 3028 	movw	r0, #45864	; 0xb328
    5fe0:	f2c0 0000 	movt	r0, #0
    5fe4:	f240 41d6 	movw	r1, #1238	; 0x4d6
    5fe8:	f000 f912 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    5fec:	79fb      	ldrb	r3, [r7, #7]
    5fee:	2b01      	cmp	r3, #1
    5ff0:	d107      	bne.n	6002 <I2C_MonitorModeConfig+0x7a>
	{
		I2Cx->MMCTRL |= MonitorCfgType;
    5ff2:	68fb      	ldr	r3, [r7, #12]
    5ff4:	69da      	ldr	r2, [r3, #28]
    5ff6:	68bb      	ldr	r3, [r7, #8]
    5ff8:	ea42 0203 	orr.w	r2, r2, r3
    5ffc:	68fb      	ldr	r3, [r7, #12]
    5ffe:	61da      	str	r2, [r3, #28]
    6000:	e00a      	b.n	6018 <I2C_MonitorModeConfig+0x90>
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	69da      	ldr	r2, [r3, #28]
    6006:	68bb      	ldr	r3, [r7, #8]
    6008:	ea6f 0303 	mvn.w	r3, r3
    600c:	ea02 0303 	and.w	r3, r2, r3
    6010:	f003 0207 	and.w	r2, r3, #7
    6014:	68fb      	ldr	r3, [r7, #12]
    6016:	61da      	str	r2, [r3, #28]
	}
}
    6018:	f107 0710 	add.w	r7, r7, #16
    601c:	46bd      	mov	sp, r7
    601e:	bd80      	pop	{r7, pc}

00006020 <I2C_MonitorModeCmd>:
 * 				- ENABLE: Enable monitor mode.
 * 				- DISABLE: Disable monitor mode.
 * @return		None
 **********************************************************************/
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    6020:	b580      	push	{r7, lr}
    6022:	b082      	sub	sp, #8
    6024:	af00      	add	r7, sp, #0
    6026:	6078      	str	r0, [r7, #4]
    6028:	460b      	mov	r3, r1
    602a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    602c:	687a      	ldr	r2, [r7, #4]
    602e:	f24c 0300 	movw	r3, #49152	; 0xc000
    6032:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6036:	429a      	cmp	r2, r3
    6038:	d015      	beq.n	6066 <I2C_MonitorModeCmd+0x46>
    603a:	687a      	ldr	r2, [r7, #4]
    603c:	f24c 0300 	movw	r3, #49152	; 0xc000
    6040:	f2c4 0305 	movt	r3, #16389	; 0x4005
    6044:	429a      	cmp	r2, r3
    6046:	d00e      	beq.n	6066 <I2C_MonitorModeCmd+0x46>
    6048:	687a      	ldr	r2, [r7, #4]
    604a:	f240 0300 	movw	r3, #0
    604e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    6052:	429a      	cmp	r2, r3
    6054:	d007      	beq.n	6066 <I2C_MonitorModeCmd+0x46>
    6056:	f24b 3028 	movw	r0, #45864	; 0xb328
    605a:	f2c0 0000 	movt	r0, #0
    605e:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    6062:	f000 f8d5 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    6066:	78fb      	ldrb	r3, [r7, #3]
    6068:	2b00      	cmp	r3, #0
    606a:	d00a      	beq.n	6082 <I2C_MonitorModeCmd+0x62>
    606c:	78fb      	ldrb	r3, [r7, #3]
    606e:	2b01      	cmp	r3, #1
    6070:	d007      	beq.n	6082 <I2C_MonitorModeCmd+0x62>
    6072:	f24b 3028 	movw	r0, #45864	; 0xb328
    6076:	f2c0 0000 	movt	r0, #0
    607a:	f240 41f1 	movw	r1, #1265	; 0x4f1
    607e:	f000 f8c7 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    6082:	78fb      	ldrb	r3, [r7, #3]
    6084:	2b01      	cmp	r3, #1
    6086:	d10e      	bne.n	60a6 <I2C_MonitorModeCmd+0x86>
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	69db      	ldr	r3, [r3, #28]
    608c:	f043 0201 	orr.w	r2, r3, #1
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	61da      	str	r2, [r3, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	f04f 0204 	mov.w	r2, #4
    609a:	601a      	str	r2, [r3, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    609c:	687b      	ldr	r3, [r7, #4]
    609e:	f04f 0228 	mov.w	r2, #40	; 0x28
    60a2:	619a      	str	r2, [r3, #24]
    60a4:	e009      	b.n	60ba <I2C_MonitorModeCmd+0x9a>
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
    60a6:	687b      	ldr	r3, [r7, #4]
    60a8:	69db      	ldr	r3, [r3, #28]
    60aa:	f003 0206 	and.w	r2, r3, #6
    60ae:	687b      	ldr	r3, [r7, #4]
    60b0:	61da      	str	r2, [r3, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	f04f 022c 	mov.w	r2, #44	; 0x2c
    60b8:	619a      	str	r2, [r3, #24]
	}
	I2C_MonitorBufferIndex = 0;
    60ba:	f644 53cc 	movw	r3, #19916	; 0x4dcc
    60be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    60c2:	f04f 0200 	mov.w	r2, #0
    60c6:	601a      	str	r2, [r3, #0]
}
    60c8:	f107 0708 	add.w	r7, r7, #8
    60cc:	46bd      	mov	sp, r7
    60ce:	bd80      	pop	{r7, pc}

000060d0 <I2C_MonitorGetDatabuffer>:
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
    60d0:	b580      	push	{r7, lr}
    60d2:	b082      	sub	sp, #8
    60d4:	af00      	add	r7, sp, #0
    60d6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
    60d8:	687a      	ldr	r2, [r7, #4]
    60da:	f24c 0300 	movw	r3, #49152	; 0xc000
    60de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    60e2:	429a      	cmp	r2, r3
    60e4:	d015      	beq.n	6112 <I2C_MonitorGetDatabuffer+0x42>
    60e6:	687a      	ldr	r2, [r7, #4]
    60e8:	f24c 0300 	movw	r3, #49152	; 0xc000
    60ec:	f2c4 0305 	movt	r3, #16389	; 0x4005
    60f0:	429a      	cmp	r2, r3
    60f2:	d00e      	beq.n	6112 <I2C_MonitorGetDatabuffer+0x42>
    60f4:	687a      	ldr	r2, [r7, #4]
    60f6:	f240 0300 	movw	r3, #0
    60fa:	f2c4 030a 	movt	r3, #16394	; 0x400a
    60fe:	429a      	cmp	r2, r3
    6100:	d007      	beq.n	6112 <I2C_MonitorGetDatabuffer+0x42>
    6102:	f24b 3028 	movw	r0, #45864	; 0xb328
    6106:	f2c0 0000 	movt	r0, #0
    610a:	f240 5113 	movw	r1, #1299	; 0x513
    610e:	f000 f87f 	bl	6210 <check_failed>
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6116:	b2db      	uxtb	r3, r3
}
    6118:	4618      	mov	r0, r3
    611a:	f107 0708 	add.w	r7, r7, #8
    611e:	46bd      	mov	sp, r7
    6120:	bd80      	pop	{r7, pc}
    6122:	bf00      	nop

00006124 <I2C_MonitorHandler>:
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
    6124:	b480      	push	{r7}
    6126:	b087      	sub	sp, #28
    6128:	af00      	add	r7, sp, #0
    612a:	60f8      	str	r0, [r7, #12]
    612c:	60b9      	str	r1, [r7, #8]
    612e:	607a      	str	r2, [r7, #4]
	BOOL_8 ret=FALSE;
    6130:	f04f 0300 	mov.w	r3, #0
    6134:	75fb      	strb	r3, [r7, #23]

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	f04f 0208 	mov.w	r2, #8
    613c:	619a      	str	r2, [r3, #24]

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
    613e:	f644 53cc 	movw	r3, #19916	; 0x4dcc
    6142:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6146:	681a      	ldr	r2, [r3, #0]
    6148:	68bb      	ldr	r3, [r7, #8]
    614a:	4413      	add	r3, r2
    614c:	68fa      	ldr	r2, [r7, #12]
    614e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6150:	b2d2      	uxtb	r2, r2
    6152:	701a      	strb	r2, [r3, #0]
	I2C_MonitorBufferIndex++;
    6154:	f644 53cc 	movw	r3, #19916	; 0x4dcc
    6158:	f2c1 0300 	movt	r3, #4096	; 0x1000
    615c:	681b      	ldr	r3, [r3, #0]
    615e:	f103 0201 	add.w	r2, r3, #1
    6162:	f644 53cc 	movw	r3, #19916	; 0x4dcc
    6166:	f2c1 0300 	movt	r3, #4096	; 0x1000
    616a:	601a      	str	r2, [r3, #0]
	if(I2C_MonitorBufferIndex >= size)
    616c:	f644 53cc 	movw	r3, #19916	; 0x4dcc
    6170:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6174:	681a      	ldr	r2, [r3, #0]
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	429a      	cmp	r2, r3
    617a:	d302      	bcc.n	6182 <I2C_MonitorHandler+0x5e>
	{
		ret = TRUE;
    617c:	f04f 0301 	mov.w	r3, #1
    6180:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
    6182:	7dfb      	ldrb	r3, [r7, #23]
}
    6184:	4618      	mov	r0, r3
    6186:	f107 071c 	add.w	r7, r7, #28
    618a:	46bd      	mov	sp, r7
    618c:	bc80      	pop	{r7}
    618e:	4770      	bx	lr

00006190 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    6190:	b580      	push	{r7, lr}
    6192:	b084      	sub	sp, #16
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    6198:	6878      	ldr	r0, [r7, #4]
    619a:	f7fe fe41 	bl	4e20 <I2C_getNum>
    619e:	4603      	mov	r3, r0
    61a0:	60fb      	str	r3, [r7, #12]
	retval = I2C_MasterComplete[tmp];
    61a2:	68fa      	ldr	r2, [r7, #12]
    61a4:	f644 53b4 	movw	r3, #19892	; 0x4db4
    61a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61b0:	60bb      	str	r3, [r7, #8]
	I2C_MasterComplete[tmp] = FALSE;
    61b2:	68fa      	ldr	r2, [r7, #12]
    61b4:	f644 53b4 	movw	r3, #19892	; 0x4db4
    61b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61bc:	f04f 0100 	mov.w	r1, #0
    61c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return retval;
    61c4:	68bb      	ldr	r3, [r7, #8]
}
    61c6:	4618      	mov	r0, r3
    61c8:	f107 0710 	add.w	r7, r7, #16
    61cc:	46bd      	mov	sp, r7
    61ce:	bd80      	pop	{r7, pc}

000061d0 <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b084      	sub	sp, #16
    61d4:	af00      	add	r7, sp, #0
    61d6:	6078      	str	r0, [r7, #4]
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    61d8:	6878      	ldr	r0, [r7, #4]
    61da:	f7fe fe21 	bl	4e20 <I2C_getNum>
    61de:	4603      	mov	r3, r0
    61e0:	60fb      	str	r3, [r7, #12]
	retval = I2C_SlaveComplete[tmp];
    61e2:	68fa      	ldr	r2, [r7, #12]
    61e4:	f644 53c0 	movw	r3, #19904	; 0x4dc0
    61e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61f0:	60bb      	str	r3, [r7, #8]
	I2C_SlaveComplete[tmp] = FALSE;
    61f2:	68fa      	ldr	r2, [r7, #12]
    61f4:	f644 53c0 	movw	r3, #19904	; 0x4dc0
    61f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61fc:	f04f 0100 	mov.w	r1, #0
    6200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return retval;
    6204:	68bb      	ldr	r3, [r7, #8]
}
    6206:	4618      	mov	r0, r3
    6208:	f107 0710 	add.w	r7, r7, #16
    620c:	46bd      	mov	sp, r7
    620e:	bd80      	pop	{r7, pc}

00006210 <check_failed>:
* @param[in]	file Pointer to the source file name
* @param[in]    line assert_param error line source number
* @return		None
*******************************************************************************/
void check_failed(uint8_t *file, uint32_t line)
{
    6210:	b480      	push	{r7}
    6212:	b083      	sub	sp, #12
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
    6218:	6039      	str	r1, [r7, #0]
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
    621a:	e7fe      	b.n	621a <check_failed+0xa>

0000621c <MCPWM_Init>:
 * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 * 				Should be: LPC_MCPWM
 * @return		None
 **********************************************************************/
void MCPWM_Init(LPC_MCPWM_TypeDef *MCPWMx)
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	6078      	str	r0, [r7, #4]

	/* Turn On MCPWM PCLK */
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCMC, ENABLE);
    6224:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    6228:	f04f 0101 	mov.w	r1, #1
    622c:	f7fd fffa 	bl	4224 <CLKPWR_ConfigPPWR>
	/* As default, peripheral clock for MCPWM module
	 * is set to FCCLK / 2 */
	// CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_MC, CLKPWR_PCLKSEL_CCLK_DIV_2);

	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	f04f 0207 	mov.w	r2, #7
    6236:	675a      	str	r2, [r3, #116]	; 0x74
	MCPWMx->MCINTFLAG_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	f240 7277 	movw	r2, #1911	; 0x777
    623e:	671a      	str	r2, [r3, #112]	; 0x70
							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
	MCPWMx->MCINTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	f240 7277 	movw	r2, #1911	; 0x777
    6246:	659a      	str	r2, [r3, #88]	; 0x58
							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
}
    6248:	f107 0708 	add.w	r7, r7, #8
    624c:	46bd      	mov	sp, r7
    624e:	bd80      	pop	{r7, pc}

00006250 <MCPWM_ConfigChannel>:
*                    			specified MCPWM channel.
 * @return		None
 **********************************************************************/
void MCPWM_ConfigChannel(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
						MCPWM_CHANNEL_CFG_Type * channelSetup)
{
    6250:	b480      	push	{r7}
    6252:	b085      	sub	sp, #20
    6254:	af00      	add	r7, sp, #0
    6256:	60f8      	str	r0, [r7, #12]
    6258:	60b9      	str	r1, [r7, #8]
    625a:	607a      	str	r2, [r7, #4]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    625c:	68bb      	ldr	r3, [r7, #8]
    625e:	2b02      	cmp	r3, #2
    6260:	f200 810a 	bhi.w	6478 <MCPWM_ConfigChannel+0x228>
		if (channelNum == 0) {
    6264:	68bb      	ldr	r3, [r7, #8]
    6266:	2b00      	cmp	r3, #0
    6268:	d10c      	bne.n	6284 <MCPWM_ConfigChannel+0x34>
			MCPWMx->MCTIM0 = channelSetup->channelTimercounterValue;
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	695a      	ldr	r2, [r3, #20]
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	619a      	str	r2, [r3, #24]
			MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	699a      	ldr	r2, [r3, #24]
    6276:	68fb      	ldr	r3, [r7, #12]
    6278:	625a      	str	r2, [r3, #36]	; 0x24
			MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
    627a:	687b      	ldr	r3, [r7, #4]
    627c:	69da      	ldr	r2, [r3, #28]
    627e:	68fb      	ldr	r3, [r7, #12]
    6280:	631a      	str	r2, [r3, #48]	; 0x30
    6282:	e01f      	b.n	62c4 <MCPWM_ConfigChannel+0x74>
		} else if (channelNum == 1) {
    6284:	68bb      	ldr	r3, [r7, #8]
    6286:	2b01      	cmp	r3, #1
    6288:	d10c      	bne.n	62a4 <MCPWM_ConfigChannel+0x54>
			MCPWMx->MCTIM1 = channelSetup->channelTimercounterValue;
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	695a      	ldr	r2, [r3, #20]
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	61da      	str	r2, [r3, #28]
			MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	699a      	ldr	r2, [r3, #24]
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	629a      	str	r2, [r3, #40]	; 0x28
			MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	69da      	ldr	r2, [r3, #28]
    629e:	68fb      	ldr	r3, [r7, #12]
    62a0:	635a      	str	r2, [r3, #52]	; 0x34
    62a2:	e00f      	b.n	62c4 <MCPWM_ConfigChannel+0x74>
		} else if (channelNum == 2) {
    62a4:	68bb      	ldr	r3, [r7, #8]
    62a6:	2b02      	cmp	r3, #2
    62a8:	f040 80e5 	bne.w	6476 <MCPWM_ConfigChannel+0x226>
			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	695a      	ldr	r2, [r3, #20]
    62b0:	68fb      	ldr	r3, [r7, #12]
    62b2:	621a      	str	r2, [r3, #32]
			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	699a      	ldr	r2, [r3, #24]
    62b8:	68fb      	ldr	r3, [r7, #12]
    62ba:	62da      	str	r2, [r3, #44]	; 0x2c
			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	69da      	ldr	r2, [r3, #28]
    62c0:	68fb      	ldr	r3, [r7, #12]
    62c2:	639a      	str	r2, [r3, #56]	; 0x38
		} else {
			return;
		}

		if (channelSetup->channelType /* == MCPWM_CHANNEL_CENTER_MODE */){
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	2b00      	cmp	r3, #0
    62ca:	d011      	beq.n	62f0 <MCPWM_ConfigChannel+0xa0>
			MCPWMx->MCCON_SET = MCPWM_CON_CENTER(channelNum);
    62cc:	68bb      	ldr	r3, [r7, #8]
    62ce:	2b02      	cmp	r3, #2
    62d0:	d809      	bhi.n	62e6 <MCPWM_ConfigChannel+0x96>
    62d2:	68bb      	ldr	r3, [r7, #8]
    62d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    62d8:	f103 0301 	add.w	r3, r3, #1
    62dc:	f04f 0201 	mov.w	r2, #1
    62e0:	fa02 f303 	lsl.w	r3, r2, r3
    62e4:	e001      	b.n	62ea <MCPWM_ConfigChannel+0x9a>
    62e6:	f04f 0300 	mov.w	r3, #0
    62ea:	68fa      	ldr	r2, [r7, #12]
    62ec:	6053      	str	r3, [r2, #4]
    62ee:	e010      	b.n	6312 <MCPWM_ConfigChannel+0xc2>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_CENTER(channelNum);
    62f0:	68bb      	ldr	r3, [r7, #8]
    62f2:	2b02      	cmp	r3, #2
    62f4:	d809      	bhi.n	630a <MCPWM_ConfigChannel+0xba>
    62f6:	68bb      	ldr	r3, [r7, #8]
    62f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    62fc:	f103 0301 	add.w	r3, r3, #1
    6300:	f04f 0201 	mov.w	r2, #1
    6304:	fa02 f303 	lsl.w	r3, r2, r3
    6308:	e001      	b.n	630e <MCPWM_ConfigChannel+0xbe>
    630a:	f04f 0300 	mov.w	r3, #0
    630e:	68fa      	ldr	r2, [r7, #12]
    6310:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelPolarity /* == MCPWM_CHANNEL_PASSIVE_HI */){
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	685b      	ldr	r3, [r3, #4]
    6316:	2b00      	cmp	r3, #0
    6318:	d013      	beq.n	6342 <MCPWM_ConfigChannel+0xf2>
			MCPWMx->MCCON_SET = MCPWM_CON_POLAR(channelNum);
    631a:	68bb      	ldr	r3, [r7, #8]
    631c:	2b02      	cmp	r3, #2
    631e:	d80b      	bhi.n	6338 <MCPWM_ConfigChannel+0xe8>
    6320:	68bb      	ldr	r3, [r7, #8]
    6322:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6326:	f103 0301 	add.w	r3, r3, #1
    632a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    632e:	f04f 0201 	mov.w	r2, #1
    6332:	fa02 f303 	lsl.w	r3, r2, r3
    6336:	e001      	b.n	633c <MCPWM_ConfigChannel+0xec>
    6338:	f04f 0300 	mov.w	r3, #0
    633c:	68fa      	ldr	r2, [r7, #12]
    633e:	6053      	str	r3, [r2, #4]
    6340:	e012      	b.n	6368 <MCPWM_ConfigChannel+0x118>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_POLAR(channelNum);
    6342:	68bb      	ldr	r3, [r7, #8]
    6344:	2b02      	cmp	r3, #2
    6346:	d80b      	bhi.n	6360 <MCPWM_ConfigChannel+0x110>
    6348:	68bb      	ldr	r3, [r7, #8]
    634a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    634e:	f103 0301 	add.w	r3, r3, #1
    6352:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6356:	f04f 0201 	mov.w	r2, #1
    635a:	fa02 f303 	lsl.w	r3, r2, r3
    635e:	e001      	b.n	6364 <MCPWM_ConfigChannel+0x114>
    6360:	f04f 0300 	mov.w	r3, #0
    6364:	68fa      	ldr	r2, [r7, #12]
    6366:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelDeadtimeEnable /* == ENABLE */){
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	689b      	ldr	r3, [r3, #8]
    636c:	2b00      	cmp	r3, #0
    636e:	d045      	beq.n	63fc <MCPWM_ConfigChannel+0x1ac>
			MCPWMx->MCCON_SET = MCPWM_CON_DTE(channelNum);
    6370:	68bb      	ldr	r3, [r7, #8]
    6372:	2b02      	cmp	r3, #2
    6374:	d809      	bhi.n	638a <MCPWM_ConfigChannel+0x13a>
    6376:	68bb      	ldr	r3, [r7, #8]
    6378:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    637c:	f103 0303 	add.w	r3, r3, #3
    6380:	f04f 0201 	mov.w	r2, #1
    6384:	fa02 f303 	lsl.w	r3, r2, r3
    6388:	e001      	b.n	638e <MCPWM_ConfigChannel+0x13e>
    638a:	f04f 0300 	mov.w	r3, #0
    638e:	68fa      	ldr	r2, [r7, #12]
    6390:	6053      	str	r3, [r2, #4]
			MCPWMx->MCDEADTIME &= ~(MCPWM_DT(channelNum, 0x3FF));
    6392:	68fb      	ldr	r3, [r7, #12]
    6394:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    6396:	68bb      	ldr	r3, [r7, #8]
    6398:	2b02      	cmp	r3, #2
    639a:	d80d      	bhi.n	63b8 <MCPWM_ConfigChannel+0x168>
    639c:	68ba      	ldr	r2, [r7, #8]
    639e:	4613      	mov	r3, r2
    63a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63a4:	4413      	add	r3, r2
    63a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    63aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    63ae:	fa02 f303 	lsl.w	r3, r2, r3
    63b2:	ea6f 0303 	mvn.w	r3, r3
    63b6:	e001      	b.n	63bc <MCPWM_ConfigChannel+0x16c>
    63b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63bc:	ea01 0203 	and.w	r2, r1, r3
    63c0:	68fb      	ldr	r3, [r7, #12]
    63c2:	63da      	str	r2, [r3, #60]	; 0x3c
			MCPWMx->MCDEADTIME |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
    63c4:	68fb      	ldr	r3, [r7, #12]
    63c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    63c8:	68bb      	ldr	r3, [r7, #8]
    63ca:	2b02      	cmp	r3, #2
    63cc:	d80f      	bhi.n	63ee <MCPWM_ConfigChannel+0x19e>
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	68db      	ldr	r3, [r3, #12]
    63d2:	ea4f 5283 	mov.w	r2, r3, lsl #22
    63d6:	ea4f 5292 	mov.w	r2, r2, lsr #22
    63da:	68b9      	ldr	r1, [r7, #8]
    63dc:	460b      	mov	r3, r1
    63de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63e2:	440b      	add	r3, r1
    63e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    63e8:	fa02 f303 	lsl.w	r3, r2, r3
    63ec:	e001      	b.n	63f2 <MCPWM_ConfigChannel+0x1a2>
    63ee:	f04f 0300 	mov.w	r3, #0
    63f2:	ea40 0203 	orr.w	r2, r0, r3
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	63da      	str	r2, [r3, #60]	; 0x3c
    63fa:	e010      	b.n	641e <MCPWM_ConfigChannel+0x1ce>
		} else {
			MCPWMx->MCCON_CLR = MCPWM_CON_DTE(channelNum);
    63fc:	68bb      	ldr	r3, [r7, #8]
    63fe:	2b02      	cmp	r3, #2
    6400:	d809      	bhi.n	6416 <MCPWM_ConfigChannel+0x1c6>
    6402:	68bb      	ldr	r3, [r7, #8]
    6404:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    6408:	f103 0303 	add.w	r3, r3, #3
    640c:	f04f 0201 	mov.w	r2, #1
    6410:	fa02 f303 	lsl.w	r3, r2, r3
    6414:	e001      	b.n	641a <MCPWM_ConfigChannel+0x1ca>
    6416:	f04f 0300 	mov.w	r3, #0
    641a:	68fa      	ldr	r2, [r7, #12]
    641c:	6093      	str	r3, [r2, #8]
		}

		if (channelSetup->channelUpdateEnable /* == ENABLE */){
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	691b      	ldr	r3, [r3, #16]
    6422:	2b00      	cmp	r3, #0
    6424:	d013      	beq.n	644e <MCPWM_ConfigChannel+0x1fe>
			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
    6426:	68bb      	ldr	r3, [r7, #8]
    6428:	2b02      	cmp	r3, #2
    642a:	d80b      	bhi.n	6444 <MCPWM_ConfigChannel+0x1f4>
    642c:	68bb      	ldr	r3, [r7, #8]
    642e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6432:	f103 0301 	add.w	r3, r3, #1
    6436:	ea4f 0383 	mov.w	r3, r3, lsl #2
    643a:	f04f 0201 	mov.w	r2, #1
    643e:	fa02 f303 	lsl.w	r3, r2, r3
    6442:	e001      	b.n	6448 <MCPWM_ConfigChannel+0x1f8>
    6444:	f04f 0300 	mov.w	r3, #0
    6448:	68fa      	ldr	r2, [r7, #12]
    644a:	6093      	str	r3, [r2, #8]
    644c:	e014      	b.n	6478 <MCPWM_ConfigChannel+0x228>
		} else {
			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
    644e:	68bb      	ldr	r3, [r7, #8]
    6450:	2b02      	cmp	r3, #2
    6452:	d80b      	bhi.n	646c <MCPWM_ConfigChannel+0x21c>
    6454:	68bb      	ldr	r3, [r7, #8]
    6456:	ea4f 0343 	mov.w	r3, r3, lsl #1
    645a:	f103 0301 	add.w	r3, r3, #1
    645e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6462:	f04f 0201 	mov.w	r2, #1
    6466:	fa02 f303 	lsl.w	r3, r2, r3
    646a:	e001      	b.n	6470 <MCPWM_ConfigChannel+0x220>
    646c:	f04f 0300 	mov.w	r3, #0
    6470:	68fa      	ldr	r2, [r7, #12]
    6472:	6053      	str	r3, [r2, #4]
    6474:	e000      	b.n	6478 <MCPWM_ConfigChannel+0x228>
		} else if (channelNum == 2) {
			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
		} else {
			return;
    6476:	bf00      	nop
			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
		} else {
			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
		}
	}
}
    6478:	f107 0714 	add.w	r7, r7, #20
    647c:	46bd      	mov	sp, r7
    647e:	bc80      	pop	{r7}
    6480:	4770      	bx	lr
    6482:	bf00      	nop

00006484 <MCPWM_WriteToShadow>:
*                    			specified MCPWM channel.
 * @return		None
 **********************************************************************/
void MCPWM_WriteToShadow(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
								MCPWM_CHANNEL_CFG_Type *channelSetup)
{
    6484:	b480      	push	{r7}
    6486:	b085      	sub	sp, #20
    6488:	af00      	add	r7, sp, #0
    648a:	60f8      	str	r0, [r7, #12]
    648c:	60b9      	str	r1, [r7, #8]
    648e:	607a      	str	r2, [r7, #4]
	if (channelNum == 0){
    6490:	68bb      	ldr	r3, [r7, #8]
    6492:	2b00      	cmp	r3, #0
    6494:	d108      	bne.n	64a8 <MCPWM_WriteToShadow+0x24>
		MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	699a      	ldr	r2, [r3, #24]
    649a:	68fb      	ldr	r3, [r7, #12]
    649c:	625a      	str	r2, [r3, #36]	; 0x24
		MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	69da      	ldr	r2, [r3, #28]
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	631a      	str	r2, [r3, #48]	; 0x30
    64a6:	e016      	b.n	64d6 <MCPWM_WriteToShadow+0x52>
	} else if (channelNum == 1) {
    64a8:	68bb      	ldr	r3, [r7, #8]
    64aa:	2b01      	cmp	r3, #1
    64ac:	d108      	bne.n	64c0 <MCPWM_WriteToShadow+0x3c>
		MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	699a      	ldr	r2, [r3, #24]
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	629a      	str	r2, [r3, #40]	; 0x28
		MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
    64b6:	687b      	ldr	r3, [r7, #4]
    64b8:	69da      	ldr	r2, [r3, #28]
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	635a      	str	r2, [r3, #52]	; 0x34
    64be:	e00a      	b.n	64d6 <MCPWM_WriteToShadow+0x52>
	} else if (channelNum == 2) {
    64c0:	68bb      	ldr	r3, [r7, #8]
    64c2:	2b02      	cmp	r3, #2
    64c4:	d107      	bne.n	64d6 <MCPWM_WriteToShadow+0x52>
		MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	699a      	ldr	r2, [r3, #24]
    64ca:	68fb      	ldr	r3, [r7, #12]
    64cc:	62da      	str	r2, [r3, #44]	; 0x2c
		MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
    64ce:	687b      	ldr	r3, [r7, #4]
    64d0:	69da      	ldr	r2, [r3, #28]
    64d2:	68fb      	ldr	r3, [r7, #12]
    64d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
    64d6:	f107 0714 	add.w	r7, r7, #20
    64da:	46bd      	mov	sp, r7
    64dc:	bc80      	pop	{r7}
    64de:	4770      	bx	lr

000064e0 <MCPWM_ConfigCapture>:
*                    			specified MCPWM capture.
 * @return
 **********************************************************************/
void MCPWM_ConfigCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
						MCPWM_CAPTURE_CFG_Type *captureConfig)
{
    64e0:	b480      	push	{r7}
    64e2:	b085      	sub	sp, #20
    64e4:	af00      	add	r7, sp, #0
    64e6:	60f8      	str	r0, [r7, #12]
    64e8:	60b9      	str	r1, [r7, #8]
    64ea:	607a      	str	r2, [r7, #4]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    64ec:	68bb      	ldr	r3, [r7, #8]
    64ee:	2b02      	cmp	r3, #2
    64f0:	f200 80c0 	bhi.w	6674 <MCPWM_ConfigCapture+0x194>

		if (captureConfig->captureFalling /* == ENABLE */) {
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	689b      	ldr	r3, [r3, #8]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d01c      	beq.n	6536 <MCPWM_ConfigCapture+0x56>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
    64fc:	687b      	ldr	r3, [r7, #4]
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	2b02      	cmp	r3, #2
    6502:	d813      	bhi.n	652c <MCPWM_ConfigCapture+0x4c>
    6504:	68bb      	ldr	r3, [r7, #8]
    6506:	2b02      	cmp	r3, #2
    6508:	d810      	bhi.n	652c <MCPWM_ConfigCapture+0x4c>
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	681a      	ldr	r2, [r3, #0]
    650e:	4613      	mov	r3, r2
    6510:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6514:	441a      	add	r2, r3
    6516:	68bb      	ldr	r3, [r7, #8]
    6518:	4413      	add	r3, r2
    651a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    651e:	f103 0301 	add.w	r3, r3, #1
    6522:	f04f 0201 	mov.w	r2, #1
    6526:	fa02 f303 	lsl.w	r3, r2, r3
    652a:	e001      	b.n	6530 <MCPWM_ConfigCapture+0x50>
    652c:	f04f 0300 	mov.w	r3, #0
    6530:	68fa      	ldr	r2, [r7, #12]
    6532:	6113      	str	r3, [r2, #16]
    6534:	e01b      	b.n	656e <MCPWM_ConfigCapture+0x8e>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	681b      	ldr	r3, [r3, #0]
    653a:	2b02      	cmp	r3, #2
    653c:	d813      	bhi.n	6566 <MCPWM_ConfigCapture+0x86>
    653e:	68bb      	ldr	r3, [r7, #8]
    6540:	2b02      	cmp	r3, #2
    6542:	d810      	bhi.n	6566 <MCPWM_ConfigCapture+0x86>
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	681a      	ldr	r2, [r3, #0]
    6548:	4613      	mov	r3, r2
    654a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    654e:	441a      	add	r2, r3
    6550:	68bb      	ldr	r3, [r7, #8]
    6552:	4413      	add	r3, r2
    6554:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6558:	f103 0301 	add.w	r3, r3, #1
    655c:	f04f 0201 	mov.w	r2, #1
    6560:	fa02 f303 	lsl.w	r3, r2, r3
    6564:	e001      	b.n	656a <MCPWM_ConfigCapture+0x8a>
    6566:	f04f 0300 	mov.w	r3, #0
    656a:	68fa      	ldr	r2, [r7, #12]
    656c:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->captureRising /* == ENABLE */) {
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	685b      	ldr	r3, [r3, #4]
    6572:	2b00      	cmp	r3, #0
    6574:	d01a      	beq.n	65ac <MCPWM_ConfigCapture+0xcc>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
    6576:	687b      	ldr	r3, [r7, #4]
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	2b02      	cmp	r3, #2
    657c:	d811      	bhi.n	65a2 <MCPWM_ConfigCapture+0xc2>
    657e:	68bb      	ldr	r3, [r7, #8]
    6580:	2b02      	cmp	r3, #2
    6582:	d80e      	bhi.n	65a2 <MCPWM_ConfigCapture+0xc2>
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	681a      	ldr	r2, [r3, #0]
    6588:	4613      	mov	r3, r2
    658a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    658e:	441a      	add	r2, r3
    6590:	68bb      	ldr	r3, [r7, #8]
    6592:	4413      	add	r3, r2
    6594:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6598:	f04f 0201 	mov.w	r2, #1
    659c:	fa02 f303 	lsl.w	r3, r2, r3
    65a0:	e001      	b.n	65a6 <MCPWM_ConfigCapture+0xc6>
    65a2:	f04f 0300 	mov.w	r3, #0
    65a6:	68fa      	ldr	r2, [r7, #12]
    65a8:	6113      	str	r3, [r2, #16]
    65aa:	e019      	b.n	65e0 <MCPWM_ConfigCapture+0x100>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	681b      	ldr	r3, [r3, #0]
    65b0:	2b02      	cmp	r3, #2
    65b2:	d811      	bhi.n	65d8 <MCPWM_ConfigCapture+0xf8>
    65b4:	68bb      	ldr	r3, [r7, #8]
    65b6:	2b02      	cmp	r3, #2
    65b8:	d80e      	bhi.n	65d8 <MCPWM_ConfigCapture+0xf8>
    65ba:	687b      	ldr	r3, [r7, #4]
    65bc:	681a      	ldr	r2, [r3, #0]
    65be:	4613      	mov	r3, r2
    65c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    65c4:	441a      	add	r2, r3
    65c6:	68bb      	ldr	r3, [r7, #8]
    65c8:	4413      	add	r3, r2
    65ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
    65ce:	f04f 0201 	mov.w	r2, #1
    65d2:	fa02 f303 	lsl.w	r3, r2, r3
    65d6:	e001      	b.n	65dc <MCPWM_ConfigCapture+0xfc>
    65d8:	f04f 0300 	mov.w	r3, #0
    65dc:	68fa      	ldr	r2, [r7, #12]
    65de:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->timerReset /* == ENABLE */){
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	68db      	ldr	r3, [r3, #12]
    65e4:	2b00      	cmp	r3, #0
    65e6:	d011      	beq.n	660c <MCPWM_ConfigCapture+0x12c>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_RT(captureConfig->captureChannel);
    65e8:	687b      	ldr	r3, [r7, #4]
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	2b02      	cmp	r3, #2
    65ee:	d808      	bhi.n	6602 <MCPWM_ConfigCapture+0x122>
    65f0:	687b      	ldr	r3, [r7, #4]
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	f103 0312 	add.w	r3, r3, #18
    65f8:	f04f 0201 	mov.w	r2, #1
    65fc:	fa02 f303 	lsl.w	r3, r2, r3
    6600:	e001      	b.n	6606 <MCPWM_ConfigCapture+0x126>
    6602:	f04f 0300 	mov.w	r3, #0
    6606:	68fa      	ldr	r2, [r7, #12]
    6608:	6113      	str	r3, [r2, #16]
    660a:	e010      	b.n	662e <MCPWM_ConfigCapture+0x14e>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_RT(captureConfig->captureChannel);
    660c:	687b      	ldr	r3, [r7, #4]
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	2b02      	cmp	r3, #2
    6612:	d808      	bhi.n	6626 <MCPWM_ConfigCapture+0x146>
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	681b      	ldr	r3, [r3, #0]
    6618:	f103 0312 	add.w	r3, r3, #18
    661c:	f04f 0201 	mov.w	r2, #1
    6620:	fa02 f303 	lsl.w	r3, r2, r3
    6624:	e001      	b.n	662a <MCPWM_ConfigCapture+0x14a>
    6626:	f04f 0300 	mov.w	r3, #0
    662a:	68fa      	ldr	r2, [r7, #12]
    662c:	6153      	str	r3, [r2, #20]
		}

		if (captureConfig->hnfEnable /* == ENABLE */){
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	691b      	ldr	r3, [r3, #16]
    6632:	2b00      	cmp	r3, #0
    6634:	d00f      	beq.n	6656 <MCPWM_ConfigCapture+0x176>
			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_HNFCAP(channelNum);
    6636:	68bb      	ldr	r3, [r7, #8]
    6638:	2b02      	cmp	r3, #2
    663a:	d807      	bhi.n	664c <MCPWM_ConfigCapture+0x16c>
    663c:	68bb      	ldr	r3, [r7, #8]
    663e:	f103 0315 	add.w	r3, r3, #21
    6642:	f04f 0201 	mov.w	r2, #1
    6646:	fa02 f303 	lsl.w	r3, r2, r3
    664a:	e001      	b.n	6650 <MCPWM_ConfigCapture+0x170>
    664c:	f04f 0300 	mov.w	r3, #0
    6650:	68fa      	ldr	r2, [r7, #12]
    6652:	6113      	str	r3, [r2, #16]
    6654:	e00e      	b.n	6674 <MCPWM_ConfigCapture+0x194>
		} else {
			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_HNFCAP(channelNum);
    6656:	68bb      	ldr	r3, [r7, #8]
    6658:	2b02      	cmp	r3, #2
    665a:	d807      	bhi.n	666c <MCPWM_ConfigCapture+0x18c>
    665c:	68bb      	ldr	r3, [r7, #8]
    665e:	f103 0315 	add.w	r3, r3, #21
    6662:	f04f 0201 	mov.w	r2, #1
    6666:	fa02 f303 	lsl.w	r3, r2, r3
    666a:	e001      	b.n	6670 <MCPWM_ConfigCapture+0x190>
    666c:	f04f 0300 	mov.w	r3, #0
    6670:	68fa      	ldr	r2, [r7, #12]
    6672:	6153      	str	r3, [r2, #20]
		}
	}
}
    6674:	f107 0714 	add.w	r7, r7, #20
    6678:	46bd      	mov	sp, r7
    667a:	bc80      	pop	{r7}
    667c:	4770      	bx	lr
    667e:	bf00      	nop

00006680 <MCPWM_ClearCapture>:
 * 							Should be: LPC_MCPWM
 * @param[in]	captureChannel	Capture channel number, should be: 0..2
 * @return		None
 **********************************************************************/
void MCPWM_ClearCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
{
    6680:	b480      	push	{r7}
    6682:	b083      	sub	sp, #12
    6684:	af00      	add	r7, sp, #0
    6686:	6078      	str	r0, [r7, #4]
    6688:	6039      	str	r1, [r7, #0]
	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
    668a:	683b      	ldr	r3, [r7, #0]
    668c:	2b02      	cmp	r3, #2
    668e:	d805      	bhi.n	669c <MCPWM_ClearCapture+0x1c>
    6690:	683b      	ldr	r3, [r7, #0]
    6692:	f04f 0201 	mov.w	r2, #1
    6696:	fa02 f303 	lsl.w	r3, r2, r3
    669a:	e001      	b.n	66a0 <MCPWM_ClearCapture+0x20>
    669c:	f04f 0300 	mov.w	r3, #0
    66a0:	687a      	ldr	r2, [r7, #4]
    66a2:	6753      	str	r3, [r2, #116]	; 0x74
}
    66a4:	f107 070c 	add.w	r7, r7, #12
    66a8:	46bd      	mov	sp, r7
    66aa:	bc80      	pop	{r7}
    66ac:	4770      	bx	lr
    66ae:	bf00      	nop

000066b0 <MCPWM_GetCapture>:
 * 							Should be: LPC_MCPWM
 * @param[in]	captureChannel	Capture channel number, should be: 0..2
 * @return		None
 **********************************************************************/
uint32_t MCPWM_GetCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
{
    66b0:	b480      	push	{r7}
    66b2:	b083      	sub	sp, #12
    66b4:	af00      	add	r7, sp, #0
    66b6:	6078      	str	r0, [r7, #4]
    66b8:	6039      	str	r1, [r7, #0]
	if (captureChannel == 0){
    66ba:	683b      	ldr	r3, [r7, #0]
    66bc:	2b00      	cmp	r3, #0
    66be:	d102      	bne.n	66c6 <MCPWM_GetCapture+0x16>
		return (MCPWMx->MCCR0);
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    66c4:	e00d      	b.n	66e2 <MCPWM_GetCapture+0x32>
	} else if (captureChannel == 1) {
    66c6:	683b      	ldr	r3, [r7, #0]
    66c8:	2b01      	cmp	r3, #1
    66ca:	d102      	bne.n	66d2 <MCPWM_GetCapture+0x22>
		return (MCPWMx->MCCR1);
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    66d0:	e007      	b.n	66e2 <MCPWM_GetCapture+0x32>
	} else if (captureChannel == 2) {
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	2b02      	cmp	r3, #2
    66d6:	d102      	bne.n	66de <MCPWM_GetCapture+0x2e>
		return (MCPWMx->MCCR2);
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    66dc:	e001      	b.n	66e2 <MCPWM_GetCapture+0x32>
	}
	return (0);
    66de:	f04f 0300 	mov.w	r3, #0
}
    66e2:	4618      	mov	r0, r3
    66e4:	f107 070c 	add.w	r7, r7, #12
    66e8:	46bd      	mov	sp, r7
    66ea:	bc80      	pop	{r7}
    66ec:	4770      	bx	lr
    66ee:	bf00      	nop

000066f0 <MCPWM_CountConfig>:
*                    		specified MCPWM count control.
 * @return		None
 **********************************************************************/
void MCPWM_CountConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
					uint32_t countMode, MCPWM_COUNT_CFG_Type *countConfig)
{
    66f0:	b480      	push	{r7}
    66f2:	b085      	sub	sp, #20
    66f4:	af00      	add	r7, sp, #0
    66f6:	60f8      	str	r0, [r7, #12]
    66f8:	60b9      	str	r1, [r7, #8]
    66fa:	607a      	str	r2, [r7, #4]
    66fc:	603b      	str	r3, [r7, #0]
	if ((channelNum >= 0) && (channelNum <= 2)) {
    66fe:	68bb      	ldr	r3, [r7, #8]
    6700:	2b02      	cmp	r3, #2
    6702:	f200 8099 	bhi.w	6838 <MCPWM_CountConfig+0x148>
		if (countMode /* == ENABLE */){
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	2b00      	cmp	r3, #0
    670a:	f000 8086 	beq.w	681a <MCPWM_CountConfig+0x12a>
			MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_CNTR(channelNum);
    670e:	68bb      	ldr	r3, [r7, #8]
    6710:	2b02      	cmp	r3, #2
    6712:	d807      	bhi.n	6724 <MCPWM_CountConfig+0x34>
    6714:	68bb      	ldr	r3, [r7, #8]
    6716:	f103 031d 	add.w	r3, r3, #29
    671a:	f04f 0201 	mov.w	r2, #1
    671e:	fa02 f303 	lsl.w	r3, r2, r3
    6722:	e001      	b.n	6728 <MCPWM_CountConfig+0x38>
    6724:	f04f 0300 	mov.w	r3, #0
    6728:	68fa      	ldr	r2, [r7, #12]
    672a:	6613      	str	r3, [r2, #96]	; 0x60
			if (countConfig->countFalling /* == ENABLE */) {
    672c:	683b      	ldr	r3, [r7, #0]
    672e:	689b      	ldr	r3, [r3, #8]
    6730:	2b00      	cmp	r3, #0
    6732:	d01c      	beq.n	676e <MCPWM_CountConfig+0x7e>
				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
    6734:	683b      	ldr	r3, [r7, #0]
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	2b02      	cmp	r3, #2
    673a:	d813      	bhi.n	6764 <MCPWM_CountConfig+0x74>
    673c:	68bb      	ldr	r3, [r7, #8]
    673e:	2b02      	cmp	r3, #2
    6740:	d810      	bhi.n	6764 <MCPWM_CountConfig+0x74>
    6742:	683b      	ldr	r3, [r7, #0]
    6744:	681a      	ldr	r2, [r3, #0]
    6746:	4613      	mov	r3, r2
    6748:	ea4f 0343 	mov.w	r3, r3, lsl #1
    674c:	441a      	add	r2, r3
    674e:	68bb      	ldr	r3, [r7, #8]
    6750:	4413      	add	r3, r2
    6752:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6756:	f103 0301 	add.w	r3, r3, #1
    675a:	f04f 0201 	mov.w	r2, #1
    675e:	fa02 f303 	lsl.w	r3, r2, r3
    6762:	e001      	b.n	6768 <MCPWM_CountConfig+0x78>
    6764:	f04f 0300 	mov.w	r3, #0
    6768:	68fa      	ldr	r2, [r7, #12]
    676a:	6613      	str	r3, [r2, #96]	; 0x60
    676c:	e01b      	b.n	67a6 <MCPWM_CountConfig+0xb6>
			} else {
				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
    676e:	683b      	ldr	r3, [r7, #0]
    6770:	681b      	ldr	r3, [r3, #0]
    6772:	2b02      	cmp	r3, #2
    6774:	d813      	bhi.n	679e <MCPWM_CountConfig+0xae>
    6776:	68bb      	ldr	r3, [r7, #8]
    6778:	2b02      	cmp	r3, #2
    677a:	d810      	bhi.n	679e <MCPWM_CountConfig+0xae>
    677c:	683b      	ldr	r3, [r7, #0]
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	4613      	mov	r3, r2
    6782:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6786:	441a      	add	r2, r3
    6788:	68bb      	ldr	r3, [r7, #8]
    678a:	4413      	add	r3, r2
    678c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6790:	f103 0301 	add.w	r3, r3, #1
    6794:	f04f 0201 	mov.w	r2, #1
    6798:	fa02 f303 	lsl.w	r3, r2, r3
    679c:	e001      	b.n	67a2 <MCPWM_CountConfig+0xb2>
    679e:	f04f 0300 	mov.w	r3, #0
    67a2:	68fa      	ldr	r2, [r7, #12]
    67a4:	6653      	str	r3, [r2, #100]	; 0x64
			}
			if (countConfig->countRising /* == ENABLE */) {
    67a6:	683b      	ldr	r3, [r7, #0]
    67a8:	685b      	ldr	r3, [r3, #4]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d01a      	beq.n	67e4 <MCPWM_CountConfig+0xf4>
				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
    67ae:	683b      	ldr	r3, [r7, #0]
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	2b02      	cmp	r3, #2
    67b4:	d811      	bhi.n	67da <MCPWM_CountConfig+0xea>
    67b6:	68bb      	ldr	r3, [r7, #8]
    67b8:	2b02      	cmp	r3, #2
    67ba:	d80e      	bhi.n	67da <MCPWM_CountConfig+0xea>
    67bc:	683b      	ldr	r3, [r7, #0]
    67be:	681a      	ldr	r2, [r3, #0]
    67c0:	4613      	mov	r3, r2
    67c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    67c6:	441a      	add	r2, r3
    67c8:	68bb      	ldr	r3, [r7, #8]
    67ca:	4413      	add	r3, r2
    67cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    67d0:	f04f 0201 	mov.w	r2, #1
    67d4:	fa02 f303 	lsl.w	r3, r2, r3
    67d8:	e001      	b.n	67de <MCPWM_CountConfig+0xee>
    67da:	f04f 0300 	mov.w	r3, #0
    67de:	68fa      	ldr	r2, [r7, #12]
    67e0:	6613      	str	r3, [r2, #96]	; 0x60
			} else {
				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
    67e2:	e029      	b.n	6838 <MCPWM_CountConfig+0x148>
    67e4:	683b      	ldr	r3, [r7, #0]
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	2b02      	cmp	r3, #2
    67ea:	d811      	bhi.n	6810 <MCPWM_CountConfig+0x120>
    67ec:	68bb      	ldr	r3, [r7, #8]
    67ee:	2b02      	cmp	r3, #2
    67f0:	d80e      	bhi.n	6810 <MCPWM_CountConfig+0x120>
    67f2:	683b      	ldr	r3, [r7, #0]
    67f4:	681a      	ldr	r2, [r3, #0]
    67f6:	4613      	mov	r3, r2
    67f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    67fc:	441a      	add	r2, r3
    67fe:	68bb      	ldr	r3, [r7, #8]
    6800:	4413      	add	r3, r2
    6802:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6806:	f04f 0201 	mov.w	r2, #1
    680a:	fa02 f303 	lsl.w	r3, r2, r3
    680e:	e001      	b.n	6814 <MCPWM_CountConfig+0x124>
    6810:	f04f 0300 	mov.w	r3, #0
    6814:	68fa      	ldr	r2, [r7, #12]
    6816:	6653      	str	r3, [r2, #100]	; 0x64
    6818:	e00e      	b.n	6838 <MCPWM_CountConfig+0x148>
			}
		} else {
			MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_CNTR(channelNum);
    681a:	68bb      	ldr	r3, [r7, #8]
    681c:	2b02      	cmp	r3, #2
    681e:	d807      	bhi.n	6830 <MCPWM_CountConfig+0x140>
    6820:	68bb      	ldr	r3, [r7, #8]
    6822:	f103 031d 	add.w	r3, r3, #29
    6826:	f04f 0201 	mov.w	r2, #1
    682a:	fa02 f303 	lsl.w	r3, r2, r3
    682e:	e001      	b.n	6834 <MCPWM_CountConfig+0x144>
    6830:	f04f 0300 	mov.w	r3, #0
    6834:	68fa      	ldr	r2, [r7, #12]
    6836:	6653      	str	r3, [r2, #100]	; 0x64
		}
	}
}
    6838:	f107 0714 	add.w	r7, r7, #20
    683c:	46bd      	mov	sp, r7
    683e:	bc80      	pop	{r7}
    6840:	4770      	bx	lr
    6842:	bf00      	nop

00006844 <MCPWM_Start>:
 * 							- DISABLE: 'Start' command will not effect on channel 2
 * @return		None
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
					uint32_t channel1, uint32_t channel2)
{
    6844:	b480      	push	{r7}
    6846:	b087      	sub	sp, #28
    6848:	af00      	add	r7, sp, #0
    684a:	60f8      	str	r0, [r7, #12]
    684c:	60b9      	str	r1, [r7, #8]
    684e:	607a      	str	r2, [r7, #4]
    6850:	603b      	str	r3, [r7, #0]
	uint32_t regVal = 0;
    6852:	f04f 0300 	mov.w	r3, #0
    6856:	617b      	str	r3, [r7, #20]
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
    6858:	68bb      	ldr	r3, [r7, #8]
    685a:	2b00      	cmp	r3, #0
    685c:	d002      	beq.n	6864 <MCPWM_Start+0x20>
    685e:	f04f 0201 	mov.w	r2, #1
    6862:	e001      	b.n	6868 <MCPWM_Start+0x24>
    6864:	f04f 0200 	mov.w	r2, #0
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	2b00      	cmp	r3, #0
    686c:	d002      	beq.n	6874 <MCPWM_Start+0x30>
    686e:	f44f 7380 	mov.w	r3, #256	; 0x100
    6872:	e001      	b.n	6878 <MCPWM_Start+0x34>
    6874:	f04f 0300 	mov.w	r3, #0
    6878:	ea42 0203 	orr.w	r2, r2, r3
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
					uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    687c:	683b      	ldr	r3, [r7, #0]
    687e:	2b00      	cmp	r3, #0
    6880:	d002      	beq.n	6888 <MCPWM_Start+0x44>
    6882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6886:	e001      	b.n	688c <MCPWM_Start+0x48>
    6888:	f04f 0300 	mov.w	r3, #0
    688c:	ea42 0303 	orr.w	r3, r2, r3
    6890:	617b      	str	r3, [r7, #20]
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
	MCPWMx->MCCON_SET = regVal;
    6892:	68fb      	ldr	r3, [r7, #12]
    6894:	697a      	ldr	r2, [r7, #20]
    6896:	605a      	str	r2, [r3, #4]
}
    6898:	f107 071c 	add.w	r7, r7, #28
    689c:	46bd      	mov	sp, r7
    689e:	bc80      	pop	{r7}
    68a0:	4770      	bx	lr
    68a2:	bf00      	nop

000068a4 <MCPWM_Stop>:
 * 							- DISABLE: 'Stop' command will not effect on channel 2
 * @return		None
 **********************************************************************/
void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
		uint32_t channel1, uint32_t channel2)
{
    68a4:	b480      	push	{r7}
    68a6:	b087      	sub	sp, #28
    68a8:	af00      	add	r7, sp, #0
    68aa:	60f8      	str	r0, [r7, #12]
    68ac:	60b9      	str	r1, [r7, #8]
    68ae:	607a      	str	r2, [r7, #4]
    68b0:	603b      	str	r3, [r7, #0]
	uint32_t regVal = 0;
    68b2:	f04f 0300 	mov.w	r3, #0
    68b6:	617b      	str	r3, [r7, #20]
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
    68b8:	68bb      	ldr	r3, [r7, #8]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d002      	beq.n	68c4 <MCPWM_Stop+0x20>
    68be:	f04f 0201 	mov.w	r2, #1
    68c2:	e001      	b.n	68c8 <MCPWM_Stop+0x24>
    68c4:	f04f 0200 	mov.w	r2, #0
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d002      	beq.n	68d4 <MCPWM_Stop+0x30>
    68ce:	f44f 7380 	mov.w	r3, #256	; 0x100
    68d2:	e001      	b.n	68d8 <MCPWM_Stop+0x34>
    68d4:	f04f 0300 	mov.w	r3, #0
    68d8:	ea42 0203 	orr.w	r2, r2, r3
 **********************************************************************/
void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
		uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
    68dc:	683b      	ldr	r3, [r7, #0]
    68de:	2b00      	cmp	r3, #0
    68e0:	d002      	beq.n	68e8 <MCPWM_Stop+0x44>
    68e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    68e6:	e001      	b.n	68ec <MCPWM_Stop+0x48>
    68e8:	f04f 0300 	mov.w	r3, #0
    68ec:	ea42 0303 	orr.w	r3, r2, r3
    68f0:	617b      	str	r3, [r7, #20]
				| (channel2 ? MCPWM_CON_RUN(2) : 0);
	MCPWMx->MCCON_CLR = regVal;
    68f2:	68fb      	ldr	r3, [r7, #12]
    68f4:	697a      	ldr	r2, [r7, #20]
    68f6:	609a      	str	r2, [r3, #8]
}
    68f8:	f107 071c 	add.w	r7, r7, #28
    68fc:	46bd      	mov	sp, r7
    68fe:	bc80      	pop	{r7}
    6900:	4770      	bx	lr
    6902:	bf00      	nop

00006904 <MCPWM_ACMode>:
 * 							- ENABLE.
 * 							- DISABLE.
 * @return		None
 **********************************************************************/
void MCPWM_ACMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t acMode)
{
    6904:	b480      	push	{r7}
    6906:	b083      	sub	sp, #12
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
    690c:	6039      	str	r1, [r7, #0]
	if (acMode){
    690e:	683b      	ldr	r3, [r7, #0]
    6910:	2b00      	cmp	r3, #0
    6912:	d004      	beq.n	691e <MCPWM_ACMode+0x1a>
		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
    6914:	687b      	ldr	r3, [r7, #4]
    6916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    691a:	605a      	str	r2, [r3, #4]
    691c:	e003      	b.n	6926 <MCPWM_ACMode+0x22>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_ACMODE;
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6924:	609a      	str	r2, [r3, #8]
	}
}
    6926:	f107 070c 	add.w	r7, r7, #12
    692a:	46bd      	mov	sp, r7
    692c:	bc80      	pop	{r7}
    692e:	4770      	bx	lr

00006930 <MCPWM_DCMode>:
 *
 * Note: all these outputPatent values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_DCMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t dcMode,
					uint32_t outputInvered, uint32_t outputPattern)
{
    6930:	b480      	push	{r7}
    6932:	b085      	sub	sp, #20
    6934:	af00      	add	r7, sp, #0
    6936:	60f8      	str	r0, [r7, #12]
    6938:	60b9      	str	r1, [r7, #8]
    693a:	607a      	str	r2, [r7, #4]
    693c:	603b      	str	r3, [r7, #0]
	if (dcMode){
    693e:	68bb      	ldr	r3, [r7, #8]
    6940:	2b00      	cmp	r3, #0
    6942:	d004      	beq.n	694e <MCPWM_DCMode+0x1e>
		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
    6944:	68fb      	ldr	r3, [r7, #12]
    6946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    694a:	605a      	str	r2, [r3, #4]
    694c:	e003      	b.n	6956 <MCPWM_DCMode+0x26>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_DCMODE;
    694e:	68fb      	ldr	r3, [r7, #12]
    6950:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6954:	609a      	str	r2, [r3, #8]
	}

	if (outputInvered) {
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	2b00      	cmp	r3, #0
    695a:	d004      	beq.n	6966 <MCPWM_DCMode+0x36>
		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
    695c:	68fb      	ldr	r3, [r7, #12]
    695e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6962:	605a      	str	r2, [r3, #4]
    6964:	e003      	b.n	696e <MCPWM_DCMode+0x3e>
	} else {
		MCPWMx->MCCON_CLR = MCPWM_CON_INVBDC;
    6966:	68fb      	ldr	r3, [r7, #12]
    6968:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    696c:	609a      	str	r2, [r3, #8]
	}

	MCPWMx->MCCCP = outputPattern;
    696e:	68fb      	ldr	r3, [r7, #12]
    6970:	683a      	ldr	r2, [r7, #0]
    6972:	641a      	str	r2, [r3, #64]	; 0x40
}
    6974:	f107 0714 	add.w	r7, r7, #20
    6978:	46bd      	mov	sp, r7
    697a:	bc80      	pop	{r7}
    697c:	4770      	bx	lr
    697e:	bf00      	nop

00006980 <MCPWM_IntConfig>:
 * @return		None
 *
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType, FunctionalState NewState)
{
    6980:	b480      	push	{r7}
    6982:	b085      	sub	sp, #20
    6984:	af00      	add	r7, sp, #0
    6986:	60f8      	str	r0, [r7, #12]
    6988:	60b9      	str	r1, [r7, #8]
    698a:	4613      	mov	r3, r2
    698c:	71fb      	strb	r3, [r7, #7]
	if (NewState) {
    698e:	79fb      	ldrb	r3, [r7, #7]
    6990:	2b00      	cmp	r3, #0
    6992:	d003      	beq.n	699c <MCPWM_IntConfig+0x1c>
		MCPWMx->MCINTEN_SET = ulIntType;
    6994:	68fb      	ldr	r3, [r7, #12]
    6996:	68ba      	ldr	r2, [r7, #8]
    6998:	655a      	str	r2, [r3, #84]	; 0x54
    699a:	e002      	b.n	69a2 <MCPWM_IntConfig+0x22>
	} else {
		MCPWMx->MCINTEN_CLR = ulIntType;
    699c:	68fb      	ldr	r3, [r7, #12]
    699e:	68ba      	ldr	r2, [r7, #8]
    69a0:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
    69a2:	f107 0714 	add.w	r7, r7, #20
    69a6:	46bd      	mov	sp, r7
    69a8:	bc80      	pop	{r7}
    69aa:	4770      	bx	lr

000069ac <MCPWM_IntSet>:
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntSet(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    69ac:	b480      	push	{r7}
    69ae:	b083      	sub	sp, #12
    69b0:	af00      	add	r7, sp, #0
    69b2:	6078      	str	r0, [r7, #4]
    69b4:	6039      	str	r1, [r7, #0]
	MCPWMx->MCINTFLAG_SET = ulIntType;
    69b6:	687b      	ldr	r3, [r7, #4]
    69b8:	683a      	ldr	r2, [r7, #0]
    69ba:	66da      	str	r2, [r3, #108]	; 0x6c
}
    69bc:	f107 070c 	add.w	r7, r7, #12
    69c0:	46bd      	mov	sp, r7
    69c2:	bc80      	pop	{r7}
    69c4:	4770      	bx	lr
    69c6:	bf00      	nop

000069c8 <MCPWM_IntClear>:
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntClear(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    69c8:	b480      	push	{r7}
    69ca:	b083      	sub	sp, #12
    69cc:	af00      	add	r7, sp, #0
    69ce:	6078      	str	r0, [r7, #4]
    69d0:	6039      	str	r1, [r7, #0]
	MCPWMx->MCINTFLAG_CLR = ulIntType;
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	683a      	ldr	r2, [r7, #0]
    69d6:	671a      	str	r2, [r3, #112]	; 0x70
}
    69d8:	f107 070c 	add.w	r7, r7, #12
    69dc:	46bd      	mov	sp, r7
    69de:	bc80      	pop	{r7}
    69e0:	4770      	bx	lr
    69e2:	bf00      	nop

000069e4 <MCPWM_GetIntStatus>:
 * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 * @return		None
 **********************************************************************/
FlagStatus MCPWM_GetIntStatus(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
{
    69e4:	b480      	push	{r7}
    69e6:	b083      	sub	sp, #12
    69e8:	af00      	add	r7, sp, #0
    69ea:	6078      	str	r0, [r7, #4]
    69ec:	6039      	str	r1, [r7, #0]
	return ((MCPWMx->MCINTFLAG & ulIntType) ? SET : RESET);
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    69f2:	683b      	ldr	r3, [r7, #0]
    69f4:	ea02 0303 	and.w	r3, r2, r3
    69f8:	2b00      	cmp	r3, #0
    69fa:	bf0c      	ite	eq
    69fc:	2300      	moveq	r3, #0
    69fe:	2301      	movne	r3, #1
}
    6a00:	4618      	mov	r0, r3
    6a02:	f107 070c 	add.w	r7, r7, #12
    6a06:	46bd      	mov	sp, r7
    6a08:	bc80      	pop	{r7}
    6a0a:	4770      	bx	lr

00006a0c <set_PinFunc>:
 *				- PINSEL_FUNC_3 : third alternate function
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
    6a0c:	b480      	push	{r7}
    6a0e:	b087      	sub	sp, #28
    6a10:	af00      	add	r7, sp, #0
    6a12:	4613      	mov	r3, r2
    6a14:	4602      	mov	r2, r0
    6a16:	71fa      	strb	r2, [r7, #7]
    6a18:	460a      	mov	r2, r1
    6a1a:	71ba      	strb	r2, [r7, #6]
    6a1c:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
    6a1e:	79bb      	ldrb	r3, [r7, #6]
    6a20:	60fb      	str	r3, [r7, #12]
	uint32_t pinselreg_idx = 2 * portnum;
    6a22:	79fb      	ldrb	r3, [r7, #7]
    6a24:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6a28:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;
    6a2a:	f24c 0300 	movw	r3, #49152	; 0xc000
    6a2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6a32:	617b      	str	r3, [r7, #20]

	if (pinnum_t >= 16) {
    6a34:	68fb      	ldr	r3, [r7, #12]
    6a36:	2b0f      	cmp	r3, #15
    6a38:	d907      	bls.n	6a4a <set_PinFunc+0x3e>
		pinnum_t -= 16;
    6a3a:	68fb      	ldr	r3, [r7, #12]
    6a3c:	f1a3 0310 	sub.w	r3, r3, #16
    6a40:	60fb      	str	r3, [r7, #12]
		pinselreg_idx++;
    6a42:	693b      	ldr	r3, [r7, #16]
    6a44:	f103 0301 	add.w	r3, r3, #1
    6a48:	613b      	str	r3, [r7, #16]
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    6a4a:	693b      	ldr	r3, [r7, #16]
    6a4c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6a50:	697b      	ldr	r3, [r7, #20]
    6a52:	4413      	add	r3, r2
    6a54:	693a      	ldr	r2, [r7, #16]
    6a56:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6a5a:	697a      	ldr	r2, [r7, #20]
    6a5c:	440a      	add	r2, r1
    6a5e:	6811      	ldr	r1, [r2, #0]
    6a60:	68fa      	ldr	r2, [r7, #12]
    6a62:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6a66:	f04f 0003 	mov.w	r0, #3
    6a6a:	fa00 f202 	lsl.w	r2, r0, r2
    6a6e:	ea6f 0202 	mvn.w	r2, r2
    6a72:	ea01 0202 	and.w	r2, r1, r2
    6a76:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    6a78:	693b      	ldr	r3, [r7, #16]
    6a7a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6a7e:	697b      	ldr	r3, [r7, #20]
    6a80:	4413      	add	r3, r2
    6a82:	693a      	ldr	r2, [r7, #16]
    6a84:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6a88:	697a      	ldr	r2, [r7, #20]
    6a8a:	440a      	add	r2, r1
    6a8c:	6811      	ldr	r1, [r2, #0]
    6a8e:	7978      	ldrb	r0, [r7, #5]
    6a90:	68fa      	ldr	r2, [r7, #12]
    6a92:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6a96:	fa00 f202 	lsl.w	r2, r0, r2
    6a9a:	ea41 0202 	orr.w	r2, r1, r2
    6a9e:	601a      	str	r2, [r3, #0]
}
    6aa0:	f107 071c 	add.w	r7, r7, #28
    6aa4:	46bd      	mov	sp, r7
    6aa6:	bc80      	pop	{r7}
    6aa8:	4770      	bx	lr
    6aaa:	bf00      	nop

00006aac <set_ResistorMode>:
				- PINSEL_PINMODE_PULLDOWN : Internal pull-down resistor

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
    6aac:	b480      	push	{r7}
    6aae:	b087      	sub	sp, #28
    6ab0:	af00      	add	r7, sp, #0
    6ab2:	4613      	mov	r3, r2
    6ab4:	4602      	mov	r2, r0
    6ab6:	71fa      	strb	r2, [r7, #7]
    6ab8:	460a      	mov	r2, r1
    6aba:	71ba      	strb	r2, [r7, #6]
    6abc:	717b      	strb	r3, [r7, #5]
	uint32_t pinnum_t = pinnum;
    6abe:	79bb      	ldrb	r3, [r7, #6]
    6ac0:	60fb      	str	r3, [r7, #12]
	uint32_t pinmodereg_idx = 2 * portnum;
    6ac2:	79fb      	ldrb	r3, [r7, #7]
    6ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6ac8:	613b      	str	r3, [r7, #16]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;
    6aca:	f24c 0340 	movw	r3, #49216	; 0xc040
    6ace:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6ad2:	617b      	str	r3, [r7, #20]

	if (pinnum_t >= 16) {
    6ad4:	68fb      	ldr	r3, [r7, #12]
    6ad6:	2b0f      	cmp	r3, #15
    6ad8:	d907      	bls.n	6aea <set_ResistorMode+0x3e>
		pinnum_t -= 16;
    6ada:	68fb      	ldr	r3, [r7, #12]
    6adc:	f1a3 0310 	sub.w	r3, r3, #16
    6ae0:	60fb      	str	r3, [r7, #12]
		pinmodereg_idx++ ;
    6ae2:	693b      	ldr	r3, [r7, #16]
    6ae4:	f103 0301 	add.w	r3, r3, #1
    6ae8:	613b      	str	r3, [r7, #16]
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    6aea:	693b      	ldr	r3, [r7, #16]
    6aec:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6af0:	697b      	ldr	r3, [r7, #20]
    6af2:	4413      	add	r3, r2
    6af4:	693a      	ldr	r2, [r7, #16]
    6af6:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6afa:	697a      	ldr	r2, [r7, #20]
    6afc:	440a      	add	r2, r1
    6afe:	6811      	ldr	r1, [r2, #0]
    6b00:	68fa      	ldr	r2, [r7, #12]
    6b02:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6b06:	f04f 0003 	mov.w	r0, #3
    6b0a:	fa00 f202 	lsl.w	r2, r0, r2
    6b0e:	ea6f 0202 	mvn.w	r2, r2
    6b12:	ea01 0202 	and.w	r2, r1, r2
    6b16:	601a      	str	r2, [r3, #0]
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    6b18:	693b      	ldr	r3, [r7, #16]
    6b1a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6b1e:	697b      	ldr	r3, [r7, #20]
    6b20:	4413      	add	r3, r2
    6b22:	693a      	ldr	r2, [r7, #16]
    6b24:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6b28:	697a      	ldr	r2, [r7, #20]
    6b2a:	440a      	add	r2, r1
    6b2c:	6811      	ldr	r1, [r2, #0]
    6b2e:	7978      	ldrb	r0, [r7, #5]
    6b30:	68fa      	ldr	r2, [r7, #12]
    6b32:	ea4f 0242 	mov.w	r2, r2, lsl #1
    6b36:	fa00 f202 	lsl.w	r2, r0, r2
    6b3a:	ea41 0202 	orr.w	r2, r1, r2
    6b3e:	601a      	str	r2, [r3, #0]
}
    6b40:	f107 071c 	add.w	r7, r7, #28
    6b44:	46bd      	mov	sp, r7
    6b46:	bc80      	pop	{r7}
    6b48:	4770      	bx	lr
    6b4a:	bf00      	nop

00006b4c <set_OpenDrainMode>:
 * 				- PINSEL_PINMODE_OPENDRAIN : Pin is in the open drain mode
 *
 * @return 		None
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
    6b4c:	b480      	push	{r7}
    6b4e:	b085      	sub	sp, #20
    6b50:	af00      	add	r7, sp, #0
    6b52:	4613      	mov	r3, r2
    6b54:	4602      	mov	r2, r0
    6b56:	71fa      	strb	r2, [r7, #7]
    6b58:	460a      	mov	r2, r1
    6b5a:	71ba      	strb	r2, [r7, #6]
    6b5c:	717b      	strb	r3, [r7, #5]
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;
    6b5e:	f24c 0368 	movw	r3, #49256	; 0xc068
    6b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6b66:	60fb      	str	r3, [r7, #12]

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    6b68:	797b      	ldrb	r3, [r7, #5]
    6b6a:	2b01      	cmp	r3, #1
    6b6c:	d113      	bne.n	6b96 <set_OpenDrainMode+0x4a>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    6b6e:	79fb      	ldrb	r3, [r7, #7]
    6b70:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6b74:	68fb      	ldr	r3, [r7, #12]
    6b76:	4413      	add	r3, r2
    6b78:	79fa      	ldrb	r2, [r7, #7]
    6b7a:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6b7e:	68fa      	ldr	r2, [r7, #12]
    6b80:	440a      	add	r2, r1
    6b82:	6811      	ldr	r1, [r2, #0]
    6b84:	79ba      	ldrb	r2, [r7, #6]
    6b86:	f04f 0001 	mov.w	r0, #1
    6b8a:	fa00 f202 	lsl.w	r2, r0, r2
    6b8e:	ea41 0202 	orr.w	r2, r1, r2
    6b92:	601a      	str	r2, [r3, #0]
    6b94:	e014      	b.n	6bc0 <set_OpenDrainMode+0x74>
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    6b96:	79fb      	ldrb	r3, [r7, #7]
    6b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    6b9c:	68fb      	ldr	r3, [r7, #12]
    6b9e:	4413      	add	r3, r2
    6ba0:	79fa      	ldrb	r2, [r7, #7]
    6ba2:	ea4f 0182 	mov.w	r1, r2, lsl #2
    6ba6:	68fa      	ldr	r2, [r7, #12]
    6ba8:	440a      	add	r2, r1
    6baa:	6811      	ldr	r1, [r2, #0]
    6bac:	79ba      	ldrb	r2, [r7, #6]
    6bae:	f04f 0001 	mov.w	r0, #1
    6bb2:	fa00 f202 	lsl.w	r2, r0, r2
    6bb6:	ea6f 0202 	mvn.w	r2, r2
    6bba:	ea01 0202 	and.w	r2, r1, r2
    6bbe:	601a      	str	r2, [r3, #0]
	}
}
    6bc0:	f107 0714 	add.w	r7, r7, #20
    6bc4:	46bd      	mov	sp, r7
    6bc6:	bc80      	pop	{r7}
    6bc8:	4770      	bx	lr
    6bca:	bf00      	nop

00006bcc <PINSEL_ConfigTraceFunc>:
 * 				- DISABLE : Disable Trace Function
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
    6bcc:	b480      	push	{r7}
    6bce:	b083      	sub	sp, #12
    6bd0:	af00      	add	r7, sp, #0
    6bd2:	4603      	mov	r3, r0
    6bd4:	71fb      	strb	r3, [r7, #7]
	if (NewState == ENABLE) {
    6bd6:	79fb      	ldrb	r3, [r7, #7]
    6bd8:	2b01      	cmp	r3, #1
    6bda:	d10c      	bne.n	6bf6 <PINSEL_ConfigTraceFunc+0x2a>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
    6bdc:	f24c 0300 	movw	r3, #49152	; 0xc000
    6be0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6be4:	f24c 0200 	movw	r2, #49152	; 0xc000
    6be8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    6bec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6bee:	f042 0208 	orr.w	r2, r2, #8
    6bf2:	629a      	str	r2, [r3, #40]	; 0x28
    6bf4:	e00e      	b.n	6c14 <PINSEL_ConfigTraceFunc+0x48>
	} else if (NewState == DISABLE) {
    6bf6:	79fb      	ldrb	r3, [r7, #7]
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d10b      	bne.n	6c14 <PINSEL_ConfigTraceFunc+0x48>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
    6bfc:	f24c 0300 	movw	r3, #49152	; 0xc000
    6c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6c04:	f24c 0200 	movw	r2, #49152	; 0xc000
    6c08:	f2c4 0202 	movt	r2, #16386	; 0x4002
    6c0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6c0e:	f022 0208 	bic.w	r2, r2, #8
    6c12:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
    6c14:	f107 070c 	add.w	r7, r7, #12
    6c18:	46bd      	mov	sp, r7
    6c1a:	bc80      	pop	{r7}
    6c1c:	4770      	bx	lr
    6c1e:	bf00      	nop

00006c20 <PINSEL_SetI2C0Pins>:
 * 				- DISABLE: Disable filter and slew rate.
 *
 * @return 		None
 **********************************************************************/
void PINSEL_SetI2C0Pins(uint8_t i2cPinMode, FunctionalState filterSlewRateEnable)
{
    6c20:	b480      	push	{r7}
    6c22:	b085      	sub	sp, #20
    6c24:	af00      	add	r7, sp, #0
    6c26:	4602      	mov	r2, r0
    6c28:	460b      	mov	r3, r1
    6c2a:	71fa      	strb	r2, [r7, #7]
    6c2c:	71bb      	strb	r3, [r7, #6]
	uint32_t regVal;

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
    6c2e:	79fb      	ldrb	r3, [r7, #7]
    6c30:	2b01      	cmp	r3, #1
    6c32:	d102      	bne.n	6c3a <PINSEL_SetI2C0Pins+0x1a>
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
    6c34:	f04f 0305 	mov.w	r3, #5
    6c38:	60fb      	str	r3, [r7, #12]
	}

	if (filterSlewRateEnable == DISABLE){
    6c3a:	79bb      	ldrb	r3, [r7, #6]
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d102      	bne.n	6c46 <PINSEL_SetI2C0Pins+0x26>
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
    6c40:	f04f 030a 	mov.w	r3, #10
    6c44:	60fb      	str	r3, [r7, #12]
	}
	LPC_PINCON->I2CPADCFG = regVal;
    6c46:	f24c 0300 	movw	r3, #49152	; 0xc000
    6c4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    6c4e:	68fa      	ldr	r2, [r7, #12]
    6c50:	67da      	str	r2, [r3, #124]	; 0x7c
}
    6c52:	f107 0714 	add.w	r7, r7, #20
    6c56:	46bd      	mov	sp, r7
    6c58:	bc80      	pop	{r7}
    6c5a:	4770      	bx	lr

00006c5c <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
    6c5c:	b580      	push	{r7, lr}
    6c5e:	b082      	sub	sp, #8
    6c60:	af00      	add	r7, sp, #0
    6c62:	6078      	str	r0, [r7, #4]
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	7819      	ldrb	r1, [r3, #0]
    6c68:	687b      	ldr	r3, [r7, #4]
    6c6a:	785a      	ldrb	r2, [r3, #1]
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	789b      	ldrb	r3, [r3, #2]
    6c70:	4608      	mov	r0, r1
    6c72:	4611      	mov	r1, r2
    6c74:	461a      	mov	r2, r3
    6c76:	f7ff fec9 	bl	6a0c <set_PinFunc>
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	7819      	ldrb	r1, [r3, #0]
    6c7e:	687b      	ldr	r3, [r7, #4]
    6c80:	785a      	ldrb	r2, [r3, #1]
    6c82:	687b      	ldr	r3, [r7, #4]
    6c84:	78db      	ldrb	r3, [r3, #3]
    6c86:	4608      	mov	r0, r1
    6c88:	4611      	mov	r1, r2
    6c8a:	461a      	mov	r2, r3
    6c8c:	f7ff ff0e 	bl	6aac <set_ResistorMode>
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	7819      	ldrb	r1, [r3, #0]
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	785a      	ldrb	r2, [r3, #1]
    6c98:	687b      	ldr	r3, [r7, #4]
    6c9a:	791b      	ldrb	r3, [r3, #4]
    6c9c:	4608      	mov	r0, r1
    6c9e:	4611      	mov	r1, r2
    6ca0:	461a      	mov	r2, r3
    6ca2:	f7ff ff53 	bl	6b4c <set_OpenDrainMode>
}
    6ca6:	f107 0708 	add.w	r7, r7, #8
    6caa:	46bd      	mov	sp, r7
    6cac:	bd80      	pop	{r7, pc}
    6cae:	bf00      	nop

00006cb0 <PWM_GetIntStatus>:
 * 				- PWM_INTSTAT_CAP0: Interrupt flag for capture input 0
 * 				- PWM_INTSTAT_CAP1: Interrupt flag for capture input 1
 * @return 		New State of PWM interrupt flag (SET or RESET)
 **********************************************************************/
IntStatus PWM_GetIntStatus(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b082      	sub	sp, #8
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	6078      	str	r0, [r7, #4]
    6cb8:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6cba:	687a      	ldr	r2, [r7, #4]
    6cbc:	f248 0300 	movw	r3, #32768	; 0x8000
    6cc0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6cc4:	429a      	cmp	r2, r3
    6cc6:	d007      	beq.n	6cd8 <PWM_GetIntStatus+0x28>
    6cc8:	f24b 3054 	movw	r0, #45908	; 0xb354
    6ccc:	f2c0 0000 	movt	r0, #0
    6cd0:	f04f 0148 	mov.w	r1, #72	; 0x48
    6cd4:	f7ff fa9c 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));
    6cd8:	683b      	ldr	r3, [r7, #0]
    6cda:	2b01      	cmp	r3, #1
    6cdc:	d022      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6cde:	683b      	ldr	r3, [r7, #0]
    6ce0:	2b02      	cmp	r3, #2
    6ce2:	d01f      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6ce4:	683b      	ldr	r3, [r7, #0]
    6ce6:	2b04      	cmp	r3, #4
    6ce8:	d01c      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6cea:	683b      	ldr	r3, [r7, #0]
    6cec:	2b08      	cmp	r3, #8
    6cee:	d019      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6cf0:	683b      	ldr	r3, [r7, #0]
    6cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6cf6:	d015      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6cf8:	683b      	ldr	r3, [r7, #0]
    6cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6cfe:	d011      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6d00:	683b      	ldr	r3, [r7, #0]
    6d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6d06:	d00d      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6d08:	683b      	ldr	r3, [r7, #0]
    6d0a:	2b10      	cmp	r3, #16
    6d0c:	d00a      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6d0e:	683b      	ldr	r3, [r7, #0]
    6d10:	2b20      	cmp	r3, #32
    6d12:	d007      	beq.n	6d24 <PWM_GetIntStatus+0x74>
    6d14:	f24b 3054 	movw	r0, #45908	; 0xb354
    6d18:	f2c0 0000 	movt	r0, #0
    6d1c:	f04f 0149 	mov.w	r1, #73	; 0x49
    6d20:	f7ff fa76 	bl	6210 <check_failed>

	return ((PWMx->IR & IntFlag) ? SET : RESET);
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	681a      	ldr	r2, [r3, #0]
    6d28:	683b      	ldr	r3, [r7, #0]
    6d2a:	ea02 0303 	and.w	r3, r2, r3
    6d2e:	2b00      	cmp	r3, #0
    6d30:	bf0c      	ite	eq
    6d32:	2300      	moveq	r3, #0
    6d34:	2301      	movne	r3, #1
}
    6d36:	4618      	mov	r0, r3
    6d38:	f107 0708 	add.w	r7, r7, #8
    6d3c:	46bd      	mov	sp, r7
    6d3e:	bd80      	pop	{r7, pc}

00006d40 <PWM_ClearIntPending>:
 * 				- PWM_INTSTAT_CAP0: Interrupt flag for capture input 0
 * 				- PWM_INTSTAT_CAP1: Interrupt flag for capture input 1
 * @return 		None
 **********************************************************************/
void PWM_ClearIntPending(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
    6d40:	b580      	push	{r7, lr}
    6d42:	b082      	sub	sp, #8
    6d44:	af00      	add	r7, sp, #0
    6d46:	6078      	str	r0, [r7, #4]
    6d48:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6d4a:	687a      	ldr	r2, [r7, #4]
    6d4c:	f248 0300 	movw	r3, #32768	; 0x8000
    6d50:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6d54:	429a      	cmp	r2, r3
    6d56:	d007      	beq.n	6d68 <PWM_ClearIntPending+0x28>
    6d58:	f24b 3054 	movw	r0, #45908	; 0xb354
    6d5c:	f2c0 0000 	movt	r0, #0
    6d60:	f04f 0161 	mov.w	r1, #97	; 0x61
    6d64:	f7ff fa54 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));
    6d68:	683b      	ldr	r3, [r7, #0]
    6d6a:	2b01      	cmp	r3, #1
    6d6c:	d022      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d6e:	683b      	ldr	r3, [r7, #0]
    6d70:	2b02      	cmp	r3, #2
    6d72:	d01f      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d74:	683b      	ldr	r3, [r7, #0]
    6d76:	2b04      	cmp	r3, #4
    6d78:	d01c      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d7a:	683b      	ldr	r3, [r7, #0]
    6d7c:	2b08      	cmp	r3, #8
    6d7e:	d019      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d80:	683b      	ldr	r3, [r7, #0]
    6d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6d86:	d015      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d88:	683b      	ldr	r3, [r7, #0]
    6d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6d8e:	d011      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d90:	683b      	ldr	r3, [r7, #0]
    6d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6d96:	d00d      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d98:	683b      	ldr	r3, [r7, #0]
    6d9a:	2b10      	cmp	r3, #16
    6d9c:	d00a      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6d9e:	683b      	ldr	r3, [r7, #0]
    6da0:	2b20      	cmp	r3, #32
    6da2:	d007      	beq.n	6db4 <PWM_ClearIntPending+0x74>
    6da4:	f24b 3054 	movw	r0, #45908	; 0xb354
    6da8:	f2c0 0000 	movt	r0, #0
    6dac:	f04f 0162 	mov.w	r1, #98	; 0x62
    6db0:	f7ff fa2e 	bl	6210 <check_failed>
	PWMx->IR = IntFlag;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	683a      	ldr	r2, [r7, #0]
    6db8:	601a      	str	r2, [r3, #0]
}
    6dba:	f107 0708 	add.w	r7, r7, #8
    6dbe:	46bd      	mov	sp, r7
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	bf00      	nop

00006dc4 <PWM_ConfigStructInit>:
* @return		None
* Note: PWM_InitStruct pointer will be assigned to corresponding structure
* 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
*******************************************************************************/
void PWM_ConfigStructInit(uint8_t PWMTimerCounterMode, void *PWM_InitStruct)
{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b084      	sub	sp, #16
    6dc8:	af00      	add	r7, sp, #0
    6dca:	4603      	mov	r3, r0
    6dcc:	6039      	str	r1, [r7, #0]
    6dce:	71fb      	strb	r3, [r7, #7]
	PWM_TIMERCFG_Type *pTimeCfg;
	PWM_COUNTERCFG_Type *pCounterCfg;
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));
    6dd0:	79fb      	ldrb	r3, [r7, #7]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d00a      	beq.n	6dec <PWM_ConfigStructInit+0x28>
    6dd6:	79fb      	ldrb	r3, [r7, #7]
    6dd8:	2b01      	cmp	r3, #1
    6dda:	d007      	beq.n	6dec <PWM_ConfigStructInit+0x28>
    6ddc:	f24b 3054 	movw	r0, #45908	; 0xb354
    6de0:	f2c0 0000 	movt	r0, #0
    6de4:	f04f 017d 	mov.w	r1, #125	; 0x7d
    6de8:	f7ff fa12 	bl	6210 <check_failed>

	pTimeCfg = (PWM_TIMERCFG_Type *) PWM_InitStruct;
    6dec:	683b      	ldr	r3, [r7, #0]
    6dee:	60bb      	str	r3, [r7, #8]
	pCounterCfg = (PWM_COUNTERCFG_Type *) PWM_InitStruct;
    6df0:	683b      	ldr	r3, [r7, #0]
    6df2:	60fb      	str	r3, [r7, #12]

	if (PWMTimerCounterMode == PWM_MODE_TIMER )
    6df4:	79fb      	ldrb	r3, [r7, #7]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d108      	bne.n	6e0c <PWM_ConfigStructInit+0x48>
	{
		pTimeCfg->PrescaleOption = PWM_TIMER_PRESCALE_USVAL;
    6dfa:	68bb      	ldr	r3, [r7, #8]
    6dfc:	f04f 0201 	mov.w	r2, #1
    6e00:	701a      	strb	r2, [r3, #0]
		pTimeCfg->PrescaleValue = 1;
    6e02:	68bb      	ldr	r3, [r7, #8]
    6e04:	f04f 0201 	mov.w	r2, #1
    6e08:	605a      	str	r2, [r3, #4]
    6e0a:	e00a      	b.n	6e22 <PWM_ConfigStructInit+0x5e>
	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    6e0c:	79fb      	ldrb	r3, [r7, #7]
    6e0e:	2b01      	cmp	r3, #1
    6e10:	d107      	bne.n	6e22 <PWM_ConfigStructInit+0x5e>
	{
		pCounterCfg->CountInputSelect = PWM_COUNTER_PCAP1_0;
    6e12:	68fb      	ldr	r3, [r7, #12]
    6e14:	f04f 0200 	mov.w	r2, #0
    6e18:	705a      	strb	r2, [r3, #1]
		pCounterCfg->CounterOption = PWM_COUNTER_RISING;
    6e1a:	68fb      	ldr	r3, [r7, #12]
    6e1c:	f04f 0201 	mov.w	r2, #1
    6e20:	701a      	strb	r2, [r3, #0]
	}
}
    6e22:	f107 0710 	add.w	r7, r7, #16
    6e26:	46bd      	mov	sp, r7
    6e28:	bd80      	pop	{r7, pc}
    6e2a:	bf00      	nop

00006e2c <PWM_Init>:
 * @return 		None
 * Note: PWM_ConfigStruct pointer will be assigned to corresponding structure
 * 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
 **********************************************************************/
void PWM_Init(LPC_PWM_TypeDef *PWMx, uint32_t PWMTimerCounterMode, void *PWM_ConfigStruct)
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b088      	sub	sp, #32
    6e30:	af00      	add	r7, sp, #0
    6e32:	60f8      	str	r0, [r7, #12]
    6e34:	60b9      	str	r1, [r7, #8]
    6e36:	607a      	str	r2, [r7, #4]
	PWM_TIMERCFG_Type *pTimeCfg;
	PWM_COUNTERCFG_Type *pCounterCfg;
	uint64_t clkdlycnt;

	CHECK_PARAM(PARAM_PWMx(PWMx));
    6e38:	68fa      	ldr	r2, [r7, #12]
    6e3a:	f248 0300 	movw	r3, #32768	; 0x8000
    6e3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6e42:	429a      	cmp	r2, r3
    6e44:	d007      	beq.n	6e56 <PWM_Init+0x2a>
    6e46:	f24b 3054 	movw	r0, #45908	; 0xb354
    6e4a:	f2c0 0000 	movt	r0, #0
    6e4e:	f04f 01a2 	mov.w	r1, #162	; 0xa2
    6e52:	f7ff f9dd 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));
    6e56:	68bb      	ldr	r3, [r7, #8]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d00a      	beq.n	6e72 <PWM_Init+0x46>
    6e5c:	68bb      	ldr	r3, [r7, #8]
    6e5e:	2b01      	cmp	r3, #1
    6e60:	d007      	beq.n	6e72 <PWM_Init+0x46>
    6e62:	f24b 3054 	movw	r0, #45908	; 0xb354
    6e66:	f2c0 0000 	movt	r0, #0
    6e6a:	f04f 01a3 	mov.w	r1, #163	; 0xa3
    6e6e:	f7ff f9cf 	bl	6210 <check_failed>

	pTimeCfg = (PWM_TIMERCFG_Type *)PWM_ConfigStruct;
    6e72:	687b      	ldr	r3, [r7, #4]
    6e74:	613b      	str	r3, [r7, #16]
	pCounterCfg = (PWM_COUNTERCFG_Type *)PWM_ConfigStruct;
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	617b      	str	r3, [r7, #20]


	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, ENABLE);
    6e7a:	f04f 0040 	mov.w	r0, #64	; 0x40
    6e7e:	f04f 0101 	mov.w	r1, #1
    6e82:	f7fd f9cf 	bl	4224 <CLKPWR_ConfigPPWR>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_PWM1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    6e86:	f04f 000c 	mov.w	r0, #12
    6e8a:	f04f 0100 	mov.w	r1, #0
    6e8e:	f7fd f901 	bl	4094 <CLKPWR_SetPCLKDiv>
	// Get peripheral clock of PWM1
	clkdlycnt = (uint64_t) CLKPWR_GetPCLK (CLKPWR_PCLKSEL_PWM1);
    6e92:	f04f 000c 	mov.w	r0, #12
    6e96:	f7fd f98d 	bl	41b4 <CLKPWR_GetPCLK>
    6e9a:	4603      	mov	r3, r0
    6e9c:	461a      	mov	r2, r3
    6e9e:	f04f 0300 	mov.w	r3, #0
    6ea2:	e9c7 2306 	strd	r2, r3, [r7, #24]


	// Clear all interrupts pending
	PWMx->IR = 0xFF & PWM_IR_BITMASK;
    6ea6:	68fb      	ldr	r3, [r7, #12]
    6ea8:	f04f 023f 	mov.w	r2, #63	; 0x3f
    6eac:	601a      	str	r2, [r3, #0]
	PWMx->TCR = 0x00;
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	f04f 0200 	mov.w	r2, #0
    6eb4:	605a      	str	r2, [r3, #4]
	PWMx->CTCR = 0x00;
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	f04f 0200 	mov.w	r2, #0
    6ebc:	671a      	str	r2, [r3, #112]	; 0x70
	PWMx->MCR = 0x00;
    6ebe:	68fb      	ldr	r3, [r7, #12]
    6ec0:	f04f 0200 	mov.w	r2, #0
    6ec4:	615a      	str	r2, [r3, #20]
	PWMx->CCR = 0x00;
    6ec6:	68fb      	ldr	r3, [r7, #12]
    6ec8:	f04f 0200 	mov.w	r2, #0
    6ecc:	629a      	str	r2, [r3, #40]	; 0x28
	PWMx->PCR = 0x00;
    6ece:	68fb      	ldr	r3, [r7, #12]
    6ed0:	f04f 0200 	mov.w	r2, #0
    6ed4:	64da      	str	r2, [r3, #76]	; 0x4c
	PWMx->LER = 0x00;
    6ed6:	68fb      	ldr	r3, [r7, #12]
    6ed8:	f04f 0200 	mov.w	r2, #0
    6edc:	651a      	str	r2, [r3, #80]	; 0x50

	if (PWMTimerCounterMode == PWM_MODE_TIMER)
    6ede:	68bb      	ldr	r3, [r7, #8]
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d13f      	bne.n	6f64 <PWM_Init+0x138>
	{
		CHECK_PARAM(PARAM_PWM_TIMER_PRESCALE(pTimeCfg->PrescaleOption));
    6ee4:	693b      	ldr	r3, [r7, #16]
    6ee6:	781b      	ldrb	r3, [r3, #0]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d00b      	beq.n	6f04 <PWM_Init+0xd8>
    6eec:	693b      	ldr	r3, [r7, #16]
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	2b01      	cmp	r3, #1
    6ef2:	d007      	beq.n	6f04 <PWM_Init+0xd8>
    6ef4:	f24b 3054 	movw	r0, #45908	; 0xb354
    6ef8:	f2c0 0000 	movt	r0, #0
    6efc:	f04f 01ba 	mov.w	r1, #186	; 0xba
    6f00:	f7ff f986 	bl	6210 <check_failed>

		/* Absolute prescale value */
		if (pTimeCfg->PrescaleOption == PWM_TIMER_PRESCALE_TICKVAL)
    6f04:	693b      	ldr	r3, [r7, #16]
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d106      	bne.n	6f1a <PWM_Init+0xee>
		{
			PWMx->PR   = pTimeCfg->PrescaleValue - 1;
    6f0c:	693b      	ldr	r3, [r7, #16]
    6f0e:	685b      	ldr	r3, [r3, #4]
    6f10:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	60da      	str	r2, [r3, #12]
		}
		/* uSecond prescale value */
		else
		{
			clkdlycnt = (clkdlycnt * pTimeCfg->PrescaleValue) / 1000000;
			PWMx->PR = ((uint32_t) clkdlycnt) - 1;
    6f18:	e05d      	b.n	6fd6 <PWM_Init+0x1aa>
			PWMx->PR   = pTimeCfg->PrescaleValue - 1;
		}
		/* uSecond prescale value */
		else
		{
			clkdlycnt = (clkdlycnt * pTimeCfg->PrescaleValue) / 1000000;
    6f1a:	693b      	ldr	r3, [r7, #16]
    6f1c:	685b      	ldr	r3, [r3, #4]
    6f1e:	461a      	mov	r2, r3
    6f20:	f04f 0300 	mov.w	r3, #0
    6f24:	69b9      	ldr	r1, [r7, #24]
    6f26:	fb03 f101 	mul.w	r1, r3, r1
    6f2a:	69f8      	ldr	r0, [r7, #28]
    6f2c:	fb02 f000 	mul.w	r0, r2, r0
    6f30:	4401      	add	r1, r0
    6f32:	69b8      	ldr	r0, [r7, #24]
    6f34:	fba0 2302 	umull	r2, r3, r0, r2
    6f38:	4419      	add	r1, r3
    6f3a:	460b      	mov	r3, r1
    6f3c:	4610      	mov	r0, r2
    6f3e:	4619      	mov	r1, r3
    6f40:	f44f 2274 	mov.w	r2, #999424	; 0xf4000
    6f44:	f502 7210 	add.w	r2, r2, #576	; 0x240
    6f48:	f04f 0300 	mov.w	r3, #0
    6f4c:	f003 fca4 	bl	a898 <__aeabi_uldivmod>
    6f50:	4602      	mov	r2, r0
    6f52:	460b      	mov	r3, r1
    6f54:	e9c7 2306 	strd	r2, r3, [r7, #24]
			PWMx->PR = ((uint32_t) clkdlycnt) - 1;
    6f58:	69bb      	ldr	r3, [r7, #24]
    6f5a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	60da      	str	r2, [r3, #12]
    6f62:	e038      	b.n	6fd6 <PWM_Init+0x1aa>
		}

	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    6f64:	68bb      	ldr	r3, [r7, #8]
    6f66:	2b01      	cmp	r3, #1
    6f68:	d135      	bne.n	6fd6 <PWM_Init+0x1aa>
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
    6f6a:	697b      	ldr	r3, [r7, #20]
    6f6c:	785b      	ldrb	r3, [r3, #1]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d00b      	beq.n	6f8a <PWM_Init+0x15e>
    6f72:	697b      	ldr	r3, [r7, #20]
    6f74:	785b      	ldrb	r3, [r3, #1]
    6f76:	2b01      	cmp	r3, #1
    6f78:	d007      	beq.n	6f8a <PWM_Init+0x15e>
    6f7a:	f24b 3054 	movw	r0, #45908	; 0xb354
    6f7e:	f2c0 0000 	movt	r0, #0
    6f82:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    6f86:	f7ff f943 	bl	6210 <check_failed>
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));
    6f8a:	697b      	ldr	r3, [r7, #20]
    6f8c:	781b      	ldrb	r3, [r3, #0]
    6f8e:	2b01      	cmp	r3, #1
    6f90:	d00f      	beq.n	6fb2 <PWM_Init+0x186>
    6f92:	697b      	ldr	r3, [r7, #20]
    6f94:	781b      	ldrb	r3, [r3, #0]
    6f96:	2b02      	cmp	r3, #2
    6f98:	d00b      	beq.n	6fb2 <PWM_Init+0x186>
    6f9a:	697b      	ldr	r3, [r7, #20]
    6f9c:	781b      	ldrb	r3, [r3, #0]
    6f9e:	2b03      	cmp	r3, #3
    6fa0:	d007      	beq.n	6fb2 <PWM_Init+0x186>
    6fa2:	f24b 3054 	movw	r0, #45908	; 0xb354
    6fa6:	f2c0 0000 	movt	r0, #0
    6faa:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    6fae:	f7ff f92f 	bl	6210 <check_failed>

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    6fb2:	68fb      	ldr	r3, [r7, #12]
    6fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6fb6:	697b      	ldr	r3, [r7, #20]
    6fb8:	781b      	ldrb	r3, [r3, #0]
    6fba:	f003 0103 	and.w	r1, r3, #3
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    6fbe:	697b      	ldr	r3, [r7, #20]
    6fc0:	785b      	ldrb	r3, [r3, #1]
    6fc2:	f003 0303 	and.w	r3, r3, #3
    6fc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    6fca:	ea41 0303 	orr.w	r3, r1, r3
    6fce:	ea42 0203 	orr.w	r2, r2, r3
    6fd2:	68fb      	ldr	r3, [r7, #12]
    6fd4:	671a      	str	r2, [r3, #112]	; 0x70
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
	}
}
    6fd6:	f107 0720 	add.w	r7, r7, #32
    6fda:	46bd      	mov	sp, r7
    6fdc:	bd80      	pop	{r7, pc}
    6fde:	bf00      	nop

00006fe0 <PWM_DeInit>:
*                  default reset values.
 * @param[in]	PWMx	PWM peripheral selected, should be LPC_PWM1
 * @return 		None
 **********************************************************************/
void PWM_DeInit (LPC_PWM_TypeDef *PWMx)
{
    6fe0:	b580      	push	{r7, lr}
    6fe2:	b082      	sub	sp, #8
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    6fe8:	687a      	ldr	r2, [r7, #4]
    6fea:	f248 0300 	movw	r3, #32768	; 0x8000
    6fee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    6ff2:	429a      	cmp	r2, r3
    6ff4:	d007      	beq.n	7006 <PWM_DeInit+0x26>
    6ff6:	f24b 3054 	movw	r0, #45908	; 0xb354
    6ffa:	f2c0 0000 	movt	r0, #0
    6ffe:	f04f 01db 	mov.w	r1, #219	; 0xdb
    7002:	f7ff f905 	bl	6210 <check_failed>

	// Disable PWM control (timer, counter and PWM)
	PWMx->TCR = 0x00;
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	f04f 0200 	mov.w	r2, #0
    700c:	605a      	str	r2, [r3, #4]
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, DISABLE);
    700e:	f04f 0040 	mov.w	r0, #64	; 0x40
    7012:	f04f 0100 	mov.w	r1, #0
    7016:	f7fd f905 	bl	4224 <CLKPWR_ConfigPPWR>

}
    701a:	f107 0708 	add.w	r7, r7, #8
    701e:	46bd      	mov	sp, r7
    7020:	bd80      	pop	{r7, pc}
    7022:	bf00      	nop

00007024 <PWM_Cmd>:
 * 							- ENABLE: Enable PWM peripheral
 * 							- DISABLE: Disable PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_Cmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    7024:	b580      	push	{r7, lr}
    7026:	b082      	sub	sp, #8
    7028:	af00      	add	r7, sp, #0
    702a:	6078      	str	r0, [r7, #4]
    702c:	460b      	mov	r3, r1
    702e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    7030:	687a      	ldr	r2, [r7, #4]
    7032:	f248 0300 	movw	r3, #32768	; 0x8000
    7036:	f2c4 0301 	movt	r3, #16385	; 0x4001
    703a:	429a      	cmp	r2, r3
    703c:	d007      	beq.n	704e <PWM_Cmd+0x2a>
    703e:	f24b 3054 	movw	r0, #45908	; 0xb354
    7042:	f2c0 0000 	movt	r0, #0
    7046:	f04f 01ee 	mov.w	r1, #238	; 0xee
    704a:	f7ff f8e1 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    704e:	78fb      	ldrb	r3, [r7, #3]
    7050:	2b00      	cmp	r3, #0
    7052:	d00a      	beq.n	706a <PWM_Cmd+0x46>
    7054:	78fb      	ldrb	r3, [r7, #3]
    7056:	2b01      	cmp	r3, #1
    7058:	d007      	beq.n	706a <PWM_Cmd+0x46>
    705a:	f24b 3054 	movw	r0, #45908	; 0xb354
    705e:	f2c0 0000 	movt	r0, #0
    7062:	f04f 01ef 	mov.w	r1, #239	; 0xef
    7066:	f7ff f8d3 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    706a:	78fb      	ldrb	r3, [r7, #3]
    706c:	2b01      	cmp	r3, #1
    706e:	d106      	bne.n	707e <PWM_Cmd+0x5a>
	{
		PWMx->TCR	|=  PWM_TCR_PWM_ENABLE;
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	685b      	ldr	r3, [r3, #4]
    7074:	f043 0208 	orr.w	r2, r3, #8
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	605a      	str	r2, [r3, #4]
    707c:	e005      	b.n	708a <PWM_Cmd+0x66>
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_PWM_ENABLE) & PWM_TCR_BITMASK;
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	685b      	ldr	r3, [r3, #4]
    7082:	f003 0203 	and.w	r2, r3, #3
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	605a      	str	r2, [r3, #4]
	}
}
    708a:	f107 0708 	add.w	r7, r7, #8
    708e:	46bd      	mov	sp, r7
    7090:	bd80      	pop	{r7, pc}
    7092:	bf00      	nop

00007094 <PWM_CounterCmd>:
 * 							- ENABLE: Enable Counter in PWM peripheral
 * 							- DISABLE: Disable Counter in PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_CounterCmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    7094:	b580      	push	{r7, lr}
    7096:	b082      	sub	sp, #8
    7098:	af00      	add	r7, sp, #0
    709a:	6078      	str	r0, [r7, #4]
    709c:	460b      	mov	r3, r1
    709e:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    70a0:	687a      	ldr	r2, [r7, #4]
    70a2:	f248 0300 	movw	r3, #32768	; 0x8000
    70a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    70aa:	429a      	cmp	r2, r3
    70ac:	d007      	beq.n	70be <PWM_CounterCmd+0x2a>
    70ae:	f24b 3054 	movw	r0, #45908	; 0xb354
    70b2:	f2c0 0000 	movt	r0, #0
    70b6:	f44f 7183 	mov.w	r1, #262	; 0x106
    70ba:	f7ff f8a9 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    70be:	78fb      	ldrb	r3, [r7, #3]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d00a      	beq.n	70da <PWM_CounterCmd+0x46>
    70c4:	78fb      	ldrb	r3, [r7, #3]
    70c6:	2b01      	cmp	r3, #1
    70c8:	d007      	beq.n	70da <PWM_CounterCmd+0x46>
    70ca:	f24b 3054 	movw	r0, #45908	; 0xb354
    70ce:	f2c0 0000 	movt	r0, #0
    70d2:	f240 1107 	movw	r1, #263	; 0x107
    70d6:	f7ff f89b 	bl	6210 <check_failed>
	if (NewState == ENABLE)
    70da:	78fb      	ldrb	r3, [r7, #3]
    70dc:	2b01      	cmp	r3, #1
    70de:	d106      	bne.n	70ee <PWM_CounterCmd+0x5a>
	{
		PWMx->TCR	|=  PWM_TCR_COUNTER_ENABLE;
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	685b      	ldr	r3, [r3, #4]
    70e4:	f043 0201 	orr.w	r2, r3, #1
    70e8:	687b      	ldr	r3, [r7, #4]
    70ea:	605a      	str	r2, [r3, #4]
    70ec:	e005      	b.n	70fa <PWM_CounterCmd+0x66>
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_COUNTER_ENABLE) & PWM_TCR_BITMASK;
    70ee:	687b      	ldr	r3, [r7, #4]
    70f0:	685b      	ldr	r3, [r3, #4]
    70f2:	f003 020a 	and.w	r2, r3, #10
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	605a      	str	r2, [r3, #4]
	}
}
    70fa:	f107 0708 	add.w	r7, r7, #8
    70fe:	46bd      	mov	sp, r7
    7100:	bd80      	pop	{r7, pc}
    7102:	bf00      	nop

00007104 <PWM_ResetCounter>:
 * @brief 		Reset Counter in PWM peripheral
 * @param[in]	PWMx	PWM peripheral selected, should be LPC_PWM1
 * @return 		None
 **********************************************************************/
void PWM_ResetCounter(LPC_PWM_TypeDef *PWMx)
{
    7104:	b580      	push	{r7, lr}
    7106:	b082      	sub	sp, #8
    7108:	af00      	add	r7, sp, #0
    710a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    710c:	687a      	ldr	r2, [r7, #4]
    710e:	f248 0300 	movw	r3, #32768	; 0x8000
    7112:	f2c4 0301 	movt	r3, #16385	; 0x4001
    7116:	429a      	cmp	r2, r3
    7118:	d007      	beq.n	712a <PWM_ResetCounter+0x26>
    711a:	f24b 3054 	movw	r0, #45908	; 0xb354
    711e:	f2c0 0000 	movt	r0, #0
    7122:	f44f 718d 	mov.w	r1, #282	; 0x11a
    7126:	f7ff f873 	bl	6210 <check_failed>
	PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	685b      	ldr	r3, [r3, #4]
    712e:	f043 0202 	orr.w	r2, r3, #2
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	605a      	str	r2, [r3, #4]
	PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    7136:	687b      	ldr	r3, [r7, #4]
    7138:	685b      	ldr	r3, [r3, #4]
    713a:	f003 0209 	and.w	r2, r3, #9
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	605a      	str	r2, [r3, #4]
}
    7142:	f107 0708 	add.w	r7, r7, #8
    7146:	46bd      	mov	sp, r7
    7148:	bd80      	pop	{r7, pc}
    714a:	bf00      	nop

0000714c <PWM_ConfigMatch>:
*                    that contains the configuration information for the
*                    specified PWM match function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigMatch(LPC_PWM_TypeDef *PWMx, PWM_MATCHCFG_Type *PWM_MatchConfigStruct)
{
    714c:	b580      	push	{r7, lr}
    714e:	b082      	sub	sp, #8
    7150:	af00      	add	r7, sp, #0
    7152:	6078      	str	r0, [r7, #4]
    7154:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    7156:	687a      	ldr	r2, [r7, #4]
    7158:	f248 0300 	movw	r3, #32768	; 0x8000
    715c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    7160:	429a      	cmp	r2, r3
    7162:	d007      	beq.n	7174 <PWM_ConfigMatch+0x28>
    7164:	f24b 3054 	movw	r0, #45908	; 0xb354
    7168:	f2c0 0000 	movt	r0, #0
    716c:	f44f 7195 	mov.w	r1, #298	; 0x12a
    7170:	f7ff f84e 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(PWM_MatchConfigStruct->MatchChannel));
    7174:	683b      	ldr	r3, [r7, #0]
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	2b06      	cmp	r3, #6
    717a:	d907      	bls.n	718c <PWM_ConfigMatch+0x40>
    717c:	f24b 3054 	movw	r0, #45908	; 0xb354
    7180:	f2c0 0000 	movt	r0, #0
    7184:	f240 112b 	movw	r1, #299	; 0x12b
    7188:	f7ff f842 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->IntOnMatch));
    718c:	683b      	ldr	r3, [r7, #0]
    718e:	785b      	ldrb	r3, [r3, #1]
    7190:	2b00      	cmp	r3, #0
    7192:	d00b      	beq.n	71ac <PWM_ConfigMatch+0x60>
    7194:	683b      	ldr	r3, [r7, #0]
    7196:	785b      	ldrb	r3, [r3, #1]
    7198:	2b01      	cmp	r3, #1
    719a:	d007      	beq.n	71ac <PWM_ConfigMatch+0x60>
    719c:	f24b 3054 	movw	r0, #45908	; 0xb354
    71a0:	f2c0 0000 	movt	r0, #0
    71a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
    71a8:	f7ff f832 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->ResetOnMatch));
    71ac:	683b      	ldr	r3, [r7, #0]
    71ae:	78db      	ldrb	r3, [r3, #3]
    71b0:	2b00      	cmp	r3, #0
    71b2:	d00b      	beq.n	71cc <PWM_ConfigMatch+0x80>
    71b4:	683b      	ldr	r3, [r7, #0]
    71b6:	78db      	ldrb	r3, [r3, #3]
    71b8:	2b01      	cmp	r3, #1
    71ba:	d007      	beq.n	71cc <PWM_ConfigMatch+0x80>
    71bc:	f24b 3054 	movw	r0, #45908	; 0xb354
    71c0:	f2c0 0000 	movt	r0, #0
    71c4:	f240 112d 	movw	r1, #301	; 0x12d
    71c8:	f7ff f822 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->StopOnMatch));
    71cc:	683b      	ldr	r3, [r7, #0]
    71ce:	789b      	ldrb	r3, [r3, #2]
    71d0:	2b00      	cmp	r3, #0
    71d2:	d00b      	beq.n	71ec <PWM_ConfigMatch+0xa0>
    71d4:	683b      	ldr	r3, [r7, #0]
    71d6:	789b      	ldrb	r3, [r3, #2]
    71d8:	2b01      	cmp	r3, #1
    71da:	d007      	beq.n	71ec <PWM_ConfigMatch+0xa0>
    71dc:	f24b 3054 	movw	r0, #45908	; 0xb354
    71e0:	f2c0 0000 	movt	r0, #0
    71e4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    71e8:	f7ff f812 	bl	6210 <check_failed>

	//interrupt on MRn
	if (PWM_MatchConfigStruct->IntOnMatch == ENABLE)
    71ec:	683b      	ldr	r3, [r7, #0]
    71ee:	785b      	ldrb	r3, [r3, #1]
    71f0:	2b01      	cmp	r3, #1
    71f2:	d115      	bne.n	7220 <PWM_ConfigMatch+0xd4>
	{
		PWMx->MCR |= PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	695a      	ldr	r2, [r3, #20]
    71f8:	683b      	ldr	r3, [r7, #0]
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	f003 0307 	and.w	r3, r3, #7
    7200:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7204:	683b      	ldr	r3, [r7, #0]
    7206:	781b      	ldrb	r3, [r3, #0]
    7208:	f003 0307 	and.w	r3, r3, #7
    720c:	440b      	add	r3, r1
    720e:	f04f 0101 	mov.w	r1, #1
    7212:	fa01 f303 	lsl.w	r3, r1, r3
    7216:	ea42 0203 	orr.w	r2, r2, r3
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	615a      	str	r2, [r3, #20]
    721e:	e01a      	b.n	7256 <PWM_ConfigMatch+0x10a>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	695a      	ldr	r2, [r3, #20]
    7224:	683b      	ldr	r3, [r7, #0]
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	f003 0307 	and.w	r3, r3, #7
    722c:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7230:	683b      	ldr	r3, [r7, #0]
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	f003 0307 	and.w	r3, r3, #7
    7238:	440b      	add	r3, r1
    723a:	f04f 0101 	mov.w	r1, #1
    723e:	fa01 f303 	lsl.w	r3, r1, r3
    7242:	ea6f 0303 	mvn.w	r3, r3
    7246:	ea02 0303 	and.w	r3, r2, r3
    724a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    724e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    7252:	687a      	ldr	r2, [r7, #4]
    7254:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}

	//reset on MRn
	if (PWM_MatchConfigStruct->ResetOnMatch == ENABLE)
    7256:	683b      	ldr	r3, [r7, #0]
    7258:	78db      	ldrb	r3, [r3, #3]
    725a:	2b01      	cmp	r3, #1
    725c:	d117      	bne.n	728e <PWM_ConfigMatch+0x142>
	{
		PWMx->MCR |= PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	695a      	ldr	r2, [r3, #20]
    7262:	683b      	ldr	r3, [r7, #0]
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	f003 0307 	and.w	r3, r3, #7
    726a:	ea4f 0143 	mov.w	r1, r3, lsl #1
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	781b      	ldrb	r3, [r3, #0]
    7272:	f003 0307 	and.w	r3, r3, #7
    7276:	440b      	add	r3, r1
    7278:	f103 0301 	add.w	r3, r3, #1
    727c:	f04f 0101 	mov.w	r1, #1
    7280:	fa01 f303 	lsl.w	r3, r1, r3
    7284:	ea42 0203 	orr.w	r2, r2, r3
    7288:	687b      	ldr	r3, [r7, #4]
    728a:	615a      	str	r2, [r3, #20]
    728c:	e01c      	b.n	72c8 <PWM_ConfigMatch+0x17c>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	695a      	ldr	r2, [r3, #20]
    7292:	683b      	ldr	r3, [r7, #0]
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	f003 0307 	and.w	r3, r3, #7
    729a:	ea4f 0143 	mov.w	r1, r3, lsl #1
    729e:	683b      	ldr	r3, [r7, #0]
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	f003 0307 	and.w	r3, r3, #7
    72a6:	440b      	add	r3, r1
    72a8:	f103 0301 	add.w	r3, r3, #1
    72ac:	f04f 0101 	mov.w	r1, #1
    72b0:	fa01 f303 	lsl.w	r3, r1, r3
    72b4:	ea6f 0303 	mvn.w	r3, r3
    72b8:	ea02 0303 	and.w	r3, r2, r3
    72bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    72c0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    72c4:	687a      	ldr	r2, [r7, #4]
    72c6:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}

	//stop on MRn
	if (PWM_MatchConfigStruct->StopOnMatch == ENABLE)
    72c8:	683b      	ldr	r3, [r7, #0]
    72ca:	789b      	ldrb	r3, [r3, #2]
    72cc:	2b01      	cmp	r3, #1
    72ce:	d117      	bne.n	7300 <PWM_ConfigMatch+0x1b4>
	{
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	695a      	ldr	r2, [r3, #20]
    72d4:	683b      	ldr	r3, [r7, #0]
    72d6:	781b      	ldrb	r3, [r3, #0]
    72d8:	f003 0307 	and.w	r3, r3, #7
    72dc:	ea4f 0143 	mov.w	r1, r3, lsl #1
    72e0:	683b      	ldr	r3, [r7, #0]
    72e2:	781b      	ldrb	r3, [r3, #0]
    72e4:	f003 0307 	and.w	r3, r3, #7
    72e8:	440b      	add	r3, r1
    72ea:	f103 0302 	add.w	r3, r3, #2
    72ee:	f04f 0101 	mov.w	r1, #1
    72f2:	fa01 f303 	lsl.w	r3, r1, r3
    72f6:	ea42 0203 	orr.w	r2, r2, r3
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	615a      	str	r2, [r3, #20]
    72fe:	e01c      	b.n	733a <PWM_ConfigMatch+0x1ee>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    7300:	687b      	ldr	r3, [r7, #4]
    7302:	695a      	ldr	r2, [r3, #20]
    7304:	683b      	ldr	r3, [r7, #0]
    7306:	781b      	ldrb	r3, [r3, #0]
    7308:	f003 0307 	and.w	r3, r3, #7
    730c:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7310:	683b      	ldr	r3, [r7, #0]
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	f003 0307 	and.w	r3, r3, #7
    7318:	440b      	add	r3, r1
    731a:	f103 0302 	add.w	r3, r3, #2
    731e:	f04f 0101 	mov.w	r1, #1
    7322:	fa01 f303 	lsl.w	r3, r1, r3
    7326:	ea6f 0303 	mvn.w	r3, r3
    732a:	ea02 0303 	and.w	r3, r2, r3
    732e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7332:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
    7336:	687a      	ldr	r2, [r7, #4]
    7338:	6153      	str	r3, [r2, #20]
					& PWM_MCR_BITMASK;
	}
}
    733a:	f107 0708 	add.w	r7, r7, #8
    733e:	46bd      	mov	sp, r7
    7340:	bd80      	pop	{r7, pc}
    7342:	bf00      	nop

00007344 <PWM_ConfigCapture>:
*                    that contains the configuration information for the
*                    specified PWM capture input function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigCapture(LPC_PWM_TypeDef *PWMx, PWM_CAPTURECFG_Type *PWM_CaptureConfigStruct)
{
    7344:	b580      	push	{r7, lr}
    7346:	b082      	sub	sp, #8
    7348:	af00      	add	r7, sp, #0
    734a:	6078      	str	r0, [r7, #4]
    734c:	6039      	str	r1, [r7, #0]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    734e:	687a      	ldr	r2, [r7, #4]
    7350:	f248 0300 	movw	r3, #32768	; 0x8000
    7354:	f2c4 0301 	movt	r3, #16385	; 0x4001
    7358:	429a      	cmp	r2, r3
    735a:	d007      	beq.n	736c <PWM_ConfigCapture+0x28>
    735c:	f24b 3054 	movw	r0, #45908	; 0xb354
    7360:	f2c0 0000 	movt	r0, #0
    7364:	f240 115d 	movw	r1, #349	; 0x15d
    7368:	f7fe ff52 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(PWM_CaptureConfigStruct->CaptureChannel));
    736c:	683b      	ldr	r3, [r7, #0]
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	2b00      	cmp	r3, #0
    7372:	d00b      	beq.n	738c <PWM_ConfigCapture+0x48>
    7374:	683b      	ldr	r3, [r7, #0]
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	2b01      	cmp	r3, #1
    737a:	d007      	beq.n	738c <PWM_ConfigCapture+0x48>
    737c:	f24b 3054 	movw	r0, #45908	; 0xb354
    7380:	f2c0 0000 	movt	r0, #0
    7384:	f44f 71af 	mov.w	r1, #350	; 0x15e
    7388:	f7fe ff42 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->FallingEdge));
    738c:	683b      	ldr	r3, [r7, #0]
    738e:	789b      	ldrb	r3, [r3, #2]
    7390:	2b00      	cmp	r3, #0
    7392:	d00b      	beq.n	73ac <PWM_ConfigCapture+0x68>
    7394:	683b      	ldr	r3, [r7, #0]
    7396:	789b      	ldrb	r3, [r3, #2]
    7398:	2b01      	cmp	r3, #1
    739a:	d007      	beq.n	73ac <PWM_ConfigCapture+0x68>
    739c:	f24b 3054 	movw	r0, #45908	; 0xb354
    73a0:	f2c0 0000 	movt	r0, #0
    73a4:	f240 115f 	movw	r1, #351	; 0x15f
    73a8:	f7fe ff32 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->IntOnCaption));
    73ac:	683b      	ldr	r3, [r7, #0]
    73ae:	78db      	ldrb	r3, [r3, #3]
    73b0:	2b00      	cmp	r3, #0
    73b2:	d00b      	beq.n	73cc <PWM_ConfigCapture+0x88>
    73b4:	683b      	ldr	r3, [r7, #0]
    73b6:	78db      	ldrb	r3, [r3, #3]
    73b8:	2b01      	cmp	r3, #1
    73ba:	d007      	beq.n	73cc <PWM_ConfigCapture+0x88>
    73bc:	f24b 3054 	movw	r0, #45908	; 0xb354
    73c0:	f2c0 0000 	movt	r0, #0
    73c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
    73c8:	f7fe ff22 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->RisingEdge));
    73cc:	683b      	ldr	r3, [r7, #0]
    73ce:	785b      	ldrb	r3, [r3, #1]
    73d0:	2b00      	cmp	r3, #0
    73d2:	d00b      	beq.n	73ec <PWM_ConfigCapture+0xa8>
    73d4:	683b      	ldr	r3, [r7, #0]
    73d6:	785b      	ldrb	r3, [r3, #1]
    73d8:	2b01      	cmp	r3, #1
    73da:	d007      	beq.n	73ec <PWM_ConfigCapture+0xa8>
    73dc:	f24b 3054 	movw	r0, #45908	; 0xb354
    73e0:	f2c0 0000 	movt	r0, #0
    73e4:	f240 1161 	movw	r1, #353	; 0x161
    73e8:	f7fe ff12 	bl	6210 <check_failed>

	if (PWM_CaptureConfigStruct->RisingEdge == ENABLE)
    73ec:	683b      	ldr	r3, [r7, #0]
    73ee:	785b      	ldrb	r3, [r3, #1]
    73f0:	2b01      	cmp	r3, #1
    73f2:	d115      	bne.n	7420 <PWM_ConfigCapture+0xdc>
	{
		PWMx->CCR |= PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel);
    73f4:	687b      	ldr	r3, [r7, #4]
    73f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    73f8:	683b      	ldr	r3, [r7, #0]
    73fa:	781b      	ldrb	r3, [r3, #0]
    73fc:	f003 0302 	and.w	r3, r3, #2
    7400:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7404:	683b      	ldr	r3, [r7, #0]
    7406:	781b      	ldrb	r3, [r3, #0]
    7408:	f003 0301 	and.w	r3, r3, #1
    740c:	440b      	add	r3, r1
    740e:	f04f 0101 	mov.w	r1, #1
    7412:	fa01 f303 	lsl.w	r3, r1, r3
    7416:	ea42 0203 	orr.w	r2, r2, r3
    741a:	687b      	ldr	r3, [r7, #4]
    741c:	629a      	str	r2, [r3, #40]	; 0x28
    741e:	e018      	b.n	7452 <PWM_ConfigCapture+0x10e>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel)) \
    7420:	687b      	ldr	r3, [r7, #4]
    7422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7424:	683b      	ldr	r3, [r7, #0]
    7426:	781b      	ldrb	r3, [r3, #0]
    7428:	f003 0302 	and.w	r3, r3, #2
    742c:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7430:	683b      	ldr	r3, [r7, #0]
    7432:	781b      	ldrb	r3, [r3, #0]
    7434:	f003 0301 	and.w	r3, r3, #1
    7438:	440b      	add	r3, r1
    743a:	f04f 0101 	mov.w	r1, #1
    743e:	fa01 f303 	lsl.w	r3, r1, r3
    7442:	ea6f 0303 	mvn.w	r3, r3
    7446:	ea02 0303 	and.w	r3, r2, r3
    744a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->FallingEdge == ENABLE)
    7452:	683b      	ldr	r3, [r7, #0]
    7454:	789b      	ldrb	r3, [r3, #2]
    7456:	2b01      	cmp	r3, #1
    7458:	d117      	bne.n	748a <PWM_ConfigCapture+0x146>
	{
		PWMx->CCR |= PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel);
    745a:	687b      	ldr	r3, [r7, #4]
    745c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    745e:	683b      	ldr	r3, [r7, #0]
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	f003 0302 	and.w	r3, r3, #2
    7466:	ea4f 0143 	mov.w	r1, r3, lsl #1
    746a:	683b      	ldr	r3, [r7, #0]
    746c:	781b      	ldrb	r3, [r3, #0]
    746e:	f003 0301 	and.w	r3, r3, #1
    7472:	440b      	add	r3, r1
    7474:	f103 0301 	add.w	r3, r3, #1
    7478:	f04f 0101 	mov.w	r1, #1
    747c:	fa01 f303 	lsl.w	r3, r1, r3
    7480:	ea42 0203 	orr.w	r2, r2, r3
    7484:	687b      	ldr	r3, [r7, #4]
    7486:	629a      	str	r2, [r3, #40]	; 0x28
    7488:	e01a      	b.n	74c0 <PWM_ConfigCapture+0x17c>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel)) \
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    748e:	683b      	ldr	r3, [r7, #0]
    7490:	781b      	ldrb	r3, [r3, #0]
    7492:	f003 0302 	and.w	r3, r3, #2
    7496:	ea4f 0143 	mov.w	r1, r3, lsl #1
    749a:	683b      	ldr	r3, [r7, #0]
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	f003 0301 	and.w	r3, r3, #1
    74a2:	440b      	add	r3, r1
    74a4:	f103 0301 	add.w	r3, r3, #1
    74a8:	f04f 0101 	mov.w	r1, #1
    74ac:	fa01 f303 	lsl.w	r3, r1, r3
    74b0:	ea6f 0303 	mvn.w	r3, r3
    74b4:	ea02 0303 	and.w	r3, r2, r3
    74b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    74bc:	687b      	ldr	r3, [r7, #4]
    74be:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->IntOnCaption == ENABLE)
    74c0:	683b      	ldr	r3, [r7, #0]
    74c2:	78db      	ldrb	r3, [r3, #3]
    74c4:	2b01      	cmp	r3, #1
    74c6:	d117      	bne.n	74f8 <PWM_ConfigCapture+0x1b4>
	{
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    74cc:	683b      	ldr	r3, [r7, #0]
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	f003 0302 	and.w	r3, r3, #2
    74d4:	ea4f 0143 	mov.w	r1, r3, lsl #1
    74d8:	683b      	ldr	r3, [r7, #0]
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	f003 0301 	and.w	r3, r3, #1
    74e0:	440b      	add	r3, r1
    74e2:	f103 0302 	add.w	r3, r3, #2
    74e6:	f04f 0101 	mov.w	r1, #1
    74ea:	fa01 f303 	lsl.w	r3, r1, r3
    74ee:	ea42 0203 	orr.w	r2, r2, r3
    74f2:	687b      	ldr	r3, [r7, #4]
    74f4:	629a      	str	r2, [r3, #40]	; 0x28
    74f6:	e01a      	b.n	752e <PWM_ConfigCapture+0x1ea>
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel)) \
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    74fc:	683b      	ldr	r3, [r7, #0]
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	f003 0302 	and.w	r3, r3, #2
    7504:	ea4f 0143 	mov.w	r1, r3, lsl #1
    7508:	683b      	ldr	r3, [r7, #0]
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	f003 0301 	and.w	r3, r3, #1
    7510:	440b      	add	r3, r1
    7512:	f103 0302 	add.w	r3, r3, #2
    7516:	f04f 0101 	mov.w	r1, #1
    751a:	fa01 f303 	lsl.w	r3, r1, r3
    751e:	ea6f 0303 	mvn.w	r3, r3
    7522:	ea02 0303 	and.w	r3, r2, r3
    7526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    752a:	687b      	ldr	r3, [r7, #4]
    752c:	629a      	str	r2, [r3, #40]	; 0x28
					& PWM_CCR_BITMASK;
	}
}
    752e:	f107 0708 	add.w	r7, r7, #8
    7532:	46bd      	mov	sp, r7
    7534:	bd80      	pop	{r7, pc}
    7536:	bf00      	nop

00007538 <PWM_GetCaptureValue>:
 * @param[in]	CaptureChannel: capture channel number, should be in
 * 				range 0 to 1
 * @return 		Value of capture register
 **********************************************************************/
uint32_t PWM_GetCaptureValue(LPC_PWM_TypeDef *PWMx, uint8_t CaptureChannel)
{
    7538:	b580      	push	{r7, lr}
    753a:	b082      	sub	sp, #8
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
    7540:	460b      	mov	r3, r1
    7542:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    7544:	687a      	ldr	r2, [r7, #4]
    7546:	f248 0300 	movw	r3, #32768	; 0x8000
    754a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    754e:	429a      	cmp	r2, r3
    7550:	d007      	beq.n	7562 <PWM_GetCaptureValue+0x2a>
    7552:	f24b 3054 	movw	r0, #45908	; 0xb354
    7556:	f2c0 0000 	movt	r0, #0
    755a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
    755e:	f7fe fe57 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(CaptureChannel));
    7562:	78fb      	ldrb	r3, [r7, #3]
    7564:	2b00      	cmp	r3, #0
    7566:	d00a      	beq.n	757e <PWM_GetCaptureValue+0x46>
    7568:	78fb      	ldrb	r3, [r7, #3]
    756a:	2b01      	cmp	r3, #1
    756c:	d007      	beq.n	757e <PWM_GetCaptureValue+0x46>
    756e:	f24b 3054 	movw	r0, #45908	; 0xb354
    7572:	f2c0 0000 	movt	r0, #0
    7576:	f240 118d 	movw	r1, #397	; 0x18d
    757a:	f7fe fe49 	bl	6210 <check_failed>

	switch (CaptureChannel)
    757e:	78fb      	ldrb	r3, [r7, #3]
    7580:	2b00      	cmp	r3, #0
    7582:	d002      	beq.n	758a <PWM_GetCaptureValue+0x52>
    7584:	2b01      	cmp	r3, #1
    7586:	d003      	beq.n	7590 <PWM_GetCaptureValue+0x58>
    7588:	e005      	b.n	7596 <PWM_GetCaptureValue+0x5e>
	{
	case 0:
		return PWMx->CR0;
    758a:	687b      	ldr	r3, [r7, #4]
    758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    758e:	e004      	b.n	759a <PWM_GetCaptureValue+0x62>

	case 1:
		return PWMx->CR1;
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7594:	e001      	b.n	759a <PWM_GetCaptureValue+0x62>

	default:
		return (0);
    7596:	f04f 0300 	mov.w	r3, #0
	}
}
    759a:	4618      	mov	r0, r3
    759c:	f107 0708 	add.w	r7, r7, #8
    75a0:	46bd      	mov	sp, r7
    75a2:	bd80      	pop	{r7, pc}

000075a4 <PWM_MatchUpdate>:
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MatchUpdate(LPC_PWM_TypeDef *PWMx, uint8_t MatchChannel, \
					uint32_t MatchValue, uint8_t UpdateType)
{
    75a4:	b580      	push	{r7, lr}
    75a6:	b084      	sub	sp, #16
    75a8:	af00      	add	r7, sp, #0
    75aa:	60f8      	str	r0, [r7, #12]
    75ac:	607a      	str	r2, [r7, #4]
    75ae:	460a      	mov	r2, r1
    75b0:	72fa      	strb	r2, [r7, #11]
    75b2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    75b4:	68fa      	ldr	r2, [r7, #12]
    75b6:	f248 0300 	movw	r3, #32768	; 0x8000
    75ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
    75be:	429a      	cmp	r2, r3
    75c0:	d007      	beq.n	75d2 <PWM_MatchUpdate+0x2e>
    75c2:	f24b 3054 	movw	r0, #45908	; 0xb354
    75c6:	f2c0 0000 	movt	r0, #0
    75ca:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    75ce:	f7fe fe1f 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(MatchChannel));
    75d2:	7afb      	ldrb	r3, [r7, #11]
    75d4:	2b06      	cmp	r3, #6
    75d6:	d907      	bls.n	75e8 <PWM_MatchUpdate+0x44>
    75d8:	f24b 3054 	movw	r0, #45908	; 0xb354
    75dc:	f2c0 0000 	movt	r0, #0
    75e0:	f240 11ad 	movw	r1, #429	; 0x1ad
    75e4:	f7fe fe14 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));
    75e8:	78fb      	ldrb	r3, [r7, #3]
    75ea:	2b00      	cmp	r3, #0
    75ec:	d00a      	beq.n	7604 <PWM_MatchUpdate+0x60>
    75ee:	78fb      	ldrb	r3, [r7, #3]
    75f0:	2b01      	cmp	r3, #1
    75f2:	d007      	beq.n	7604 <PWM_MatchUpdate+0x60>
    75f4:	f24b 3054 	movw	r0, #45908	; 0xb354
    75f8:	f2c0 0000 	movt	r0, #0
    75fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    7600:	f7fe fe06 	bl	6210 <check_failed>

	switch (MatchChannel)
    7604:	7afb      	ldrb	r3, [r7, #11]
    7606:	2b06      	cmp	r3, #6
    7608:	d82b      	bhi.n	7662 <PWM_MatchUpdate+0xbe>
    760a:	a201      	add	r2, pc, #4	; (adr r2, 7610 <PWM_MatchUpdate+0x6c>)
    760c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7610:	0000762d 	.word	0x0000762d
    7614:	00007635 	.word	0x00007635
    7618:	0000763d 	.word	0x0000763d
    761c:	00007645 	.word	0x00007645
    7620:	0000764d 	.word	0x0000764d
    7624:	00007655 	.word	0x00007655
    7628:	0000765d 	.word	0x0000765d
	{
	case 0:
		PWMx->MR0 = MatchValue;
    762c:	68fb      	ldr	r3, [r7, #12]
    762e:	687a      	ldr	r2, [r7, #4]
    7630:	619a      	str	r2, [r3, #24]
		break;
    7632:	e016      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 1:
		PWMx->MR1 = MatchValue;
    7634:	68fb      	ldr	r3, [r7, #12]
    7636:	687a      	ldr	r2, [r7, #4]
    7638:	61da      	str	r2, [r3, #28]
		break;
    763a:	e012      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 2:
		PWMx->MR2 = MatchValue;
    763c:	68fb      	ldr	r3, [r7, #12]
    763e:	687a      	ldr	r2, [r7, #4]
    7640:	621a      	str	r2, [r3, #32]
		break;
    7642:	e00e      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 3:
		PWMx->MR3 = MatchValue;
    7644:	68fb      	ldr	r3, [r7, #12]
    7646:	687a      	ldr	r2, [r7, #4]
    7648:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    764a:	e00a      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 4:
		PWMx->MR4 = MatchValue;
    764c:	68fb      	ldr	r3, [r7, #12]
    764e:	687a      	ldr	r2, [r7, #4]
    7650:	641a      	str	r2, [r3, #64]	; 0x40
		break;
    7652:	e006      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 5:
		PWMx->MR5 = MatchValue;
    7654:	68fb      	ldr	r3, [r7, #12]
    7656:	687a      	ldr	r2, [r7, #4]
    7658:	645a      	str	r2, [r3, #68]	; 0x44
		break;
    765a:	e002      	b.n	7662 <PWM_MatchUpdate+0xbe>

	case 6:
		PWMx->MR6 = MatchValue;
    765c:	68fb      	ldr	r3, [r7, #12]
    765e:	687a      	ldr	r2, [r7, #4]
    7660:	649a      	str	r2, [r3, #72]	; 0x48
		break;
	}

	// Write Latch register
	PWMx->LER |= PWM_LER_EN_MATCHn_LATCH(MatchChannel);
    7662:	68fb      	ldr	r3, [r7, #12]
    7664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    7666:	7afb      	ldrb	r3, [r7, #11]
    7668:	2b06      	cmp	r3, #6
    766a:	d805      	bhi.n	7678 <PWM_MatchUpdate+0xd4>
    766c:	7afb      	ldrb	r3, [r7, #11]
    766e:	f04f 0101 	mov.w	r1, #1
    7672:	fa01 f303 	lsl.w	r3, r1, r3
    7676:	e001      	b.n	767c <PWM_MatchUpdate+0xd8>
    7678:	f04f 0300 	mov.w	r3, #0
    767c:	ea42 0203 	orr.w	r2, r2, r3
    7680:	68fb      	ldr	r3, [r7, #12]
    7682:	651a      	str	r2, [r3, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    7684:	78fb      	ldrb	r3, [r7, #3]
    7686:	2b00      	cmp	r3, #0
    7688:	d10b      	bne.n	76a2 <PWM_MatchUpdate+0xfe>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    768a:	68fb      	ldr	r3, [r7, #12]
    768c:	685b      	ldr	r3, [r3, #4]
    768e:	f043 0202 	orr.w	r2, r3, #2
    7692:	68fb      	ldr	r3, [r7, #12]
    7694:	605a      	str	r2, [r3, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    7696:	68fb      	ldr	r3, [r7, #12]
    7698:	685b      	ldr	r3, [r3, #4]
    769a:	f003 0209 	and.w	r2, r3, #9
    769e:	68fb      	ldr	r3, [r7, #12]
    76a0:	605a      	str	r2, [r3, #4]
	}
}
    76a2:	f107 0710 	add.w	r7, r7, #16
    76a6:	46bd      	mov	sp, r7
    76a8:	bd80      	pop	{r7, pc}
    76aa:	bf00      	nop

000076ac <PWM_MultiMatchUpdate>:
 * 				- PWM_MATCH_UPDATE_NEXT_RST: The update value will be updated for
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MultiMatchUpdate(LPC_PWM_TypeDef *PWMx, PWM_Match_T *MatchStruct , uint8_t UpdateType)
{
    76ac:	b580      	push	{r7, lr}
    76ae:	b086      	sub	sp, #24
    76b0:	af00      	add	r7, sp, #0
    76b2:	60f8      	str	r0, [r7, #12]
    76b4:	60b9      	str	r1, [r7, #8]
    76b6:	4613      	mov	r3, r2
    76b8:	71fb      	strb	r3, [r7, #7]
	uint8_t LatchValue = 0;
    76ba:	f04f 0300 	mov.w	r3, #0
    76be:	75bb      	strb	r3, [r7, #22]
	uint8_t i;

	CHECK_PARAM(PARAM_PWMx(PWMx));
    76c0:	68fa      	ldr	r2, [r7, #12]
    76c2:	f248 0300 	movw	r3, #32768	; 0x8000
    76c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    76ca:	429a      	cmp	r2, r3
    76cc:	d007      	beq.n	76de <PWM_MultiMatchUpdate+0x32>
    76ce:	f24b 3054 	movw	r0, #45908	; 0xb354
    76d2:	f2c0 0000 	movt	r0, #0
    76d6:	f240 11eb 	movw	r1, #491	; 0x1eb
    76da:	f7fe fd99 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));
    76de:	79fb      	ldrb	r3, [r7, #7]
    76e0:	2b00      	cmp	r3, #0
    76e2:	d00a      	beq.n	76fa <PWM_MultiMatchUpdate+0x4e>
    76e4:	79fb      	ldrb	r3, [r7, #7]
    76e6:	2b01      	cmp	r3, #1
    76e8:	d007      	beq.n	76fa <PWM_MultiMatchUpdate+0x4e>
    76ea:	f24b 3054 	movw	r0, #45908	; 0xb354
    76ee:	f2c0 0000 	movt	r0, #0
    76f2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    76f6:	f7fe fd8b 	bl	6210 <check_failed>

	//Update match value
	for(i=0;i<7;i++)
    76fa:	f04f 0300 	mov.w	r3, #0
    76fe:	75fb      	strb	r3, [r7, #23]
    7700:	e038      	b.n	7774 <PWM_MultiMatchUpdate+0xc8>
	{
		if(MatchStruct[i].Status == SET)
    7702:	7dfb      	ldrb	r3, [r7, #23]
    7704:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    7708:	68bb      	ldr	r3, [r7, #8]
    770a:	4413      	add	r3, r2
    770c:	791b      	ldrb	r3, [r3, #4]
    770e:	2b01      	cmp	r3, #1
    7710:	d12c      	bne.n	776c <PWM_MultiMatchUpdate+0xc0>
		{
			if(i<4)
    7712:	7dfb      	ldrb	r3, [r7, #23]
    7714:	2b03      	cmp	r3, #3
    7716:	d80e      	bhi.n	7736 <PWM_MultiMatchUpdate+0x8a>
				*((volatile unsigned int *)(&(PWMx->MR0) + i)) = MatchStruct[i].Matchvalue;
    7718:	68fb      	ldr	r3, [r7, #12]
    771a:	f103 0218 	add.w	r2, r3, #24
    771e:	7dfb      	ldrb	r3, [r7, #23]
    7720:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7724:	4413      	add	r3, r2
    7726:	7dfa      	ldrb	r2, [r7, #23]
    7728:	ea4f 01c2 	mov.w	r1, r2, lsl #3
    772c:	68ba      	ldr	r2, [r7, #8]
    772e:	440a      	add	r2, r1
    7730:	6812      	ldr	r2, [r2, #0]
    7732:	601a      	str	r2, [r3, #0]
    7734:	e00f      	b.n	7756 <PWM_MultiMatchUpdate+0xaa>
			else
			{
				*((volatile unsigned int *)(&(PWMx->MR4) + (i-4))) = MatchStruct[i].Matchvalue;
    7736:	68fb      	ldr	r3, [r7, #12]
    7738:	f103 0240 	add.w	r2, r3, #64	; 0x40
    773c:	7dfb      	ldrb	r3, [r7, #23]
    773e:	f1a3 0304 	sub.w	r3, r3, #4
    7742:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7746:	4413      	add	r3, r2
    7748:	7dfa      	ldrb	r2, [r7, #23]
    774a:	ea4f 01c2 	mov.w	r1, r2, lsl #3
    774e:	68ba      	ldr	r2, [r7, #8]
    7750:	440a      	add	r2, r1
    7752:	6812      	ldr	r2, [r2, #0]
    7754:	601a      	str	r2, [r3, #0]
			}
			LatchValue |=(1<<i);
    7756:	7dfb      	ldrb	r3, [r7, #23]
    7758:	f04f 0201 	mov.w	r2, #1
    775c:	fa02 f303 	lsl.w	r3, r2, r3
    7760:	b2da      	uxtb	r2, r3
    7762:	7dbb      	ldrb	r3, [r7, #22]
    7764:	ea42 0303 	orr.w	r3, r2, r3
    7768:	b2db      	uxtb	r3, r3
    776a:	75bb      	strb	r3, [r7, #22]

	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));

	//Update match value
	for(i=0;i<7;i++)
    776c:	7dfb      	ldrb	r3, [r7, #23]
    776e:	f103 0301 	add.w	r3, r3, #1
    7772:	75fb      	strb	r3, [r7, #23]
    7774:	7dfb      	ldrb	r3, [r7, #23]
    7776:	2b06      	cmp	r3, #6
    7778:	d9c3      	bls.n	7702 <PWM_MultiMatchUpdate+0x56>
			}
			LatchValue |=(1<<i);
		}
	}
	//set update for multi-channel at the same time
	PWMx->LER = LatchValue;
    777a:	7dba      	ldrb	r2, [r7, #22]
    777c:	68fb      	ldr	r3, [r7, #12]
    777e:	651a      	str	r2, [r3, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    7780:	79fb      	ldrb	r3, [r7, #7]
    7782:	2b00      	cmp	r3, #0
    7784:	d10b      	bne.n	779e <PWM_MultiMatchUpdate+0xf2>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    7786:	68fb      	ldr	r3, [r7, #12]
    7788:	685b      	ldr	r3, [r3, #4]
    778a:	f043 0202 	orr.w	r2, r3, #2
    778e:	68fb      	ldr	r3, [r7, #12]
    7790:	605a      	str	r2, [r3, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    7792:	68fb      	ldr	r3, [r7, #12]
    7794:	685b      	ldr	r3, [r3, #4]
    7796:	f003 0209 	and.w	r2, r3, #9
    779a:	68fb      	ldr	r3, [r7, #12]
    779c:	605a      	str	r2, [r3, #4]
	}
}
    779e:	f107 0718 	add.w	r7, r7, #24
    77a2:	46bd      	mov	sp, r7
    77a4:	bd80      	pop	{r7, pc}
    77a6:	bf00      	nop

000077a8 <PWM_ChannelConfig>:
 * 				- PWM_CHANNEL_DUAL_EDGE: Dual Edge mode
 * @return 		None
 * Note: PWM Channel 1 can not be selected for mode option
 *********************************************************************/
void PWM_ChannelConfig(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, uint8_t ModeOption)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b082      	sub	sp, #8
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
    77b0:	4613      	mov	r3, r2
    77b2:	460a      	mov	r2, r1
    77b4:	70fa      	strb	r2, [r7, #3]
    77b6:	70bb      	strb	r3, [r7, #2]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    77b8:	687a      	ldr	r2, [r7, #4]
    77ba:	f248 0300 	movw	r3, #32768	; 0x8000
    77be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    77c2:	429a      	cmp	r2, r3
    77c4:	d007      	beq.n	77d6 <PWM_ChannelConfig+0x2e>
    77c6:	f24b 3054 	movw	r0, #45908	; 0xb354
    77ca:	f2c0 0000 	movt	r0, #0
    77ce:	f240 2112 	movw	r1, #530	; 0x212
    77d2:	f7fe fd1d 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_EDGE_MODE_CHANNEL(PWMChannel));
    77d6:	78fb      	ldrb	r3, [r7, #3]
    77d8:	2b01      	cmp	r3, #1
    77da:	d902      	bls.n	77e2 <PWM_ChannelConfig+0x3a>
    77dc:	78fb      	ldrb	r3, [r7, #3]
    77de:	2b06      	cmp	r3, #6
    77e0:	d907      	bls.n	77f2 <PWM_ChannelConfig+0x4a>
    77e2:	f24b 3054 	movw	r0, #45908	; 0xb354
    77e6:	f2c0 0000 	movt	r0, #0
    77ea:	f240 2113 	movw	r1, #531	; 0x213
    77ee:	f7fe fd0f 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM_CHANNEL_EDGE(ModeOption));
    77f2:	78bb      	ldrb	r3, [r7, #2]
    77f4:	2b00      	cmp	r3, #0
    77f6:	d00a      	beq.n	780e <PWM_ChannelConfig+0x66>
    77f8:	78bb      	ldrb	r3, [r7, #2]
    77fa:	2b01      	cmp	r3, #1
    77fc:	d007      	beq.n	780e <PWM_ChannelConfig+0x66>
    77fe:	f24b 3054 	movw	r0, #45908	; 0xb354
    7802:	f2c0 0000 	movt	r0, #0
    7806:	f44f 7105 	mov.w	r1, #532	; 0x214
    780a:	f7fe fd01 	bl	6210 <check_failed>

	// Single edge mode
	if (ModeOption == PWM_CHANNEL_SINGLE_EDGE)
    780e:	78bb      	ldrb	r3, [r7, #2]
    7810:	2b00      	cmp	r3, #0
    7812:	d11b      	bne.n	784c <PWM_ChannelConfig+0xa4>
	{
		PWMx->PCR &= (~PWM_PCR_PWMSELn(PWMChannel)) & PWM_PCR_BITMASK;
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7818:	78fb      	ldrb	r3, [r7, #3]
    781a:	f003 0307 	and.w	r3, r3, #7
    781e:	2b01      	cmp	r3, #1
    7820:	dd0d      	ble.n	783e <PWM_ChannelConfig+0x96>
    7822:	78fb      	ldrb	r3, [r7, #3]
    7824:	f04f 0101 	mov.w	r1, #1
    7828:	fa01 f303 	lsl.w	r3, r1, r3
    782c:	ea6f 0103 	mvn.w	r1, r3
    7830:	f647 637c 	movw	r3, #32380	; 0x7e7c
    7834:	f2c0 0300 	movt	r3, #0
    7838:	ea01 0303 	and.w	r3, r1, r3
    783c:	e001      	b.n	7842 <PWM_ChannelConfig+0x9a>
    783e:	f647 637c 	movw	r3, #32380	; 0x7e7c
    7842:	ea02 0203 	and.w	r2, r2, r3
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	64da      	str	r2, [r3, #76]	; 0x4c
    784a:	e012      	b.n	7872 <PWM_ChannelConfig+0xca>
	}
	// Double edge mode
	else if (PWM_CHANNEL_DUAL_EDGE)
	{
		PWMx->PCR |= PWM_PCR_PWMSELn(PWMChannel);
    784c:	687b      	ldr	r3, [r7, #4]
    784e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7850:	78fb      	ldrb	r3, [r7, #3]
    7852:	f003 0307 	and.w	r3, r3, #7
    7856:	2b01      	cmp	r3, #1
    7858:	dd05      	ble.n	7866 <PWM_ChannelConfig+0xbe>
    785a:	78fb      	ldrb	r3, [r7, #3]
    785c:	f04f 0101 	mov.w	r1, #1
    7860:	fa01 f303 	lsl.w	r3, r1, r3
    7864:	e001      	b.n	786a <PWM_ChannelConfig+0xc2>
    7866:	f04f 0300 	mov.w	r3, #0
    786a:	ea42 0203 	orr.w	r2, r2, r3
    786e:	687b      	ldr	r3, [r7, #4]
    7870:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
    7872:	f107 0708 	add.w	r7, r7, #8
    7876:	46bd      	mov	sp, r7
    7878:	bd80      	pop	{r7, pc}
    787a:	bf00      	nop

0000787c <PWM_ChannelCmd>:
 * 				- ENABLE: Enable this PWM channel output
 * 				- DISABLE: Disable this PWM channel output
 * @return		None
 *********************************************************************/
void PWM_ChannelCmd(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, FunctionalState NewState)
{
    787c:	b580      	push	{r7, lr}
    787e:	b082      	sub	sp, #8
    7880:	af00      	add	r7, sp, #0
    7882:	6078      	str	r0, [r7, #4]
    7884:	4613      	mov	r3, r2
    7886:	460a      	mov	r2, r1
    7888:	70fa      	strb	r2, [r7, #3]
    788a:	70bb      	strb	r3, [r7, #2]
	CHECK_PARAM(PARAM_PWMx(PWMx));
    788c:	687a      	ldr	r2, [r7, #4]
    788e:	f248 0300 	movw	r3, #32768	; 0x8000
    7892:	f2c4 0301 	movt	r3, #16385	; 0x4001
    7896:	429a      	cmp	r2, r3
    7898:	d007      	beq.n	78aa <PWM_ChannelCmd+0x2e>
    789a:	f24b 3054 	movw	r0, #45908	; 0xb354
    789e:	f2c0 0000 	movt	r0, #0
    78a2:	f240 212f 	movw	r1, #559	; 0x22f
    78a6:	f7fe fcb3 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CHANNEL(PWMChannel));
    78aa:	78fb      	ldrb	r3, [r7, #3]
    78ac:	2b00      	cmp	r3, #0
    78ae:	d002      	beq.n	78b6 <PWM_ChannelCmd+0x3a>
    78b0:	78fb      	ldrb	r3, [r7, #3]
    78b2:	2b06      	cmp	r3, #6
    78b4:	d907      	bls.n	78c6 <PWM_ChannelCmd+0x4a>
    78b6:	f24b 3054 	movw	r0, #45908	; 0xb354
    78ba:	f2c0 0000 	movt	r0, #0
    78be:	f44f 710c 	mov.w	r1, #560	; 0x230
    78c2:	f7fe fca5 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    78c6:	78bb      	ldrb	r3, [r7, #2]
    78c8:	2b01      	cmp	r3, #1
    78ca:	d115      	bne.n	78f8 <PWM_ChannelCmd+0x7c>
	{
		PWMx->PCR |= PWM_PCR_PWMENAn(PWMChannel);
    78cc:	687b      	ldr	r3, [r7, #4]
    78ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    78d0:	78fb      	ldrb	r3, [r7, #3]
    78d2:	f003 0307 	and.w	r3, r3, #7
    78d6:	2b00      	cmp	r3, #0
    78d8:	dd07      	ble.n	78ea <PWM_ChannelCmd+0x6e>
    78da:	78fb      	ldrb	r3, [r7, #3]
    78dc:	f103 0308 	add.w	r3, r3, #8
    78e0:	f04f 0101 	mov.w	r1, #1
    78e4:	fa01 f303 	lsl.w	r3, r1, r3
    78e8:	e001      	b.n	78ee <PWM_ChannelCmd+0x72>
    78ea:	f04f 0300 	mov.w	r3, #0
    78ee:	ea42 0203 	orr.w	r2, r2, r3
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	64da      	str	r2, [r3, #76]	; 0x4c
    78f6:	e01c      	b.n	7932 <PWM_ChannelCmd+0xb6>
	}
	else
	{
		PWMx->PCR &= (~PWM_PCR_PWMENAn(PWMChannel)) & PWM_PCR_BITMASK;
    78f8:	687b      	ldr	r3, [r7, #4]
    78fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    78fc:	78fb      	ldrb	r3, [r7, #3]
    78fe:	f003 0307 	and.w	r3, r3, #7
    7902:	2b00      	cmp	r3, #0
    7904:	dd0f      	ble.n	7926 <PWM_ChannelCmd+0xaa>
    7906:	78fb      	ldrb	r3, [r7, #3]
    7908:	f103 0308 	add.w	r3, r3, #8
    790c:	f04f 0101 	mov.w	r1, #1
    7910:	fa01 f303 	lsl.w	r3, r1, r3
    7914:	ea6f 0103 	mvn.w	r1, r3
    7918:	f647 637c 	movw	r3, #32380	; 0x7e7c
    791c:	f2c0 0300 	movt	r3, #0
    7920:	ea01 0303 	and.w	r3, r1, r3
    7924:	e001      	b.n	792a <PWM_ChannelCmd+0xae>
    7926:	f647 637c 	movw	r3, #32380	; 0x7e7c
    792a:	ea02 0203 	and.w	r2, r2, r3
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	64da      	str	r2, [r3, #76]	; 0x4c
	}
}
    7932:	f107 0708 	add.w	r7, r7, #8
    7936:	46bd      	mov	sp, r7
    7938:	bd80      	pop	{r7, pc}
    793a:	bf00      	nop

0000793c <SPI_SetClock>:
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
{
    793c:	b580      	push	{r7, lr}
    793e:	b086      	sub	sp, #24
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
    7944:	6039      	str	r1, [r7, #0]
	uint32_t spi_pclk;
	uint32_t prescale, temp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    7946:	687a      	ldr	r2, [r7, #4]
    7948:	f240 0300 	movw	r3, #0
    794c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7950:	429a      	cmp	r2, r3
    7952:	d007      	beq.n	7964 <SPI_SetClock+0x28>
    7954:	f24b 3080 	movw	r0, #45952	; 0xb380
    7958:	f2c0 0000 	movt	r0, #0
    795c:	f04f 0140 	mov.w	r1, #64	; 0x40
    7960:	f7fe fc56 	bl	6210 <check_failed>

	if (SPIx == LPC_SPI){
    7964:	687a      	ldr	r2, [r7, #4]
    7966:	f240 0300 	movw	r3, #0
    796a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    796e:	429a      	cmp	r2, r3
    7970:	d122      	bne.n	79b8 <SPI_SetClock+0x7c>
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
    7972:	f04f 0010 	mov.w	r0, #16
    7976:	f7fc fc1d 	bl	41b4 <CLKPWR_GetPCLK>
    797a:	4603      	mov	r3, r0
    797c:	60fb      	str	r3, [r7, #12]
	} else {
		return;
	}

	prescale = 8;
    797e:	f04f 0308 	mov.w	r3, #8
    7982:	613b      	str	r3, [r7, #16]
    7984:	e000      	b.n	7988 <SPI_SetClock+0x4c>
		}
		prescale += 2;
		if(prescale >= 254){
			break;
		}
	}
    7986:	bf00      	nop
	}

	prescale = 8;
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
    7988:	683b      	ldr	r3, [r7, #0]
    798a:	693a      	ldr	r2, [r7, #16]
    798c:	fb02 f303 	mul.w	r3, r2, r3
    7990:	617b      	str	r3, [r7, #20]
		if (temp >= spi_pclk){
    7992:	697a      	ldr	r2, [r7, #20]
    7994:	68fb      	ldr	r3, [r7, #12]
    7996:	429a      	cmp	r2, r3
    7998:	d207      	bcs.n	79aa <SPI_SetClock+0x6e>
			break;
		}
		prescale += 2;
    799a:	693b      	ldr	r3, [r7, #16]
    799c:	f103 0302 	add.w	r3, r3, #2
    79a0:	613b      	str	r3, [r7, #16]
		if(prescale >= 254){
    79a2:	693b      	ldr	r3, [r7, #16]
    79a4:	2bfd      	cmp	r3, #253	; 0xfd
    79a6:	d9ee      	bls.n	7986 <SPI_SetClock+0x4a>
			break;
    79a8:	e000      	b.n	79ac <SPI_SetClock+0x70>
	prescale = 8;
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
		if (temp >= spi_pclk){
			break;
    79aa:	bf00      	nop
			break;
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
    79ac:	693b      	ldr	r3, [r7, #16]
    79ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    79b2:	687b      	ldr	r3, [r7, #4]
    79b4:	60da      	str	r2, [r3, #12]
    79b6:	e000      	b.n	79ba <SPI_SetClock+0x7e>
	CHECK_PARAM(PARAM_SPIx(SPIx));

	if (SPIx == LPC_SPI){
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
	} else {
		return;
    79b8:	bf00      	nop
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
}
    79ba:	f107 0718 	add.w	r7, r7, #24
    79be:	46bd      	mov	sp, r7
    79c0:	bd80      	pop	{r7, pc}
    79c2:	bf00      	nop

000079c4 <SPI_DeInit>:
*                  default reset values.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		None
 **********************************************************************/
void SPI_DeInit(LPC_SPI_TypeDef *SPIx)
{
    79c4:	b580      	push	{r7, lr}
    79c6:	b082      	sub	sp, #8
    79c8:	af00      	add	r7, sp, #0
    79ca:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    79cc:	687a      	ldr	r2, [r7, #4]
    79ce:	f240 0300 	movw	r3, #0
    79d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    79d6:	429a      	cmp	r2, r3
    79d8:	d007      	beq.n	79ea <SPI_DeInit+0x26>
    79da:	f24b 3080 	movw	r0, #45952	; 0xb380
    79de:	f2c0 0000 	movt	r0, #0
    79e2:	f04f 0162 	mov.w	r1, #98	; 0x62
    79e6:	f7fe fc13 	bl	6210 <check_failed>

	if (SPIx == LPC_SPI){
    79ea:	687a      	ldr	r2, [r7, #4]
    79ec:	f240 0300 	movw	r3, #0
    79f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    79f4:	429a      	cmp	r2, r3
    79f6:	d105      	bne.n	7a04 <SPI_DeInit+0x40>
		/* Set up clock and power for SPI module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, DISABLE);
    79f8:	f44f 7080 	mov.w	r0, #256	; 0x100
    79fc:	f04f 0100 	mov.w	r1, #0
    7a00:	f7fc fc10 	bl	4224 <CLKPWR_ConfigPPWR>
	}
}
    7a04:	f107 0708 	add.w	r7, r7, #8
    7a08:	46bd      	mov	sp, r7
    7a0a:	bd80      	pop	{r7, pc}

00007a0c <SPI_GetDataSize>:
 * @brief		Get data bit size per transfer
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		number of bit per transfer, could be 8-16
 **********************************************************************/
uint8_t SPI_GetDataSize (LPC_SPI_TypeDef *SPIx)
{
    7a0c:	b580      	push	{r7, lr}
    7a0e:	b082      	sub	sp, #8
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7a14:	687a      	ldr	r2, [r7, #4]
    7a16:	f240 0300 	movw	r3, #0
    7a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7a1e:	429a      	cmp	r2, r3
    7a20:	d007      	beq.n	7a32 <SPI_GetDataSize+0x26>
    7a22:	f24b 3080 	movw	r0, #45952	; 0xb380
    7a26:	f2c0 0000 	movt	r0, #0
    7a2a:	f04f 0171 	mov.w	r1, #113	; 0x71
    7a2e:	f7fe fbef 	bl	6210 <check_failed>
	return ((SPIx->SPCR)>>8 & 0xF);
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	681b      	ldr	r3, [r3, #0]
    7a36:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7a3a:	b2db      	uxtb	r3, r3
    7a3c:	f003 030f 	and.w	r3, r3, #15
}
    7a40:	4618      	mov	r0, r3
    7a42:	f107 0708 	add.w	r7, r7, #8
    7a46:	46bd      	mov	sp, r7
    7a48:	bd80      	pop	{r7, pc}
    7a4a:	bf00      	nop

00007a4c <SPI_Init>:
*                    that contains the configuration information for the
*                    specified SPI peripheral.
 * @return 		None
 *********************************************************************/
void SPI_Init(LPC_SPI_TypeDef *SPIx, SPI_CFG_Type *SPI_ConfigStruct)
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	b084      	sub	sp, #16
    7a50:	af00      	add	r7, sp, #0
    7a52:	6078      	str	r0, [r7, #4]
    7a54:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    7a56:	687a      	ldr	r2, [r7, #4]
    7a58:	f240 0300 	movw	r3, #0
    7a5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7a60:	429a      	cmp	r2, r3
    7a62:	d007      	beq.n	7a74 <SPI_Init+0x28>
    7a64:	f24b 3080 	movw	r0, #45952	; 0xb380
    7a68:	f2c0 0000 	movt	r0, #0
    7a6c:	f04f 0182 	mov.w	r1, #130	; 0x82
    7a70:	f7fe fbce 	bl	6210 <check_failed>

	if(SPIx == LPC_SPI){
    7a74:	687a      	ldr	r2, [r7, #4]
    7a76:	f240 0300 	movw	r3, #0
    7a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7a7e:	429a      	cmp	r2, r3
    7a80:	d135      	bne.n	7aee <SPI_Init+0xa2>
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
    7a82:	f44f 7080 	mov.w	r0, #256	; 0x100
    7a86:	f04f 0101 	mov.w	r1, #1
    7a8a:	f7fc fbcb 	bl	4224 <CLKPWR_ConfigPPWR>
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    7a8e:	683b      	ldr	r3, [r7, #0]
    7a90:	685a      	ldr	r2, [r3, #4]
    7a92:	683b      	ldr	r3, [r7, #0]
    7a94:	689b      	ldr	r3, [r3, #8]
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
    7a96:	ea42 0203 	orr.w	r2, r2, r3
    7a9a:	683b      	ldr	r3, [r7, #0]
    7a9c:	691b      	ldr	r3, [r3, #16]
    7a9e:	ea42 0203 	orr.w	r2, r2, r3
    7aa2:	683b      	ldr	r3, [r7, #0]
    7aa4:	681b      	ldr	r3, [r3, #0]
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
    7aa6:	ea42 0203 	orr.w	r2, r2, r3
    7aaa:	683b      	ldr	r3, [r7, #0]
    7aac:	68db      	ldr	r3, [r3, #12]
    7aae:	ea42 0203 	orr.w	r2, r2, r3
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    7ab2:	f640 73f8 	movw	r3, #4088	; 0xff8
    7ab6:	f2c0 0300 	movt	r3, #0
    7aba:	ea02 0303 	and.w	r3, r2, r3
    7abe:	f043 0304 	orr.w	r3, r3, #4
    7ac2:	60fb      	str	r3, [r7, #12]
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
	// write back to SPI control register
	SPIx->SPCR = tmp;
    7ac4:	687b      	ldr	r3, [r7, #4]
    7ac6:	68fa      	ldr	r2, [r7, #12]
    7ac8:	601a      	str	r2, [r3, #0]

	// Set clock rate for SPI peripheral
	SPI_SetClock(SPIx, SPI_ConfigStruct->ClockRate);
    7aca:	683b      	ldr	r3, [r7, #0]
    7acc:	695b      	ldr	r3, [r3, #20]
    7ace:	6878      	ldr	r0, [r7, #4]
    7ad0:	4619      	mov	r1, r3
    7ad2:	f7ff ff33 	bl	793c <SPI_SetClock>

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	69db      	ldr	r3, [r3, #28]
    7ada:	f003 0301 	and.w	r3, r3, #1
    7ade:	b2db      	uxtb	r3, r3
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d005      	beq.n	7af0 <SPI_Init+0xa4>
		SPIx->SPINT = SPI_SPINT_INTFLAG;
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	f04f 0201 	mov.w	r2, #1
    7aea:	61da      	str	r2, [r3, #28]
    7aec:	e000      	b.n	7af0 <SPI_Init+0xa4>

	if(SPIx == LPC_SPI){
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
	} else {
		return;
    7aee:	bf00      	nop

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
		SPIx->SPINT = SPI_SPINT_INTFLAG;
	}
}
    7af0:	f107 0710 	add.w	r7, r7, #16
    7af4:	46bd      	mov	sp, r7
    7af6:	bd80      	pop	{r7, pc}

00007af8 <SPI_ConfigStructInit>:
* @param[in]	SPI_InitStruct Pointer to a SPI_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SPI_ConfigStructInit(SPI_CFG_Type *SPI_InitStruct)
{
    7af8:	b480      	push	{r7}
    7afa:	b083      	sub	sp, #12
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
	SPI_InitStruct->CPHA = SPI_CPHA_FIRST;
    7b00:	687b      	ldr	r3, [r7, #4]
    7b02:	f04f 0200 	mov.w	r2, #0
    7b06:	605a      	str	r2, [r3, #4]
	SPI_InitStruct->CPOL = SPI_CPOL_HI;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	f04f 0200 	mov.w	r2, #0
    7b0e:	609a      	str	r2, [r3, #8]
	SPI_InitStruct->ClockRate = 1000000;
    7b10:	687a      	ldr	r2, [r7, #4]
    7b12:	f244 2340 	movw	r3, #16960	; 0x4240
    7b16:	f2c0 030f 	movt	r3, #15
    7b1a:	6153      	str	r3, [r2, #20]
	SPI_InitStruct->DataOrder = SPI_DATA_MSB_FIRST;
    7b1c:	687b      	ldr	r3, [r7, #4]
    7b1e:	f04f 0200 	mov.w	r2, #0
    7b22:	611a      	str	r2, [r3, #16]
	SPI_InitStruct->Databit = SPI_DATABIT_8;
    7b24:	687b      	ldr	r3, [r7, #4]
    7b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7b2a:	601a      	str	r2, [r3, #0]
	SPI_InitStruct->Mode = SPI_MASTER_MODE;
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	f04f 0220 	mov.w	r2, #32
    7b32:	60da      	str	r2, [r3, #12]
}
    7b34:	f107 070c 	add.w	r7, r7, #12
    7b38:	46bd      	mov	sp, r7
    7b3a:	bc80      	pop	{r7}
    7b3c:	4770      	bx	lr
    7b3e:	bf00      	nop

00007b40 <SPI_SendData>:
 * @param[in]	Data	Data to transmit (must be 16 or 8-bit long,
 * 						this depend on SPI data bit number configured)
 * @return 		none
 **********************************************************************/
void SPI_SendData(LPC_SPI_TypeDef* SPIx, uint16_t Data)
{
    7b40:	b580      	push	{r7, lr}
    7b42:	b082      	sub	sp, #8
    7b44:	af00      	add	r7, sp, #0
    7b46:	6078      	str	r0, [r7, #4]
    7b48:	460b      	mov	r3, r1
    7b4a:	807b      	strh	r3, [r7, #2]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7b4c:	687a      	ldr	r2, [r7, #4]
    7b4e:	f240 0300 	movw	r3, #0
    7b52:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7b56:	429a      	cmp	r2, r3
    7b58:	d007      	beq.n	7b6a <SPI_SendData+0x2a>
    7b5a:	f24b 3080 	movw	r0, #45952	; 0xb380
    7b5e:	f2c0 0000 	movt	r0, #0
    7b62:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    7b66:	f7fe fb53 	bl	6210 <check_failed>

	SPIx->SPDR = Data & SPI_SPDR_BITMASK;
    7b6a:	887a      	ldrh	r2, [r7, #2]
    7b6c:	687b      	ldr	r3, [r7, #4]
    7b6e:	609a      	str	r2, [r3, #8]
}
    7b70:	f107 0708 	add.w	r7, r7, #8
    7b74:	46bd      	mov	sp, r7
    7b76:	bd80      	pop	{r7, pc}

00007b78 <SPI_ReceiveData>:
 * @brief		Receive a single data from SPIx peripheral
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		Data received (16-bit long)
 **********************************************************************/
uint16_t SPI_ReceiveData(LPC_SPI_TypeDef* SPIx)
{
    7b78:	b580      	push	{r7, lr}
    7b7a:	b082      	sub	sp, #8
    7b7c:	af00      	add	r7, sp, #0
    7b7e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7b80:	687a      	ldr	r2, [r7, #4]
    7b82:	f240 0300 	movw	r3, #0
    7b86:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7b8a:	429a      	cmp	r2, r3
    7b8c:	d007      	beq.n	7b9e <SPI_ReceiveData+0x26>
    7b8e:	f24b 3080 	movw	r0, #45952	; 0xb380
    7b92:	f2c0 0000 	movt	r0, #0
    7b96:	f04f 01ca 	mov.w	r1, #202	; 0xca
    7b9a:	f7fe fb39 	bl	6210 <check_failed>

	return ((uint16_t) (SPIx->SPDR & SPI_SPDR_BITMASK));
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	689b      	ldr	r3, [r3, #8]
    7ba2:	b29b      	uxth	r3, r3
}
    7ba4:	4618      	mov	r0, r3
    7ba6:	f107 0708 	add.w	r7, r7, #8
    7baa:	46bd      	mov	sp, r7
    7bac:	bd80      	pop	{r7, pc}
    7bae:	bf00      	nop

00007bb0 <SPI_ReadWrite>:
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SPI_ReadWrite (LPC_SPI_TypeDef *SPIx, SPI_DATA_SETUP_Type *dataCfg, \
						SPI_TRANSFER_Type xfType)
{
    7bb0:	b580      	push	{r7, lr}
    7bb2:	b08c      	sub	sp, #48	; 0x30
    7bb4:	af00      	add	r7, sp, #0
    7bb6:	60f8      	str	r0, [r7, #12]
    7bb8:	60b9      	str	r1, [r7, #8]
    7bba:	4613      	mov	r3, r2
    7bbc:	71fb      	strb	r3, [r7, #7]
    uint32_t stat;
    uint32_t temp;
    uint8_t dataword;

	//read for empty buffer
	temp = SPIx->SPDR;
    7bbe:	68fb      	ldr	r3, [r7, #12]
    7bc0:	689b      	ldr	r3, [r3, #8]
    7bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	//dummy to clear status
	temp = SPIx->SPSR;
    7bc4:	68fb      	ldr	r3, [r7, #12]
    7bc6:	685b      	ldr	r3, [r3, #4]
    7bc8:	62bb      	str	r3, [r7, #40]	; 0x28
	dataCfg->counter = 0;
    7bca:	68bb      	ldr	r3, [r7, #8]
    7bcc:	f04f 0200 	mov.w	r2, #0
    7bd0:	60da      	str	r2, [r3, #12]
	dataCfg->status = 0;
    7bd2:	68bb      	ldr	r3, [r7, #8]
    7bd4:	f04f 0200 	mov.w	r2, #0
    7bd8:	611a      	str	r2, [r3, #16]

	if(SPI_GetDataSize (SPIx) == 8)
    7bda:	68f8      	ldr	r0, [r7, #12]
    7bdc:	f7ff ff16 	bl	7a0c <SPI_GetDataSize>
    7be0:	4603      	mov	r3, r0
    7be2:	2b08      	cmp	r3, #8
    7be4:	d104      	bne.n	7bf0 <SPI_ReadWrite+0x40>
		dataword = 0;
    7be6:	f04f 0300 	mov.w	r3, #0
    7bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    7bee:	e003      	b.n	7bf8 <SPI_ReadWrite+0x48>
	else dataword = 1;
    7bf0:	f04f 0301 	mov.w	r3, #1
    7bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (xfType == SPI_TRANSFER_POLLING){
    7bf8:	79fb      	ldrb	r3, [r7, #7]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	f040 8091 	bne.w	7d22 <SPI_ReadWrite+0x172>

		if (dataword == 0){
    7c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7c04:	2b00      	cmp	r3, #0
    7c06:	d106      	bne.n	7c16 <SPI_ReadWrite+0x66>
			rdata8 = (uint8_t *)dataCfg->rx_data;
    7c08:	68bb      	ldr	r3, [r7, #8]
    7c0a:	685b      	ldr	r3, [r3, #4]
    7c0c:	617b      	str	r3, [r7, #20]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    7c0e:	68bb      	ldr	r3, [r7, #8]
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	61bb      	str	r3, [r7, #24]
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    7c14:	e077      	b.n	7d06 <SPI_ReadWrite+0x156>

		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    7c16:	68bb      	ldr	r3, [r7, #8]
    7c18:	685b      	ldr	r3, [r3, #4]
    7c1a:	61fb      	str	r3, [r7, #28]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    7c1c:	68bb      	ldr	r3, [r7, #8]
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	623b      	str	r3, [r7, #32]
		}

		while(dataCfg->counter < dataCfg->length)
    7c22:	e070      	b.n	7d06 <SPI_ReadWrite+0x156>
		{
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    7c24:	68bb      	ldr	r3, [r7, #8]
    7c26:	681b      	ldr	r3, [r3, #0]
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d10f      	bne.n	7c4c <SPI_ReadWrite+0x9c>
				if (dataword == 0){
    7c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7c30:	2b00      	cmp	r3, #0
    7c32:	d105      	bne.n	7c40 <SPI_ReadWrite+0x90>
					SPI_SendData(SPIx, 0xFF);
    7c34:	68f8      	ldr	r0, [r7, #12]
    7c36:	f04f 01ff 	mov.w	r1, #255	; 0xff
    7c3a:	f7ff ff81 	bl	7b40 <SPI_SendData>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    7c3e:	e01e      	b.n	7c7e <SPI_ReadWrite+0xce>
    7c40:	68f8      	ldr	r0, [r7, #12]
    7c42:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7c46:	f7ff ff7b 	bl	7b40 <SPI_SendData>
    7c4a:	e018      	b.n	7c7e <SPI_ReadWrite+0xce>
				}
			} else {
				if (dataword == 0){
    7c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7c50:	2b00      	cmp	r3, #0
    7c52:	d10a      	bne.n	7c6a <SPI_ReadWrite+0xba>
					SPI_SendData(SPIx, *wdata8);
    7c54:	69bb      	ldr	r3, [r7, #24]
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	68f8      	ldr	r0, [r7, #12]
    7c5a:	4619      	mov	r1, r3
    7c5c:	f7ff ff70 	bl	7b40 <SPI_SendData>
					wdata8++;
    7c60:	69bb      	ldr	r3, [r7, #24]
    7c62:	f103 0301 	add.w	r3, r3, #1
    7c66:	61bb      	str	r3, [r7, #24]
    7c68:	e009      	b.n	7c7e <SPI_ReadWrite+0xce>
				} else {
					SPI_SendData(SPIx, *wdata16);
    7c6a:	6a3b      	ldr	r3, [r7, #32]
    7c6c:	881b      	ldrh	r3, [r3, #0]
    7c6e:	68f8      	ldr	r0, [r7, #12]
    7c70:	4619      	mov	r1, r3
    7c72:	f7ff ff65 	bl	7b40 <SPI_SendData>
					wdata16++;
    7c76:	6a3b      	ldr	r3, [r7, #32]
    7c78:	f103 0302 	add.w	r3, r3, #2
    7c7c:	623b      	str	r3, [r7, #32]
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    7c7e:	68fb      	ldr	r3, [r7, #12]
    7c80:	685b      	ldr	r3, [r3, #4]
    7c82:	627b      	str	r3, [r7, #36]	; 0x24
    7c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d0f7      	beq.n	7c7e <SPI_ReadWrite+0xce>
			// Check for error
			if (stat & (SPI_SPSR_ABRT | SPI_SPSR_MODF | SPI_SPSR_ROVR | SPI_SPSR_WCOL)){
    7c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c90:	f003 0378 	and.w	r3, r3, #120	; 0x78
    7c94:	2b00      	cmp	r3, #0
    7c96:	d007      	beq.n	7ca8 <SPI_ReadWrite+0xf8>
				// save status
				dataCfg->status = stat | SPI_STAT_ERROR;
    7c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    7c9e:	68bb      	ldr	r3, [r7, #8]
    7ca0:	611a      	str	r2, [r3, #16]
				return (dataCfg->counter);
    7ca2:	68bb      	ldr	r3, [r7, #8]
    7ca4:	68db      	ldr	r3, [r3, #12]
    7ca6:	e080      	b.n	7daa <SPI_ReadWrite+0x1fa>
			}
			// Read data from SPI dat
			temp = (uint32_t) SPI_ReceiveData(SPIx);
    7ca8:	68f8      	ldr	r0, [r7, #12]
    7caa:	f7ff ff65 	bl	7b78 <SPI_ReceiveData>
    7cae:	4603      	mov	r3, r0
    7cb0:	62bb      	str	r3, [r7, #40]	; 0x28

			// Store data to destination
			if (dataCfg->rx_data != NULL)
    7cb2:	68bb      	ldr	r3, [r7, #8]
    7cb4:	685b      	ldr	r3, [r3, #4]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d014      	beq.n	7ce4 <SPI_ReadWrite+0x134>
			{
				if (dataword == 0){
    7cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d108      	bne.n	7cd4 <SPI_ReadWrite+0x124>
					*(rdata8) = (uint8_t) temp;
    7cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cc4:	b2da      	uxtb	r2, r3
    7cc6:	697b      	ldr	r3, [r7, #20]
    7cc8:	701a      	strb	r2, [r3, #0]
					rdata8++;
    7cca:	697b      	ldr	r3, [r7, #20]
    7ccc:	f103 0301 	add.w	r3, r3, #1
    7cd0:	617b      	str	r3, [r7, #20]
    7cd2:	e007      	b.n	7ce4 <SPI_ReadWrite+0x134>
				} else {
					*(rdata16) = (uint16_t) temp;
    7cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cd6:	b29a      	uxth	r2, r3
    7cd8:	69fb      	ldr	r3, [r7, #28]
    7cda:	801a      	strh	r2, [r3, #0]
					rdata16++;
    7cdc:	69fb      	ldr	r3, [r7, #28]
    7cde:	f103 0302 	add.w	r3, r3, #2
    7ce2:	61fb      	str	r3, [r7, #28]
				}
			}
			// Increase counter
			if (dataword == 0){
    7ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d106      	bne.n	7cfa <SPI_ReadWrite+0x14a>
				dataCfg->counter++;
    7cec:	68bb      	ldr	r3, [r7, #8]
    7cee:	68db      	ldr	r3, [r3, #12]
    7cf0:	f103 0201 	add.w	r2, r3, #1
    7cf4:	68bb      	ldr	r3, [r7, #8]
    7cf6:	60da      	str	r2, [r3, #12]
    7cf8:	e005      	b.n	7d06 <SPI_ReadWrite+0x156>
			} else {
				dataCfg->counter += 2;
    7cfa:	68bb      	ldr	r3, [r7, #8]
    7cfc:	68db      	ldr	r3, [r3, #12]
    7cfe:	f103 0202 	add.w	r2, r3, #2
    7d02:	68bb      	ldr	r3, [r7, #8]
    7d04:	60da      	str	r2, [r3, #12]
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    7d06:	68bb      	ldr	r3, [r7, #8]
    7d08:	68da      	ldr	r2, [r3, #12]
    7d0a:	68bb      	ldr	r3, [r7, #8]
    7d0c:	689b      	ldr	r3, [r3, #8]
    7d0e:	429a      	cmp	r2, r3
    7d10:	d388      	bcc.n	7c24 <SPI_ReadWrite+0x74>
			}
		}

		// Return length of actual data transferred
		// save status
		dataCfg->status = stat | SPI_STAT_DONE;
    7d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7d18:	68bb      	ldr	r3, [r7, #8]
    7d1a:	611a      	str	r2, [r3, #16]
		return (dataCfg->counter);
    7d1c:	68bb      	ldr	r3, [r7, #8]
    7d1e:	68db      	ldr	r3, [r3, #12]
    7d20:	e043      	b.n	7daa <SPI_ReadWrite+0x1fa>
	}
	// Interrupt mode
	else {

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
    7d22:	68fb      	ldr	r3, [r7, #12]
    7d24:	69db      	ldr	r3, [r3, #28]
    7d26:	f003 0301 	and.w	r3, r3, #1
    7d2a:	b2db      	uxtb	r3, r3
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d003      	beq.n	7d38 <SPI_ReadWrite+0x188>
			SPIx->SPINT = SPI_SPINT_INTFLAG;
    7d30:	68fb      	ldr	r3, [r7, #12]
    7d32:	f04f 0201 	mov.w	r2, #1
    7d36:	61da      	str	r2, [r3, #28]
		}
		if (dataCfg->counter < dataCfg->length){
    7d38:	68bb      	ldr	r3, [r7, #8]
    7d3a:	68da      	ldr	r2, [r3, #12]
    7d3c:	68bb      	ldr	r3, [r7, #8]
    7d3e:	689b      	ldr	r3, [r3, #8]
    7d40:	429a      	cmp	r2, r3
    7d42:	d22c      	bcs.n	7d9e <SPI_ReadWrite+0x1ee>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    7d44:	68bb      	ldr	r3, [r7, #8]
    7d46:	681b      	ldr	r3, [r3, #0]
    7d48:	2b00      	cmp	r3, #0
    7d4a:	d10f      	bne.n	7d6c <SPI_ReadWrite+0x1bc>
				if (dataword == 0){
    7d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7d50:	2b00      	cmp	r3, #0
    7d52:	d105      	bne.n	7d60 <SPI_ReadWrite+0x1b0>
					SPI_SendData(SPIx, 0xFF);
    7d54:	68f8      	ldr	r0, [r7, #12]
    7d56:	f04f 01ff 	mov.w	r1, #255	; 0xff
    7d5a:	f7ff fef1 	bl	7b40 <SPI_SendData>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    7d5e:	e018      	b.n	7d92 <SPI_ReadWrite+0x1e2>
    7d60:	68f8      	ldr	r0, [r7, #12]
    7d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7d66:	f7ff feeb 	bl	7b40 <SPI_SendData>
    7d6a:	e012      	b.n	7d92 <SPI_ReadWrite+0x1e2>
				}
			} else {
				if (dataword == 0){
    7d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    7d70:	2b00      	cmp	r3, #0
    7d72:	d107      	bne.n	7d84 <SPI_ReadWrite+0x1d4>
					SPI_SendData(SPIx, (*(uint8_t *)dataCfg->tx_data));
    7d74:	68bb      	ldr	r3, [r7, #8]
    7d76:	681b      	ldr	r3, [r3, #0]
    7d78:	781b      	ldrb	r3, [r3, #0]
    7d7a:	68f8      	ldr	r0, [r7, #12]
    7d7c:	4619      	mov	r1, r3
    7d7e:	f7ff fedf 	bl	7b40 <SPI_SendData>
    7d82:	e006      	b.n	7d92 <SPI_ReadWrite+0x1e2>
				} else {
					SPI_SendData(SPIx, (*(uint16_t *)dataCfg->tx_data));
    7d84:	68bb      	ldr	r3, [r7, #8]
    7d86:	681b      	ldr	r3, [r3, #0]
    7d88:	881b      	ldrh	r3, [r3, #0]
    7d8a:	68f8      	ldr	r0, [r7, #12]
    7d8c:	4619      	mov	r1, r3
    7d8e:	f7ff fed7 	bl	7b40 <SPI_SendData>
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
    7d92:	68f8      	ldr	r0, [r7, #12]
    7d94:	f04f 0101 	mov.w	r1, #1
    7d98:	f000 f80c 	bl	7db4 <SPI_IntCmd>
    7d9c:	e003      	b.n	7da6 <SPI_ReadWrite+0x1f6>
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
    7d9e:	68bb      	ldr	r3, [r7, #8]
    7da0:	f44f 7280 	mov.w	r2, #256	; 0x100
    7da4:	611a      	str	r2, [r3, #16]
		}
		return (0);
    7da6:	f04f 0300 	mov.w	r3, #0
	}
}
    7daa:	4618      	mov	r0, r3
    7dac:	f107 0730 	add.w	r7, r7, #48	; 0x30
    7db0:	46bd      	mov	sp, r7
    7db2:	bd80      	pop	{r7, pc}

00007db4 <SPI_IntCmd>:
 * 				- ENALBE: Enable this SPI interrupt.
* 				- DISALBE: Disable this SPI interrupt.
 * @return 		None
 *********************************************************************/
void SPI_IntCmd(LPC_SPI_TypeDef *SPIx, FunctionalState NewState)
{
    7db4:	b580      	push	{r7, lr}
    7db6:	b082      	sub	sp, #8
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
    7dbc:	460b      	mov	r3, r1
    7dbe:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7dc0:	687a      	ldr	r2, [r7, #4]
    7dc2:	f240 0300 	movw	r3, #0
    7dc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7dca:	429a      	cmp	r2, r3
    7dcc:	d007      	beq.n	7dde <SPI_IntCmd+0x2a>
    7dce:	f24b 3080 	movw	r0, #45952	; 0xb380
    7dd2:	f2c0 0000 	movt	r0, #0
    7dd6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    7dda:	f7fe fa19 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    7dde:	78fb      	ldrb	r3, [r7, #3]
    7de0:	2b00      	cmp	r3, #0
    7de2:	d00a      	beq.n	7dfa <SPI_IntCmd+0x46>
    7de4:	78fb      	ldrb	r3, [r7, #3]
    7de6:	2b01      	cmp	r3, #1
    7de8:	d007      	beq.n	7dfa <SPI_IntCmd+0x46>
    7dea:	f24b 3080 	movw	r0, #45952	; 0xb380
    7dee:	f2c0 0000 	movt	r0, #0
    7df2:	f240 115d 	movw	r1, #349	; 0x15d
    7df6:	f7fe fa0b 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    7dfa:	78fb      	ldrb	r3, [r7, #3]
    7dfc:	2b01      	cmp	r3, #1
    7dfe:	d106      	bne.n	7e0e <SPI_IntCmd+0x5a>
	{
		SPIx->SPCR |= SPI_SPCR_SPIE;
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	681b      	ldr	r3, [r3, #0]
    7e04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	601a      	str	r2, [r3, #0]
    7e0c:	e009      	b.n	7e22 <SPI_IntCmd+0x6e>
	}
	else
	{
		SPIx->SPCR &= (~SPI_SPCR_SPIE) & SPI_SPCR_BITMASK;
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	681a      	ldr	r2, [r3, #0]
    7e12:	f640 737c 	movw	r3, #3964	; 0xf7c
    7e16:	f2c0 0300 	movt	r3, #0
    7e1a:	ea02 0303 	and.w	r3, r2, r3
    7e1e:	687a      	ldr	r2, [r7, #4]
    7e20:	6013      	str	r3, [r2, #0]
	}
}
    7e22:	f107 0708 	add.w	r7, r7, #8
    7e26:	46bd      	mov	sp, r7
    7e28:	bd80      	pop	{r7, pc}
    7e2a:	bf00      	nop

00007e2c <SPI_GetIntStatus>:
 * @brief 		Checks whether the SPI interrupt flag is set or not.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		The new state of SPI Interrupt Flag (SET or RESET)
 *********************************************************************/
IntStatus SPI_GetIntStatus (LPC_SPI_TypeDef *SPIx)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b082      	sub	sp, #8
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7e34:	687a      	ldr	r2, [r7, #4]
    7e36:	f240 0300 	movw	r3, #0
    7e3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7e3e:	429a      	cmp	r2, r3
    7e40:	d007      	beq.n	7e52 <SPI_GetIntStatus+0x26>
    7e42:	f24b 3080 	movw	r0, #45952	; 0xb380
    7e46:	f2c0 0000 	movt	r0, #0
    7e4a:	f240 1171 	movw	r1, #369	; 0x171
    7e4e:	f7fe f9df 	bl	6210 <check_failed>

	return ((SPIx->SPINT & SPI_SPINT_INTFLAG) ? SET : RESET);
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	69db      	ldr	r3, [r3, #28]
    7e56:	b2db      	uxtb	r3, r3
    7e58:	f003 0301 	and.w	r3, r3, #1
}
    7e5c:	4618      	mov	r0, r3
    7e5e:	f107 0708 	add.w	r7, r7, #8
    7e62:	46bd      	mov	sp, r7
    7e64:	bd80      	pop	{r7, pc}
    7e66:	bf00      	nop

00007e68 <SPI_ClearIntPending>:
 * @brief 		Clear SPI interrupt flag.
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		None
 *********************************************************************/
void SPI_ClearIntPending(LPC_SPI_TypeDef *SPIx)
{
    7e68:	b580      	push	{r7, lr}
    7e6a:	b082      	sub	sp, #8
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7e70:	687a      	ldr	r2, [r7, #4]
    7e72:	f240 0300 	movw	r3, #0
    7e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7e7a:	429a      	cmp	r2, r3
    7e7c:	d007      	beq.n	7e8e <SPI_ClearIntPending+0x26>
    7e7e:	f24b 3080 	movw	r0, #45952	; 0xb380
    7e82:	f2c0 0000 	movt	r0, #0
    7e86:	f240 117d 	movw	r1, #381	; 0x17d
    7e8a:	f7fe f9c1 	bl	6210 <check_failed>

	SPIx->SPINT = SPI_SPINT_INTFLAG;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	f04f 0201 	mov.w	r2, #1
    7e94:	61da      	str	r2, [r3, #28]
}
    7e96:	f107 0708 	add.w	r7, r7, #8
    7e9a:	46bd      	mov	sp, r7
    7e9c:	bd80      	pop	{r7, pc}
    7e9e:	bf00      	nop

00007ea0 <SPI_GetStatus>:
 * 			SPI Status register could not be correct. So this function used to
 * 			read SPI status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint32_t SPI_GetStatus(LPC_SPI_TypeDef* SPIx)
{
    7ea0:	b580      	push	{r7, lr}
    7ea2:	b082      	sub	sp, #8
    7ea4:	af00      	add	r7, sp, #0
    7ea6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_SPIx(SPIx));
    7ea8:	687a      	ldr	r2, [r7, #4]
    7eaa:	f240 0300 	movw	r3, #0
    7eae:	f2c4 0302 	movt	r3, #16386	; 0x4002
    7eb2:	429a      	cmp	r2, r3
    7eb4:	d007      	beq.n	7ec6 <SPI_GetStatus+0x26>
    7eb6:	f24b 3080 	movw	r0, #45952	; 0xb380
    7eba:	f2c0 0000 	movt	r0, #0
    7ebe:	f44f 71c8 	mov.w	r1, #400	; 0x190
    7ec2:	f7fe f9a5 	bl	6210 <check_failed>

	return (SPIx->SPSR & SPI_SPSR_BITMASK);
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	685b      	ldr	r3, [r3, #4]
    7eca:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    7ece:	4618      	mov	r0, r3
    7ed0:	f107 0708 	add.w	r7, r7, #8
    7ed4:	46bd      	mov	sp, r7
    7ed6:	bd80      	pop	{r7, pc}

00007ed8 <SPI_CheckStatus>:
				- SPI_STAT_WCOL: Write collision.
				- SPI_STAT_SPIF: SPI transfer complete.
 * @return 		The new state of SPIStatus (SET or RESET)
 *********************************************************************/
FlagStatus SPI_CheckStatus (uint32_t inputSPIStatus,  uint8_t SPIStatus)
{
    7ed8:	b580      	push	{r7, lr}
    7eda:	b082      	sub	sp, #8
    7edc:	af00      	add	r7, sp, #0
    7ede:	6078      	str	r0, [r7, #4]
    7ee0:	460b      	mov	r3, r1
    7ee2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_SPI_STAT(SPIStatus));
    7ee4:	78fb      	ldrb	r3, [r7, #3]
    7ee6:	2b08      	cmp	r3, #8
    7ee8:	d013      	beq.n	7f12 <SPI_CheckStatus+0x3a>
    7eea:	78fb      	ldrb	r3, [r7, #3]
    7eec:	2b10      	cmp	r3, #16
    7eee:	d010      	beq.n	7f12 <SPI_CheckStatus+0x3a>
    7ef0:	78fb      	ldrb	r3, [r7, #3]
    7ef2:	2b20      	cmp	r3, #32
    7ef4:	d00d      	beq.n	7f12 <SPI_CheckStatus+0x3a>
    7ef6:	78fb      	ldrb	r3, [r7, #3]
    7ef8:	2b40      	cmp	r3, #64	; 0x40
    7efa:	d00a      	beq.n	7f12 <SPI_CheckStatus+0x3a>
    7efc:	78fb      	ldrb	r3, [r7, #3]
    7efe:	2b80      	cmp	r3, #128	; 0x80
    7f00:	d007      	beq.n	7f12 <SPI_CheckStatus+0x3a>
    7f02:	f24b 3080 	movw	r0, #45952	; 0xb380
    7f06:	f2c0 0000 	movt	r0, #0
    7f0a:	f240 11a5 	movw	r1, #421	; 0x1a5
    7f0e:	f7fe f97f 	bl	6210 <check_failed>

	return ((inputSPIStatus & SPIStatus) ? SET : RESET);
    7f12:	78fa      	ldrb	r2, [r7, #3]
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	ea02 0303 	and.w	r3, r2, r3
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	bf0c      	ite	eq
    7f1e:	2300      	moveq	r3, #0
    7f20:	2301      	movne	r3, #1
}
    7f22:	4618      	mov	r0, r3
    7f24:	f107 0708 	add.w	r7, r7, #8
    7f28:	46bd      	mov	sp, r7
    7f2a:	bd80      	pop	{r7, pc}

00007f2c <getPClock>:
 * @brief 		Get peripheral clock of each timer controller
 * @param[in]	timernum Timer number
 * @return 		Peripheral clock of timer
 **********************************************************************/
static uint32_t getPClock (uint32_t timernum)
{
    7f2c:	b580      	push	{r7, lr}
    7f2e:	b084      	sub	sp, #16
    7f30:	af00      	add	r7, sp, #0
    7f32:	6078      	str	r0, [r7, #4]
	uint32_t clkdlycnt;
	switch (timernum)
    7f34:	687b      	ldr	r3, [r7, #4]
    7f36:	2b03      	cmp	r3, #3
    7f38:	d825      	bhi.n	7f86 <getPClock+0x5a>
    7f3a:	a201      	add	r2, pc, #4	; (adr r2, 7f40 <getPClock+0x14>)
    7f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7f40:	00007f51 	.word	0x00007f51
    7f44:	00007f5f 	.word	0x00007f5f
    7f48:	00007f6d 	.word	0x00007f6d
    7f4c:	00007f7b 	.word	0x00007f7b
	{
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
    7f50:	f04f 0002 	mov.w	r0, #2
    7f54:	f7fc f92e 	bl	41b4 <CLKPWR_GetPCLK>
    7f58:	4603      	mov	r3, r0
    7f5a:	60fb      	str	r3, [r7, #12]
		break;
    7f5c:	e013      	b.n	7f86 <getPClock+0x5a>

	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
    7f5e:	f04f 0004 	mov.w	r0, #4
    7f62:	f7fc f927 	bl	41b4 <CLKPWR_GetPCLK>
    7f66:	4603      	mov	r3, r0
    7f68:	60fb      	str	r3, [r7, #12]
		break;
    7f6a:	e00c      	b.n	7f86 <getPClock+0x5a>

	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
    7f6c:	f04f 002c 	mov.w	r0, #44	; 0x2c
    7f70:	f7fc f920 	bl	41b4 <CLKPWR_GetPCLK>
    7f74:	4603      	mov	r3, r0
    7f76:	60fb      	str	r3, [r7, #12]
		break;
    7f78:	e005      	b.n	7f86 <getPClock+0x5a>

	case 3:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER3);
    7f7a:	f04f 002e 	mov.w	r0, #46	; 0x2e
    7f7e:	f7fc f919 	bl	41b4 <CLKPWR_GetPCLK>
    7f82:	4603      	mov	r3, r0
    7f84:	60fb      	str	r3, [r7, #12]
		break;
	}
	return clkdlycnt;
    7f86:	68fb      	ldr	r3, [r7, #12]
}
    7f88:	4618      	mov	r0, r3
    7f8a:	f107 0710 	add.w	r7, r7, #16
    7f8e:	46bd      	mov	sp, r7
    7f90:	bd80      	pop	{r7, pc}
    7f92:	bf00      	nop

00007f94 <converUSecToVal>:
 * @param[in]	timernum Timer number
 * @param[in]	usec Time in microseconds
 * @return 		The number of required clock ticks to give the time delay
 **********************************************************************/
uint32_t converUSecToVal (uint32_t timernum, uint32_t usec)
{
    7f94:	b580      	push	{r7, lr}
    7f96:	b084      	sub	sp, #16
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
    7f9c:	6039      	str	r1, [r7, #0]
	uint64_t clkdlycnt;

	// Get Pclock of timer
	clkdlycnt = (uint64_t) getPClock(timernum);
    7f9e:	6878      	ldr	r0, [r7, #4]
    7fa0:	f7ff ffc4 	bl	7f2c <getPClock>
    7fa4:	4603      	mov	r3, r0
    7fa6:	461a      	mov	r2, r3
    7fa8:	f04f 0300 	mov.w	r3, #0
    7fac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	clkdlycnt = (clkdlycnt * usec) / 1000000;
    7fb0:	683b      	ldr	r3, [r7, #0]
    7fb2:	461a      	mov	r2, r3
    7fb4:	f04f 0300 	mov.w	r3, #0
    7fb8:	68b9      	ldr	r1, [r7, #8]
    7fba:	fb03 f101 	mul.w	r1, r3, r1
    7fbe:	68f8      	ldr	r0, [r7, #12]
    7fc0:	fb02 f000 	mul.w	r0, r2, r0
    7fc4:	4401      	add	r1, r0
    7fc6:	68b8      	ldr	r0, [r7, #8]
    7fc8:	fba0 2302 	umull	r2, r3, r0, r2
    7fcc:	4419      	add	r1, r3
    7fce:	460b      	mov	r3, r1
    7fd0:	4610      	mov	r0, r2
    7fd2:	4619      	mov	r1, r3
    7fd4:	f44f 2274 	mov.w	r2, #999424	; 0xf4000
    7fd8:	f502 7210 	add.w	r2, r2, #576	; 0x240
    7fdc:	f04f 0300 	mov.w	r3, #0
    7fe0:	f002 fc5a 	bl	a898 <__aeabi_uldivmod>
    7fe4:	4602      	mov	r2, r0
    7fe6:	460b      	mov	r3, r1
    7fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint32_t) clkdlycnt;
    7fec:	68bb      	ldr	r3, [r7, #8]
}
    7fee:	4618      	mov	r0, r3
    7ff0:	f107 0710 	add.w	r7, r7, #16
    7ff4:	46bd      	mov	sp, r7
    7ff6:	bd80      	pop	{r7, pc}

00007ff8 <converPtrToTimeNum>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		The timer number (0 to 3) or -1 if register pointer is bad
 **********************************************************************/
uint32_t converPtrToTimeNum (LPC_TIM_TypeDef *TIMx)
{
    7ff8:	b480      	push	{r7}
    7ffa:	b085      	sub	sp, #20
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
	uint32_t tnum = -1;
    8000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8004:	60fb      	str	r3, [r7, #12]

	if (TIMx == LPC_TIM0)
    8006:	687a      	ldr	r2, [r7, #4]
    8008:	f244 0300 	movw	r3, #16384	; 0x4000
    800c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8010:	429a      	cmp	r2, r3
    8012:	d103      	bne.n	801c <converPtrToTimeNum+0x24>
	{
		tnum = 0;
    8014:	f04f 0300 	mov.w	r3, #0
    8018:	60fb      	str	r3, [r7, #12]
    801a:	e01f      	b.n	805c <converPtrToTimeNum+0x64>
	}
	else if (TIMx == LPC_TIM1)
    801c:	687a      	ldr	r2, [r7, #4]
    801e:	f248 0300 	movw	r3, #32768	; 0x8000
    8022:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8026:	429a      	cmp	r2, r3
    8028:	d103      	bne.n	8032 <converPtrToTimeNum+0x3a>
	{
		tnum = 1;
    802a:	f04f 0301 	mov.w	r3, #1
    802e:	60fb      	str	r3, [r7, #12]
    8030:	e014      	b.n	805c <converPtrToTimeNum+0x64>
	}
	else if (TIMx == LPC_TIM2)
    8032:	687a      	ldr	r2, [r7, #4]
    8034:	f240 0300 	movw	r3, #0
    8038:	f2c4 0309 	movt	r3, #16393	; 0x4009
    803c:	429a      	cmp	r2, r3
    803e:	d103      	bne.n	8048 <converPtrToTimeNum+0x50>
	{
		tnum = 2;
    8040:	f04f 0302 	mov.w	r3, #2
    8044:	60fb      	str	r3, [r7, #12]
    8046:	e009      	b.n	805c <converPtrToTimeNum+0x64>
	}
	else if (TIMx == LPC_TIM3)
    8048:	687a      	ldr	r2, [r7, #4]
    804a:	f244 0300 	movw	r3, #16384	; 0x4000
    804e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8052:	429a      	cmp	r2, r3
    8054:	d102      	bne.n	805c <converPtrToTimeNum+0x64>
	{
		tnum = 3;
    8056:	f04f 0303 	mov.w	r3, #3
    805a:	60fb      	str	r3, [r7, #12]
	}

	return tnum;
    805c:	68fb      	ldr	r3, [r7, #12]
}
    805e:	4618      	mov	r0, r3
    8060:	f107 0714 	add.w	r7, r7, #20
    8064:	46bd      	mov	sp, r7
    8066:	bc80      	pop	{r7}
    8068:	4770      	bx	lr
    806a:	bf00      	nop

0000806c <TIM_GetIntStatus>:
 * @return 		FlagStatus
 * 				- SET : interrupt
 * 				- RESET : no interrupt
 **********************************************************************/
FlagStatus TIM_GetIntStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    806c:	b580      	push	{r7, lr}
    806e:	b084      	sub	sp, #16
    8070:	af00      	add	r7, sp, #0
    8072:	6078      	str	r0, [r7, #4]
    8074:	460b      	mov	r3, r1
    8076:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8078:	687a      	ldr	r2, [r7, #4]
    807a:	f244 0300 	movw	r3, #16384	; 0x4000
    807e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8082:	429a      	cmp	r2, r3
    8084:	d01c      	beq.n	80c0 <TIM_GetIntStatus+0x54>
    8086:	687a      	ldr	r2, [r7, #4]
    8088:	f248 0300 	movw	r3, #32768	; 0x8000
    808c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8090:	429a      	cmp	r2, r3
    8092:	d015      	beq.n	80c0 <TIM_GetIntStatus+0x54>
    8094:	687a      	ldr	r2, [r7, #4]
    8096:	f240 0300 	movw	r3, #0
    809a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    809e:	429a      	cmp	r2, r3
    80a0:	d00e      	beq.n	80c0 <TIM_GetIntStatus+0x54>
    80a2:	687a      	ldr	r2, [r7, #4]
    80a4:	f244 0300 	movw	r3, #16384	; 0x4000
    80a8:	f2c4 0309 	movt	r3, #16393	; 0x4009
    80ac:	429a      	cmp	r2, r3
    80ae:	d007      	beq.n	80c0 <TIM_GetIntStatus+0x54>
    80b0:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    80b4:	f2c0 0000 	movt	r0, #0
    80b8:	f04f 01a6 	mov.w	r1, #166	; 0xa6
    80bc:	f7fe f8a8 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    80c0:	78fb      	ldrb	r3, [r7, #3]
    80c2:	2b00      	cmp	r3, #0
    80c4:	d016      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80c6:	78fb      	ldrb	r3, [r7, #3]
    80c8:	2b01      	cmp	r3, #1
    80ca:	d013      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80cc:	78fb      	ldrb	r3, [r7, #3]
    80ce:	2b02      	cmp	r3, #2
    80d0:	d010      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80d2:	78fb      	ldrb	r3, [r7, #3]
    80d4:	2b03      	cmp	r3, #3
    80d6:	d00d      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80d8:	78fb      	ldrb	r3, [r7, #3]
    80da:	2b04      	cmp	r3, #4
    80dc:	d00a      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80de:	78fb      	ldrb	r3, [r7, #3]
    80e0:	2b05      	cmp	r3, #5
    80e2:	d007      	beq.n	80f4 <TIM_GetIntStatus+0x88>
    80e4:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    80e8:	f2c0 0000 	movt	r0, #0
    80ec:	f04f 01a7 	mov.w	r1, #167	; 0xa7
    80f0:	f7fe f88e 	bl	6210 <check_failed>
	temp = (TIMx->IR)& TIM_IR_CLR(IntFlag);
    80f4:	687b      	ldr	r3, [r7, #4]
    80f6:	681b      	ldr	r3, [r3, #0]
    80f8:	b2da      	uxtb	r2, r3
    80fa:	78fb      	ldrb	r3, [r7, #3]
    80fc:	f04f 0101 	mov.w	r1, #1
    8100:	fa01 f303 	lsl.w	r3, r1, r3
    8104:	b2db      	uxtb	r3, r3
    8106:	ea02 0303 	and.w	r3, r2, r3
    810a:	73fb      	strb	r3, [r7, #15]
	if (temp)
    810c:	7bfb      	ldrb	r3, [r7, #15]
    810e:	2b00      	cmp	r3, #0
    8110:	d002      	beq.n	8118 <TIM_GetIntStatus+0xac>
		return SET;
    8112:	f04f 0301 	mov.w	r3, #1
    8116:	e001      	b.n	811c <TIM_GetIntStatus+0xb0>

	return RESET;
    8118:	f04f 0300 	mov.w	r3, #0

}
    811c:	4618      	mov	r0, r3
    811e:	f107 0710 	add.w	r7, r7, #16
    8122:	46bd      	mov	sp, r7
    8124:	bd80      	pop	{r7, pc}
    8126:	bf00      	nop

00008128 <TIM_GetIntCaptureStatus>:
 * @return 		FlagStatus
 * 				- SET : interrupt
 * 				- RESET : no interrupt
 **********************************************************************/
FlagStatus TIM_GetIntCaptureStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    8128:	b580      	push	{r7, lr}
    812a:	b084      	sub	sp, #16
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
    8130:	460b      	mov	r3, r1
    8132:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8134:	687a      	ldr	r2, [r7, #4]
    8136:	f244 0300 	movw	r3, #16384	; 0x4000
    813a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    813e:	429a      	cmp	r2, r3
    8140:	d01c      	beq.n	817c <TIM_GetIntCaptureStatus+0x54>
    8142:	687a      	ldr	r2, [r7, #4]
    8144:	f248 0300 	movw	r3, #32768	; 0x8000
    8148:	f2c4 0300 	movt	r3, #16384	; 0x4000
    814c:	429a      	cmp	r2, r3
    814e:	d015      	beq.n	817c <TIM_GetIntCaptureStatus+0x54>
    8150:	687a      	ldr	r2, [r7, #4]
    8152:	f240 0300 	movw	r3, #0
    8156:	f2c4 0309 	movt	r3, #16393	; 0x4009
    815a:	429a      	cmp	r2, r3
    815c:	d00e      	beq.n	817c <TIM_GetIntCaptureStatus+0x54>
    815e:	687a      	ldr	r2, [r7, #4]
    8160:	f244 0300 	movw	r3, #16384	; 0x4000
    8164:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8168:	429a      	cmp	r2, r3
    816a:	d007      	beq.n	817c <TIM_GetIntCaptureStatus+0x54>
    816c:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8170:	f2c0 0000 	movt	r0, #0
    8174:	f04f 01c4 	mov.w	r1, #196	; 0xc4
    8178:	f7fe f84a 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    817c:	78fb      	ldrb	r3, [r7, #3]
    817e:	2b00      	cmp	r3, #0
    8180:	d016      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    8182:	78fb      	ldrb	r3, [r7, #3]
    8184:	2b01      	cmp	r3, #1
    8186:	d013      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    8188:	78fb      	ldrb	r3, [r7, #3]
    818a:	2b02      	cmp	r3, #2
    818c:	d010      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    818e:	78fb      	ldrb	r3, [r7, #3]
    8190:	2b03      	cmp	r3, #3
    8192:	d00d      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    8194:	78fb      	ldrb	r3, [r7, #3]
    8196:	2b04      	cmp	r3, #4
    8198:	d00a      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    819a:	78fb      	ldrb	r3, [r7, #3]
    819c:	2b05      	cmp	r3, #5
    819e:	d007      	beq.n	81b0 <TIM_GetIntCaptureStatus+0x88>
    81a0:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    81a4:	f2c0 0000 	movt	r0, #0
    81a8:	f04f 01c5 	mov.w	r1, #197	; 0xc5
    81ac:	f7fe f830 	bl	6210 <check_failed>
	temp = (TIMx->IR) & (1<<(4+IntFlag));
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	b2da      	uxtb	r2, r3
    81b6:	78fb      	ldrb	r3, [r7, #3]
    81b8:	f103 0304 	add.w	r3, r3, #4
    81bc:	f04f 0101 	mov.w	r1, #1
    81c0:	fa01 f303 	lsl.w	r3, r1, r3
    81c4:	b2db      	uxtb	r3, r3
    81c6:	ea02 0303 	and.w	r3, r2, r3
    81ca:	73fb      	strb	r3, [r7, #15]
	if(temp)
    81cc:	7bfb      	ldrb	r3, [r7, #15]
    81ce:	2b00      	cmp	r3, #0
    81d0:	d002      	beq.n	81d8 <TIM_GetIntCaptureStatus+0xb0>
		return SET;
    81d2:	f04f 0301 	mov.w	r3, #1
    81d6:	e001      	b.n	81dc <TIM_GetIntCaptureStatus+0xb4>
	return RESET;
    81d8:	f04f 0300 	mov.w	r3, #0
}
    81dc:	4618      	mov	r0, r3
    81de:	f107 0710 	add.w	r7, r7, #16
    81e2:	46bd      	mov	sp, r7
    81e4:	bd80      	pop	{r7, pc}
    81e6:	bf00      	nop

000081e8 <TIM_ClearIntPending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntPending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	b082      	sub	sp, #8
    81ec:	af00      	add	r7, sp, #0
    81ee:	6078      	str	r0, [r7, #4]
    81f0:	460b      	mov	r3, r1
    81f2:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    81f4:	687a      	ldr	r2, [r7, #4]
    81f6:	f244 0300 	movw	r3, #16384	; 0x4000
    81fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    81fe:	429a      	cmp	r2, r3
    8200:	d01c      	beq.n	823c <TIM_ClearIntPending+0x54>
    8202:	687a      	ldr	r2, [r7, #4]
    8204:	f248 0300 	movw	r3, #32768	; 0x8000
    8208:	f2c4 0300 	movt	r3, #16384	; 0x4000
    820c:	429a      	cmp	r2, r3
    820e:	d015      	beq.n	823c <TIM_ClearIntPending+0x54>
    8210:	687a      	ldr	r2, [r7, #4]
    8212:	f240 0300 	movw	r3, #0
    8216:	f2c4 0309 	movt	r3, #16393	; 0x4009
    821a:	429a      	cmp	r2, r3
    821c:	d00e      	beq.n	823c <TIM_ClearIntPending+0x54>
    821e:	687a      	ldr	r2, [r7, #4]
    8220:	f244 0300 	movw	r3, #16384	; 0x4000
    8224:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8228:	429a      	cmp	r2, r3
    822a:	d007      	beq.n	823c <TIM_ClearIntPending+0x54>
    822c:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8230:	f2c0 0000 	movt	r0, #0
    8234:	f04f 01dd 	mov.w	r1, #221	; 0xdd
    8238:	f7fd ffea 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    823c:	78fb      	ldrb	r3, [r7, #3]
    823e:	2b00      	cmp	r3, #0
    8240:	d016      	beq.n	8270 <TIM_ClearIntPending+0x88>
    8242:	78fb      	ldrb	r3, [r7, #3]
    8244:	2b01      	cmp	r3, #1
    8246:	d013      	beq.n	8270 <TIM_ClearIntPending+0x88>
    8248:	78fb      	ldrb	r3, [r7, #3]
    824a:	2b02      	cmp	r3, #2
    824c:	d010      	beq.n	8270 <TIM_ClearIntPending+0x88>
    824e:	78fb      	ldrb	r3, [r7, #3]
    8250:	2b03      	cmp	r3, #3
    8252:	d00d      	beq.n	8270 <TIM_ClearIntPending+0x88>
    8254:	78fb      	ldrb	r3, [r7, #3]
    8256:	2b04      	cmp	r3, #4
    8258:	d00a      	beq.n	8270 <TIM_ClearIntPending+0x88>
    825a:	78fb      	ldrb	r3, [r7, #3]
    825c:	2b05      	cmp	r3, #5
    825e:	d007      	beq.n	8270 <TIM_ClearIntPending+0x88>
    8260:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8264:	f2c0 0000 	movt	r0, #0
    8268:	f04f 01de 	mov.w	r1, #222	; 0xde
    826c:	f7fd ffd0 	bl	6210 <check_failed>
	TIMx->IR = TIM_IR_CLR(IntFlag);
    8270:	78fb      	ldrb	r3, [r7, #3]
    8272:	f04f 0201 	mov.w	r2, #1
    8276:	fa02 f303 	lsl.w	r3, r2, r3
    827a:	461a      	mov	r2, r3
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	601a      	str	r2, [r3, #0]
}
    8280:	f107 0708 	add.w	r7, r7, #8
    8284:	46bd      	mov	sp, r7
    8286:	bd80      	pop	{r7, pc}

00008288 <TIM_ClearIntCapturePending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntCapturePending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
    8290:	460b      	mov	r3, r1
    8292:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8294:	687a      	ldr	r2, [r7, #4]
    8296:	f244 0300 	movw	r3, #16384	; 0x4000
    829a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    829e:	429a      	cmp	r2, r3
    82a0:	d01c      	beq.n	82dc <TIM_ClearIntCapturePending+0x54>
    82a2:	687a      	ldr	r2, [r7, #4]
    82a4:	f248 0300 	movw	r3, #32768	; 0x8000
    82a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    82ac:	429a      	cmp	r2, r3
    82ae:	d015      	beq.n	82dc <TIM_ClearIntCapturePending+0x54>
    82b0:	687a      	ldr	r2, [r7, #4]
    82b2:	f240 0300 	movw	r3, #0
    82b6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    82ba:	429a      	cmp	r2, r3
    82bc:	d00e      	beq.n	82dc <TIM_ClearIntCapturePending+0x54>
    82be:	687a      	ldr	r2, [r7, #4]
    82c0:	f244 0300 	movw	r3, #16384	; 0x4000
    82c4:	f2c4 0309 	movt	r3, #16393	; 0x4009
    82c8:	429a      	cmp	r2, r3
    82ca:	d007      	beq.n	82dc <TIM_ClearIntCapturePending+0x54>
    82cc:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    82d0:	f2c0 0000 	movt	r0, #0
    82d4:	f04f 01f4 	mov.w	r1, #244	; 0xf4
    82d8:	f7fd ff9a 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    82dc:	78fb      	ldrb	r3, [r7, #3]
    82de:	2b00      	cmp	r3, #0
    82e0:	d016      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    82e2:	78fb      	ldrb	r3, [r7, #3]
    82e4:	2b01      	cmp	r3, #1
    82e6:	d013      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    82e8:	78fb      	ldrb	r3, [r7, #3]
    82ea:	2b02      	cmp	r3, #2
    82ec:	d010      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    82ee:	78fb      	ldrb	r3, [r7, #3]
    82f0:	2b03      	cmp	r3, #3
    82f2:	d00d      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    82f4:	78fb      	ldrb	r3, [r7, #3]
    82f6:	2b04      	cmp	r3, #4
    82f8:	d00a      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    82fa:	78fb      	ldrb	r3, [r7, #3]
    82fc:	2b05      	cmp	r3, #5
    82fe:	d007      	beq.n	8310 <TIM_ClearIntCapturePending+0x88>
    8300:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8304:	f2c0 0000 	movt	r0, #0
    8308:	f04f 01f5 	mov.w	r1, #245	; 0xf5
    830c:	f7fd ff80 	bl	6210 <check_failed>
	TIMx->IR = (1<<(4+IntFlag));
    8310:	78fb      	ldrb	r3, [r7, #3]
    8312:	f103 0304 	add.w	r3, r3, #4
    8316:	f04f 0201 	mov.w	r2, #1
    831a:	fa02 f303 	lsl.w	r3, r2, r3
    831e:	461a      	mov	r2, r3
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	601a      	str	r2, [r3, #0]
}
    8324:	f107 0708 	add.w	r7, r7, #8
    8328:	46bd      	mov	sp, r7
    832a:	bd80      	pop	{r7, pc}

0000832c <TIM_ConfigStructInit>:
 * @param[in] 	TIM_ConfigStruct pointer to TIM_TIMERCFG_Type or
 * 				TIM_COUNTERCFG_Type
 * @return 		None
 **********************************************************************/
void TIM_ConfigStructInit(TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    832c:	b480      	push	{r7}
    832e:	b085      	sub	sp, #20
    8330:	af00      	add	r7, sp, #0
    8332:	4603      	mov	r3, r0
    8334:	6039      	str	r1, [r7, #0]
    8336:	71fb      	strb	r3, [r7, #7]
	if (TimerCounterMode == TIM_TIMER_MODE )
    8338:	79fb      	ldrb	r3, [r7, #7]
    833a:	2b00      	cmp	r3, #0
    833c:	d10a      	bne.n	8354 <TIM_ConfigStructInit+0x28>
	{
		TIM_TIMERCFG_Type * pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
    833e:	683b      	ldr	r3, [r7, #0]
    8340:	60bb      	str	r3, [r7, #8]
		pTimeCfg->PrescaleOption = TIM_PRESCALE_USVAL;
    8342:	68bb      	ldr	r3, [r7, #8]
    8344:	f04f 0201 	mov.w	r2, #1
    8348:	701a      	strb	r2, [r3, #0]
		pTimeCfg->PrescaleValue = 1;
    834a:	68bb      	ldr	r3, [r7, #8]
    834c:	f04f 0201 	mov.w	r2, #1
    8350:	605a      	str	r2, [r3, #4]
    8352:	e005      	b.n	8360 <TIM_ConfigStructInit+0x34>
	}
	else
	{
		TIM_COUNTERCFG_Type * pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
    8354:	683b      	ldr	r3, [r7, #0]
    8356:	60fb      	str	r3, [r7, #12]
		pCounterCfg->CountInputSelect = TIM_COUNTER_INCAP0;
    8358:	68fb      	ldr	r3, [r7, #12]
    835a:	f04f 0200 	mov.w	r2, #0
    835e:	705a      	strb	r2, [r3, #1]
	}
}
    8360:	f107 0714 	add.w	r7, r7, #20
    8364:	46bd      	mov	sp, r7
    8366:	bc80      	pop	{r7}
    8368:	4770      	bx	lr
    836a:	bf00      	nop

0000836c <TIM_Init>:
 * 				that contains the configuration information for the
 *                    specified Timer peripheral.
 * @return 		None
 **********************************************************************/
void TIM_Init(LPC_TIM_TypeDef *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    836c:	b580      	push	{r7, lr}
    836e:	b086      	sub	sp, #24
    8370:	af00      	add	r7, sp, #0
    8372:	60f8      	str	r0, [r7, #12]
    8374:	460b      	mov	r3, r1
    8376:	607a      	str	r2, [r7, #4]
    8378:	72fb      	strb	r3, [r7, #11]
	TIM_TIMERCFG_Type *pTimeCfg;
	TIM_COUNTERCFG_Type *pCounterCfg;

	CHECK_PARAM(PARAM_TIMx(TIMx));
    837a:	68fa      	ldr	r2, [r7, #12]
    837c:	f244 0300 	movw	r3, #16384	; 0x4000
    8380:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8384:	429a      	cmp	r2, r3
    8386:	d01c      	beq.n	83c2 <TIM_Init+0x56>
    8388:	68fa      	ldr	r2, [r7, #12]
    838a:	f248 0300 	movw	r3, #32768	; 0x8000
    838e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8392:	429a      	cmp	r2, r3
    8394:	d015      	beq.n	83c2 <TIM_Init+0x56>
    8396:	68fa      	ldr	r2, [r7, #12]
    8398:	f240 0300 	movw	r3, #0
    839c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    83a0:	429a      	cmp	r2, r3
    83a2:	d00e      	beq.n	83c2 <TIM_Init+0x56>
    83a4:	68fa      	ldr	r2, [r7, #12]
    83a6:	f244 0300 	movw	r3, #16384	; 0x4000
    83aa:	f2c4 0309 	movt	r3, #16393	; 0x4009
    83ae:	429a      	cmp	r2, r3
    83b0:	d007      	beq.n	83c2 <TIM_Init+0x56>
    83b2:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    83b6:	f2c0 0000 	movt	r0, #0
    83ba:	f240 112b 	movw	r1, #299	; 0x12b
    83be:	f7fd ff27 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
    83c2:	7afb      	ldrb	r3, [r7, #11]
    83c4:	2b00      	cmp	r3, #0
    83c6:	d010      	beq.n	83ea <TIM_Init+0x7e>
    83c8:	7afb      	ldrb	r3, [r7, #11]
    83ca:	2b01      	cmp	r3, #1
    83cc:	d00d      	beq.n	83ea <TIM_Init+0x7e>
    83ce:	7afb      	ldrb	r3, [r7, #11]
    83d0:	2b01      	cmp	r3, #1
    83d2:	d00a      	beq.n	83ea <TIM_Init+0x7e>
    83d4:	7afb      	ldrb	r3, [r7, #11]
    83d6:	2b01      	cmp	r3, #1
    83d8:	d007      	beq.n	83ea <TIM_Init+0x7e>
    83da:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    83de:	f2c0 0000 	movt	r0, #0
    83e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    83e6:	f7fd ff13 	bl	6210 <check_failed>

	//set power

	if (TIMx== LPC_TIM0)
    83ea:	68fa      	ldr	r2, [r7, #12]
    83ec:	f244 0300 	movw	r3, #16384	; 0x4000
    83f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    83f4:	429a      	cmp	r2, r3
    83f6:	d10c      	bne.n	8412 <TIM_Init+0xa6>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, ENABLE);
    83f8:	f04f 0002 	mov.w	r0, #2
    83fc:	f04f 0101 	mov.w	r1, #1
    8400:	f7fb ff10 	bl	4224 <CLKPWR_ConfigPPWR>
		//PCLK_Timer0 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_4);
    8404:	f04f 0002 	mov.w	r0, #2
    8408:	f04f 0100 	mov.w	r1, #0
    840c:	f7fb fe42 	bl	4094 <CLKPWR_SetPCLKDiv>
    8410:	e03a      	b.n	8488 <TIM_Init+0x11c>
	}
	else if (TIMx== LPC_TIM1)
    8412:	68fa      	ldr	r2, [r7, #12]
    8414:	f248 0300 	movw	r3, #32768	; 0x8000
    8418:	f2c4 0300 	movt	r3, #16384	; 0x4000
    841c:	429a      	cmp	r2, r3
    841e:	d10c      	bne.n	843a <TIM_Init+0xce>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, ENABLE);
    8420:	f04f 0004 	mov.w	r0, #4
    8424:	f04f 0101 	mov.w	r1, #1
    8428:	f7fb fefc 	bl	4224 <CLKPWR_ConfigPPWR>
		//PCLK_Timer1 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    842c:	f04f 0004 	mov.w	r0, #4
    8430:	f04f 0100 	mov.w	r1, #0
    8434:	f7fb fe2e 	bl	4094 <CLKPWR_SetPCLKDiv>
    8438:	e026      	b.n	8488 <TIM_Init+0x11c>

	}

	else if (TIMx== LPC_TIM2)
    843a:	68fa      	ldr	r2, [r7, #12]
    843c:	f240 0300 	movw	r3, #0
    8440:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8444:	429a      	cmp	r2, r3
    8446:	d10c      	bne.n	8462 <TIM_Init+0xf6>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, ENABLE);
    8448:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    844c:	f04f 0101 	mov.w	r1, #1
    8450:	f7fb fee8 	bl	4224 <CLKPWR_ConfigPPWR>
		//PCLK_Timer2= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER2, CLKPWR_PCLKSEL_CCLK_DIV_4);
    8454:	f04f 002c 	mov.w	r0, #44	; 0x2c
    8458:	f04f 0100 	mov.w	r1, #0
    845c:	f7fb fe1a 	bl	4094 <CLKPWR_SetPCLKDiv>
    8460:	e012      	b.n	8488 <TIM_Init+0x11c>
	}
	else if (TIMx== LPC_TIM3)
    8462:	68fa      	ldr	r2, [r7, #12]
    8464:	f244 0300 	movw	r3, #16384	; 0x4000
    8468:	f2c4 0309 	movt	r3, #16393	; 0x4009
    846c:	429a      	cmp	r2, r3
    846e:	d10b      	bne.n	8488 <TIM_Init+0x11c>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM3, ENABLE);
    8470:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    8474:	f04f 0101 	mov.w	r1, #1
    8478:	f7fb fed4 	bl	4224 <CLKPWR_ConfigPPWR>
		//PCLK_Timer3= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_4);
    847c:	f04f 002e 	mov.w	r0, #46	; 0x2e
    8480:	f04f 0100 	mov.w	r1, #0
    8484:	f7fb fe06 	bl	4094 <CLKPWR_SetPCLKDiv>

	}

	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
    8488:	68fb      	ldr	r3, [r7, #12]
    848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    848c:	f023 0203 	bic.w	r2, r3, #3
    8490:	68fb      	ldr	r3, [r7, #12]
    8492:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->CCR |= TIM_TIMER_MODE;
    8494:	68fb      	ldr	r3, [r7, #12]
    8496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8498:	68fb      	ldr	r3, [r7, #12]
    849a:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->TC =0;
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	f04f 0200 	mov.w	r2, #0
    84a2:	609a      	str	r2, [r3, #8]
	TIMx->PC =0;
    84a4:	68fb      	ldr	r3, [r7, #12]
    84a6:	f04f 0200 	mov.w	r2, #0
    84aa:	611a      	str	r2, [r3, #16]
	TIMx->PR =0;
    84ac:	68fb      	ldr	r3, [r7, #12]
    84ae:	f04f 0200 	mov.w	r2, #0
    84b2:	60da      	str	r2, [r3, #12]
	TIMx->TCR |= (1<<1); //Reset Counter
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	685b      	ldr	r3, [r3, #4]
    84b8:	f043 0202 	orr.w	r2, r3, #2
    84bc:	68fb      	ldr	r3, [r7, #12]
    84be:	605a      	str	r2, [r3, #4]
	TIMx->TCR &= ~(1<<1); //release reset
    84c0:	68fb      	ldr	r3, [r7, #12]
    84c2:	685b      	ldr	r3, [r3, #4]
    84c4:	f023 0202 	bic.w	r2, r3, #2
    84c8:	68fb      	ldr	r3, [r7, #12]
    84ca:	605a      	str	r2, [r3, #4]
	if (TimerCounterMode == TIM_TIMER_MODE )
    84cc:	7afb      	ldrb	r3, [r7, #11]
    84ce:	2b00      	cmp	r3, #0
    84d0:	d11c      	bne.n	850c <TIM_Init+0x1a0>
	{
		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	613b      	str	r3, [r7, #16]
		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
    84d6:	693b      	ldr	r3, [r7, #16]
    84d8:	781b      	ldrb	r3, [r3, #0]
    84da:	2b00      	cmp	r3, #0
    84dc:	d106      	bne.n	84ec <TIM_Init+0x180>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
    84de:	693b      	ldr	r3, [r7, #16]
    84e0:	685b      	ldr	r3, [r3, #4]
    84e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    84e6:	68fb      	ldr	r3, [r7, #12]
    84e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    84ea:	e021      	b.n	8530 <TIM_Init+0x1c4>
    84ec:	68f8      	ldr	r0, [r7, #12]
    84ee:	f7ff fd83 	bl	7ff8 <converPtrToTimeNum>
    84f2:	4602      	mov	r2, r0
    84f4:	693b      	ldr	r3, [r7, #16]
    84f6:	685b      	ldr	r3, [r3, #4]
    84f8:	4610      	mov	r0, r2
    84fa:	4619      	mov	r1, r3
    84fc:	f7ff fd4a 	bl	7f94 <converUSecToVal>
    8500:	4603      	mov	r3, r0
    8502:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    8506:	68fb      	ldr	r3, [r7, #12]
    8508:	60da      	str	r2, [r3, #12]
    850a:	e011      	b.n	8530 <TIM_Init+0x1c4>
		}
	}
	else
	{

		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	617b      	str	r3, [r7, #20]
		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
    8510:	68fb      	ldr	r3, [r7, #12]
    8512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8514:	f023 020c 	bic.w	r2, r3, #12
    8518:	68fb      	ldr	r3, [r7, #12]
    851a:	629a      	str	r2, [r3, #40]	; 0x28
		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
    851c:	697b      	ldr	r3, [r7, #20]
    851e:	785b      	ldrb	r3, [r3, #1]
    8520:	2b01      	cmp	r3, #1
    8522:	d105      	bne.n	8530 <TIM_Init+0x1c4>
			TIMx->CCR |= _BIT(2);
    8524:	68fb      	ldr	r3, [r7, #12]
    8526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8528:	f043 0204 	orr.w	r2, r3, #4
    852c:	68fb      	ldr	r3, [r7, #12]
    852e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Clear interrupt pending
	TIMx->IR = 0xFFFFFFFF;
    8530:	68fb      	ldr	r3, [r7, #12]
    8532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8536:	601a      	str	r2, [r3, #0]

}
    8538:	f107 0718 	add.w	r7, r7, #24
    853c:	46bd      	mov	sp, r7
    853e:	bd80      	pop	{r7, pc}

00008540 <TIM_DeInit>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		None
 **********************************************************************/
void TIM_DeInit (LPC_TIM_TypeDef *TIMx)
{
    8540:	b580      	push	{r7, lr}
    8542:	b082      	sub	sp, #8
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8548:	687a      	ldr	r2, [r7, #4]
    854a:	f244 0300 	movw	r3, #16384	; 0x4000
    854e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8552:	429a      	cmp	r2, r3
    8554:	d01c      	beq.n	8590 <TIM_DeInit+0x50>
    8556:	687a      	ldr	r2, [r7, #4]
    8558:	f248 0300 	movw	r3, #32768	; 0x8000
    855c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8560:	429a      	cmp	r2, r3
    8562:	d015      	beq.n	8590 <TIM_DeInit+0x50>
    8564:	687a      	ldr	r2, [r7, #4]
    8566:	f240 0300 	movw	r3, #0
    856a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    856e:	429a      	cmp	r2, r3
    8570:	d00e      	beq.n	8590 <TIM_DeInit+0x50>
    8572:	687a      	ldr	r2, [r7, #4]
    8574:	f244 0300 	movw	r3, #16384	; 0x4000
    8578:	f2c4 0309 	movt	r3, #16393	; 0x4009
    857c:	429a      	cmp	r2, r3
    857e:	d007      	beq.n	8590 <TIM_DeInit+0x50>
    8580:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8584:	f2c0 0000 	movt	r0, #0
    8588:	f240 1179 	movw	r1, #377	; 0x179
    858c:	f7fd fe40 	bl	6210 <check_failed>
	// Disable timer/counter
	TIMx->TCR = 0x00;
    8590:	687b      	ldr	r3, [r7, #4]
    8592:	f04f 0200 	mov.w	r2, #0
    8596:	605a      	str	r2, [r3, #4]

	// Disable power
	if (TIMx== LPC_TIM0)
    8598:	687a      	ldr	r2, [r7, #4]
    859a:	f244 0300 	movw	r3, #16384	; 0x4000
    859e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    85a2:	429a      	cmp	r2, r3
    85a4:	d106      	bne.n	85b4 <TIM_DeInit+0x74>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, DISABLE);
    85a6:	f04f 0002 	mov.w	r0, #2
    85aa:	f04f 0100 	mov.w	r1, #0
    85ae:	f7fb fe39 	bl	4224 <CLKPWR_ConfigPPWR>
    85b2:	e028      	b.n	8606 <TIM_DeInit+0xc6>

	else if (TIMx== LPC_TIM1)
    85b4:	687a      	ldr	r2, [r7, #4]
    85b6:	f248 0300 	movw	r3, #32768	; 0x8000
    85ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
    85be:	429a      	cmp	r2, r3
    85c0:	d106      	bne.n	85d0 <TIM_DeInit+0x90>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, DISABLE);
    85c2:	f04f 0004 	mov.w	r0, #4
    85c6:	f04f 0100 	mov.w	r1, #0
    85ca:	f7fb fe2b 	bl	4224 <CLKPWR_ConfigPPWR>
    85ce:	e01a      	b.n	8606 <TIM_DeInit+0xc6>

	else if (TIMx== LPC_TIM2)
    85d0:	687a      	ldr	r2, [r7, #4]
    85d2:	f240 0300 	movw	r3, #0
    85d6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    85da:	429a      	cmp	r2, r3
    85dc:	d106      	bne.n	85ec <TIM_DeInit+0xac>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
    85de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    85e2:	f04f 0100 	mov.w	r1, #0
    85e6:	f7fb fe1d 	bl	4224 <CLKPWR_ConfigPPWR>
    85ea:	e00c      	b.n	8606 <TIM_DeInit+0xc6>

	else if (TIMx== LPC_TIM3)
    85ec:	687a      	ldr	r2, [r7, #4]
    85ee:	f244 0300 	movw	r3, #16384	; 0x4000
    85f2:	f2c4 0309 	movt	r3, #16393	; 0x4009
    85f6:	429a      	cmp	r2, r3
    85f8:	d105      	bne.n	8606 <TIM_DeInit+0xc6>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
    85fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    85fe:	f04f 0100 	mov.w	r1, #0
    8602:	f7fb fe0f 	bl	4224 <CLKPWR_ConfigPPWR>

}
    8606:	f107 0708 	add.w	r7, r7, #8
    860a:	46bd      	mov	sp, r7
    860c:	bd80      	pop	{r7, pc}
    860e:	bf00      	nop

00008610 <TIM_Cmd>:
 * 				-	ENABLE  : set timer enable
 * 				-	DISABLE : disable timer
 * @return 		None
 **********************************************************************/
void TIM_Cmd(LPC_TIM_TypeDef *TIMx, FunctionalState NewState)
{
    8610:	b580      	push	{r7, lr}
    8612:	b082      	sub	sp, #8
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
    8618:	460b      	mov	r3, r1
    861a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    861c:	687a      	ldr	r2, [r7, #4]
    861e:	f244 0300 	movw	r3, #16384	; 0x4000
    8622:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8626:	429a      	cmp	r2, r3
    8628:	d01c      	beq.n	8664 <TIM_Cmd+0x54>
    862a:	687a      	ldr	r2, [r7, #4]
    862c:	f248 0300 	movw	r3, #32768	; 0x8000
    8630:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8634:	429a      	cmp	r2, r3
    8636:	d015      	beq.n	8664 <TIM_Cmd+0x54>
    8638:	687a      	ldr	r2, [r7, #4]
    863a:	f240 0300 	movw	r3, #0
    863e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8642:	429a      	cmp	r2, r3
    8644:	d00e      	beq.n	8664 <TIM_Cmd+0x54>
    8646:	687a      	ldr	r2, [r7, #4]
    8648:	f244 0300 	movw	r3, #16384	; 0x4000
    864c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8650:	429a      	cmp	r2, r3
    8652:	d007      	beq.n	8664 <TIM_Cmd+0x54>
    8654:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8658:	f2c0 0000 	movt	r0, #0
    865c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    8660:	f7fd fdd6 	bl	6210 <check_failed>
	if (NewState == ENABLE)
    8664:	78fb      	ldrb	r3, [r7, #3]
    8666:	2b01      	cmp	r3, #1
    8668:	d106      	bne.n	8678 <TIM_Cmd+0x68>
	{
		TIMx->TCR	|=  TIM_ENABLE;
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	685b      	ldr	r3, [r3, #4]
    866e:	f043 0201 	orr.w	r2, r3, #1
    8672:	687b      	ldr	r3, [r7, #4]
    8674:	605a      	str	r2, [r3, #4]
    8676:	e005      	b.n	8684 <TIM_Cmd+0x74>
	}
	else
	{
		TIMx->TCR &= ~TIM_ENABLE;
    8678:	687b      	ldr	r3, [r7, #4]
    867a:	685b      	ldr	r3, [r3, #4]
    867c:	f023 0201 	bic.w	r2, r3, #1
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	605a      	str	r2, [r3, #4]
	}
}
    8684:	f107 0708 	add.w	r7, r7, #8
    8688:	46bd      	mov	sp, r7
    868a:	bd80      	pop	{r7, pc}

0000868c <TIM_ResetCounter>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		None
 **********************************************************************/
void TIM_ResetCounter(LPC_TIM_TypeDef *TIMx)
{
    868c:	b580      	push	{r7, lr}
    868e:	b082      	sub	sp, #8
    8690:	af00      	add	r7, sp, #0
    8692:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8694:	687a      	ldr	r2, [r7, #4]
    8696:	f244 0300 	movw	r3, #16384	; 0x4000
    869a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    869e:	429a      	cmp	r2, r3
    86a0:	d01c      	beq.n	86dc <TIM_ResetCounter+0x50>
    86a2:	687a      	ldr	r2, [r7, #4]
    86a4:	f248 0300 	movw	r3, #32768	; 0x8000
    86a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    86ac:	429a      	cmp	r2, r3
    86ae:	d015      	beq.n	86dc <TIM_ResetCounter+0x50>
    86b0:	687a      	ldr	r2, [r7, #4]
    86b2:	f240 0300 	movw	r3, #0
    86b6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    86ba:	429a      	cmp	r2, r3
    86bc:	d00e      	beq.n	86dc <TIM_ResetCounter+0x50>
    86be:	687a      	ldr	r2, [r7, #4]
    86c0:	f244 0300 	movw	r3, #16384	; 0x4000
    86c4:	f2c4 0309 	movt	r3, #16393	; 0x4009
    86c8:	429a      	cmp	r2, r3
    86ca:	d007      	beq.n	86dc <TIM_ResetCounter+0x50>
    86cc:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    86d0:	f2c0 0000 	movt	r0, #0
    86d4:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    86d8:	f7fd fd9a 	bl	6210 <check_failed>
	TIMx->TCR |= TIM_RESET;
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	685b      	ldr	r3, [r3, #4]
    86e0:	f043 0202 	orr.w	r2, r3, #2
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	605a      	str	r2, [r3, #4]
	TIMx->TCR &= ~TIM_RESET;
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	685b      	ldr	r3, [r3, #4]
    86ec:	f023 0202 	bic.w	r2, r3, #2
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	605a      	str	r2, [r3, #4]
}
    86f4:	f107 0708 	add.w	r7, r7, #8
    86f8:	46bd      	mov	sp, r7
    86fa:	bd80      	pop	{r7, pc}

000086fc <TIM_ConfigMatch>:
 *						 + 	 3: Toggle external output pin if match
 *					MatchValue: Set the value to be compared with TC value
 * @return 		None
 **********************************************************************/
void TIM_ConfigMatch(LPC_TIM_TypeDef *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
{
    86fc:	b580      	push	{r7, lr}
    86fe:	b082      	sub	sp, #8
    8700:	af00      	add	r7, sp, #0
    8702:	6078      	str	r0, [r7, #4]
    8704:	6039      	str	r1, [r7, #0]

	CHECK_PARAM(PARAM_TIMx(TIMx));
    8706:	687a      	ldr	r2, [r7, #4]
    8708:	f244 0300 	movw	r3, #16384	; 0x4000
    870c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8710:	429a      	cmp	r2, r3
    8712:	d01c      	beq.n	874e <TIM_ConfigMatch+0x52>
    8714:	687a      	ldr	r2, [r7, #4]
    8716:	f248 0300 	movw	r3, #32768	; 0x8000
    871a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    871e:	429a      	cmp	r2, r3
    8720:	d015      	beq.n	874e <TIM_ConfigMatch+0x52>
    8722:	687a      	ldr	r2, [r7, #4]
    8724:	f240 0300 	movw	r3, #0
    8728:	f2c4 0309 	movt	r3, #16393	; 0x4009
    872c:	429a      	cmp	r2, r3
    872e:	d00e      	beq.n	874e <TIM_ConfigMatch+0x52>
    8730:	687a      	ldr	r2, [r7, #4]
    8732:	f244 0300 	movw	r3, #16384	; 0x4000
    8736:	f2c4 0309 	movt	r3, #16393	; 0x4009
    873a:	429a      	cmp	r2, r3
    873c:	d007      	beq.n	874e <TIM_ConfigMatch+0x52>
    873e:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8742:	f2c0 0000 	movt	r0, #0
    8746:	f240 11d1 	movw	r1, #465	; 0x1d1
    874a:	f7fd fd61 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
    874e:	683b      	ldr	r3, [r7, #0]
    8750:	791b      	ldrb	r3, [r3, #4]
    8752:	2b00      	cmp	r3, #0
    8754:	d013      	beq.n	877e <TIM_ConfigMatch+0x82>
    8756:	683b      	ldr	r3, [r7, #0]
    8758:	791b      	ldrb	r3, [r3, #4]
    875a:	2b01      	cmp	r3, #1
    875c:	d00f      	beq.n	877e <TIM_ConfigMatch+0x82>
    875e:	683b      	ldr	r3, [r7, #0]
    8760:	791b      	ldrb	r3, [r3, #4]
    8762:	2b02      	cmp	r3, #2
    8764:	d00b      	beq.n	877e <TIM_ConfigMatch+0x82>
    8766:	683b      	ldr	r3, [r7, #0]
    8768:	791b      	ldrb	r3, [r3, #4]
    876a:	2b03      	cmp	r3, #3
    876c:	d007      	beq.n	877e <TIM_ConfigMatch+0x82>
    876e:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8772:	f2c0 0000 	movt	r0, #0
    8776:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    877a:	f7fd fd49 	bl	6210 <check_failed>

	switch(TIM_MatchConfigStruct->MatchChannel)
    877e:	683b      	ldr	r3, [r7, #0]
    8780:	781b      	ldrb	r3, [r3, #0]
    8782:	2b03      	cmp	r3, #3
    8784:	d81e      	bhi.n	87c4 <TIM_ConfigMatch+0xc8>
    8786:	a201      	add	r2, pc, #4	; (adr r2, 878c <TIM_ConfigMatch+0x90>)
    8788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    878c:	0000879d 	.word	0x0000879d
    8790:	000087a7 	.word	0x000087a7
    8794:	000087b1 	.word	0x000087b1
    8798:	000087bb 	.word	0x000087bb
	{
	case 0:
		TIMx->MR0 = TIM_MatchConfigStruct->MatchValue;
    879c:	683b      	ldr	r3, [r7, #0]
    879e:	689a      	ldr	r2, [r3, #8]
    87a0:	687b      	ldr	r3, [r7, #4]
    87a2:	619a      	str	r2, [r3, #24]
		break;
    87a4:	e00f      	b.n	87c6 <TIM_ConfigMatch+0xca>
	case 1:
		TIMx->MR1 = TIM_MatchConfigStruct->MatchValue;
    87a6:	683b      	ldr	r3, [r7, #0]
    87a8:	689a      	ldr	r2, [r3, #8]
    87aa:	687b      	ldr	r3, [r7, #4]
    87ac:	61da      	str	r2, [r3, #28]
		break;
    87ae:	e00a      	b.n	87c6 <TIM_ConfigMatch+0xca>
	case 2:
		TIMx->MR2 = TIM_MatchConfigStruct->MatchValue;
    87b0:	683b      	ldr	r3, [r7, #0]
    87b2:	689a      	ldr	r2, [r3, #8]
    87b4:	687b      	ldr	r3, [r7, #4]
    87b6:	621a      	str	r2, [r3, #32]
		break;
    87b8:	e005      	b.n	87c6 <TIM_ConfigMatch+0xca>
	case 3:
		TIMx->MR3 = TIM_MatchConfigStruct->MatchValue;
    87ba:	683b      	ldr	r3, [r7, #0]
    87bc:	689a      	ldr	r2, [r3, #8]
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    87c2:	e000      	b.n	87c6 <TIM_ConfigMatch+0xca>
	default:
		//Error match value
		//Error loop
		while(1);
    87c4:	e7fe      	b.n	87c4 <TIM_ConfigMatch+0xc8>
	}
	//interrupt on MRn
	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	6959      	ldr	r1, [r3, #20]
    87ca:	683b      	ldr	r3, [r7, #0]
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	461a      	mov	r2, r3
    87d0:	4613      	mov	r3, r2
    87d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    87d6:	4413      	add	r3, r2
    87d8:	f04f 0207 	mov.w	r2, #7
    87dc:	fa02 f303 	lsl.w	r3, r2, r3
    87e0:	ea6f 0303 	mvn.w	r3, r3
    87e4:	ea01 0203 	and.w	r2, r1, r3
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	615a      	str	r2, [r3, #20]

	if (TIM_MatchConfigStruct->IntOnMatch)
    87ec:	683b      	ldr	r3, [r7, #0]
    87ee:	785b      	ldrb	r3, [r3, #1]
    87f0:	2b00      	cmp	r3, #0
    87f2:	d010      	beq.n	8816 <TIM_ConfigMatch+0x11a>
		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	6959      	ldr	r1, [r3, #20]
    87f8:	683b      	ldr	r3, [r7, #0]
    87fa:	781b      	ldrb	r3, [r3, #0]
    87fc:	461a      	mov	r2, r3
    87fe:	4613      	mov	r3, r2
    8800:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8804:	4413      	add	r3, r2
    8806:	f04f 0201 	mov.w	r2, #1
    880a:	fa02 f303 	lsl.w	r3, r2, r3
    880e:	ea41 0203 	orr.w	r2, r1, r3
    8812:	687b      	ldr	r3, [r7, #4]
    8814:	615a      	str	r2, [r3, #20]

	//reset on MRn
	if (TIM_MatchConfigStruct->ResetOnMatch)
    8816:	683b      	ldr	r3, [r7, #0]
    8818:	78db      	ldrb	r3, [r3, #3]
    881a:	2b00      	cmp	r3, #0
    881c:	d012      	beq.n	8844 <TIM_ConfigMatch+0x148>
		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	6959      	ldr	r1, [r3, #20]
    8822:	683b      	ldr	r3, [r7, #0]
    8824:	781b      	ldrb	r3, [r3, #0]
    8826:	461a      	mov	r2, r3
    8828:	4613      	mov	r3, r2
    882a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    882e:	4413      	add	r3, r2
    8830:	f103 0301 	add.w	r3, r3, #1
    8834:	f04f 0201 	mov.w	r2, #1
    8838:	fa02 f303 	lsl.w	r3, r2, r3
    883c:	ea41 0203 	orr.w	r2, r1, r3
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	615a      	str	r2, [r3, #20]

	//stop on MRn
	if (TIM_MatchConfigStruct->StopOnMatch)
    8844:	683b      	ldr	r3, [r7, #0]
    8846:	789b      	ldrb	r3, [r3, #2]
    8848:	2b00      	cmp	r3, #0
    884a:	d012      	beq.n	8872 <TIM_ConfigMatch+0x176>
		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    884c:	687b      	ldr	r3, [r7, #4]
    884e:	6959      	ldr	r1, [r3, #20]
    8850:	683b      	ldr	r3, [r7, #0]
    8852:	781b      	ldrb	r3, [r3, #0]
    8854:	461a      	mov	r2, r3
    8856:	4613      	mov	r3, r2
    8858:	ea4f 0343 	mov.w	r3, r3, lsl #1
    885c:	4413      	add	r3, r2
    885e:	f103 0302 	add.w	r3, r3, #2
    8862:	f04f 0201 	mov.w	r2, #1
    8866:	fa02 f303 	lsl.w	r3, r2, r3
    886a:	ea41 0203 	orr.w	r2, r1, r3
    886e:	687b      	ldr	r3, [r7, #4]
    8870:	615a      	str	r2, [r3, #20]

	// match output type

	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8876:	683b      	ldr	r3, [r7, #0]
    8878:	781b      	ldrb	r3, [r3, #0]
    887a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    887e:	f103 0304 	add.w	r3, r3, #4
    8882:	f04f 0103 	mov.w	r1, #3
    8886:	fa01 f303 	lsl.w	r3, r1, r3
    888a:	ea6f 0303 	mvn.w	r3, r3
    888e:	ea02 0203 	and.w	r2, r2, r3
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    889a:	683b      	ldr	r3, [r7, #0]
    889c:	791b      	ldrb	r3, [r3, #4]
    889e:	f003 0103 	and.w	r1, r3, #3
    88a2:	683b      	ldr	r3, [r7, #0]
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    88aa:	f103 0304 	add.w	r3, r3, #4
    88ae:	fa01 f303 	lsl.w	r3, r1, r3
    88b2:	ea42 0203 	orr.w	r2, r2, r3
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
    88ba:	f107 0708 	add.w	r7, r7, #8
    88be:	46bd      	mov	sp, r7
    88c0:	bd80      	pop	{r7, pc}
    88c2:	bf00      	nop

000088c4 <TIM_UpdateMatchValue>:
 * @param[in]	MatchChannel	Match channel, should be: 0..3
 * @param[in]	MatchValue		updated match value
 * @return 		None
 **********************************************************************/
void TIM_UpdateMatchValue(LPC_TIM_TypeDef *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
{
    88c4:	b580      	push	{r7, lr}
    88c6:	b084      	sub	sp, #16
    88c8:	af00      	add	r7, sp, #0
    88ca:	60f8      	str	r0, [r7, #12]
    88cc:	460b      	mov	r3, r1
    88ce:	607a      	str	r2, [r7, #4]
    88d0:	72fb      	strb	r3, [r7, #11]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    88d2:	68fa      	ldr	r2, [r7, #12]
    88d4:	f244 0300 	movw	r3, #16384	; 0x4000
    88d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    88dc:	429a      	cmp	r2, r3
    88de:	d01c      	beq.n	891a <TIM_UpdateMatchValue+0x56>
    88e0:	68fa      	ldr	r2, [r7, #12]
    88e2:	f248 0300 	movw	r3, #32768	; 0x8000
    88e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    88ea:	429a      	cmp	r2, r3
    88ec:	d015      	beq.n	891a <TIM_UpdateMatchValue+0x56>
    88ee:	68fa      	ldr	r2, [r7, #12]
    88f0:	f240 0300 	movw	r3, #0
    88f4:	f2c4 0309 	movt	r3, #16393	; 0x4009
    88f8:	429a      	cmp	r2, r3
    88fa:	d00e      	beq.n	891a <TIM_UpdateMatchValue+0x56>
    88fc:	68fa      	ldr	r2, [r7, #12]
    88fe:	f244 0300 	movw	r3, #16384	; 0x4000
    8902:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8906:	429a      	cmp	r2, r3
    8908:	d007      	beq.n	891a <TIM_UpdateMatchValue+0x56>
    890a:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    890e:	f2c0 0000 	movt	r0, #0
    8912:	f240 2107 	movw	r1, #519	; 0x207
    8916:	f7fd fc7b 	bl	6210 <check_failed>
	switch(MatchChannel)
    891a:	7afb      	ldrb	r3, [r7, #11]
    891c:	2b03      	cmp	r3, #3
    891e:	d81c      	bhi.n	895a <TIM_UpdateMatchValue+0x96>
    8920:	a201      	add	r2, pc, #4	; (adr r2, 8928 <TIM_UpdateMatchValue+0x64>)
    8922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8926:	bf00      	nop
    8928:	00008939 	.word	0x00008939
    892c:	00008941 	.word	0x00008941
    8930:	00008949 	.word	0x00008949
    8934:	00008951 	.word	0x00008951
	{
	case 0:
		TIMx->MR0 = MatchValue;
    8938:	68fb      	ldr	r3, [r7, #12]
    893a:	687a      	ldr	r2, [r7, #4]
    893c:	619a      	str	r2, [r3, #24]
		break;
    893e:	e00d      	b.n	895c <TIM_UpdateMatchValue+0x98>
	case 1:
		TIMx->MR1 = MatchValue;
    8940:	68fb      	ldr	r3, [r7, #12]
    8942:	687a      	ldr	r2, [r7, #4]
    8944:	61da      	str	r2, [r3, #28]
		break;
    8946:	e009      	b.n	895c <TIM_UpdateMatchValue+0x98>
	case 2:
		TIMx->MR2 = MatchValue;
    8948:	68fb      	ldr	r3, [r7, #12]
    894a:	687a      	ldr	r2, [r7, #4]
    894c:	621a      	str	r2, [r3, #32]
		break;
    894e:	e005      	b.n	895c <TIM_UpdateMatchValue+0x98>
	case 3:
		TIMx->MR3 = MatchValue;
    8950:	68fb      	ldr	r3, [r7, #12]
    8952:	687a      	ldr	r2, [r7, #4]
    8954:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    8956:	bf00      	nop
    8958:	e000      	b.n	895c <TIM_UpdateMatchValue+0x98>
	default:
		//Error Loop
		while(1);
    895a:	e7fe      	b.n	895a <TIM_UpdateMatchValue+0x96>
	}

}
    895c:	f107 0710 	add.w	r7, r7, #16
    8960:	46bd      	mov	sp, r7
    8962:	bd80      	pop	{r7, pc}

00008964 <TIM_ConfigCapture>:
 * 					- IntOnCaption  : if SET, Capture generate interrupt
 * @param[in]   TIM_CaptureConfigStruct	Pointer to TIM_CAPTURECFG_Type
 * @return 		None
 **********************************************************************/
void TIM_ConfigCapture(LPC_TIM_TypeDef *TIMx, TIM_CAPTURECFG_Type *TIM_CaptureConfigStruct)
{
    8964:	b580      	push	{r7, lr}
    8966:	b082      	sub	sp, #8
    8968:	af00      	add	r7, sp, #0
    896a:	6078      	str	r0, [r7, #4]
    896c:	6039      	str	r1, [r7, #0]

	CHECK_PARAM(PARAM_TIMx(TIMx));
    896e:	687a      	ldr	r2, [r7, #4]
    8970:	f244 0300 	movw	r3, #16384	; 0x4000
    8974:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8978:	429a      	cmp	r2, r3
    897a:	d01c      	beq.n	89b6 <TIM_ConfigCapture+0x52>
    897c:	687a      	ldr	r2, [r7, #4]
    897e:	f248 0300 	movw	r3, #32768	; 0x8000
    8982:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8986:	429a      	cmp	r2, r3
    8988:	d015      	beq.n	89b6 <TIM_ConfigCapture+0x52>
    898a:	687a      	ldr	r2, [r7, #4]
    898c:	f240 0300 	movw	r3, #0
    8990:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8994:	429a      	cmp	r2, r3
    8996:	d00e      	beq.n	89b6 <TIM_ConfigCapture+0x52>
    8998:	687a      	ldr	r2, [r7, #4]
    899a:	f244 0300 	movw	r3, #16384	; 0x4000
    899e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    89a2:	429a      	cmp	r2, r3
    89a4:	d007      	beq.n	89b6 <TIM_ConfigCapture+0x52>
    89a6:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    89aa:	f2c0 0000 	movt	r0, #0
    89ae:	f240 212d 	movw	r1, #557	; 0x22d
    89b2:	f7fd fc2d 	bl	6210 <check_failed>
	TIMx->CCR &= ~TIM_CCR_CHANNEL_MASKBIT(TIM_CaptureConfigStruct->CaptureChannel);
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    89ba:	683b      	ldr	r3, [r7, #0]
    89bc:	781b      	ldrb	r3, [r3, #0]
    89be:	461a      	mov	r2, r3
    89c0:	4613      	mov	r3, r2
    89c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    89c6:	4413      	add	r3, r2
    89c8:	f04f 0207 	mov.w	r2, #7
    89cc:	fa02 f303 	lsl.w	r3, r2, r3
    89d0:	ea6f 0303 	mvn.w	r3, r3
    89d4:	ea01 0203 	and.w	r2, r1, r3
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->RisingEdge)
    89dc:	683b      	ldr	r3, [r7, #0]
    89de:	785b      	ldrb	r3, [r3, #1]
    89e0:	2b00      	cmp	r3, #0
    89e2:	d010      	beq.n	8a06 <TIM_ConfigCapture+0xa2>
		TIMx->CCR |= TIM_CAP_RISING(TIM_CaptureConfigStruct->CaptureChannel);
    89e4:	687b      	ldr	r3, [r7, #4]
    89e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    89e8:	683b      	ldr	r3, [r7, #0]
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	461a      	mov	r2, r3
    89ee:	4613      	mov	r3, r2
    89f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    89f4:	4413      	add	r3, r2
    89f6:	f04f 0201 	mov.w	r2, #1
    89fa:	fa02 f303 	lsl.w	r3, r2, r3
    89fe:	ea41 0203 	orr.w	r2, r1, r3
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->FallingEdge)
    8a06:	683b      	ldr	r3, [r7, #0]
    8a08:	789b      	ldrb	r3, [r3, #2]
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	d012      	beq.n	8a34 <TIM_ConfigCapture+0xd0>
		TIMx->CCR |= TIM_CAP_FALLING(TIM_CaptureConfigStruct->CaptureChannel);
    8a0e:	687b      	ldr	r3, [r7, #4]
    8a10:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8a12:	683b      	ldr	r3, [r7, #0]
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	461a      	mov	r2, r3
    8a18:	4613      	mov	r3, r2
    8a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8a1e:	4413      	add	r3, r2
    8a20:	f103 0301 	add.w	r3, r3, #1
    8a24:	f04f 0201 	mov.w	r2, #1
    8a28:	fa02 f303 	lsl.w	r3, r2, r3
    8a2c:	ea41 0203 	orr.w	r2, r1, r3
    8a30:	687b      	ldr	r3, [r7, #4]
    8a32:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIM_CaptureConfigStruct->IntOnCaption)
    8a34:	683b      	ldr	r3, [r7, #0]
    8a36:	78db      	ldrb	r3, [r3, #3]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d012      	beq.n	8a62 <TIM_ConfigCapture+0xfe>
		TIMx->CCR |= TIM_INT_ON_CAP(TIM_CaptureConfigStruct->CaptureChannel);
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8a40:	683b      	ldr	r3, [r7, #0]
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	461a      	mov	r2, r3
    8a46:	4613      	mov	r3, r2
    8a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8a4c:	4413      	add	r3, r2
    8a4e:	f103 0302 	add.w	r3, r3, #2
    8a52:	f04f 0201 	mov.w	r2, #1
    8a56:	fa02 f303 	lsl.w	r3, r2, r3
    8a5a:	ea41 0203 	orr.w	r2, r1, r3
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	629a      	str	r2, [r3, #40]	; 0x28
}
    8a62:	f107 0708 	add.w	r7, r7, #8
    8a66:	46bd      	mov	sp, r7
    8a68:	bd80      	pop	{r7, pc}
    8a6a:	bf00      	nop

00008a6c <TIM_GetCaptureValue>:
 * 				- TIM_COUNTER_INCAP0: CAPn.0 input pin for TIMERn
 * 				- TIM_COUNTER_INCAP1: CAPn.1 input pin for TIMERn
 * @return 		Value of capture register
 **********************************************************************/
uint32_t TIM_GetCaptureValue(LPC_TIM_TypeDef *TIMx, TIM_COUNTER_INPUT_OPT CaptureChannel)
{
    8a6c:	b580      	push	{r7, lr}
    8a6e:	b082      	sub	sp, #8
    8a70:	af00      	add	r7, sp, #0
    8a72:	6078      	str	r0, [r7, #4]
    8a74:	460b      	mov	r3, r1
    8a76:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_TIMx(TIMx));
    8a78:	687a      	ldr	r2, [r7, #4]
    8a7a:	f244 0300 	movw	r3, #16384	; 0x4000
    8a7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8a82:	429a      	cmp	r2, r3
    8a84:	d01c      	beq.n	8ac0 <TIM_GetCaptureValue+0x54>
    8a86:	687a      	ldr	r2, [r7, #4]
    8a88:	f248 0300 	movw	r3, #32768	; 0x8000
    8a8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8a90:	429a      	cmp	r2, r3
    8a92:	d015      	beq.n	8ac0 <TIM_GetCaptureValue+0x54>
    8a94:	687a      	ldr	r2, [r7, #4]
    8a96:	f240 0300 	movw	r3, #0
    8a9a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8a9e:	429a      	cmp	r2, r3
    8aa0:	d00e      	beq.n	8ac0 <TIM_GetCaptureValue+0x54>
    8aa2:	687a      	ldr	r2, [r7, #4]
    8aa4:	f244 0300 	movw	r3, #16384	; 0x4000
    8aa8:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8aac:	429a      	cmp	r2, r3
    8aae:	d007      	beq.n	8ac0 <TIM_GetCaptureValue+0x54>
    8ab0:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8ab4:	f2c0 0000 	movt	r0, #0
    8ab8:	f44f 7112 	mov.w	r1, #584	; 0x248
    8abc:	f7fd fba8 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_TIM_COUNTER_INPUT_OPT(CaptureChannel));
    8ac0:	78fb      	ldrb	r3, [r7, #3]
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d00a      	beq.n	8adc <TIM_GetCaptureValue+0x70>
    8ac6:	78fb      	ldrb	r3, [r7, #3]
    8ac8:	2b01      	cmp	r3, #1
    8aca:	d007      	beq.n	8adc <TIM_GetCaptureValue+0x70>
    8acc:	f24b 30ac 	movw	r0, #45996	; 0xb3ac
    8ad0:	f2c0 0000 	movt	r0, #0
    8ad4:	f240 2149 	movw	r1, #585	; 0x249
    8ad8:	f7fd fb9a 	bl	6210 <check_failed>

	if(CaptureChannel==0)
    8adc:	78fb      	ldrb	r3, [r7, #3]
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d102      	bne.n	8ae8 <TIM_GetCaptureValue+0x7c>
		return TIMx->CR0;
    8ae2:	687b      	ldr	r3, [r7, #4]
    8ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8ae6:	e001      	b.n	8aec <TIM_GetCaptureValue+0x80>
	else
		return TIMx->CR1;
    8ae8:	687b      	ldr	r3, [r7, #4]
    8aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    8aec:	4618      	mov	r0, r3
    8aee:	f107 0708 	add.w	r7, r7, #8
    8af2:	46bd      	mov	sp, r7
    8af4:	bd80      	pop	{r7, pc}
    8af6:	bf00      	nop

00008af8 <uart_set_divisors>:
 * @return 		Error status, could be:
 * 				- SUCCESS
 * 				- ERROR
 **********************************************************************/
static Status uart_set_divisors(LPC_UART_TypeDef *UARTx, uint32_t baudrate)
{
    8af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    8afc:	b098      	sub	sp, #96	; 0x60
    8afe:	af00      	add	r7, sp, #0
    8b00:	61f8      	str	r0, [r7, #28]
    8b02:	61b9      	str	r1, [r7, #24]
	Status errorStatus = ERROR;
    8b04:	f04f 0300 	mov.w	r3, #0
    8b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == LPC_UART0)
    8b0c:	69fa      	ldr	r2, [r7, #28]
    8b0e:	f24c 0300 	movw	r3, #49152	; 0xc000
    8b12:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8b16:	429a      	cmp	r2, r3
    8b18:	d106      	bne.n	8b28 <uart_set_divisors+0x30>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    8b1a:	f04f 0006 	mov.w	r0, #6
    8b1e:	f7fb fb49 	bl	41b4 <CLKPWR_GetPCLK>
    8b22:	4603      	mov	r3, r0
    8b24:	62bb      	str	r3, [r7, #40]	; 0x28
    8b26:	e028      	b.n	8b7a <uart_set_divisors+0x82>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    8b28:	69fa      	ldr	r2, [r7, #28]
    8b2a:	f240 0300 	movw	r3, #0
    8b2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    8b32:	429a      	cmp	r2, r3
    8b34:	d106      	bne.n	8b44 <uart_set_divisors+0x4c>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    8b36:	f04f 0008 	mov.w	r0, #8
    8b3a:	f7fb fb3b 	bl	41b4 <CLKPWR_GetPCLK>
    8b3e:	4603      	mov	r3, r0
    8b40:	62bb      	str	r3, [r7, #40]	; 0x28
    8b42:	e01a      	b.n	8b7a <uart_set_divisors+0x82>
	}
	else if (UARTx == LPC_UART2)
    8b44:	69fa      	ldr	r2, [r7, #28]
    8b46:	f248 0300 	movw	r3, #32768	; 0x8000
    8b4a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8b4e:	429a      	cmp	r2, r3
    8b50:	d106      	bne.n	8b60 <uart_set_divisors+0x68>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    8b52:	f04f 0030 	mov.w	r0, #48	; 0x30
    8b56:	f7fb fb2d 	bl	41b4 <CLKPWR_GetPCLK>
    8b5a:	4603      	mov	r3, r0
    8b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    8b5e:	e00c      	b.n	8b7a <uart_set_divisors+0x82>
	}
	else if (UARTx == LPC_UART3)
    8b60:	69fa      	ldr	r2, [r7, #28]
    8b62:	f24c 0300 	movw	r3, #49152	; 0xc000
    8b66:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8b6a:	429a      	cmp	r2, r3
    8b6c:	d105      	bne.n	8b7a <uart_set_divisors+0x82>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    8b6e:	f04f 0032 	mov.w	r0, #50	; 0x32
    8b72:	f7fb fb1f 	bl	41b4 <CLKPWR_GetPCLK>
    8b76:	4603      	mov	r3, r0
    8b78:	62bb      	str	r3, [r7, #40]	; 0x28
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    8b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b7e:	65bb      	str	r3, [r7, #88]	; 0x58
	bestd = 0;
    8b80:	f04f 0300 	mov.w	r3, #0
    8b84:	637b      	str	r3, [r7, #52]	; 0x34
	bestm = 0;
    8b86:	f04f 0300 	mov.w	r3, #0
    8b8a:	63bb      	str	r3, [r7, #56]	; 0x38
	best_divisor = 0;
    8b8c:	f04f 0200 	mov.w	r2, #0
    8b90:	f04f 0300 	mov.w	r3, #0
    8b94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	for (m = 1 ; m <= 15 ;m++)
    8b98:	f04f 0301 	mov.w	r3, #1
    8b9c:	633b      	str	r3, [r7, #48]	; 0x30
    8b9e:	e078      	b.n	8c92 <uart_set_divisors+0x19a>
	{
		for (d = 0 ; d < m ; d++)
    8ba0:	f04f 0300 	mov.w	r3, #0
    8ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ba6:	e067      	b.n	8c78 <uart_set_divisors+0x180>
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    8ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8baa:	461a      	mov	r2, r3
    8bac:	f04f 0300 	mov.w	r3, #0
    8bb0:	ea4f 1112 	mov.w	r1, r2, lsr #4
    8bb4:	ea4f 7503 	mov.w	r5, r3, lsl #28
    8bb8:	ea41 0505 	orr.w	r5, r1, r5
    8bbc:	ea4f 7402 	mov.w	r4, r2, lsl #28
    8bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8bc2:	461a      	mov	r2, r3
    8bc4:	f04f 0300 	mov.w	r3, #0
    8bc8:	fb02 f105 	mul.w	r1, r2, r5
    8bcc:	fb04 f003 	mul.w	r0, r4, r3
    8bd0:	4401      	add	r1, r0
    8bd2:	fba4 2302 	umull	r2, r3, r4, r2
    8bd6:	4419      	add	r1, r3
    8bd8:	460b      	mov	r3, r1
    8bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
    8bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    8bde:	4401      	add	r1, r0
    8be0:	69b8      	ldr	r0, [r7, #24]
    8be2:	fb00 f001 	mul.w	r0, r0, r1
    8be6:	6078      	str	r0, [r7, #4]
    8be8:	6879      	ldr	r1, [r7, #4]
    8bea:	4608      	mov	r0, r1
    8bec:	f04f 0100 	mov.w	r1, #0
    8bf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
    8bf4:	4610      	mov	r0, r2
    8bf6:	4619      	mov	r1, r3
    8bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    8bfc:	f001 fe4c 	bl	a898 <__aeabi_uldivmod>
    8c00:	4602      	mov	r2, r0
    8c02:	460b      	mov	r3, r1
    8c04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		  current_error = divisor & 0xFFFFFFFF;
    8c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c0a:	657b      	str	r3, [r7, #84]	; 0x54

		  tmp = divisor>>32;
    8c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8c0e:	461b      	mov	r3, r3
    8c10:	613b      	str	r3, [r7, #16]
    8c12:	f04f 0300 	mov.w	r3, #0
    8c16:	617b      	str	r3, [r7, #20]
    8c18:	693b      	ldr	r3, [r7, #16]
    8c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    8c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c22:	d907      	bls.n	8c34 <uart_set_divisors+0x13c>
			current_error = -current_error;
    8c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8c26:	f1c3 0300 	rsb	r3, r3, #0
    8c2a:	657b      	str	r3, [r7, #84]	; 0x54
			tmp++;
    8c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c2e:	f103 0301 	add.w	r3, r3, #1
    8c32:	63fb      	str	r3, [r7, #60]	; 0x3c
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    8c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c36:	2b00      	cmp	r3, #0
    8c38:	d017      	beq.n	8c6a <uart_set_divisors+0x172>
    8c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8c40:	d815      	bhi.n	8c6e <uart_set_divisors+0x176>
		  continue;

		  if( current_error < best_error){
    8c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    8c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8c46:	429a      	cmp	r2, r3
    8c48:	d212      	bcs.n	8c70 <uart_set_divisors+0x178>
			best_error = current_error;
    8c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    8c4c:	65bb      	str	r3, [r7, #88]	; 0x58
			best_divisor = tmp;
    8c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c50:	461a      	mov	r2, r3
    8c52:	f04f 0300 	mov.w	r3, #0
    8c56:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			bestd = d;
    8c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c5c:	637b      	str	r3, [r7, #52]	; 0x34
			bestm = m;
    8c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c60:	63bb      	str	r3, [r7, #56]	; 0x38
			if(best_error == 0) break;
    8c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8c64:	2b00      	cmp	r3, #0
    8c66:	d00c      	beq.n	8c82 <uart_set_divisors+0x18a>
    8c68:	e002      	b.n	8c70 <uart_set_divisors+0x178>
			current_error = -current_error;
			tmp++;
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
		  continue;
    8c6a:	bf00      	nop
    8c6c:	e000      	b.n	8c70 <uart_set_divisors+0x178>
    8c6e:	bf00      	nop
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    8c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c72:	f103 0301 	add.w	r3, r3, #1
    8c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    8c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c7c:	429a      	cmp	r2, r3
    8c7e:	d393      	bcc.n	8ba8 <uart_set_divisors+0xb0>
    8c80:	e000      	b.n	8c84 <uart_set_divisors+0x18c>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    8c82:	bf00      	nop
			}
		} /* end of inner for loop */

		if (best_error == 0)
    8c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8c86:	2b00      	cmp	r3, #0
    8c88:	d007      	beq.n	8c9a <uart_set_divisors+0x1a2>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    8c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c8c:	f103 0301 	add.w	r3, r3, #1
    8c90:	633b      	str	r3, [r7, #48]	; 0x30
    8c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c94:	2b0f      	cmp	r3, #15
    8c96:	d983      	bls.n	8ba0 <uart_set_divisors+0xa8>
    8c98:	e000      	b.n	8c9c <uart_set_divisors+0x1a4>
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
		  break;
    8c9a:	bf00      	nop
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    8c9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    8ca0:	ea52 0003 	orrs.w	r0, r2, r3
    8ca4:	d102      	bne.n	8cac <uart_set_divisors+0x1b4>
    8ca6:	f04f 0300 	mov.w	r3, #0
    8caa:	e0b0      	b.n	8e0e <uart_set_divisors+0x316>

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    8cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8cae:	ea4f 1313 	mov.w	r3, r3, lsr #4
    8cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8cb4:	fb02 f303 	mul.w	r3, r2, r3
    8cb8:	461c      	mov	r4, r3
    8cba:	f04f 0500 	mov.w	r5, #0
    8cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8cc2:	4413      	add	r3, r2
    8cc4:	461a      	mov	r2, r3
    8cc6:	f04f 0300 	mov.w	r3, #0
    8cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8ccc:	fb03 f101 	mul.w	r1, r3, r1
    8cd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
    8cd2:	fb02 f000 	mul.w	r0, r2, r0
    8cd6:	4401      	add	r1, r0
    8cd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    8cda:	fba0 2302 	umull	r2, r3, r0, r2
    8cde:	4419      	add	r1, r3
    8ce0:	460b      	mov	r3, r1
    8ce2:	4620      	mov	r0, r4
    8ce4:	4629      	mov	r1, r5
    8ce6:	f001 fdd7 	bl	a898 <__aeabi_uldivmod>
    8cea:	4602      	mov	r2, r0
    8cec:	460b      	mov	r3, r1
    8cee:	4613      	mov	r3, r2
    8cf0:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    8cf2:	69ba      	ldr	r2, [r7, #24]
    8cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8cf6:	429a      	cmp	r2, r3
    8cf8:	d905      	bls.n	8d06 <uart_set_divisors+0x20e>
    8cfa:	69ba      	ldr	r2, [r7, #24]
    8cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8cfe:	ebc3 0302 	rsb	r3, r3, r2
    8d02:	65bb      	str	r3, [r7, #88]	; 0x58
    8d04:	e004      	b.n	8d10 <uart_set_divisors+0x218>
	else best_error = recalcbaud -baudrate;
    8d06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    8d08:	69bb      	ldr	r3, [r7, #24]
    8d0a:	ebc3 0302 	rsb	r3, r3, r2
    8d0e:	65bb      	str	r3, [r7, #88]	; 0x58

	best_error = best_error * 100 / baudrate;
    8d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8d12:	f04f 0264 	mov.w	r2, #100	; 0x64
    8d16:	fb02 f203 	mul.w	r2, r2, r3
    8d1a:	69bb      	ldr	r3, [r7, #24]
    8d1c:	fbb2 f3f3 	udiv	r3, r2, r3
    8d20:	65bb      	str	r3, [r7, #88]	; 0x58

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    8d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    8d24:	2b02      	cmp	r3, #2
    8d26:	d870      	bhi.n	8e0a <uart_set_divisors+0x312>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8d28:	69fa      	ldr	r2, [r7, #28]
    8d2a:	f240 0300 	movw	r3, #0
    8d2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    8d32:	429a      	cmp	r2, r3
    8d34:	d132      	bne.n	8d9c <uart_set_divisors+0x2a4>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    8d36:	69fa      	ldr	r2, [r7, #28]
    8d38:	69fb      	ldr	r3, [r7, #28]
    8d3a:	7b1b      	ldrb	r3, [r3, #12]
    8d3c:	b2db      	uxtb	r3, r3
    8d3e:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    8d42:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    8d46:	b2db      	uxtb	r3, r3
    8d48:	7313      	strb	r3, [r2, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    8d4a:	69fb      	ldr	r3, [r7, #28]
    8d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8d4e:	ea4f 6202 	mov.w	r2, r2, lsl #24
    8d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
    8d54:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    8d58:	ea42 0a0a 	orr.w	sl, r2, sl
    8d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8d5e:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    8d62:	fa5f f28a 	uxtb.w	r2, sl
    8d66:	711a      	strb	r2, [r3, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    8d68:	69fb      	ldr	r3, [r7, #28]
    8d6a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
    8d6e:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    8d70:	69fa      	ldr	r2, [r7, #28]
    8d72:	69fb      	ldr	r3, [r7, #28]
    8d74:	7b1b      	ldrb	r3, [r3, #12]
    8d76:	b2db      	uxtb	r3, r3
    8d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d7c:	7313      	strb	r3, [r2, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    8d7e:	69fb      	ldr	r3, [r7, #28]
    8d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8d82:	ea4f 1202 	mov.w	r2, r2, lsl #4
    8d86:	f002 01ff 	and.w	r1, r2, #255	; 0xff
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    8d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8d8c:	f002 020f 	and.w	r2, r2, #15
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    8d90:	ea41 0202 	orr.w	r2, r1, r2
    8d94:	f002 02ff 	and.w	r2, r2, #255	; 0xff
    8d98:	629a      	str	r2, [r3, #40]	; 0x28
    8d9a:	e032      	b.n	8e02 <uart_set_divisors+0x30a>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
    8d9c:	69fb      	ldr	r3, [r7, #28]
    8d9e:	7b1b      	ldrb	r3, [r3, #12]
    8da0:	b2db      	uxtb	r3, r3
    8da2:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    8da6:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    8daa:	b2da      	uxtb	r2, r3
    8dac:	69fb      	ldr	r3, [r7, #28]
    8dae:	731a      	strb	r2, [r3, #12]
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    8db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8db2:	ea4f 6303 	mov.w	r3, r3, lsl #24
    8db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    8db8:	ea4f 2812 	mov.w	r8, r2, lsr #8
    8dbc:	ea43 0808 	orr.w	r8, r3, r8
    8dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8dc2:	ea4f 2913 	mov.w	r9, r3, lsr #8
    8dc6:	fa5f f288 	uxtb.w	r2, r8
    8dca:	69fb      	ldr	r3, [r7, #28]
    8dcc:	711a      	strb	r2, [r3, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    8dce:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
    8dd2:	69fb      	ldr	r3, [r7, #28]
    8dd4:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    8dd6:	69fb      	ldr	r3, [r7, #28]
    8dd8:	7b1b      	ldrb	r3, [r3, #12]
    8dda:	b2db      	uxtb	r3, r3
    8ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8de0:	69fa      	ldr	r2, [r7, #28]
    8de2:	7313      	strb	r3, [r2, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    8de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8de6:	b2db      	uxtb	r3, r3
    8de8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    8dec:	b2da      	uxtb	r2, r3
    8dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8df0:	b2db      	uxtb	r3, r3
    8df2:	f003 030f 	and.w	r3, r3, #15
    8df6:	ea42 0303 	orr.w	r3, r2, r3
    8dfa:	b2da      	uxtb	r2, r3
    8dfc:	69fb      	ldr	r3, [r7, #28]
    8dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			errorStatus = SUCCESS;
    8e02:	f04f 0301 	mov.w	r3, #1
    8e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		return errorStatus;
    8e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
    8e0e:	4618      	mov	r0, r3
    8e10:	f107 0760 	add.w	r7, r7, #96	; 0x60
    8e14:	46bd      	mov	sp, r7
    8e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    8e1a:	bf00      	nop

00008e1c <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b084      	sub	sp, #16
    8e20:	af00      	add	r7, sp, #0
    8e22:	6078      	str	r0, [r7, #4]
    8e24:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    8e26:	687a      	ldr	r2, [r7, #4]
    8e28:	f24c 0300 	movw	r3, #49152	; 0xc000
    8e2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8e30:	429a      	cmp	r2, r3
    8e32:	d01c      	beq.n	8e6e <UART_Init+0x52>
    8e34:	687a      	ldr	r2, [r7, #4]
    8e36:	f240 0300 	movw	r3, #0
    8e3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    8e3e:	429a      	cmp	r2, r3
    8e40:	d015      	beq.n	8e6e <UART_Init+0x52>
    8e42:	687a      	ldr	r2, [r7, #4]
    8e44:	f248 0300 	movw	r3, #32768	; 0x8000
    8e48:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8e4c:	429a      	cmp	r2, r3
    8e4e:	d00e      	beq.n	8e6e <UART_Init+0x52>
    8e50:	687a      	ldr	r2, [r7, #4]
    8e52:	f24c 0300 	movw	r3, #49152	; 0xc000
    8e56:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8e5a:	429a      	cmp	r2, r3
    8e5c:	d007      	beq.n	8e6e <UART_Init+0x52>
    8e5e:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    8e62:	f2c0 0000 	movt	r0, #0
    8e66:	f04f 01c9 	mov.w	r1, #201	; 0xc9
    8e6a:	f7fd f9d1 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
    8e6e:	683b      	ldr	r3, [r7, #0]
    8e70:	795b      	ldrb	r3, [r3, #5]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d013      	beq.n	8e9e <UART_Init+0x82>
    8e76:	683b      	ldr	r3, [r7, #0]
    8e78:	795b      	ldrb	r3, [r3, #5]
    8e7a:	2b01      	cmp	r3, #1
    8e7c:	d00f      	beq.n	8e9e <UART_Init+0x82>
    8e7e:	683b      	ldr	r3, [r7, #0]
    8e80:	795b      	ldrb	r3, [r3, #5]
    8e82:	2b02      	cmp	r3, #2
    8e84:	d00b      	beq.n	8e9e <UART_Init+0x82>
    8e86:	683b      	ldr	r3, [r7, #0]
    8e88:	795b      	ldrb	r3, [r3, #5]
    8e8a:	2b03      	cmp	r3, #3
    8e8c:	d007      	beq.n	8e9e <UART_Init+0x82>
    8e8e:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    8e92:	f2c0 0000 	movt	r0, #0
    8e96:	f04f 01ca 	mov.w	r1, #202	; 0xca
    8e9a:	f7fd f9b9 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
    8e9e:	683b      	ldr	r3, [r7, #0]
    8ea0:	799b      	ldrb	r3, [r3, #6]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d00b      	beq.n	8ebe <UART_Init+0xa2>
    8ea6:	683b      	ldr	r3, [r7, #0]
    8ea8:	799b      	ldrb	r3, [r3, #6]
    8eaa:	2b01      	cmp	r3, #1
    8eac:	d007      	beq.n	8ebe <UART_Init+0xa2>
    8eae:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    8eb2:	f2c0 0000 	movt	r0, #0
    8eb6:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    8eba:	f7fd f9a9 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
    8ebe:	683b      	ldr	r3, [r7, #0]
    8ec0:	791b      	ldrb	r3, [r3, #4]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d017      	beq.n	8ef6 <UART_Init+0xda>
    8ec6:	683b      	ldr	r3, [r7, #0]
    8ec8:	791b      	ldrb	r3, [r3, #4]
    8eca:	2b01      	cmp	r3, #1
    8ecc:	d013      	beq.n	8ef6 <UART_Init+0xda>
    8ece:	683b      	ldr	r3, [r7, #0]
    8ed0:	791b      	ldrb	r3, [r3, #4]
    8ed2:	2b02      	cmp	r3, #2
    8ed4:	d00f      	beq.n	8ef6 <UART_Init+0xda>
    8ed6:	683b      	ldr	r3, [r7, #0]
    8ed8:	791b      	ldrb	r3, [r3, #4]
    8eda:	2b03      	cmp	r3, #3
    8edc:	d00b      	beq.n	8ef6 <UART_Init+0xda>
    8ede:	683b      	ldr	r3, [r7, #0]
    8ee0:	791b      	ldrb	r3, [r3, #4]
    8ee2:	2b04      	cmp	r3, #4
    8ee4:	d007      	beq.n	8ef6 <UART_Init+0xda>
    8ee6:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    8eea:	f2c0 0000 	movt	r0, #0
    8eee:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    8ef2:	f7fd f98d 	bl	6210 <check_failed>

#ifdef _UART0
	if(UARTx == LPC_UART0)
    8ef6:	687a      	ldr	r2, [r7, #4]
    8ef8:	f24c 0300 	movw	r3, #49152	; 0xc000
    8efc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8f00:	429a      	cmp	r2, r3
    8f02:	d105      	bne.n	8f10 <UART_Init+0xf4>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    8f04:	f04f 0008 	mov.w	r0, #8
    8f08:	f04f 0101 	mov.w	r1, #1
    8f0c:	f7fb f98a 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8f10:	687a      	ldr	r2, [r7, #4]
    8f12:	f240 0300 	movw	r3, #0
    8f16:	f2c4 0301 	movt	r3, #16385	; 0x4001
    8f1a:	429a      	cmp	r2, r3
    8f1c:	d105      	bne.n	8f2a <UART_Init+0x10e>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    8f1e:	f04f 0010 	mov.w	r0, #16
    8f22:	f04f 0101 	mov.w	r1, #1
    8f26:	f7fb f97d 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART2
	if(UARTx == LPC_UART2)
    8f2a:	687a      	ldr	r2, [r7, #4]
    8f2c:	f248 0300 	movw	r3, #32768	; 0x8000
    8f30:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8f34:	429a      	cmp	r2, r3
    8f36:	d105      	bne.n	8f44 <UART_Init+0x128>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    8f38:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    8f3c:	f04f 0101 	mov.w	r1, #1
    8f40:	f7fb f970 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART3
	if(UARTx == LPC_UART3)
    8f44:	687a      	ldr	r2, [r7, #4]
    8f46:	f24c 0300 	movw	r3, #49152	; 0xc000
    8f4a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    8f4e:	429a      	cmp	r2, r3
    8f50:	d105      	bne.n	8f5e <UART_Init+0x142>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    8f52:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    8f56:	f04f 0101 	mov.w	r1, #1
    8f5a:	f7fb f963 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    8f5e:	687a      	ldr	r2, [r7, #4]
    8f60:	f240 0300 	movw	r3, #0
    8f64:	f2c4 0301 	movt	r3, #16385	; 0x4001
    8f68:	429a      	cmp	r2, r3
    8f6a:	d14d      	bne.n	9008 <UART_Init+0x1ec>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    8f6c:	687b      	ldr	r3, [r7, #4]
    8f6e:	f04f 0207 	mov.w	r2, #7
    8f72:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	f04f 0200 	mov.w	r2, #0
    8f7a:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    8f7c:	e003      	b.n	8f86 <UART_Init+0x16a>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	781b      	ldrb	r3, [r3, #0]
    8f82:	b2db      	uxtb	r3, r3
    8f84:	60fb      	str	r3, [r7, #12]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    8f86:	687b      	ldr	r3, [r7, #4]
    8f88:	7d1b      	ldrb	r3, [r3, #20]
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	f003 0301 	and.w	r3, r3, #1
    8f90:	b2db      	uxtb	r3, r3
    8f92:	2b00      	cmp	r3, #0
    8f94:	d1f3      	bne.n	8f7e <UART_Init+0x162>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    8f96:	687b      	ldr	r3, [r7, #4]
    8f98:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    8f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    8fa0:	687b      	ldr	r3, [r7, #4]
    8fa2:	7d1b      	ldrb	r3, [r3, #20]
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	f003 0320 	and.w	r3, r3, #32
    8faa:	2b00      	cmp	r3, #0
    8fac:	d0f8      	beq.n	8fa0 <UART_Init+0x184>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	f04f 0200 	mov.w	r2, #0
    8fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	f04f 0200 	mov.w	r2, #0
    8fbe:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    8fc0:	687b      	ldr	r3, [r7, #4]
    8fc2:	f04f 0200 	mov.w	r2, #0
    8fc6:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    8fc8:	687b      	ldr	r3, [r7, #4]
    8fca:	f04f 0200 	mov.w	r2, #0
    8fce:	621a      	str	r2, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	f04f 0200 	mov.w	r2, #0
    8fd6:	741a      	strb	r2, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    8fd8:	687b      	ldr	r3, [r7, #4]
    8fda:	f04f 0200 	mov.w	r2, #0
    8fde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	f04f 0200 	mov.w	r2, #0
    8fe8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	f04f 0200 	mov.w	r2, #0
    8ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    8ff6:	687b      	ldr	r3, [r7, #4]
    8ff8:	7e1b      	ldrb	r3, [r3, #24]
    8ffa:	b2db      	uxtb	r3, r3
    8ffc:	60fb      	str	r3, [r7, #12]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    8ffe:	687b      	ldr	r3, [r7, #4]
    9000:	7d1b      	ldrb	r3, [r3, #20]
    9002:	b2db      	uxtb	r3, r3
    9004:	60fb      	str	r3, [r7, #12]
    9006:	e035      	b.n	9074 <UART_Init+0x258>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    9008:	687b      	ldr	r3, [r7, #4]
    900a:	f04f 0207 	mov.w	r2, #7
    900e:	721a      	strb	r2, [r3, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    9010:	687b      	ldr	r3, [r7, #4]
    9012:	f04f 0200 	mov.w	r2, #0
    9016:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    9018:	e003      	b.n	9022 <UART_Init+0x206>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	b2db      	uxtb	r3, r3
    9020:	60fb      	str	r3, [r7, #12]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    9022:	687b      	ldr	r3, [r7, #4]
    9024:	7d1b      	ldrb	r3, [r3, #20]
    9026:	b2db      	uxtb	r3, r3
    9028:	f003 0301 	and.w	r3, r3, #1
    902c:	b2db      	uxtb	r3, r3
    902e:	2b00      	cmp	r3, #0
    9030:	d1f3      	bne.n	901a <UART_Init+0x1fe>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
    9032:	687b      	ldr	r3, [r7, #4]
    9034:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    9038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	7d1b      	ldrb	r3, [r3, #20]
    9040:	b2db      	uxtb	r3, r3
    9042:	f003 0320 	and.w	r3, r3, #32
    9046:	2b00      	cmp	r3, #0
    9048:	d0f8      	beq.n	903c <UART_Init+0x220>
		// Disable Tx
		UARTx->TER = 0;
    904a:	687b      	ldr	r3, [r7, #4]
    904c:	f04f 0200 	mov.w	r2, #0
    9050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    9054:	687b      	ldr	r3, [r7, #4]
    9056:	f04f 0200 	mov.w	r2, #0
    905a:	605a      	str	r2, [r3, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	f04f 0200 	mov.w	r2, #0
    9062:	731a      	strb	r2, [r3, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	f04f 0200 	mov.w	r2, #0
    906a:	621a      	str	r2, [r3, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	7d1b      	ldrb	r3, [r3, #20]
    9070:	b2db      	uxtb	r3, r3
    9072:	60fb      	str	r3, [r7, #12]
	}

	if (UARTx == LPC_UART3)
    9074:	687a      	ldr	r2, [r7, #4]
    9076:	f24c 0300 	movw	r3, #49152	; 0xc000
    907a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    907e:	429a      	cmp	r2, r3
    9080:	d104      	bne.n	908c <UART_Init+0x270>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	f04f 0200 	mov.w	r2, #0
    9088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    908c:	683b      	ldr	r3, [r7, #0]
    908e:	681b      	ldr	r3, [r3, #0]
    9090:	6878      	ldr	r0, [r7, #4]
    9092:	4619      	mov	r1, r3
    9094:	f7ff fd30 	bl	8af8 <uart_set_divisors>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9098:	687a      	ldr	r2, [r7, #4]
    909a:	f240 0300 	movw	r3, #0
    909e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    90a2:	429a      	cmp	r2, r3
    90a4:	d106      	bne.n	90b4 <UART_Init+0x298>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	7b1b      	ldrb	r3, [r3, #12]
    90aa:	b2db      	uxtb	r3, r3
    90ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    90b0:	60fb      	str	r3, [r7, #12]
    90b2:	e005      	b.n	90c0 <UART_Init+0x2a4>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	7b1b      	ldrb	r3, [r3, #12]
    90b8:	b2db      	uxtb	r3, r3
    90ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    90be:	60fb      	str	r3, [r7, #12]
	}

	switch (UART_ConfigStruct->Databits){
    90c0:	683b      	ldr	r3, [r7, #0]
    90c2:	795b      	ldrb	r3, [r3, #5]
    90c4:	2b01      	cmp	r3, #1
    90c6:	d004      	beq.n	90d2 <UART_Init+0x2b6>
    90c8:	2b02      	cmp	r3, #2
    90ca:	d007      	beq.n	90dc <UART_Init+0x2c0>
    90cc:	2b00      	cmp	r3, #0
    90ce:	d00f      	beq.n	90f0 <UART_Init+0x2d4>
    90d0:	e009      	b.n	90e6 <UART_Init+0x2ca>
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    90d2:	68fb      	ldr	r3, [r7, #12]
    90d4:	f043 0301 	orr.w	r3, r3, #1
    90d8:	60fb      	str	r3, [r7, #12]
		break;
    90da:	e00a      	b.n	90f2 <UART_Init+0x2d6>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    90dc:	68fb      	ldr	r3, [r7, #12]
    90de:	f043 0302 	orr.w	r3, r3, #2
    90e2:	60fb      	str	r3, [r7, #12]
		break;
    90e4:	e005      	b.n	90f2 <UART_Init+0x2d6>
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	f043 0303 	orr.w	r3, r3, #3
    90ec:	60fb      	str	r3, [r7, #12]
    90ee:	e000      	b.n	90f2 <UART_Init+0x2d6>
	}

	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
    90f0:	bf00      	nop
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    90f2:	683b      	ldr	r3, [r7, #0]
    90f4:	791b      	ldrb	r3, [r3, #4]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d022      	beq.n	9140 <UART_Init+0x324>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    90fa:	68fb      	ldr	r3, [r7, #12]
    90fc:	f043 0308 	orr.w	r3, r3, #8
    9100:	60fb      	str	r3, [r7, #12]
		switch (UART_ConfigStruct->Parity)
    9102:	683b      	ldr	r3, [r7, #0]
    9104:	791b      	ldrb	r3, [r3, #4]
    9106:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    910a:	2b03      	cmp	r3, #3
    910c:	d818      	bhi.n	9140 <UART_Init+0x324>
    910e:	a201      	add	r2, pc, #4	; (adr r2, 9114 <UART_Init+0x2f8>)
    9110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9114:	00009141 	.word	0x00009141
    9118:	00009125 	.word	0x00009125
    911c:	0000912f 	.word	0x0000912f
    9120:	00009139 	.word	0x00009139
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    9124:	68fb      	ldr	r3, [r7, #12]
    9126:	f043 0310 	orr.w	r3, r3, #16
    912a:	60fb      	str	r3, [r7, #12]
			break;
    912c:	e008      	b.n	9140 <UART_Init+0x324>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    912e:	68fb      	ldr	r3, [r7, #12]
    9130:	f043 0320 	orr.w	r3, r3, #32
    9134:	60fb      	str	r3, [r7, #12]
			break;
    9136:	e003      	b.n	9140 <UART_Init+0x324>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    9138:	68fb      	ldr	r3, [r7, #12]
    913a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    913e:	60fb      	str	r3, [r7, #12]
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    9140:	683b      	ldr	r3, [r7, #0]
    9142:	799b      	ldrb	r3, [r3, #6]
    9144:	2b01      	cmp	r3, #1
    9146:	d103      	bne.n	9150 <UART_Init+0x334>
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	f043 0304 	orr.w	r3, r3, #4
    914e:	60fb      	str	r3, [r7, #12]
		break;
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
    9150:	687a      	ldr	r2, [r7, #4]
    9152:	f240 0300 	movw	r3, #0
    9156:	f2c4 0301 	movt	r3, #16385	; 0x4001
    915a:	429a      	cmp	r2, r3
    915c:	d104      	bne.n	9168 <UART_Init+0x34c>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    915e:	687b      	ldr	r3, [r7, #4]
    9160:	68fa      	ldr	r2, [r7, #12]
    9162:	b2d2      	uxtb	r2, r2
    9164:	731a      	strb	r2, [r3, #12]
    9166:	e003      	b.n	9170 <UART_Init+0x354>
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    9168:	68fb      	ldr	r3, [r7, #12]
    916a:	b2da      	uxtb	r2, r3
    916c:	687b      	ldr	r3, [r7, #4]
    916e:	731a      	strb	r2, [r3, #12]
	}
}
    9170:	f107 0710 	add.w	r7, r7, #16
    9174:	46bd      	mov	sp, r7
    9176:	bd80      	pop	{r7, pc}

00009178 <UART_DeInit>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
    9178:	b580      	push	{r7, lr}
    917a:	b082      	sub	sp, #8
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    9180:	687a      	ldr	r2, [r7, #4]
    9182:	f24c 0300 	movw	r3, #49152	; 0xc000
    9186:	f2c4 0300 	movt	r3, #16384	; 0x4000
    918a:	429a      	cmp	r2, r3
    918c:	d01c      	beq.n	91c8 <UART_DeInit+0x50>
    918e:	687a      	ldr	r2, [r7, #4]
    9190:	f240 0300 	movw	r3, #0
    9194:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9198:	429a      	cmp	r2, r3
    919a:	d015      	beq.n	91c8 <UART_DeInit+0x50>
    919c:	687a      	ldr	r2, [r7, #4]
    919e:	f248 0300 	movw	r3, #32768	; 0x8000
    91a2:	f2c4 0309 	movt	r3, #16393	; 0x4009
    91a6:	429a      	cmp	r2, r3
    91a8:	d00e      	beq.n	91c8 <UART_DeInit+0x50>
    91aa:	687a      	ldr	r2, [r7, #4]
    91ac:	f24c 0300 	movw	r3, #49152	; 0xc000
    91b0:	f2c4 0309 	movt	r3, #16393	; 0x4009
    91b4:	429a      	cmp	r2, r3
    91b6:	d007      	beq.n	91c8 <UART_DeInit+0x50>
    91b8:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    91bc:	f2c0 0000 	movt	r0, #0
    91c0:	f240 1195 	movw	r1, #405	; 0x195
    91c4:	f7fd f824 	bl	6210 <check_failed>

	UART_TxCmd(UARTx, DISABLE);
    91c8:	6878      	ldr	r0, [r7, #4]
    91ca:	f04f 0100 	mov.w	r1, #0
    91ce:	f000 fd47 	bl	9c60 <UART_TxCmd>

#ifdef _UART0
	if (UARTx == LPC_UART0)
    91d2:	687a      	ldr	r2, [r7, #4]
    91d4:	f24c 0300 	movw	r3, #49152	; 0xc000
    91d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    91dc:	429a      	cmp	r2, r3
    91de:	d105      	bne.n	91ec <UART_DeInit+0x74>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, DISABLE);
    91e0:	f04f 0008 	mov.w	r0, #8
    91e4:	f04f 0100 	mov.w	r1, #0
    91e8:	f7fb f81c 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART1
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    91ec:	687a      	ldr	r2, [r7, #4]
    91ee:	f240 0300 	movw	r3, #0
    91f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    91f6:	429a      	cmp	r2, r3
    91f8:	d105      	bne.n	9206 <UART_DeInit+0x8e>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, DISABLE);
    91fa:	f04f 0010 	mov.w	r0, #16
    91fe:	f04f 0100 	mov.w	r1, #0
    9202:	f7fb f80f 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART2
	if (UARTx == LPC_UART2)
    9206:	687a      	ldr	r2, [r7, #4]
    9208:	f248 0300 	movw	r3, #32768	; 0x8000
    920c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9210:	429a      	cmp	r2, r3
    9212:	d105      	bne.n	9220 <UART_DeInit+0xa8>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, DISABLE);
    9214:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    9218:	f04f 0100 	mov.w	r1, #0
    921c:	f7fb f802 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif

#ifdef _UART3
	if (UARTx == LPC_UART3)
    9220:	687a      	ldr	r2, [r7, #4]
    9222:	f24c 0300 	movw	r3, #49152	; 0xc000
    9226:	f2c4 0309 	movt	r3, #16393	; 0x4009
    922a:	429a      	cmp	r2, r3
    922c:	d105      	bne.n	923a <UART_DeInit+0xc2>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
    922e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    9232:	f04f 0100 	mov.w	r1, #0
    9236:	f7fa fff5 	bl	4224 <CLKPWR_ConfigPPWR>
	}
#endif
}
    923a:	f107 0708 	add.w	r7, r7, #8
    923e:	46bd      	mov	sp, r7
    9240:	bd80      	pop	{r7, pc}
    9242:	bf00      	nop

00009244 <UART_ConfigStructInit>:
* @param[in]	UART_InitStruct Pointer to a UART_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
    9244:	b480      	push	{r7}
    9246:	b083      	sub	sp, #12
    9248:	af00      	add	r7, sp, #0
    924a:	6078      	str	r0, [r7, #4]
	UART_InitStruct->Baud_rate = 9600;
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    9252:	601a      	str	r2, [r3, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	f04f 0203 	mov.w	r2, #3
    925a:	715a      	strb	r2, [r3, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	f04f 0200 	mov.w	r2, #0
    9262:	711a      	strb	r2, [r3, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	f04f 0200 	mov.w	r2, #0
    926a:	719a      	strb	r2, [r3, #6]
}
    926c:	f107 070c 	add.w	r7, r7, #12
    9270:	46bd      	mov	sp, r7
    9272:	bc80      	pop	{r7}
    9274:	4770      	bx	lr
    9276:	bf00      	nop

00009278 <UART_SendByte>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return 		None
 **********************************************************************/
void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
    9278:	b580      	push	{r7, lr}
    927a:	b082      	sub	sp, #8
    927c:	af00      	add	r7, sp, #0
    927e:	6078      	str	r0, [r7, #4]
    9280:	460b      	mov	r3, r1
    9282:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    9284:	687a      	ldr	r2, [r7, #4]
    9286:	f24c 0300 	movw	r3, #49152	; 0xc000
    928a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    928e:	429a      	cmp	r2, r3
    9290:	d01c      	beq.n	92cc <UART_SendByte+0x54>
    9292:	687a      	ldr	r2, [r7, #4]
    9294:	f240 0300 	movw	r3, #0
    9298:	f2c4 0301 	movt	r3, #16385	; 0x4001
    929c:	429a      	cmp	r2, r3
    929e:	d015      	beq.n	92cc <UART_SendByte+0x54>
    92a0:	687a      	ldr	r2, [r7, #4]
    92a2:	f248 0300 	movw	r3, #32768	; 0x8000
    92a6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    92aa:	429a      	cmp	r2, r3
    92ac:	d00e      	beq.n	92cc <UART_SendByte+0x54>
    92ae:	687a      	ldr	r2, [r7, #4]
    92b0:	f24c 0300 	movw	r3, #49152	; 0xc000
    92b4:	f2c4 0309 	movt	r3, #16393	; 0x4009
    92b8:	429a      	cmp	r2, r3
    92ba:	d007      	beq.n	92cc <UART_SendByte+0x54>
    92bc:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    92c0:	f2c0 0000 	movt	r0, #0
    92c4:	f240 11d9 	movw	r1, #473	; 0x1d9
    92c8:	f7fc ffa2 	bl	6210 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    92cc:	687a      	ldr	r2, [r7, #4]
    92ce:	f240 0300 	movw	r3, #0
    92d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    92d6:	429a      	cmp	r2, r3
    92d8:	d103      	bne.n	92e2 <UART_SendByte+0x6a>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	78fa      	ldrb	r2, [r7, #3]
    92de:	701a      	strb	r2, [r3, #0]
    92e0:	e002      	b.n	92e8 <UART_SendByte+0x70>
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	78fa      	ldrb	r2, [r7, #3]
    92e6:	701a      	strb	r2, [r3, #0]
	}

}
    92e8:	f107 0708 	add.w	r7, r7, #8
    92ec:	46bd      	mov	sp, r7
    92ee:	bd80      	pop	{r7, pc}

000092f0 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b082      	sub	sp, #8
    92f4:	af00      	add	r7, sp, #0
    92f6:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    92f8:	687a      	ldr	r2, [r7, #4]
    92fa:	f24c 0300 	movw	r3, #49152	; 0xc000
    92fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
    9302:	429a      	cmp	r2, r3
    9304:	d01c      	beq.n	9340 <UART_ReceiveByte+0x50>
    9306:	687a      	ldr	r2, [r7, #4]
    9308:	f240 0300 	movw	r3, #0
    930c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9310:	429a      	cmp	r2, r3
    9312:	d015      	beq.n	9340 <UART_ReceiveByte+0x50>
    9314:	687a      	ldr	r2, [r7, #4]
    9316:	f248 0300 	movw	r3, #32768	; 0x8000
    931a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    931e:	429a      	cmp	r2, r3
    9320:	d00e      	beq.n	9340 <UART_ReceiveByte+0x50>
    9322:	687a      	ldr	r2, [r7, #4]
    9324:	f24c 0300 	movw	r3, #49152	; 0xc000
    9328:	f2c4 0309 	movt	r3, #16393	; 0x4009
    932c:	429a      	cmp	r2, r3
    932e:	d007      	beq.n	9340 <UART_ReceiveByte+0x50>
    9330:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9334:	f2c0 0000 	movt	r0, #0
    9338:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    933c:	f7fc ff68 	bl	6210 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9340:	687a      	ldr	r2, [r7, #4]
    9342:	f240 0300 	movw	r3, #0
    9346:	f2c4 0301 	movt	r3, #16385	; 0x4001
    934a:	429a      	cmp	r2, r3
    934c:	d103      	bne.n	9356 <UART_ReceiveByte+0x66>
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    934e:	687b      	ldr	r3, [r7, #4]
    9350:	781b      	ldrb	r3, [r3, #0]
    9352:	b2db      	uxtb	r3, r3
    9354:	e002      	b.n	935c <UART_ReceiveByte+0x6c>
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    9356:	687b      	ldr	r3, [r7, #4]
    9358:	781b      	ldrb	r3, [r3, #0]
    935a:	b2db      	uxtb	r3, r3
	}
}
    935c:	4618      	mov	r0, r3
    935e:	f107 0708 	add.w	r7, r7, #8
    9362:	46bd      	mov	sp, r7
    9364:	bd80      	pop	{r7, pc}
    9366:	bf00      	nop

00009368 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    9368:	b580      	push	{r7, lr}
    936a:	b08a      	sub	sp, #40	; 0x28
    936c:	af00      	add	r7, sp, #0
    936e:	60f8      	str	r0, [r7, #12]
    9370:	60b9      	str	r1, [r7, #8]
    9372:	607a      	str	r2, [r7, #4]
    9374:	70fb      	strb	r3, [r7, #3]
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar = txbuf;
    9376:	68bb      	ldr	r3, [r7, #8]
    9378:	627b      	str	r3, [r7, #36]	; 0x24

	bToSend = buflen;
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	617b      	str	r3, [r7, #20]

	// blocking mode
	if (flag == BLOCKING) {
    937e:	78fb      	ldrb	r3, [r7, #3]
    9380:	2b01      	cmp	r3, #1
    9382:	d13e      	bne.n	9402 <UART_Send+0x9a>
		bSent = 0;
    9384:	f04f 0300 	mov.w	r3, #0
    9388:	61bb      	str	r3, [r7, #24]
		while (bToSend){
    938a:	e036      	b.n	93fa <UART_Send+0x92>
			timeOut = UART_BLOCKING_TIMEOUT;
    938c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9390:	61fb      	str	r3, [r7, #28]
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    9392:	e006      	b.n	93a2 <UART_Send+0x3a>
				if (timeOut == 0) break;
    9394:	69fb      	ldr	r3, [r7, #28]
    9396:	2b00      	cmp	r3, #0
    9398:	d00b      	beq.n	93b2 <UART_Send+0x4a>
				timeOut--;
    939a:	69fb      	ldr	r3, [r7, #28]
    939c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    93a0:	61fb      	str	r3, [r7, #28]
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    93a2:	68fb      	ldr	r3, [r7, #12]
    93a4:	7d1b      	ldrb	r3, [r3, #20]
    93a6:	b2db      	uxtb	r3, r3
    93a8:	f003 0320 	and.w	r3, r3, #32
    93ac:	2b00      	cmp	r3, #0
    93ae:	d0f1      	beq.n	9394 <UART_Send+0x2c>
    93b0:	e000      	b.n	93b4 <UART_Send+0x4c>
				if (timeOut == 0) break;
    93b2:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    93b4:	69fb      	ldr	r3, [r7, #28]
    93b6:	2b00      	cmp	r3, #0
    93b8:	d052      	beq.n	9460 <UART_Send+0xf8>
			fifo_cnt = UART_TX_FIFO_SIZE;
    93ba:	f04f 0310 	mov.w	r3, #16
    93be:	623b      	str	r3, [r7, #32]
			while (fifo_cnt && bToSend){
    93c0:	e015      	b.n	93ee <UART_Send+0x86>
				UART_SendByte(UARTx, (*pChar++));
    93c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    93c8:	f102 0201 	add.w	r2, r2, #1
    93cc:	627a      	str	r2, [r7, #36]	; 0x24
    93ce:	68f8      	ldr	r0, [r7, #12]
    93d0:	4619      	mov	r1, r3
    93d2:	f7ff ff51 	bl	9278 <UART_SendByte>
				fifo_cnt--;
    93d6:	6a3b      	ldr	r3, [r7, #32]
    93d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    93dc:	623b      	str	r3, [r7, #32]
				bToSend--;
    93de:	697b      	ldr	r3, [r7, #20]
    93e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    93e4:	617b      	str	r3, [r7, #20]
				bSent++;
    93e6:	69bb      	ldr	r3, [r7, #24]
    93e8:	f103 0301 	add.w	r3, r3, #1
    93ec:	61bb      	str	r3, [r7, #24]
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    93ee:	6a3b      	ldr	r3, [r7, #32]
    93f0:	2b00      	cmp	r3, #0
    93f2:	d002      	beq.n	93fa <UART_Send+0x92>
    93f4:	697b      	ldr	r3, [r7, #20]
    93f6:	2b00      	cmp	r3, #0
    93f8:	d1e3      	bne.n	93c2 <UART_Send+0x5a>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
    93fa:	697b      	ldr	r3, [r7, #20]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d1c5      	bne.n	938c <UART_Send+0x24>
    9400:	e031      	b.n	9466 <UART_Send+0xfe>
			}
		}
	}
	// None blocking mode
	else {
		bSent = 0;
    9402:	f04f 0300 	mov.w	r3, #0
    9406:	61bb      	str	r3, [r7, #24]
		while (bToSend) {
    9408:	e026      	b.n	9458 <UART_Send+0xf0>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    940a:	68fb      	ldr	r3, [r7, #12]
    940c:	7d1b      	ldrb	r3, [r3, #20]
    940e:	b2db      	uxtb	r3, r3
    9410:	f003 0320 	and.w	r3, r3, #32
    9414:	2b00      	cmp	r3, #0
    9416:	d025      	beq.n	9464 <UART_Send+0xfc>
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
    9418:	f04f 0310 	mov.w	r3, #16
    941c:	623b      	str	r3, [r7, #32]
			while (fifo_cnt && bToSend) {
    941e:	e015      	b.n	944c <UART_Send+0xe4>
				UART_SendByte(UARTx, (*pChar++));
    9420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9422:	781b      	ldrb	r3, [r3, #0]
    9424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9426:	f102 0201 	add.w	r2, r2, #1
    942a:	627a      	str	r2, [r7, #36]	; 0x24
    942c:	68f8      	ldr	r0, [r7, #12]
    942e:	4619      	mov	r1, r3
    9430:	f7ff ff22 	bl	9278 <UART_SendByte>
				bToSend--;
    9434:	697b      	ldr	r3, [r7, #20]
    9436:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    943a:	617b      	str	r3, [r7, #20]
				fifo_cnt--;
    943c:	6a3b      	ldr	r3, [r7, #32]
    943e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9442:	623b      	str	r3, [r7, #32]
				bSent++;
    9444:	69bb      	ldr	r3, [r7, #24]
    9446:	f103 0301 	add.w	r3, r3, #1
    944a:	61bb      	str	r3, [r7, #24]
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
    944c:	6a3b      	ldr	r3, [r7, #32]
    944e:	2b00      	cmp	r3, #0
    9450:	d002      	beq.n	9458 <UART_Send+0xf0>
    9452:	697b      	ldr	r3, [r7, #20]
    9454:	2b00      	cmp	r3, #0
    9456:	d1e3      	bne.n	9420 <UART_Send+0xb8>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
    9458:	697b      	ldr	r3, [r7, #20]
    945a:	2b00      	cmp	r3, #0
    945c:	d1d5      	bne.n	940a <UART_Send+0xa2>
    945e:	e002      	b.n	9466 <UART_Send+0xfe>
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    9460:	bf00      	nop
    9462:	e000      	b.n	9466 <UART_Send+0xfe>
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
    9464:	bf00      	nop
				fifo_cnt--;
				bSent++;
			}
		}
	}
	return bSent;
    9466:	69bb      	ldr	r3, [r7, #24]
}
    9468:	4618      	mov	r0, r3
    946a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    946e:	46bd      	mov	sp, r7
    9470:	bd80      	pop	{r7, pc}
    9472:	bf00      	nop

00009474 <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    9474:	b580      	push	{r7, lr}
    9476:	b088      	sub	sp, #32
    9478:	af00      	add	r7, sp, #0
    947a:	60f8      	str	r0, [r7, #12]
    947c:	60b9      	str	r1, [r7, #8]
    947e:	607a      	str	r2, [r7, #4]
    9480:	70fb      	strb	r3, [r7, #3]
	uint32_t bToRecv, bRecv, timeOut;
	uint8_t *pChar = rxbuf;
    9482:	68bb      	ldr	r3, [r7, #8]
    9484:	61fb      	str	r3, [r7, #28]

	bToRecv = buflen;
    9486:	687b      	ldr	r3, [r7, #4]
    9488:	613b      	str	r3, [r7, #16]

	// Blocking mode
	if (flag == BLOCKING) {
    948a:	78fb      	ldrb	r3, [r7, #3]
    948c:	2b01      	cmp	r3, #1
    948e:	d131      	bne.n	94f4 <UART_Receive+0x80>
		bRecv = 0;
    9490:	f04f 0300 	mov.w	r3, #0
    9494:	617b      	str	r3, [r7, #20]
		while (bToRecv){
    9496:	e029      	b.n	94ec <UART_Receive+0x78>
			timeOut = UART_BLOCKING_TIMEOUT;
    9498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    949c:	61bb      	str	r3, [r7, #24]
			while (!(UARTx->LSR & UART_LSR_RDR)){
    949e:	e006      	b.n	94ae <UART_Receive+0x3a>
				if (timeOut == 0) break;
    94a0:	69bb      	ldr	r3, [r7, #24]
    94a2:	2b00      	cmp	r3, #0
    94a4:	d00b      	beq.n	94be <UART_Receive+0x4a>
				timeOut--;
    94a6:	69bb      	ldr	r3, [r7, #24]
    94a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    94ac:	61bb      	str	r3, [r7, #24]
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    94ae:	68fb      	ldr	r3, [r7, #12]
    94b0:	7d1b      	ldrb	r3, [r3, #20]
    94b2:	b2db      	uxtb	r3, r3
    94b4:	f003 0301 	and.w	r3, r3, #1
    94b8:	2b00      	cmp	r3, #0
    94ba:	d0f1      	beq.n	94a0 <UART_Receive+0x2c>
    94bc:	e000      	b.n	94c0 <UART_Receive+0x4c>
				if (timeOut == 0) break;
    94be:	bf00      	nop
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    94c0:	69bb      	ldr	r3, [r7, #24]
    94c2:	2b00      	cmp	r3, #0
    94c4:	d038      	beq.n	9538 <UART_Receive+0xc4>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveByte(UARTx);
    94c6:	68f8      	ldr	r0, [r7, #12]
    94c8:	f7ff ff12 	bl	92f0 <UART_ReceiveByte>
    94cc:	4603      	mov	r3, r0
    94ce:	461a      	mov	r2, r3
    94d0:	69fb      	ldr	r3, [r7, #28]
    94d2:	701a      	strb	r2, [r3, #0]
    94d4:	69fb      	ldr	r3, [r7, #28]
    94d6:	f103 0301 	add.w	r3, r3, #1
    94da:	61fb      	str	r3, [r7, #28]
			bToRecv--;
    94dc:	693b      	ldr	r3, [r7, #16]
    94de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    94e2:	613b      	str	r3, [r7, #16]
			bRecv++;
    94e4:	697b      	ldr	r3, [r7, #20]
    94e6:	f103 0301 	add.w	r3, r3, #1
    94ea:	617b      	str	r3, [r7, #20]
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    94ec:	693b      	ldr	r3, [r7, #16]
    94ee:	2b00      	cmp	r3, #0
    94f0:	d1d2      	bne.n	9498 <UART_Receive+0x24>
    94f2:	e024      	b.n	953e <UART_Receive+0xca>
			bRecv++;
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
    94f4:	f04f 0300 	mov.w	r3, #0
    94f8:	617b      	str	r3, [r7, #20]
		while (bToRecv) {
    94fa:	e019      	b.n	9530 <UART_Receive+0xbc>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    94fc:	68fb      	ldr	r3, [r7, #12]
    94fe:	7d1b      	ldrb	r3, [r3, #20]
    9500:	b2db      	uxtb	r3, r3
    9502:	f003 0301 	and.w	r3, r3, #1
    9506:	2b00      	cmp	r3, #0
    9508:	d018      	beq.n	953c <UART_Receive+0xc8>
				break;
			} else {
				(*pChar++) = UART_ReceiveByte(UARTx);
    950a:	68f8      	ldr	r0, [r7, #12]
    950c:	f7ff fef0 	bl	92f0 <UART_ReceiveByte>
    9510:	4603      	mov	r3, r0
    9512:	461a      	mov	r2, r3
    9514:	69fb      	ldr	r3, [r7, #28]
    9516:	701a      	strb	r2, [r3, #0]
    9518:	69fb      	ldr	r3, [r7, #28]
    951a:	f103 0301 	add.w	r3, r3, #1
    951e:	61fb      	str	r3, [r7, #28]
				bRecv++;
    9520:	697b      	ldr	r3, [r7, #20]
    9522:	f103 0301 	add.w	r3, r3, #1
    9526:	617b      	str	r3, [r7, #20]
				bToRecv--;
    9528:	693b      	ldr	r3, [r7, #16]
    952a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    952e:	613b      	str	r3, [r7, #16]
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    9530:	693b      	ldr	r3, [r7, #16]
    9532:	2b00      	cmp	r3, #0
    9534:	d1e2      	bne.n	94fc <UART_Receive+0x88>
    9536:	e002      	b.n	953e <UART_Receive+0xca>
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    9538:	bf00      	nop
    953a:	e000      	b.n	953e <UART_Receive+0xca>
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
				break;
    953c:	bf00      	nop
				bRecv++;
				bToRecv--;
			}
		}
	}
	return bRecv;
    953e:	697b      	ldr	r3, [r7, #20]
}
    9540:	4618      	mov	r0, r3
    9542:	f107 0720 	add.w	r7, r7, #32
    9546:	46bd      	mov	sp, r7
    9548:	bd80      	pop	{r7, pc}
    954a:	bf00      	nop

0000954c <UART_ForceBreak>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 **********************************************************************/
void UART_ForceBreak(LPC_UART_TypeDef* UARTx)
{
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    9554:	687a      	ldr	r2, [r7, #4]
    9556:	f24c 0300 	movw	r3, #49152	; 0xc000
    955a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    955e:	429a      	cmp	r2, r3
    9560:	d01c      	beq.n	959c <UART_ForceBreak+0x50>
    9562:	687a      	ldr	r2, [r7, #4]
    9564:	f240 0300 	movw	r3, #0
    9568:	f2c4 0301 	movt	r3, #16385	; 0x4001
    956c:	429a      	cmp	r2, r3
    956e:	d015      	beq.n	959c <UART_ForceBreak+0x50>
    9570:	687a      	ldr	r2, [r7, #4]
    9572:	f248 0300 	movw	r3, #32768	; 0x8000
    9576:	f2c4 0309 	movt	r3, #16393	; 0x4009
    957a:	429a      	cmp	r2, r3
    957c:	d00e      	beq.n	959c <UART_ForceBreak+0x50>
    957e:	687a      	ldr	r2, [r7, #4]
    9580:	f24c 0300 	movw	r3, #49152	; 0xc000
    9584:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9588:	429a      	cmp	r2, r3
    958a:	d007      	beq.n	959c <UART_ForceBreak+0x50>
    958c:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9590:	f2c0 0000 	movt	r0, #0
    9594:	f44f 7121 	mov.w	r1, #644	; 0x284
    9598:	f7fc fe3a 	bl	6210 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    959c:	687a      	ldr	r2, [r7, #4]
    959e:	f240 0300 	movw	r3, #0
    95a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    95a6:	429a      	cmp	r2, r3
    95a8:	d108      	bne.n	95bc <UART_ForceBreak+0x70>
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    95aa:	687b      	ldr	r3, [r7, #4]
    95ac:	687a      	ldr	r2, [r7, #4]
    95ae:	7b12      	ldrb	r2, [r2, #12]
    95b0:	b2d2      	uxtb	r2, r2
    95b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    95b6:	b2d2      	uxtb	r2, r2
    95b8:	731a      	strb	r2, [r3, #12]
    95ba:	e007      	b.n	95cc <UART_ForceBreak+0x80>
	}
	else
	{
		UARTx->LCR |= UART_LCR_BREAK_EN;
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	7b1b      	ldrb	r3, [r3, #12]
    95c0:	b2db      	uxtb	r3, r3
    95c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    95c6:	b2da      	uxtb	r2, r3
    95c8:	687b      	ldr	r3, [r7, #4]
    95ca:	731a      	strb	r2, [r3, #12]
	}
}
    95cc:	f107 0708 	add.w	r7, r7, #8
    95d0:	46bd      	mov	sp, r7
    95d2:	bd80      	pop	{r7, pc}

000095d4 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    95d4:	b580      	push	{r7, lr}
    95d6:	b084      	sub	sp, #16
    95d8:	af00      	add	r7, sp, #0
    95da:	6078      	str	r0, [r7, #4]
    95dc:	4613      	mov	r3, r2
    95de:	460a      	mov	r2, r1
    95e0:	70fa      	strb	r2, [r7, #3]
    95e2:	70bb      	strb	r3, [r7, #2]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    95e4:	687a      	ldr	r2, [r7, #4]
    95e6:	f24c 0300 	movw	r3, #49152	; 0xc000
    95ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
    95ee:	429a      	cmp	r2, r3
    95f0:	d01c      	beq.n	962c <UART_IntConfig+0x58>
    95f2:	687a      	ldr	r2, [r7, #4]
    95f4:	f240 0300 	movw	r3, #0
    95f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    95fc:	429a      	cmp	r2, r3
    95fe:	d015      	beq.n	962c <UART_IntConfig+0x58>
    9600:	687a      	ldr	r2, [r7, #4]
    9602:	f248 0300 	movw	r3, #32768	; 0x8000
    9606:	f2c4 0309 	movt	r3, #16393	; 0x4009
    960a:	429a      	cmp	r2, r3
    960c:	d00e      	beq.n	962c <UART_IntConfig+0x58>
    960e:	687a      	ldr	r2, [r7, #4]
    9610:	f24c 0300 	movw	r3, #49152	; 0xc000
    9614:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9618:	429a      	cmp	r2, r3
    961a:	d007      	beq.n	962c <UART_IntConfig+0x58>
    961c:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9620:	f2c0 0000 	movt	r0, #0
    9624:	f240 21ab 	movw	r1, #683	; 0x2ab
    9628:	f7fc fdf2 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    962c:	78bb      	ldrb	r3, [r7, #2]
    962e:	2b00      	cmp	r3, #0
    9630:	d00a      	beq.n	9648 <UART_IntConfig+0x74>
    9632:	78bb      	ldrb	r3, [r7, #2]
    9634:	2b01      	cmp	r3, #1
    9636:	d007      	beq.n	9648 <UART_IntConfig+0x74>
    9638:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    963c:	f2c0 0000 	movt	r0, #0
    9640:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    9644:	f7fc fde4 	bl	6210 <check_failed>

	switch(UARTIntCfg){
    9648:	78fb      	ldrb	r3, [r7, #3]
    964a:	2b06      	cmp	r3, #6
    964c:	d82b      	bhi.n	96a6 <UART_IntConfig+0xd2>
    964e:	a201      	add	r2, pc, #4	; (adr r2, 9654 <UART_IntConfig+0x80>)
    9650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9654:	00009671 	.word	0x00009671
    9658:	00009679 	.word	0x00009679
    965c:	00009681 	.word	0x00009681
    9660:	00009689 	.word	0x00009689
    9664:	00009691 	.word	0x00009691
    9668:	00009699 	.word	0x00009699
    966c:	000096a1 	.word	0x000096a1
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    9670:	f04f 0301 	mov.w	r3, #1
    9674:	60fb      	str	r3, [r7, #12]
			break;
    9676:	e016      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    9678:	f04f 0302 	mov.w	r3, #2
    967c:	60fb      	str	r3, [r7, #12]
			break;
    967e:	e012      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    9680:	f04f 0304 	mov.w	r3, #4
    9684:	60fb      	str	r3, [r7, #12]
			break;
    9686:	e00e      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    9688:	f04f 0308 	mov.w	r3, #8
    968c:	60fb      	str	r3, [r7, #12]
			break;
    968e:	e00a      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    9690:	f04f 0380 	mov.w	r3, #128	; 0x80
    9694:	60fb      	str	r3, [r7, #12]
			break;
    9696:	e006      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    9698:	f44f 7380 	mov.w	r3, #256	; 0x100
    969c:	60fb      	str	r3, [r7, #12]
			break;
    969e:	e002      	b.n	96a6 <UART_IntConfig+0xd2>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    96a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    96a4:	60fb      	str	r3, [r7, #12]
			break;
	}

	if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    96a6:	687a      	ldr	r2, [r7, #4]
    96a8:	f240 0300 	movw	r3, #0
    96ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    96b0:	429a      	cmp	r2, r3
    96b2:	d11d      	bne.n	96f0 <UART_IntConfig+0x11c>
	{
		CHECK_PARAM((PARAM_UART_INTCFG(UARTIntCfg)) || (PARAM_UART1_INTCFG(UARTIntCfg)));
    96b4:	78fb      	ldrb	r3, [r7, #3]
    96b6:	2b00      	cmp	r3, #0
    96b8:	d031      	beq.n	971e <UART_IntConfig+0x14a>
    96ba:	78fb      	ldrb	r3, [r7, #3]
    96bc:	2b01      	cmp	r3, #1
    96be:	d02e      	beq.n	971e <UART_IntConfig+0x14a>
    96c0:	78fb      	ldrb	r3, [r7, #3]
    96c2:	2b02      	cmp	r3, #2
    96c4:	d02b      	beq.n	971e <UART_IntConfig+0x14a>
    96c6:	78fb      	ldrb	r3, [r7, #3]
    96c8:	2b05      	cmp	r3, #5
    96ca:	d028      	beq.n	971e <UART_IntConfig+0x14a>
    96cc:	78fb      	ldrb	r3, [r7, #3]
    96ce:	2b06      	cmp	r3, #6
    96d0:	d025      	beq.n	971e <UART_IntConfig+0x14a>
    96d2:	78fb      	ldrb	r3, [r7, #3]
    96d4:	2b03      	cmp	r3, #3
    96d6:	d022      	beq.n	971e <UART_IntConfig+0x14a>
    96d8:	78fb      	ldrb	r3, [r7, #3]
    96da:	2b04      	cmp	r3, #4
    96dc:	d01f      	beq.n	971e <UART_IntConfig+0x14a>
    96de:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    96e2:	f2c0 0000 	movt	r0, #0
    96e6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    96ea:	f7fc fd91 	bl	6210 <check_failed>
    96ee:	e016      	b.n	971e <UART_IntConfig+0x14a>
	}
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
    96f0:	78fb      	ldrb	r3, [r7, #3]
    96f2:	2b00      	cmp	r3, #0
    96f4:	d013      	beq.n	971e <UART_IntConfig+0x14a>
    96f6:	78fb      	ldrb	r3, [r7, #3]
    96f8:	2b01      	cmp	r3, #1
    96fa:	d010      	beq.n	971e <UART_IntConfig+0x14a>
    96fc:	78fb      	ldrb	r3, [r7, #3]
    96fe:	2b02      	cmp	r3, #2
    9700:	d00d      	beq.n	971e <UART_IntConfig+0x14a>
    9702:	78fb      	ldrb	r3, [r7, #3]
    9704:	2b05      	cmp	r3, #5
    9706:	d00a      	beq.n	971e <UART_IntConfig+0x14a>
    9708:	78fb      	ldrb	r3, [r7, #3]
    970a:	2b06      	cmp	r3, #6
    970c:	d007      	beq.n	971e <UART_IntConfig+0x14a>
    970e:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9712:	f2c0 0000 	movt	r0, #0
    9716:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    971a:	f7fc fd79 	bl	6210 <check_failed>
	}

	if (NewState == ENABLE)
    971e:	78bb      	ldrb	r3, [r7, #2]
    9720:	2b01      	cmp	r3, #1
    9722:	d116      	bne.n	9752 <UART_IntConfig+0x17e>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    9724:	687a      	ldr	r2, [r7, #4]
    9726:	f240 0300 	movw	r3, #0
    972a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    972e:	429a      	cmp	r2, r3
    9730:	d107      	bne.n	9742 <UART_IntConfig+0x16e>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    9732:	687b      	ldr	r3, [r7, #4]
    9734:	687a      	ldr	r2, [r7, #4]
    9736:	6851      	ldr	r1, [r2, #4]
    9738:	68fa      	ldr	r2, [r7, #12]
    973a:	ea41 0202 	orr.w	r2, r1, r2
    973e:	605a      	str	r2, [r3, #4]
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
    9740:	e02d      	b.n	979e <UART_IntConfig+0x1ca>
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	685a      	ldr	r2, [r3, #4]
    9746:	68fb      	ldr	r3, [r7, #12]
    9748:	ea42 0203 	orr.w	r2, r2, r3
    974c:	687b      	ldr	r3, [r7, #4]
    974e:	605a      	str	r2, [r3, #4]
    9750:	e025      	b.n	979e <UART_IntConfig+0x1ca>
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    9752:	687a      	ldr	r2, [r7, #4]
    9754:	f240 0300 	movw	r3, #0
    9758:	f2c4 0301 	movt	r3, #16385	; 0x4001
    975c:	429a      	cmp	r2, r3
    975e:	d10f      	bne.n	9780 <UART_IntConfig+0x1ac>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    9760:	687a      	ldr	r2, [r7, #4]
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	6859      	ldr	r1, [r3, #4]
    9766:	68fb      	ldr	r3, [r7, #12]
    9768:	ea6f 0303 	mvn.w	r3, r3
    976c:	ea01 0103 	and.w	r1, r1, r3
    9770:	f240 338f 	movw	r3, #911	; 0x38f
    9774:	f2c0 0300 	movt	r3, #0
    9778:	ea01 0303 	and.w	r3, r1, r3
    977c:	6053      	str	r3, [r2, #4]
    977e:	e00e      	b.n	979e <UART_IntConfig+0x1ca>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	685a      	ldr	r2, [r3, #4]
    9784:	68fb      	ldr	r3, [r7, #12]
    9786:	ea6f 0303 	mvn.w	r3, r3
    978a:	ea02 0203 	and.w	r2, r2, r3
    978e:	f240 3307 	movw	r3, #775	; 0x307
    9792:	f2c0 0300 	movt	r3, #0
    9796:	ea02 0303 	and.w	r3, r2, r3
    979a:	687a      	ldr	r2, [r7, #4]
    979c:	6053      	str	r3, [r2, #4]
		}
	}
}
    979e:	f107 0710 	add.w	r7, r7, #16
    97a2:	46bd      	mov	sp, r7
    97a4:	bd80      	pop	{r7, pc}
    97a6:	bf00      	nop

000097a8 <UART_GetLineStatus>:
 * 			Line Status register could not be correct. So this function used to
 * 			read Line status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
{
    97a8:	b580      	push	{r7, lr}
    97aa:	b082      	sub	sp, #8
    97ac:	af00      	add	r7, sp, #0
    97ae:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    97b0:	687a      	ldr	r2, [r7, #4]
    97b2:	f24c 0300 	movw	r3, #49152	; 0xc000
    97b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    97ba:	429a      	cmp	r2, r3
    97bc:	d01c      	beq.n	97f8 <UART_GetLineStatus+0x50>
    97be:	687a      	ldr	r2, [r7, #4]
    97c0:	f240 0300 	movw	r3, #0
    97c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    97c8:	429a      	cmp	r2, r3
    97ca:	d015      	beq.n	97f8 <UART_GetLineStatus+0x50>
    97cc:	687a      	ldr	r2, [r7, #4]
    97ce:	f248 0300 	movw	r3, #32768	; 0x8000
    97d2:	f2c4 0309 	movt	r3, #16393	; 0x4009
    97d6:	429a      	cmp	r2, r3
    97d8:	d00e      	beq.n	97f8 <UART_GetLineStatus+0x50>
    97da:	687a      	ldr	r2, [r7, #4]
    97dc:	f24c 0300 	movw	r3, #49152	; 0xc000
    97e0:	f2c4 0309 	movt	r3, #16393	; 0x4009
    97e4:	429a      	cmp	r2, r3
    97e6:	d007      	beq.n	97f8 <UART_GetLineStatus+0x50>
    97e8:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    97ec:	f2c0 0000 	movt	r0, #0
    97f0:	f240 21fa 	movw	r1, #762	; 0x2fa
    97f4:	f7fc fd0c 	bl	6210 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    97f8:	687a      	ldr	r2, [r7, #4]
    97fa:	f240 0300 	movw	r3, #0
    97fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9802:	429a      	cmp	r2, r3
    9804:	d106      	bne.n	9814 <UART_GetLineStatus+0x6c>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    9806:	f240 0300 	movw	r3, #0
    980a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    980e:	7d1b      	ldrb	r3, [r3, #20]
    9810:	b2db      	uxtb	r3, r3
    9812:	e002      	b.n	981a <UART_GetLineStatus+0x72>
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    9814:	687b      	ldr	r3, [r7, #4]
    9816:	7d1b      	ldrb	r3, [r3, #20]
    9818:	b2db      	uxtb	r3, r3
	}
}
    981a:	4618      	mov	r0, r3
    981c:	f107 0708 	add.w	r7, r7, #8
    9820:	46bd      	mov	sp, r7
    9822:	bd80      	pop	{r7, pc}

00009824 <UART_GetIntId>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
    9824:	b580      	push	{r7, lr}
    9826:	b082      	sub	sp, #8
    9828:	af00      	add	r7, sp, #0
    982a:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    982c:	687a      	ldr	r2, [r7, #4]
    982e:	f24c 0300 	movw	r3, #49152	; 0xc000
    9832:	f2c4 0300 	movt	r3, #16384	; 0x4000
    9836:	429a      	cmp	r2, r3
    9838:	d01c      	beq.n	9874 <UART_GetIntId+0x50>
    983a:	687a      	ldr	r2, [r7, #4]
    983c:	f240 0300 	movw	r3, #0
    9840:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9844:	429a      	cmp	r2, r3
    9846:	d015      	beq.n	9874 <UART_GetIntId+0x50>
    9848:	687a      	ldr	r2, [r7, #4]
    984a:	f248 0300 	movw	r3, #32768	; 0x8000
    984e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9852:	429a      	cmp	r2, r3
    9854:	d00e      	beq.n	9874 <UART_GetIntId+0x50>
    9856:	687a      	ldr	r2, [r7, #4]
    9858:	f24c 0300 	movw	r3, #49152	; 0xc000
    985c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9860:	429a      	cmp	r2, r3
    9862:	d007      	beq.n	9874 <UART_GetIntId+0x50>
    9864:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9868:	f2c0 0000 	movt	r0, #0
    986c:	f240 3111 	movw	r1, #785	; 0x311
    9870:	f7fc fcce 	bl	6210 <check_failed>
	return (UARTx->IIR & 0x03CF);
    9874:	687b      	ldr	r3, [r7, #4]
    9876:	689a      	ldr	r2, [r3, #8]
    9878:	f240 33cf 	movw	r3, #975	; 0x3cf
    987c:	f2c0 0300 	movt	r3, #0
    9880:	ea02 0303 	and.w	r3, r2, r3
}
    9884:	4618      	mov	r0, r3
    9886:	f107 0708 	add.w	r7, r7, #8
    988a:	46bd      	mov	sp, r7
    988c:	bd80      	pop	{r7, pc}
    988e:	bf00      	nop

00009890 <UART_CheckBusy>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
    9890:	b480      	push	{r7}
    9892:	b083      	sub	sp, #12
    9894:	af00      	add	r7, sp, #0
    9896:	6078      	str	r0, [r7, #4]
	if (UARTx->LSR & UART_LSR_TEMT){
    9898:	687b      	ldr	r3, [r7, #4]
    989a:	7d1b      	ldrb	r3, [r3, #20]
    989c:	b2db      	uxtb	r3, r3
    989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98a2:	2b00      	cmp	r3, #0
    98a4:	d002      	beq.n	98ac <UART_CheckBusy+0x1c>
		return RESET;
    98a6:	f04f 0300 	mov.w	r3, #0
    98aa:	e001      	b.n	98b0 <UART_CheckBusy+0x20>
	} else {
		return SET;
    98ac:	f04f 0301 	mov.w	r3, #1
	}
}
    98b0:	4618      	mov	r0, r3
    98b2:	f107 070c 	add.w	r7, r7, #12
    98b6:	46bd      	mov	sp, r7
    98b8:	bc80      	pop	{r7}
    98ba:	4770      	bx	lr

000098bc <UART_FIFOConfig>:
 * @param[in]	FIFOCfg	Pointer to a UART_FIFO_CFG_Type Structure that
 * 						contains specified information about FIFO configuration
 * @return 		none
 **********************************************************************/
void UART_FIFOConfig(LPC_UART_TypeDef *UARTx, UART_FIFO_CFG_Type *FIFOCfg)
{
    98bc:	b580      	push	{r7, lr}
    98be:	b084      	sub	sp, #16
    98c0:	af00      	add	r7, sp, #0
    98c2:	6078      	str	r0, [r7, #4]
    98c4:	6039      	str	r1, [r7, #0]
	uint8_t tmp = 0;
    98c6:	f04f 0300 	mov.w	r3, #0
    98ca:	73fb      	strb	r3, [r7, #15]

	CHECK_PARAM(PARAM_UARTx(UARTx));
    98cc:	687a      	ldr	r2, [r7, #4]
    98ce:	f24c 0300 	movw	r3, #49152	; 0xc000
    98d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    98d6:	429a      	cmp	r2, r3
    98d8:	d01c      	beq.n	9914 <UART_FIFOConfig+0x58>
    98da:	687a      	ldr	r2, [r7, #4]
    98dc:	f240 0300 	movw	r3, #0
    98e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    98e4:	429a      	cmp	r2, r3
    98e6:	d015      	beq.n	9914 <UART_FIFOConfig+0x58>
    98e8:	687a      	ldr	r2, [r7, #4]
    98ea:	f248 0300 	movw	r3, #32768	; 0x8000
    98ee:	f2c4 0309 	movt	r3, #16393	; 0x4009
    98f2:	429a      	cmp	r2, r3
    98f4:	d00e      	beq.n	9914 <UART_FIFOConfig+0x58>
    98f6:	687a      	ldr	r2, [r7, #4]
    98f8:	f24c 0300 	movw	r3, #49152	; 0xc000
    98fc:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9900:	429a      	cmp	r2, r3
    9902:	d007      	beq.n	9914 <UART_FIFOConfig+0x58>
    9904:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9908:	f2c0 0000 	movt	r0, #0
    990c:	f240 3137 	movw	r1, #823	; 0x337
    9910:	f7fc fc7e 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_FIFO_LEVEL(FIFOCfg->FIFO_Level));
    9914:	683b      	ldr	r3, [r7, #0]
    9916:	78db      	ldrb	r3, [r3, #3]
    9918:	2b00      	cmp	r3, #0
    991a:	d013      	beq.n	9944 <UART_FIFOConfig+0x88>
    991c:	683b      	ldr	r3, [r7, #0]
    991e:	78db      	ldrb	r3, [r3, #3]
    9920:	2b01      	cmp	r3, #1
    9922:	d00f      	beq.n	9944 <UART_FIFOConfig+0x88>
    9924:	683b      	ldr	r3, [r7, #0]
    9926:	78db      	ldrb	r3, [r3, #3]
    9928:	2b02      	cmp	r3, #2
    992a:	d00b      	beq.n	9944 <UART_FIFOConfig+0x88>
    992c:	683b      	ldr	r3, [r7, #0]
    992e:	78db      	ldrb	r3, [r3, #3]
    9930:	2b03      	cmp	r3, #3
    9932:	d007      	beq.n	9944 <UART_FIFOConfig+0x88>
    9934:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9938:	f2c0 0000 	movt	r0, #0
    993c:	f44f 714e 	mov.w	r1, #824	; 0x338
    9940:	f7fc fc66 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
    9944:	683b      	ldr	r3, [r7, #0]
    9946:	789b      	ldrb	r3, [r3, #2]
    9948:	2b00      	cmp	r3, #0
    994a:	d00b      	beq.n	9964 <UART_FIFOConfig+0xa8>
    994c:	683b      	ldr	r3, [r7, #0]
    994e:	789b      	ldrb	r3, [r3, #2]
    9950:	2b01      	cmp	r3, #1
    9952:	d007      	beq.n	9964 <UART_FIFOConfig+0xa8>
    9954:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9958:	f2c0 0000 	movt	r0, #0
    995c:	f240 3139 	movw	r1, #825	; 0x339
    9960:	f7fc fc56 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
    9964:	683b      	ldr	r3, [r7, #0]
    9966:	781b      	ldrb	r3, [r3, #0]
    9968:	2b00      	cmp	r3, #0
    996a:	d00b      	beq.n	9984 <UART_FIFOConfig+0xc8>
    996c:	683b      	ldr	r3, [r7, #0]
    996e:	781b      	ldrb	r3, [r3, #0]
    9970:	2b01      	cmp	r3, #1
    9972:	d007      	beq.n	9984 <UART_FIFOConfig+0xc8>
    9974:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9978:	f2c0 0000 	movt	r0, #0
    997c:	f240 313a 	movw	r1, #826	; 0x33a
    9980:	f7fc fc46 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));
    9984:	683b      	ldr	r3, [r7, #0]
    9986:	785b      	ldrb	r3, [r3, #1]
    9988:	2b00      	cmp	r3, #0
    998a:	d00b      	beq.n	99a4 <UART_FIFOConfig+0xe8>
    998c:	683b      	ldr	r3, [r7, #0]
    998e:	785b      	ldrb	r3, [r3, #1]
    9990:	2b01      	cmp	r3, #1
    9992:	d007      	beq.n	99a4 <UART_FIFOConfig+0xe8>
    9994:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9998:	f2c0 0000 	movt	r0, #0
    999c:	f240 313b 	movw	r1, #827	; 0x33b
    99a0:	f7fc fc36 	bl	6210 <check_failed>

	tmp |= UART_FCR_FIFO_EN;
    99a4:	7bfb      	ldrb	r3, [r7, #15]
    99a6:	f043 0301 	orr.w	r3, r3, #1
    99aa:	73fb      	strb	r3, [r7, #15]
	switch (FIFOCfg->FIFO_Level){
    99ac:	683b      	ldr	r3, [r7, #0]
    99ae:	78db      	ldrb	r3, [r3, #3]
    99b0:	2b01      	cmp	r3, #1
    99b2:	d004      	beq.n	99be <UART_FIFOConfig+0x102>
    99b4:	2b02      	cmp	r3, #2
    99b6:	d007      	beq.n	99c8 <UART_FIFOConfig+0x10c>
    99b8:	2b00      	cmp	r3, #0
    99ba:	d013      	beq.n	99e4 <UART_FIFOConfig+0x128>
    99bc:	e00b      	b.n	99d6 <UART_FIFOConfig+0x11a>
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
	case UART_FIFO_TRGLEV1:
		tmp |= UART_FCR_TRG_LEV1;
    99be:	7bfb      	ldrb	r3, [r7, #15]
    99c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    99c4:	73fb      	strb	r3, [r7, #15]
		break;
    99c6:	e00e      	b.n	99e6 <UART_FIFOConfig+0x12a>
	case UART_FIFO_TRGLEV2:
		tmp |= UART_FCR_TRG_LEV2;
    99c8:	7bfb      	ldrb	r3, [r7, #15]
    99ca:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    99ce:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    99d2:	73fb      	strb	r3, [r7, #15]
		break;
    99d4:	e007      	b.n	99e6 <UART_FIFOConfig+0x12a>
	case UART_FIFO_TRGLEV3:
	default:
		tmp |= UART_FCR_TRG_LEV3;
    99d6:	7bfb      	ldrb	r3, [r7, #15]
    99d8:	ea6f 6383 	mvn.w	r3, r3, lsl #26
    99dc:	ea6f 6393 	mvn.w	r3, r3, lsr #26
    99e0:	73fb      	strb	r3, [r7, #15]
    99e2:	e000      	b.n	99e6 <UART_FIFOConfig+0x12a>

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
	case UART_FIFO_TRGLEV0:
		tmp |= UART_FCR_TRG_LEV0;
		break;
    99e4:	bf00      	nop
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    99e6:	683b      	ldr	r3, [r7, #0]
    99e8:	785b      	ldrb	r3, [r3, #1]
    99ea:	2b01      	cmp	r3, #1
    99ec:	d103      	bne.n	99f6 <UART_FIFOConfig+0x13a>
	{
		tmp |= UART_FCR_TX_RS;
    99ee:	7bfb      	ldrb	r3, [r7, #15]
    99f0:	f043 0304 	orr.w	r3, r3, #4
    99f4:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    99f6:	683b      	ldr	r3, [r7, #0]
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	2b01      	cmp	r3, #1
    99fc:	d103      	bne.n	9a06 <UART_FIFOConfig+0x14a>
	{
		tmp |= UART_FCR_RX_RS;
    99fe:	7bfb      	ldrb	r3, [r7, #15]
    9a00:	f043 0302 	orr.w	r3, r3, #2
    9a04:	73fb      	strb	r3, [r7, #15]
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    9a06:	683b      	ldr	r3, [r7, #0]
    9a08:	789b      	ldrb	r3, [r3, #2]
    9a0a:	2b01      	cmp	r3, #1
    9a0c:	d103      	bne.n	9a16 <UART_FIFOConfig+0x15a>
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    9a0e:	7bfb      	ldrb	r3, [r7, #15]
    9a10:	f043 0308 	orr.w	r3, r3, #8
    9a14:	73fb      	strb	r3, [r7, #15]
	}


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9a16:	687a      	ldr	r2, [r7, #4]
    9a18:	f240 0300 	movw	r3, #0
    9a1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9a20:	429a      	cmp	r2, r3
    9a22:	d105      	bne.n	9a30 <UART_FIFOConfig+0x174>
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    9a24:	687a      	ldr	r2, [r7, #4]
    9a26:	7bfb      	ldrb	r3, [r7, #15]
    9a28:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    9a2c:	7213      	strb	r3, [r2, #8]
    9a2e:	e004      	b.n	9a3a <UART_FIFOConfig+0x17e>
	}
	else
	{
		UARTx->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    9a30:	7bfb      	ldrb	r3, [r7, #15]
    9a32:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    9a36:	687a      	ldr	r2, [r7, #4]
    9a38:	7213      	strb	r3, [r2, #8]
	}
}
    9a3a:	f107 0710 	add.w	r7, r7, #16
    9a3e:	46bd      	mov	sp, r7
    9a40:	bd80      	pop	{r7, pc}
    9a42:	bf00      	nop

00009a44 <UART_FIFOConfigStructInit>:
* @param[in]	UART_FIFOInitStruct Pointer to a UART_FIFO_CFG_Type structure
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
    9a44:	b480      	push	{r7}
    9a46:	b083      	sub	sp, #12
    9a48:	af00      	add	r7, sp, #0
    9a4a:	6078      	str	r0, [r7, #4]
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    9a4c:	687b      	ldr	r3, [r7, #4]
    9a4e:	f04f 0200 	mov.w	r2, #0
    9a52:	709a      	strb	r2, [r3, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	f04f 0200 	mov.w	r2, #0
    9a5a:	70da      	strb	r2, [r3, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    9a5c:	687b      	ldr	r3, [r7, #4]
    9a5e:	f04f 0201 	mov.w	r2, #1
    9a62:	701a      	strb	r2, [r3, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    9a64:	687b      	ldr	r3, [r7, #4]
    9a66:	f04f 0201 	mov.w	r2, #1
    9a6a:	705a      	strb	r2, [r3, #1]
}
    9a6c:	f107 070c 	add.w	r7, r7, #12
    9a70:	46bd      	mov	sp, r7
    9a72:	bc80      	pop	{r7}
    9a74:	4770      	bx	lr
    9a76:	bf00      	nop

00009a78 <UART_ABCmd>:
 * 				completed.
 * @return 		none
 **********************************************************************/
void UART_ABCmd(LPC_UART_TypeDef *UARTx, UART_AB_CFG_Type *ABConfigStruct, \
				FunctionalState NewState)
{
    9a78:	b580      	push	{r7, lr}
    9a7a:	b086      	sub	sp, #24
    9a7c:	af00      	add	r7, sp, #0
    9a7e:	60f8      	str	r0, [r7, #12]
    9a80:	60b9      	str	r1, [r7, #8]
    9a82:	4613      	mov	r3, r2
    9a84:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    9a86:	68fa      	ldr	r2, [r7, #12]
    9a88:	f24c 0300 	movw	r3, #49152	; 0xc000
    9a8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    9a90:	429a      	cmp	r2, r3
    9a92:	d01c      	beq.n	9ace <UART_ABCmd+0x56>
    9a94:	68fa      	ldr	r2, [r7, #12]
    9a96:	f240 0300 	movw	r3, #0
    9a9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9a9e:	429a      	cmp	r2, r3
    9aa0:	d015      	beq.n	9ace <UART_ABCmd+0x56>
    9aa2:	68fa      	ldr	r2, [r7, #12]
    9aa4:	f248 0300 	movw	r3, #32768	; 0x8000
    9aa8:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9aac:	429a      	cmp	r2, r3
    9aae:	d00e      	beq.n	9ace <UART_ABCmd+0x56>
    9ab0:	68fa      	ldr	r2, [r7, #12]
    9ab2:	f24c 0300 	movw	r3, #49152	; 0xc000
    9ab6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9aba:	429a      	cmp	r2, r3
    9abc:	d007      	beq.n	9ace <UART_ABCmd+0x56>
    9abe:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9ac2:	f2c0 0000 	movt	r0, #0
    9ac6:	f240 3192 	movw	r1, #914	; 0x392
    9aca:	f7fc fba1 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    9ace:	79fb      	ldrb	r3, [r7, #7]
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d00a      	beq.n	9aea <UART_ABCmd+0x72>
    9ad4:	79fb      	ldrb	r3, [r7, #7]
    9ad6:	2b01      	cmp	r3, #1
    9ad8:	d007      	beq.n	9aea <UART_ABCmd+0x72>
    9ada:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9ade:	f2c0 0000 	movt	r0, #0
    9ae2:	f240 3193 	movw	r1, #915	; 0x393
    9ae6:	f7fc fb93 	bl	6210 <check_failed>

	tmp = 0;
    9aea:	f04f 0300 	mov.w	r3, #0
    9aee:	617b      	str	r3, [r7, #20]
	if (NewState == ENABLE) {
    9af0:	79fb      	ldrb	r3, [r7, #7]
    9af2:	2b01      	cmp	r3, #1
    9af4:	d10f      	bne.n	9b16 <UART_ABCmd+0x9e>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    9af6:	68bb      	ldr	r3, [r7, #8]
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	2b01      	cmp	r3, #1
    9afc:	d103      	bne.n	9b06 <UART_ABCmd+0x8e>
			tmp |= UART_ACR_MODE;
    9afe:	697b      	ldr	r3, [r7, #20]
    9b00:	f043 0302 	orr.w	r3, r3, #2
    9b04:	617b      	str	r3, [r7, #20]
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    9b06:	68bb      	ldr	r3, [r7, #8]
    9b08:	785b      	ldrb	r3, [r3, #1]
    9b0a:	2b01      	cmp	r3, #1
    9b0c:	d103      	bne.n	9b16 <UART_ABCmd+0x9e>
			tmp |= UART_ACR_AUTO_RESTART;
    9b0e:	697b      	ldr	r3, [r7, #20]
    9b10:	f043 0304 	orr.w	r3, r3, #4
    9b14:	617b      	str	r3, [r7, #20]
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9b16:	68fa      	ldr	r2, [r7, #12]
    9b18:	f240 0300 	movw	r3, #0
    9b1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9b20:	429a      	cmp	r2, r3
    9b22:	d12a      	bne.n	9b7a <UART_ABCmd+0x102>
	{
		if (NewState == ENABLE)
    9b24:	79fb      	ldrb	r3, [r7, #7]
    9b26:	2b01      	cmp	r3, #1
    9b28:	d122      	bne.n	9b70 <UART_ABCmd+0xf8>
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    9b2a:	68fa      	ldr	r2, [r7, #12]
    9b2c:	68fb      	ldr	r3, [r7, #12]
    9b2e:	7b1b      	ldrb	r3, [r3, #12]
    9b30:	b2db      	uxtb	r3, r3
    9b32:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    9b36:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    9b3a:	b2db      	uxtb	r3, r3
    9b3c:	7313      	strb	r3, [r2, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    9b3e:	68fb      	ldr	r3, [r7, #12]
    9b40:	f04f 0200 	mov.w	r2, #0
    9b44:	701a      	strb	r2, [r3, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    9b46:	68fb      	ldr	r3, [r7, #12]
    9b48:	f04f 0200 	mov.w	r2, #0
    9b4c:	711a      	strb	r2, [r3, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    9b4e:	68fa      	ldr	r2, [r7, #12]
    9b50:	68fb      	ldr	r3, [r7, #12]
    9b52:	7b1b      	ldrb	r3, [r3, #12]
    9b54:	b2db      	uxtb	r3, r3
    9b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b5a:	7313      	strb	r3, [r2, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    9b5c:	68fb      	ldr	r3, [r7, #12]
    9b5e:	f04f 0210 	mov.w	r2, #16
    9b62:	629a      	str	r2, [r3, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
    9b64:	68fb      	ldr	r3, [r7, #12]
    9b66:	697a      	ldr	r2, [r7, #20]
    9b68:	f042 0201 	orr.w	r2, r2, #1
    9b6c:	621a      	str	r2, [r3, #32]
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    9b6e:	e02f      	b.n	9bd0 <UART_ABCmd+0x158>
    9b70:	68fb      	ldr	r3, [r7, #12]
    9b72:	f04f 0200 	mov.w	r2, #0
    9b76:	621a      	str	r2, [r3, #32]
    9b78:	e02a      	b.n	9bd0 <UART_ABCmd+0x158>
		}
	}
	else
	{
		if (NewState == ENABLE)
    9b7a:	79fb      	ldrb	r3, [r7, #7]
    9b7c:	2b01      	cmp	r3, #1
    9b7e:	d123      	bne.n	9bc8 <UART_ABCmd+0x150>
		{
			// Clear DLL and DLM value
			UARTx->LCR |= UART_LCR_DLAB_EN;
    9b80:	68fb      	ldr	r3, [r7, #12]
    9b82:	7b1b      	ldrb	r3, [r3, #12]
    9b84:	b2db      	uxtb	r3, r3
    9b86:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    9b8a:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    9b8e:	b2da      	uxtb	r2, r3
    9b90:	68fb      	ldr	r3, [r7, #12]
    9b92:	731a      	strb	r2, [r3, #12]
			UARTx->DLL = 0;
    9b94:	68fb      	ldr	r3, [r7, #12]
    9b96:	f04f 0200 	mov.w	r2, #0
    9b9a:	701a      	strb	r2, [r3, #0]
			UARTx->DLM = 0;
    9b9c:	68fb      	ldr	r3, [r7, #12]
    9b9e:	f04f 0200 	mov.w	r2, #0
    9ba2:	711a      	strb	r2, [r3, #4]
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
    9ba4:	68fb      	ldr	r3, [r7, #12]
    9ba6:	7b1b      	ldrb	r3, [r3, #12]
    9ba8:	b2db      	uxtb	r3, r3
    9baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9bae:	68fa      	ldr	r2, [r7, #12]
    9bb0:	7313      	strb	r3, [r2, #12]
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
    9bb2:	68fb      	ldr	r3, [r7, #12]
    9bb4:	f04f 0210 	mov.w	r2, #16
    9bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			UARTx->ACR = UART_ACR_START | tmp;
    9bbc:	697b      	ldr	r3, [r7, #20]
    9bbe:	f043 0201 	orr.w	r2, r3, #1
    9bc2:	68fb      	ldr	r3, [r7, #12]
    9bc4:	621a      	str	r2, [r3, #32]
    9bc6:	e003      	b.n	9bd0 <UART_ABCmd+0x158>
		}
		else
		{
			UARTx->ACR = 0;
    9bc8:	68fb      	ldr	r3, [r7, #12]
    9bca:	f04f 0200 	mov.w	r2, #0
    9bce:	621a      	str	r2, [r3, #32]
		}
	}
}
    9bd0:	f107 0718 	add.w	r7, r7, #24
    9bd4:	46bd      	mov	sp, r7
    9bd6:	bd80      	pop	{r7, pc}

00009bd8 <UART_ABClearIntPending>:
 * 				- UART_AUTOBAUD_INTSTAT_ABEO: End of Auto-baud interrupt
 * 				- UART_AUTOBAUD_INTSTAT_ABTO: Auto-baud time out interrupt
 * @return 		none
 **********************************************************************/
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
    9bd8:	b580      	push	{r7, lr}
    9bda:	b082      	sub	sp, #8
    9bdc:	af00      	add	r7, sp, #0
    9bde:	6078      	str	r0, [r7, #4]
    9be0:	460b      	mov	r3, r1
    9be2:	807b      	strh	r3, [r7, #2]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    9be4:	687a      	ldr	r2, [r7, #4]
    9be6:	f24c 0300 	movw	r3, #49152	; 0xc000
    9bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
    9bee:	429a      	cmp	r2, r3
    9bf0:	d01c      	beq.n	9c2c <UART_ABClearIntPending+0x54>
    9bf2:	687a      	ldr	r2, [r7, #4]
    9bf4:	f240 0300 	movw	r3, #0
    9bf8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9bfc:	429a      	cmp	r2, r3
    9bfe:	d015      	beq.n	9c2c <UART_ABClearIntPending+0x54>
    9c00:	687a      	ldr	r2, [r7, #4]
    9c02:	f248 0300 	movw	r3, #32768	; 0x8000
    9c06:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9c0a:	429a      	cmp	r2, r3
    9c0c:	d00e      	beq.n	9c2c <UART_ABClearIntPending+0x54>
    9c0e:	687a      	ldr	r2, [r7, #4]
    9c10:	f24c 0300 	movw	r3, #49152	; 0xc000
    9c14:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9c18:	429a      	cmp	r2, r3
    9c1a:	d007      	beq.n	9c2c <UART_ABClearIntPending+0x54>
    9c1c:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9c20:	f2c0 0000 	movt	r0, #0
    9c24:	f240 31d3 	movw	r1, #979	; 0x3d3
    9c28:	f7fc faf2 	bl	6210 <check_failed>
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9c2c:	687a      	ldr	r2, [r7, #4]
    9c2e:	f240 0300 	movw	r3, #0
    9c32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9c36:	429a      	cmp	r2, r3
    9c38:	d107      	bne.n	9c4a <UART_ABClearIntPending+0x72>
	{
		UARTx->ACR |= ABIntType;
    9c3a:	687b      	ldr	r3, [r7, #4]
    9c3c:	6a1a      	ldr	r2, [r3, #32]
    9c3e:	887b      	ldrh	r3, [r7, #2]
    9c40:	ea42 0203 	orr.w	r2, r2, r3
    9c44:	687b      	ldr	r3, [r7, #4]
    9c46:	621a      	str	r2, [r3, #32]
    9c48:	e006      	b.n	9c58 <UART_ABClearIntPending+0x80>
	}
	else
		UARTx->ACR |= ABIntType;
    9c4a:	687b      	ldr	r3, [r7, #4]
    9c4c:	6a1a      	ldr	r2, [r3, #32]
    9c4e:	887b      	ldrh	r3, [r7, #2]
    9c50:	ea42 0203 	orr.w	r2, r2, r3
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	621a      	str	r2, [r3, #32]
}
    9c58:	f107 0708 	add.w	r7, r7, #8
    9c5c:	46bd      	mov	sp, r7
    9c5e:	bd80      	pop	{r7, pc}

00009c60 <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
    9c60:	b580      	push	{r7, lr}
    9c62:	b082      	sub	sp, #8
    9c64:	af00      	add	r7, sp, #0
    9c66:	6078      	str	r0, [r7, #4]
    9c68:	460b      	mov	r3, r1
    9c6a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UARTx(UARTx));
    9c6c:	687a      	ldr	r2, [r7, #4]
    9c6e:	f24c 0300 	movw	r3, #49152	; 0xc000
    9c72:	f2c4 0300 	movt	r3, #16384	; 0x4000
    9c76:	429a      	cmp	r2, r3
    9c78:	d01c      	beq.n	9cb4 <UART_TxCmd+0x54>
    9c7a:	687a      	ldr	r2, [r7, #4]
    9c7c:	f240 0300 	movw	r3, #0
    9c80:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9c84:	429a      	cmp	r2, r3
    9c86:	d015      	beq.n	9cb4 <UART_TxCmd+0x54>
    9c88:	687a      	ldr	r2, [r7, #4]
    9c8a:	f248 0300 	movw	r3, #32768	; 0x8000
    9c8e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9c92:	429a      	cmp	r2, r3
    9c94:	d00e      	beq.n	9cb4 <UART_TxCmd+0x54>
    9c96:	687a      	ldr	r2, [r7, #4]
    9c98:	f24c 0300 	movw	r3, #49152	; 0xc000
    9c9c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9ca0:	429a      	cmp	r2, r3
    9ca2:	d007      	beq.n	9cb4 <UART_TxCmd+0x54>
    9ca4:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9ca8:	f2c0 0000 	movt	r0, #0
    9cac:	f240 31ea 	movw	r1, #1002	; 0x3ea
    9cb0:	f7fc faae 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    9cb4:	78fb      	ldrb	r3, [r7, #3]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d00a      	beq.n	9cd0 <UART_TxCmd+0x70>
    9cba:	78fb      	ldrb	r3, [r7, #3]
    9cbc:	2b01      	cmp	r3, #1
    9cbe:	d007      	beq.n	9cd0 <UART_TxCmd+0x70>
    9cc0:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9cc4:	f2c0 0000 	movt	r0, #0
    9cc8:	f240 31eb 	movw	r1, #1003	; 0x3eb
    9ccc:	f7fc faa0 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    9cd0:	78fb      	ldrb	r3, [r7, #3]
    9cd2:	2b01      	cmp	r3, #1
    9cd4:	d120      	bne.n	9d18 <UART_TxCmd+0xb8>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9cd6:	687a      	ldr	r2, [r7, #4]
    9cd8:	f240 0300 	movw	r3, #0
    9cdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9ce0:	429a      	cmp	r2, r3
    9ce2:	d10c      	bne.n	9cfe <UART_TxCmd+0x9e>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    9ce4:	687a      	ldr	r2, [r7, #4]
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9cec:	b2db      	uxtb	r3, r3
    9cee:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    9cf2:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    9cf6:	b2db      	uxtb	r3, r3
    9cf8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
    9cfc:	e024      	b.n	9d48 <UART_TxCmd+0xe8>
    9cfe:	687b      	ldr	r3, [r7, #4]
    9d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9d04:	b2db      	uxtb	r3, r3
    9d06:	ea6f 6343 	mvn.w	r3, r3, lsl #25
    9d0a:	ea6f 6353 	mvn.w	r3, r3, lsr #25
    9d0e:	b2da      	uxtb	r2, r3
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    9d16:	e017      	b.n	9d48 <UART_TxCmd+0xe8>
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    9d18:	687a      	ldr	r2, [r7, #4]
    9d1a:	f240 0300 	movw	r3, #0
    9d1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9d22:	429a      	cmp	r2, r3
    9d24:	d108      	bne.n	9d38 <UART_TxCmd+0xd8>
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	f04f 0200 	mov.w	r2, #0
    9d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    9d36:	e007      	b.n	9d48 <UART_TxCmd+0xe8>
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	f04f 0200 	mov.w	r2, #0
    9d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
    9d48:	f107 0708 	add.w	r7, r7, #8
    9d4c:	46bd      	mov	sp, r7
    9d4e:	bd80      	pop	{r7, pc}

00009d50 <UART_IrDAInvtInputCmd>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return none
 **********************************************************************/
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
    9d50:	b580      	push	{r7, lr}
    9d52:	b082      	sub	sp, #8
    9d54:	af00      	add	r7, sp, #0
    9d56:	6078      	str	r0, [r7, #4]
    9d58:	460b      	mov	r3, r1
    9d5a:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    9d5c:	687a      	ldr	r2, [r7, #4]
    9d5e:	f24c 0300 	movw	r3, #49152	; 0xc000
    9d62:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9d66:	429a      	cmp	r2, r3
    9d68:	d007      	beq.n	9d7a <UART_IrDAInvtInputCmd+0x2a>
    9d6a:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9d6e:	f2c0 0000 	movt	r0, #0
    9d72:	f240 4114 	movw	r1, #1044	; 0x414
    9d76:	f7fc fa4b 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    9d7a:	78fb      	ldrb	r3, [r7, #3]
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d00a      	beq.n	9d96 <UART_IrDAInvtInputCmd+0x46>
    9d80:	78fb      	ldrb	r3, [r7, #3]
    9d82:	2b01      	cmp	r3, #1
    9d84:	d007      	beq.n	9d96 <UART_IrDAInvtInputCmd+0x46>
    9d86:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9d8a:	f2c0 0000 	movt	r0, #0
    9d8e:	f240 4115 	movw	r1, #1045	; 0x415
    9d92:	f7fc fa3d 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    9d96:	78fb      	ldrb	r3, [r7, #3]
    9d98:	2b01      	cmp	r3, #1
    9d9a:	d10a      	bne.n	9db2 <UART_IrDAInvtInputCmd+0x62>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    9d9c:	687b      	ldr	r3, [r7, #4]
    9d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9da2:	b2db      	uxtb	r3, r3
    9da4:	f043 0302 	orr.w	r3, r3, #2
    9da8:	b2da      	uxtb	r2, r3
    9daa:	687b      	ldr	r3, [r7, #4]
    9dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    9db0:	e00b      	b.n	9dca <UART_IrDAInvtInputCmd+0x7a>
	}
	else if (NewState == DISABLE)
    9db2:	78fb      	ldrb	r3, [r7, #3]
    9db4:	2b00      	cmp	r3, #0
    9db6:	d108      	bne.n	9dca <UART_IrDAInvtInputCmd+0x7a>
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    9db8:	687b      	ldr	r3, [r7, #4]
    9dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9dbe:	b2db      	uxtb	r3, r3
    9dc0:	f003 033d 	and.w	r3, r3, #61	; 0x3d
    9dc4:	687a      	ldr	r2, [r7, #4]
    9dc6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
}
    9dca:	f107 0708 	add.w	r7, r7, #8
    9dce:	46bd      	mov	sp, r7
    9dd0:	bd80      	pop	{r7, pc}
    9dd2:	bf00      	nop

00009dd4 <UART_IrDACmd>:
 * 				- ENABLE: Enable this function.
 * 				- DISABLE: Disable this function.
 * @return none
 **********************************************************************/
void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
    9dd4:	b580      	push	{r7, lr}
    9dd6:	b082      	sub	sp, #8
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	460b      	mov	r3, r1
    9dde:	70fb      	strb	r3, [r7, #3]
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    9de0:	687a      	ldr	r2, [r7, #4]
    9de2:	f24c 0300 	movw	r3, #49152	; 0xc000
    9de6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9dea:	429a      	cmp	r2, r3
    9dec:	d007      	beq.n	9dfe <UART_IrDACmd+0x2a>
    9dee:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9df2:	f2c0 0000 	movt	r0, #0
    9df6:	f240 412c 	movw	r1, #1068	; 0x42c
    9dfa:	f7fc fa09 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    9dfe:	78fb      	ldrb	r3, [r7, #3]
    9e00:	2b00      	cmp	r3, #0
    9e02:	d00a      	beq.n	9e1a <UART_IrDACmd+0x46>
    9e04:	78fb      	ldrb	r3, [r7, #3]
    9e06:	2b01      	cmp	r3, #1
    9e08:	d007      	beq.n	9e1a <UART_IrDACmd+0x46>
    9e0a:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9e0e:	f2c0 0000 	movt	r0, #0
    9e12:	f240 412d 	movw	r1, #1069	; 0x42d
    9e16:	f7fc f9fb 	bl	6210 <check_failed>

	if (NewState == ENABLE)
    9e1a:	78fb      	ldrb	r3, [r7, #3]
    9e1c:	2b01      	cmp	r3, #1
    9e1e:	d10a      	bne.n	9e36 <UART_IrDACmd+0x62>
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    9e20:	687b      	ldr	r3, [r7, #4]
    9e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e26:	b2db      	uxtb	r3, r3
    9e28:	f043 0301 	orr.w	r3, r3, #1
    9e2c:	b2da      	uxtb	r2, r3
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    9e34:	e008      	b.n	9e48 <UART_IrDACmd+0x74>
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e3c:	b2db      	uxtb	r3, r3
    9e3e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    9e42:	687a      	ldr	r2, [r7, #4]
    9e44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
}
    9e48:	f107 0708 	add.w	r7, r7, #8
    9e4c:	46bd      	mov	sp, r7
    9e4e:	bd80      	pop	{r7, pc}

00009e50 <UART_IrDAPulseDivConfig>:
				- UART_IrDA_PULSEDIV256 : Pulse width = 256 * Tpclk

 * @return none
 **********************************************************************/
void UART_IrDAPulseDivConfig(LPC_UART_TypeDef *UARTx, UART_IrDA_PULSE_Type PulseDiv)
{
    9e50:	b580      	push	{r7, lr}
    9e52:	b084      	sub	sp, #16
    9e54:	af00      	add	r7, sp, #0
    9e56:	6078      	str	r0, [r7, #4]
    9e58:	460b      	mov	r3, r1
    9e5a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
    9e5c:	687a      	ldr	r2, [r7, #4]
    9e5e:	f24c 0300 	movw	r3, #49152	; 0xc000
    9e62:	f2c4 0309 	movt	r3, #16393	; 0x4009
    9e66:	429a      	cmp	r2, r3
    9e68:	d007      	beq.n	9e7a <UART_IrDAPulseDivConfig+0x2a>
    9e6a:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9e6e:	f2c0 0000 	movt	r0, #0
    9e72:	f240 414d 	movw	r1, #1101	; 0x44d
    9e76:	f7fc f9cb 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));
    9e7a:	78fb      	ldrb	r3, [r7, #3]
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d01c      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e80:	78fb      	ldrb	r3, [r7, #3]
    9e82:	2b01      	cmp	r3, #1
    9e84:	d019      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e86:	78fb      	ldrb	r3, [r7, #3]
    9e88:	2b02      	cmp	r3, #2
    9e8a:	d016      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e8c:	78fb      	ldrb	r3, [r7, #3]
    9e8e:	2b03      	cmp	r3, #3
    9e90:	d013      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e92:	78fb      	ldrb	r3, [r7, #3]
    9e94:	2b04      	cmp	r3, #4
    9e96:	d010      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e98:	78fb      	ldrb	r3, [r7, #3]
    9e9a:	2b05      	cmp	r3, #5
    9e9c:	d00d      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9e9e:	78fb      	ldrb	r3, [r7, #3]
    9ea0:	2b06      	cmp	r3, #6
    9ea2:	d00a      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9ea4:	78fb      	ldrb	r3, [r7, #3]
    9ea6:	2b07      	cmp	r3, #7
    9ea8:	d007      	beq.n	9eba <UART_IrDAPulseDivConfig+0x6a>
    9eaa:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9eae:	f2c0 0000 	movt	r0, #0
    9eb2:	f240 414e 	movw	r1, #1102	; 0x44e
    9eb6:	f7fc f9ab 	bl	6210 <check_failed>

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    9eba:	78fb      	ldrb	r3, [r7, #3]
    9ebc:	f003 0307 	and.w	r3, r3, #7
    9ec0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    9ec4:	60fb      	str	r3, [r7, #12]
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9ecc:	b2db      	uxtb	r3, r3
    9ece:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    9ed2:	60bb      	str	r3, [r7, #8]
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    9ed4:	68fa      	ldr	r2, [r7, #12]
    9ed6:	68bb      	ldr	r3, [r7, #8]
    9ed8:	ea42 0303 	orr.w	r3, r2, r3
    9edc:	f043 0304 	orr.w	r3, r3, #4
    9ee0:	60bb      	str	r3, [r7, #8]
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    9ee2:	68bb      	ldr	r3, [r7, #8]
    9ee4:	b2db      	uxtb	r3, r3
    9ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9eea:	687a      	ldr	r2, [r7, #4]
    9eec:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
    9ef0:	f107 0710 	add.w	r7, r7, #16
    9ef4:	46bd      	mov	sp, r7
    9ef6:	bd80      	pop	{r7, pc}

00009ef8 <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	b084      	sub	sp, #16
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]
    9f00:	4613      	mov	r3, r2
    9f02:	460a      	mov	r2, r1
    9f04:	70fa      	strb	r2, [r7, #3]
    9f06:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = 0;
    9f08:	f04f 0300 	mov.w	r3, #0
    9f0c:	73fb      	strb	r3, [r7, #15]

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    9f0e:	687a      	ldr	r2, [r7, #4]
    9f10:	f240 0300 	movw	r3, #0
    9f14:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9f18:	429a      	cmp	r2, r3
    9f1a:	d007      	beq.n	9f2c <UART_FullModemForcePinState+0x34>
    9f1c:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9f20:	f2c0 0000 	movt	r0, #0
    9f24:	f240 416d 	movw	r1, #1133	; 0x46d
    9f28:	f7fc f972 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
    9f2c:	78fb      	ldrb	r3, [r7, #3]
    9f2e:	2b00      	cmp	r3, #0
    9f30:	d00a      	beq.n	9f48 <UART_FullModemForcePinState+0x50>
    9f32:	78fb      	ldrb	r3, [r7, #3]
    9f34:	2b01      	cmp	r3, #1
    9f36:	d007      	beq.n	9f48 <UART_FullModemForcePinState+0x50>
    9f38:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9f3c:	f2c0 0000 	movt	r0, #0
    9f40:	f240 416e 	movw	r1, #1134	; 0x46e
    9f44:	f7fc f964 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));
    9f48:	78bb      	ldrb	r3, [r7, #2]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d00a      	beq.n	9f64 <UART_FullModemForcePinState+0x6c>
    9f4e:	78bb      	ldrb	r3, [r7, #2]
    9f50:	2b01      	cmp	r3, #1
    9f52:	d007      	beq.n	9f64 <UART_FullModemForcePinState+0x6c>
    9f54:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9f58:	f2c0 0000 	movt	r0, #0
    9f5c:	f240 416f 	movw	r1, #1135	; 0x46f
    9f60:	f7fc f956 	bl	6210 <check_failed>

	switch (Pin){
    9f64:	78fb      	ldrb	r3, [r7, #3]
    9f66:	2b00      	cmp	r3, #0
    9f68:	d002      	beq.n	9f70 <UART_FullModemForcePinState+0x78>
    9f6a:	2b01      	cmp	r3, #1
    9f6c:	d004      	beq.n	9f78 <UART_FullModemForcePinState+0x80>
    9f6e:	e006      	b.n	9f7e <UART_FullModemForcePinState+0x86>
	case UART1_MODEM_PIN_DTR:
		tmp = UART1_MCR_DTR_CTRL;
    9f70:	f04f 0301 	mov.w	r3, #1
    9f74:	73fb      	strb	r3, [r7, #15]
		break;
    9f76:	e002      	b.n	9f7e <UART_FullModemForcePinState+0x86>
	case UART1_MODEM_PIN_RTS:
		tmp = UART1_MCR_RTS_CTRL;
    9f78:	f04f 0302 	mov.w	r3, #2
    9f7c:	73fb      	strb	r3, [r7, #15]
		break;
	default:
		break;
	}

	if (NewState == ACTIVE){
    9f7e:	78bb      	ldrb	r3, [r7, #2]
    9f80:	2b01      	cmp	r3, #1
    9f82:	d109      	bne.n	9f98 <UART_FullModemForcePinState+0xa0>
		UARTx->MCR |= tmp;
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	7c1b      	ldrb	r3, [r3, #16]
    9f88:	b2da      	uxtb	r2, r3
    9f8a:	7bfb      	ldrb	r3, [r7, #15]
    9f8c:	ea42 0303 	orr.w	r3, r2, r3
    9f90:	b2da      	uxtb	r2, r3
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	741a      	strb	r2, [r3, #16]
    9f96:	e010      	b.n	9fba <UART_FullModemForcePinState+0xc2>
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	7c1b      	ldrb	r3, [r3, #16]
    9f9c:	b2db      	uxtb	r3, r3
    9f9e:	461a      	mov	r2, r3
    9fa0:	7bfb      	ldrb	r3, [r7, #15]
    9fa2:	ea6f 0303 	mvn.w	r3, r3
    9fa6:	b2db      	uxtb	r3, r3
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
    9fae:	ea02 0303 	and.w	r3, r2, r3
    9fb2:	b2db      	uxtb	r3, r3
    9fb4:	b2da      	uxtb	r2, r3
    9fb6:	687b      	ldr	r3, [r7, #4]
    9fb8:	741a      	strb	r2, [r3, #16]
	}
}
    9fba:	f107 0710 	add.w	r7, r7, #16
    9fbe:	46bd      	mov	sp, r7
    9fc0:	bd80      	pop	{r7, pc}
    9fc2:	bf00      	nop

00009fc4 <UART_FullModemConfigMode>:
				- DISABLE: Disable this mode.
 * @return none
 **********************************************************************/
void UART_FullModemConfigMode(LPC_UART1_TypeDef *UARTx, UART_MODEM_MODE_Type Mode, \
							FunctionalState NewState)
{
    9fc4:	b580      	push	{r7, lr}
    9fc6:	b084      	sub	sp, #16
    9fc8:	af00      	add	r7, sp, #0
    9fca:	6078      	str	r0, [r7, #4]
    9fcc:	4613      	mov	r3, r2
    9fce:	460a      	mov	r2, r1
    9fd0:	70fa      	strb	r2, [r7, #3]
    9fd2:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    9fd4:	687a      	ldr	r2, [r7, #4]
    9fd6:	f240 0300 	movw	r3, #0
    9fda:	f2c4 0301 	movt	r3, #16385	; 0x4001
    9fde:	429a      	cmp	r2, r3
    9fe0:	d007      	beq.n	9ff2 <UART_FullModemConfigMode+0x2e>
    9fe2:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    9fe6:	f2c0 0000 	movt	r0, #0
    9fea:	f240 4195 	movw	r1, #1173	; 0x495
    9fee:	f7fc f90f 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
    9ff2:	78fb      	ldrb	r3, [r7, #3]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d00d      	beq.n	a014 <UART_FullModemConfigMode+0x50>
    9ff8:	78fb      	ldrb	r3, [r7, #3]
    9ffa:	2b01      	cmp	r3, #1
    9ffc:	d00a      	beq.n	a014 <UART_FullModemConfigMode+0x50>
    9ffe:	78fb      	ldrb	r3, [r7, #3]
    a000:	2b02      	cmp	r3, #2
    a002:	d007      	beq.n	a014 <UART_FullModemConfigMode+0x50>
    a004:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a008:	f2c0 0000 	movt	r0, #0
    a00c:	f240 4196 	movw	r1, #1174	; 0x496
    a010:	f7fc f8fe 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    a014:	78bb      	ldrb	r3, [r7, #2]
    a016:	2b00      	cmp	r3, #0
    a018:	d00a      	beq.n	a030 <UART_FullModemConfigMode+0x6c>
    a01a:	78bb      	ldrb	r3, [r7, #2]
    a01c:	2b01      	cmp	r3, #1
    a01e:	d007      	beq.n	a030 <UART_FullModemConfigMode+0x6c>
    a020:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a024:	f2c0 0000 	movt	r0, #0
    a028:	f240 4197 	movw	r1, #1175	; 0x497
    a02c:	f7fc f8f0 	bl	6210 <check_failed>

	switch(Mode){
    a030:	78fb      	ldrb	r3, [r7, #3]
    a032:	2b01      	cmp	r3, #1
    a034:	d007      	beq.n	a046 <UART_FullModemConfigMode+0x82>
    a036:	2b02      	cmp	r3, #2
    a038:	d009      	beq.n	a04e <UART_FullModemConfigMode+0x8a>
    a03a:	2b00      	cmp	r3, #0
    a03c:	d10a      	bne.n	a054 <UART_FullModemConfigMode+0x90>
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
    a03e:	f04f 0310 	mov.w	r3, #16
    a042:	73fb      	strb	r3, [r7, #15]
		break;
    a044:	e006      	b.n	a054 <UART_FullModemConfigMode+0x90>
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
    a046:	f04f 0340 	mov.w	r3, #64	; 0x40
    a04a:	73fb      	strb	r3, [r7, #15]
		break;
    a04c:	e002      	b.n	a054 <UART_FullModemConfigMode+0x90>
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
    a04e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a052:	73fb      	strb	r3, [r7, #15]
		break;
	default:
		break;
	}

	if (NewState == ENABLE)
    a054:	78bb      	ldrb	r3, [r7, #2]
    a056:	2b01      	cmp	r3, #1
    a058:	d109      	bne.n	a06e <UART_FullModemConfigMode+0xaa>
	{
		UARTx->MCR |= tmp;
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	7c1b      	ldrb	r3, [r3, #16]
    a05e:	b2da      	uxtb	r2, r3
    a060:	7bfb      	ldrb	r3, [r7, #15]
    a062:	ea42 0303 	orr.w	r3, r2, r3
    a066:	b2da      	uxtb	r2, r3
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	741a      	strb	r2, [r3, #16]
    a06c:	e010      	b.n	a090 <UART_FullModemConfigMode+0xcc>
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	7c1b      	ldrb	r3, [r3, #16]
    a072:	b2db      	uxtb	r3, r3
    a074:	461a      	mov	r2, r3
    a076:	7bfb      	ldrb	r3, [r7, #15]
    a078:	ea6f 0303 	mvn.w	r3, r3
    a07c:	b2db      	uxtb	r3, r3
    a07e:	b2db      	uxtb	r3, r3
    a080:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
    a084:	ea02 0303 	and.w	r3, r2, r3
    a088:	b2db      	uxtb	r3, r3
    a08a:	b2da      	uxtb	r2, r3
    a08c:	687b      	ldr	r3, [r7, #4]
    a08e:	741a      	strb	r2, [r3, #16]
	}
}
    a090:	f107 0710 	add.w	r7, r7, #16
    a094:	46bd      	mov	sp, r7
    a096:	bd80      	pop	{r7, pc}

0000a098 <UART_FullModemGetStatus>:
 * 			modem register could not be correct. So this function used to
 * 			read modem status register in one time only, then the return value
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
    a098:	b580      	push	{r7, lr}
    a09a:	b082      	sub	sp, #8
    a09c:	af00      	add	r7, sp, #0
    a09e:	6078      	str	r0, [r7, #4]
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    a0a0:	687a      	ldr	r2, [r7, #4]
    a0a2:	f240 0300 	movw	r3, #0
    a0a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    a0aa:	429a      	cmp	r2, r3
    a0ac:	d007      	beq.n	a0be <UART_FullModemGetStatus+0x26>
    a0ae:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a0b2:	f2c0 0000 	movt	r0, #0
    a0b6:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    a0ba:	f7fc f8a9 	bl	6210 <check_failed>
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	7e1b      	ldrb	r3, [r3, #24]
    a0c2:	b2db      	uxtb	r3, r3
}
    a0c4:	4618      	mov	r0, r3
    a0c6:	f107 0708 	add.w	r7, r7, #8
    a0ca:	46bd      	mov	sp, r7
    a0cc:	bd80      	pop	{r7, pc}
    a0ce:	bf00      	nop

0000a0d0 <UART_RS485Config>:
*                    that contains the configuration information for specified UART
*                    in RS485 mode.
 * @return		None
 **********************************************************************/
void UART_RS485Config(LPC_UART1_TypeDef *UARTx, UART1_RS485_CTRLCFG_Type *RS485ConfigStruct)
{
    a0d0:	b580      	push	{r7, lr}
    a0d2:	b084      	sub	sp, #16
    a0d4:	af00      	add	r7, sp, #0
    a0d6:	6078      	str	r0, [r7, #4]
    a0d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
    a0da:	687a      	ldr	r2, [r7, #4]
    a0dc:	f240 0300 	movw	r3, #0
    a0e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    a0e4:	429a      	cmp	r2, r3
    a0e6:	d007      	beq.n	a0f8 <UART_RS485Config+0x28>
    a0e8:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a0ec:	f2c0 0000 	movt	r0, #0
    a0f0:	f240 41d4 	movw	r1, #1236	; 0x4d4
    a0f4:	f7fc f88c 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoAddrDetect_State));
    a0f8:	683b      	ldr	r3, [r7, #0]
    a0fa:	789b      	ldrb	r3, [r3, #2]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d00b      	beq.n	a118 <UART_RS485Config+0x48>
    a100:	683b      	ldr	r3, [r7, #0]
    a102:	789b      	ldrb	r3, [r3, #2]
    a104:	2b01      	cmp	r3, #1
    a106:	d007      	beq.n	a118 <UART_RS485Config+0x48>
    a108:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a10c:	f2c0 0000 	movt	r0, #0
    a110:	f240 41d5 	movw	r1, #1237	; 0x4d5
    a114:	f7fc f87c 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->AutoDirCtrl_State));
    a118:	683b      	ldr	r3, [r7, #0]
    a11a:	78db      	ldrb	r3, [r3, #3]
    a11c:	2b00      	cmp	r3, #0
    a11e:	d00b      	beq.n	a138 <UART_RS485Config+0x68>
    a120:	683b      	ldr	r3, [r7, #0]
    a122:	78db      	ldrb	r3, [r3, #3]
    a124:	2b01      	cmp	r3, #1
    a126:	d007      	beq.n	a138 <UART_RS485Config+0x68>
    a128:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a12c:	f2c0 0000 	movt	r0, #0
    a130:	f240 41d6 	movw	r1, #1238	; 0x4d6
    a134:	f7fc f86c 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART1_RS485_CFG_DELAYVALUE(RS485ConfigStruct->DelayValue));
    a138:	683b      	ldr	r3, [r7, #0]
    a13a:	79db      	ldrb	r3, [r3, #7]
    a13c:	2bff      	cmp	r3, #255	; 0xff
    a13e:	d107      	bne.n	a150 <UART_RS485Config+0x80>
    a140:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a144:	f2c0 0000 	movt	r0, #0
    a148:	f240 41d7 	movw	r1, #1239	; 0x4d7
    a14c:	f7fc f860 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_SETSTATE(RS485ConfigStruct->DirCtrlPol_Level));
    a150:	683b      	ldr	r3, [r7, #0]
    a152:	795b      	ldrb	r3, [r3, #5]
    a154:	2b00      	cmp	r3, #0
    a156:	d00b      	beq.n	a170 <UART_RS485Config+0xa0>
    a158:	683b      	ldr	r3, [r7, #0]
    a15a:	795b      	ldrb	r3, [r3, #5]
    a15c:	2b01      	cmp	r3, #1
    a15e:	d007      	beq.n	a170 <UART_RS485Config+0xa0>
    a160:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a164:	f2c0 0000 	movt	r0, #0
    a168:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
    a16c:	f7fc f850 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
    a170:	683b      	ldr	r3, [r7, #0]
    a172:	791b      	ldrb	r3, [r3, #4]
    a174:	2b00      	cmp	r3, #0
    a176:	d00b      	beq.n	a190 <UART_RS485Config+0xc0>
    a178:	683b      	ldr	r3, [r7, #0]
    a17a:	791b      	ldrb	r3, [r3, #4]
    a17c:	2b01      	cmp	r3, #1
    a17e:	d007      	beq.n	a190 <UART_RS485Config+0xc0>
    a180:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a184:	f2c0 0000 	movt	r0, #0
    a188:	f240 41d9 	movw	r1, #1241	; 0x4d9
    a18c:	f7fc f840 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
    a190:	683b      	ldr	r3, [r7, #0]
    a192:	799b      	ldrb	r3, [r3, #6]
    a194:	2bff      	cmp	r3, #255	; 0xff
    a196:	d107      	bne.n	a1a8 <UART_RS485Config+0xd8>
    a198:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a19c:	f2c0 0000 	movt	r0, #0
    a1a0:	f240 41da 	movw	r1, #1242	; 0x4da
    a1a4:	f7fc f834 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
    a1a8:	683b      	ldr	r3, [r7, #0]
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d00b      	beq.n	a1c8 <UART_RS485Config+0xf8>
    a1b0:	683b      	ldr	r3, [r7, #0]
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	2b01      	cmp	r3, #1
    a1b6:	d007      	beq.n	a1c8 <UART_RS485Config+0xf8>
    a1b8:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a1bc:	f2c0 0000 	movt	r0, #0
    a1c0:	f240 41db 	movw	r1, #1243	; 0x4db
    a1c4:	f7fc f824 	bl	6210 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));
    a1c8:	683b      	ldr	r3, [r7, #0]
    a1ca:	785b      	ldrb	r3, [r3, #1]
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	d00b      	beq.n	a1e8 <UART_RS485Config+0x118>
    a1d0:	683b      	ldr	r3, [r7, #0]
    a1d2:	785b      	ldrb	r3, [r3, #1]
    a1d4:	2b01      	cmp	r3, #1
    a1d6:	d007      	beq.n	a1e8 <UART_RS485Config+0x118>
    a1d8:	f24b 30d8 	movw	r0, #46040	; 0xb3d8
    a1dc:	f2c0 0000 	movt	r0, #0
    a1e0:	f240 41dc 	movw	r1, #1244	; 0x4dc
    a1e4:	f7fc f814 	bl	6210 <check_failed>

	tmp = 0;
    a1e8:	f04f 0300 	mov.w	r3, #0
    a1ec:	60fb      	str	r3, [r7, #12]
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    a1ee:	683b      	ldr	r3, [r7, #0]
    a1f0:	78db      	ldrb	r3, [r3, #3]
    a1f2:	2b01      	cmp	r3, #1
    a1f4:	d118      	bne.n	a228 <UART_RS485Config+0x158>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
    a1f6:	68fb      	ldr	r3, [r7, #12]
    a1f8:	f043 0310 	orr.w	r3, r3, #16
    a1fc:	60fb      	str	r3, [r7, #12]

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    a1fe:	683b      	ldr	r3, [r7, #0]
    a200:	795b      	ldrb	r3, [r3, #5]
    a202:	2b01      	cmp	r3, #1
    a204:	d103      	bne.n	a20e <UART_RS485Config+0x13e>
		{
			tmp |= UART1_RS485CTRL_OINV_1;
    a206:	68fb      	ldr	r3, [r7, #12]
    a208:	f043 0320 	orr.w	r3, r3, #32
    a20c:	60fb      	str	r3, [r7, #12]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    a20e:	683b      	ldr	r3, [r7, #0]
    a210:	791b      	ldrb	r3, [r3, #4]
    a212:	2b01      	cmp	r3, #1
    a214:	d103      	bne.n	a21e <UART_RS485Config+0x14e>
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
    a216:	68fb      	ldr	r3, [r7, #12]
    a218:	f043 0308 	orr.w	r3, r3, #8
    a21c:	60fb      	str	r3, [r7, #12]
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    a21e:	683b      	ldr	r3, [r7, #0]
    a220:	79da      	ldrb	r2, [r3, #7]
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    a228:	683b      	ldr	r3, [r7, #0]
    a22a:	781b      	ldrb	r3, [r3, #0]
    a22c:	2b01      	cmp	r3, #1
    a22e:	d103      	bne.n	a238 <UART_RS485Config+0x168>
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
    a230:	68fb      	ldr	r3, [r7, #12]
    a232:	f043 0301 	orr.w	r3, r3, #1
    a236:	60fb      	str	r3, [r7, #12]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    a238:	683b      	ldr	r3, [r7, #0]
    a23a:	789b      	ldrb	r3, [r3, #2]
    a23c:	2b01      	cmp	r3, #1
    a23e:	d108      	bne.n	a252 <UART_RS485Config+0x182>
	{
		tmp |= UART1_RS485CTRL_AADEN;
    a240:	68fb      	ldr	r3, [r7, #12]
    a242:	f043 0304 	orr.w	r3, r3, #4
    a246:	60fb      	str	r3, [r7, #12]
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    a248:	683b      	ldr	r3, [r7, #0]
    a24a:	799a      	ldrb	r2, [r3, #6]
    a24c:	687b      	ldr	r3, [r7, #4]
    a24e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    a252:	683b      	ldr	r3, [r7, #0]
    a254:	785b      	ldrb	r3, [r3, #1]
    a256:	2b00      	cmp	r3, #0
    a258:	d103      	bne.n	a262 <UART_RS485Config+0x192>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    a25a:	68fb      	ldr	r3, [r7, #12]
    a25c:	f043 0302 	orr.w	r3, r3, #2
    a260:	60fb      	str	r3, [r7, #12]
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    a262:	68fb      	ldr	r3, [r7, #12]
    a264:	b2db      	uxtb	r3, r3
    a266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a26a:	687a      	ldr	r2, [r7, #4]
    a26c:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	7b1b      	ldrb	r3, [r3, #12]
    a274:	b2db      	uxtb	r3, r3
    a276:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a27a:	b2da      	uxtb	r2, r3
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	731a      	strb	r2, [r3, #12]
}
    a280:	f107 0710 	add.w	r7, r7, #16
    a284:	46bd      	mov	sp, r7
    a286:	bd80      	pop	{r7, pc}

0000a288 <UART_RS485ReceiverCmd>:
 * 							- ENABLE: Enable this function.
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
    a288:	b480      	push	{r7}
    a28a:	b083      	sub	sp, #12
    a28c:	af00      	add	r7, sp, #0
    a28e:	6078      	str	r0, [r7, #4]
    a290:	460b      	mov	r3, r1
    a292:	70fb      	strb	r3, [r7, #3]
	if (NewState == ENABLE){
    a294:	78fb      	ldrb	r3, [r7, #3]
    a296:	2b01      	cmp	r3, #1
    a298:	d109      	bne.n	a2ae <UART_RS485ReceiverCmd+0x26>
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    a29a:	687b      	ldr	r3, [r7, #4]
    a29c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a2a0:	b2db      	uxtb	r3, r3
    a2a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    a2a6:	687a      	ldr	r2, [r7, #4]
    a2a8:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
    a2ac:	e009      	b.n	a2c2 <UART_RS485ReceiverCmd+0x3a>
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    a2ae:	687b      	ldr	r3, [r7, #4]
    a2b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a2b4:	b2db      	uxtb	r3, r3
    a2b6:	f043 0302 	orr.w	r3, r3, #2
    a2ba:	b2da      	uxtb	r2, r3
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
}
    a2c2:	f107 070c 	add.w	r7, r7, #12
    a2c6:	46bd      	mov	sp, r7
    a2c8:	bc80      	pop	{r7}
    a2ca:	4770      	bx	lr

0000a2cc <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    a2cc:	b580      	push	{r7, lr}
    a2ce:	b086      	sub	sp, #24
    a2d0:	af00      	add	r7, sp, #0
    a2d2:	60f8      	str	r0, [r7, #12]
    a2d4:	60b9      	str	r1, [r7, #8]
    a2d6:	607a      	str	r2, [r7, #4]
    a2d8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    a2da:	78fb      	ldrb	r3, [r7, #3]
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d020      	beq.n	a322 <UART_RS485Send+0x56>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    a2e0:	68fb      	ldr	r3, [r7, #12]
    a2e2:	7b1b      	ldrb	r3, [r3, #12]
    a2e4:	74bb      	strb	r3, [r7, #18]
    a2e6:	7cbb      	ldrb	r3, [r7, #18]
    a2e8:	74fb      	strb	r3, [r7, #19]
		tmp &= ~(UART_LCR_PARITY_EVEN);
    a2ea:	7cbb      	ldrb	r3, [r7, #18]
    a2ec:	f023 0310 	bic.w	r3, r3, #16
    a2f0:	74bb      	strb	r3, [r7, #18]
		UARTx->LCR = tmp;
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	7cba      	ldrb	r2, [r7, #18]
    a2f6:	731a      	strb	r2, [r3, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    a2f8:	68fb      	ldr	r3, [r7, #12]
    a2fa:	4618      	mov	r0, r3
    a2fc:	68b9      	ldr	r1, [r7, #8]
    a2fe:	687a      	ldr	r2, [r7, #4]
    a300:	f04f 0301 	mov.w	r3, #1
    a304:	f7ff f830 	bl	9368 <UART_Send>
    a308:	4603      	mov	r3, r0
    a30a:	617b      	str	r3, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
    a30c:	68fb      	ldr	r3, [r7, #12]
    a30e:	7d1b      	ldrb	r3, [r3, #20]
    a310:	b2db      	uxtb	r3, r3
    a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a316:	2b00      	cmp	r3, #0
    a318:	d0f8      	beq.n	a30c <UART_RS485Send+0x40>
		UARTx->LCR = save;
    a31a:	68fb      	ldr	r3, [r7, #12]
    a31c:	7cfa      	ldrb	r2, [r7, #19]
    a31e:	731a      	strb	r2, [r3, #12]
    a320:	e010      	b.n	a344 <UART_RS485Send+0x78>
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    a322:	68fb      	ldr	r3, [r7, #12]
    a324:	4618      	mov	r0, r3
    a326:	68b9      	ldr	r1, [r7, #8]
    a328:	687a      	ldr	r2, [r7, #4]
    a32a:	f04f 0301 	mov.w	r3, #1
    a32e:	f7ff f81b 	bl	9368 <UART_Send>
    a332:	4603      	mov	r3, r0
    a334:	617b      	str	r3, [r7, #20]
		while (!(UARTx->LSR & UART_LSR_TEMT));
    a336:	68fb      	ldr	r3, [r7, #12]
    a338:	7d1b      	ldrb	r3, [r3, #20]
    a33a:	b2db      	uxtb	r3, r3
    a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a340:	2b00      	cmp	r3, #0
    a342:	d0f8      	beq.n	a336 <UART_RS485Send+0x6a>
	}
	return cnt;
    a344:	697b      	ldr	r3, [r7, #20]
}
    a346:	4618      	mov	r0, r3
    a348:	f107 0718 	add.w	r7, r7, #24
    a34c:	46bd      	mov	sp, r7
    a34e:	bd80      	pop	{r7, pc}

0000a350 <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    a350:	b580      	push	{r7, lr}
    a352:	b082      	sub	sp, #8
    a354:	af00      	add	r7, sp, #0
    a356:	6078      	str	r0, [r7, #4]
    a358:	460b      	mov	r3, r1
    a35a:	70fb      	strb	r3, [r7, #3]
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
    a35c:	f107 0303 	add.w	r3, r7, #3
    a360:	6878      	ldr	r0, [r7, #4]
    a362:	4619      	mov	r1, r3
    a364:	f04f 0201 	mov.w	r2, #1
    a368:	f04f 0301 	mov.w	r3, #1
    a36c:	f7ff ffae 	bl	a2cc <UART_RS485Send>
}
    a370:	f107 0708 	add.w	r7, r7, #8
    a374:	46bd      	mov	sp, r7
    a376:	bd80      	pop	{r7, pc}

0000a378 <UART_RS485SendData>:
 * @param[in]	pData Pointer to data to be sent.
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
    a378:	b580      	push	{r7, lr}
    a37a:	b084      	sub	sp, #16
    a37c:	af00      	add	r7, sp, #0
    a37e:	60f8      	str	r0, [r7, #12]
    a380:	60b9      	str	r1, [r7, #8]
    a382:	607a      	str	r2, [r7, #4]
	return (UART_RS485Send(UARTx, pData, size, 0));
    a384:	68f8      	ldr	r0, [r7, #12]
    a386:	68b9      	ldr	r1, [r7, #8]
    a388:	687a      	ldr	r2, [r7, #4]
    a38a:	f04f 0300 	mov.w	r3, #0
    a38e:	f7ff ff9d 	bl	a2cc <UART_RS485Send>
    a392:	4603      	mov	r3, r0
}
    a394:	4618      	mov	r0, r3
    a396:	f107 0710 	add.w	r7, r7, #16
    a39a:	46bd      	mov	sp, r7
    a39c:	bd80      	pop	{r7, pc}
    a39e:	bf00      	nop

0000a3a0 <ResetISR>:
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void
ResetISR(void) {
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b082      	sub	sp, #8
    a3a4:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    a3a6:	f24b 430c 	movw	r3, #46092	; 0xb40c
    a3aa:	f2c0 0300 	movt	r3, #0
    a3ae:	603b      	str	r3, [r7, #0]
    for(pulDest = &_data; pulDest < &_edata; )
    a3b0:	f240 0300 	movw	r3, #0
    a3b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a3b8:	607b      	str	r3, [r7, #4]
    a3ba:	e00b      	b.n	a3d4 <ResetISR+0x34>
    {
        *pulDest++ = *pulSrc++;
    a3bc:	683b      	ldr	r3, [r7, #0]
    a3be:	681a      	ldr	r2, [r3, #0]
    a3c0:	687b      	ldr	r3, [r7, #4]
    a3c2:	601a      	str	r2, [r3, #0]
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	f103 0304 	add.w	r3, r3, #4
    a3ca:	607b      	str	r3, [r7, #4]
    a3cc:	683b      	ldr	r3, [r7, #0]
    a3ce:	f103 0304 	add.w	r3, r3, #4
    a3d2:	603b      	str	r3, [r7, #0]

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
    a3d4:	687a      	ldr	r2, [r7, #4]
    a3d6:	f240 0310 	movw	r3, #16
    a3da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a3de:	429a      	cmp	r2, r3
    a3e0:	d3ec      	bcc.n	a3bc <ResetISR+0x1c>

    //
    // Zero fill the bss segment.  This is done with inline assembly since this
    // will clear the value of pulDest if it is not kept in a register.
    //
    __asm("    ldr     r0, =_bss\n"
    a3e2:	4814      	ldr	r0, [pc, #80]	; (a434 <ADC_IRQHandler+0x8>)
    a3e4:	4914      	ldr	r1, [pc, #80]	; (a438 <ADC_IRQHandler+0xc>)
    a3e6:	f04f 0200 	mov.w	r2, #0

0000a3ea <zero_loop>:
    a3ea:	4288      	cmp	r0, r1
    a3ec:	bfb8      	it	lt
    a3ee:	f840 2b04 	strlt.w	r2, [r0], #4
    a3f2:	dbfa      	blt.n	a3ea <zero_loop>

#if defined (__REDLIB__)
	// Call the Redlib library, which in turn calls main()
	__main() ;
#else
	main();
    a3f4:	f7f6 f9b4 	bl	760 <main>
	//
	// main() shouldn't return, but if it does, we'll just enter an infinite loop 
	//
	while (1) {
		;
	}
    a3f8:	e7fe      	b.n	a3f8 <zero_loop+0xe>
    a3fa:	bf00      	nop

0000a3fc <NMI_Handler>:
// simply enters an infinite loop, preserving the system state for examination
// by a debugger.
//
//*****************************************************************************
void NMI_Handler(void)
{
    a3fc:	b480      	push	{r7}
    a3fe:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a400:	e7fe      	b.n	a400 <NMI_Handler+0x4>
    a402:	bf00      	nop

0000a404 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
    a404:	b480      	push	{r7}
    a406:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a408:	e7fe      	b.n	a408 <HardFault_Handler+0x4>
    a40a:	bf00      	nop

0000a40c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
    a40c:	b480      	push	{r7}
    a40e:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a410:	e7fe      	b.n	a410 <MemManage_Handler+0x4>
    a412:	bf00      	nop

0000a414 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
    a414:	b480      	push	{r7}
    a416:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a418:	e7fe      	b.n	a418 <BusFault_Handler+0x4>
    a41a:	bf00      	nop

0000a41c <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
    a41c:	b480      	push	{r7}
    a41e:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a420:	e7fe      	b.n	a420 <UsageFault_Handler+0x4>
    a422:	bf00      	nop

0000a424 <DebugMon_Handler>:
}


void DebugMon_Handler(void)
{
    a424:	b480      	push	{r7}
    a426:	af00      	add	r7, sp, #0
    while(1)
    {
    }
    a428:	e7fe      	b.n	a428 <DebugMon_Handler+0x4>
    a42a:	bf00      	nop

0000a42c <ADC_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a handler
// is not present in the application code.
//
//*****************************************************************************
void IntDefaultHandler(void)
{
    a42c:	b480      	push	{r7}
    a42e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    a430:	e7fe      	b.n	a430 <ADC_IRQHandler+0x4>
    a432:	0000      	.short	0x0000
    a434:	10000010 	.word	0x10000010
    a438:	10005074 	.word	0x10005074

0000a43c <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/


void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    a43c:	b480      	push	{r7}
    a43e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    a440:	f24c 0300 	movw	r3, #49152	; 0xc000
    a444:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a44c:	ea4f 6313 	mov.w	r3, r3, lsr #24
    a450:	f003 0303 	and.w	r3, r3, #3
    a454:	2b03      	cmp	r3, #3
    a456:	f040 80aa 	bne.w	a5ae <SystemCoreClockUpdate+0x172>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    a45a:	f24c 0300 	movw	r3, #49152	; 0xc000
    a45e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a462:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    a466:	f003 0303 	and.w	r3, r3, #3
    a46a:	2b03      	cmp	r3, #3
    a46c:	f200 80f4 	bhi.w	a658 <SystemCoreClockUpdate+0x21c>
    a470:	a201      	add	r2, pc, #4	; (adr r2, a478 <SystemCoreClockUpdate+0x3c>)
    a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a476:	bf00      	nop
    a478:	0000a489 	.word	0x0000a489
    a47c:	0000a4ed 	.word	0x0000a4ed
    a480:	0000a553 	.word	0x0000a553
    a484:	0000a489 	.word	0x0000a489
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    a488:	f24c 0300 	movw	r3, #49152	; 0xc000
    a48c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a494:	ea4f 4343 	mov.w	r3, r3, lsl #17
    a498:	ea4f 4353 	mov.w	r3, r3, lsr #17
    a49c:	f103 0201 	add.w	r2, r3, #1
    a4a0:	f241 2300 	movw	r3, #4608	; 0x1200
    a4a4:	f2c0 037a 	movt	r3, #122	; 0x7a
    a4a8:	fb03 f202 	mul.w	r2, r3, r2
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    a4ac:	f24c 0300 	movw	r3, #49152	; 0xc000
    a4b0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a4b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a4bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a4c0:	f103 0301 	add.w	r3, r3, #1
    a4c4:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    a4c8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a4cc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a4d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a4d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a4d8:	f103 0301 	add.w	r3, r3, #1
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    a4dc:	fbb2 f2f3 	udiv	r2, r2, r3
    a4e0:	f240 030c 	movw	r3, #12
    a4e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a4e8:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    a4ea:	e0b6      	b.n	a65a <SystemCoreClockUpdate+0x21e>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    a4ec:	f24c 0300 	movw	r3, #49152	; 0xc000
    a4f0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a4f8:	ea4f 4343 	mov.w	r3, r3, lsl #17
    a4fc:	ea4f 4353 	mov.w	r3, r3, lsr #17
    a500:	f103 0201 	add.w	r2, r3, #1
    a504:	f243 6300 	movw	r3, #13824	; 0x3600
    a508:	f2c0 136e 	movt	r3, #366	; 0x16e
    a50c:	fb03 f202 	mul.w	r2, r3, r2
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    a510:	f24c 0300 	movw	r3, #49152	; 0xc000
    a514:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a51c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a520:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a524:	f103 0301 	add.w	r3, r3, #1
    a528:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    a52c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a530:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a534:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a538:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a53c:	f103 0301 	add.w	r3, r3, #1
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    a540:	fbb2 f2f3 	udiv	r2, r2, r3
    a544:	f240 030c 	movw	r3, #12
    a548:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a54c:	601a      	str	r2, [r3, #0]
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    a54e:	bf00      	nop
    a550:	e083      	b.n	a65a <SystemCoreClockUpdate+0x21e>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    a552:	f24c 0300 	movw	r3, #49152	; 0xc000
    a556:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a55e:	ea4f 4343 	mov.w	r3, r3, lsl #17
    a562:	ea4f 4353 	mov.w	r3, r3, lsr #17
    a566:	f103 0301 	add.w	r3, r3, #1
    a56a:	ea4f 4203 	mov.w	r2, r3, lsl #16
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    a56e:	f24c 0300 	movw	r3, #49152	; 0xc000
    a572:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a57a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a57e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a582:	f103 0301 	add.w	r3, r3, #1
    a586:	fbb2 f2f3 	udiv	r2, r2, r3
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    a58a:	f24c 0300 	movw	r3, #49152	; 0xc000
    a58e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a592:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a596:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a59a:	f103 0301 	add.w	r3, r3, #1
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    a59e:	fbb2 f2f3 	udiv	r2, r2, r3
    a5a2:	f240 030c 	movw	r3, #12
    a5a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a5aa:	601a      	str	r2, [r3, #0]
    a5ac:	e055      	b.n	a65a <SystemCoreClockUpdate+0x21e>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    a5ae:	f24c 0300 	movw	r3, #49152	; 0xc000
    a5b2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a5b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    a5ba:	f003 0303 	and.w	r3, r3, #3
    a5be:	2b03      	cmp	r3, #3
    a5c0:	d84b      	bhi.n	a65a <SystemCoreClockUpdate+0x21e>
    a5c2:	a201      	add	r2, pc, #4	; (adr r2, a5c8 <SystemCoreClockUpdate+0x18c>)
    a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a5c8:	0000a5d9 	.word	0x0000a5d9
    a5cc:	0000a605 	.word	0x0000a605
    a5d0:	0000a631 	.word	0x0000a631
    a5d4:	0000a5d9 	.word	0x0000a5d9
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    a5d8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a5dc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a5e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a5e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a5e8:	f103 0201 	add.w	r2, r3, #1
    a5ec:	f640 1300 	movw	r3, #2304	; 0x900
    a5f0:	f2c0 033d 	movt	r3, #61	; 0x3d
    a5f4:	fbb3 f2f2 	udiv	r2, r3, r2
    a5f8:	f240 030c 	movw	r3, #12
    a5fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a600:	601a      	str	r2, [r3, #0]
        break;
    a602:	e02a      	b.n	a65a <SystemCoreClockUpdate+0x21e>
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    a604:	f24c 0300 	movw	r3, #49152	; 0xc000
    a608:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a60c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a610:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a614:	f103 0201 	add.w	r2, r3, #1
    a618:	f641 3300 	movw	r3, #6912	; 0x1b00
    a61c:	f2c0 03b7 	movt	r3, #183	; 0xb7
    a620:	fbb3 f2f2 	udiv	r2, r3, r2
    a624:	f240 030c 	movw	r3, #12
    a628:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a62c:	601a      	str	r2, [r3, #0]
        break;
    a62e:	e014      	b.n	a65a <SystemCoreClockUpdate+0x21e>
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    a630:	f24c 0300 	movw	r3, #49152	; 0xc000
    a634:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a638:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a63c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a640:	f103 0301 	add.w	r3, r3, #1
    a644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a648:	fbb2 f2f3 	udiv	r2, r2, r3
    a64c:	f240 030c 	movw	r3, #12
    a650:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a654:	601a      	str	r2, [r3, #0]
    a656:	e000      	b.n	a65a <SystemCoreClockUpdate+0x21e>
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    a658:	bf00      	nop
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
    }
  }

}
    a65a:	46bd      	mov	sp, r7
    a65c:	bc80      	pop	{r7}
    a65e:	4770      	bx	lr

0000a660 <SystemInit>:
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
    a660:	b480      	push	{r7}
    a662:	af00      	add	r7, sp, #0
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    a664:	f24c 0300 	movw	r3, #49152	; 0xc000
    a668:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a66c:	f04f 0220 	mov.w	r2, #32
    a670:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
    a674:	f24c 0300 	movw	r3, #49152	; 0xc000
    a678:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a67c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    a680:	f003 0320 	and.w	r3, r3, #32
    a684:	2b00      	cmp	r3, #0
    a686:	d009      	beq.n	a69c <SystemInit+0x3c>
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    a688:	f24c 0300 	movw	r3, #49152	; 0xc000
    a68c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a690:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
    a694:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a698:	2b00      	cmp	r3, #0
    a69a:	d0f5      	beq.n	a688 <SystemInit+0x28>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    a69c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6a0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6a4:	f04f 0203 	mov.w	r2, #3
    a6a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Periphral clock must be selected before PLL0 enabling and connecting
   * - according errata.lpc1768-16.March.2010 -
   */
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    a6ac:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6b0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6b4:	f04f 0200 	mov.w	r2, #0
    a6b8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    a6bc:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6c0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6c4:	f04f 0200 	mov.w	r2, #0
    a6c8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    a6cc:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6d0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6d4:	f04f 0201 	mov.w	r2, #1
    a6d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    a6dc:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6e0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6e4:	f240 0263 	movw	r2, #99	; 0x63
    a6e8:	f2c0 0205 	movt	r2, #5
    a6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    a6f0:	f24c 0300 	movw	r3, #49152	; 0xc000
    a6f4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a6f8:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    a700:	f24c 0300 	movw	r3, #49152	; 0xc000
    a704:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a708:	f04f 0255 	mov.w	r2, #85	; 0x55
    a70c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    a710:	f24c 0300 	movw	r3, #49152	; 0xc000
    a714:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a718:	f04f 0201 	mov.w	r2, #1
    a71c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    a720:	f24c 0300 	movw	r3, #49152	; 0xc000
    a724:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a728:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a72c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    a730:	f24c 0300 	movw	r3, #49152	; 0xc000
    a734:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a738:	f04f 0255 	mov.w	r2, #85	; 0x55
    a73c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    a740:	f24c 0300 	movw	r3, #49152	; 0xc000
    a744:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a74c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    a750:	2b00      	cmp	r3, #0
    a752:	d0f5      	beq.n	a740 <SystemInit+0xe0>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    a754:	f24c 0300 	movw	r3, #49152	; 0xc000
    a758:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a75c:	f04f 0203 	mov.w	r2, #3
    a760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    a764:	f24c 0300 	movw	r3, #49152	; 0xc000
    a768:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a76c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    a774:	f24c 0300 	movw	r3, #49152	; 0xc000
    a778:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a77c:	f04f 0255 	mov.w	r2, #85	; 0x55
    a780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    a784:	f24c 0300 	movw	r3, #49152	; 0xc000
    a788:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    a790:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    a794:	2b00      	cmp	r3, #0
    a796:	d0f5      	beq.n	a784 <SystemInit+0x124>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    a798:	f24c 0300 	movw	r3, #49152	; 0xc000
    a79c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7a0:	f04f 0223 	mov.w	r2, #35	; 0x23
    a7a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    a7a8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7ac:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7b0:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a7b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    a7b8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7bc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7c0:	f04f 0255 	mov.w	r2, #85	; 0x55
    a7c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    a7c8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7cc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7d0:	f04f 0201 	mov.w	r2, #1
    a7d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    a7d8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7dc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7e0:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a7e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    a7e8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7ec:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a7f0:	f04f 0255 	mov.w	r2, #85	; 0x55
    a7f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    a7f8:	f24c 0300 	movw	r3, #49152	; 0xc000
    a7fc:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    a804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a808:	2b00      	cmp	r3, #0
    a80a:	d0f5      	beq.n	a7f8 <SystemInit+0x198>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    a80c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a810:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a814:	f04f 0203 	mov.w	r2, #3
    a818:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    a81c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a820:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a824:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    a828:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    a82c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a830:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a834:	f04f 0255 	mov.w	r2, #85	; 0x55
    a838:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    a83c:	f24c 0300 	movw	r3, #49152	; 0xc000
    a840:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    a848:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a84c:	2b00      	cmp	r3, #0
    a84e:	d0f5      	beq.n	a83c <SystemInit+0x1dc>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    a850:	f24c 0300 	movw	r3, #49152	; 0xc000
    a854:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a858:	f248 72de 	movw	r2, #34782	; 0x87de
    a85c:	f2c0 4228 	movt	r2, #1064	; 0x428
    a860:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    a864:	f24c 0300 	movw	r3, #49152	; 0xc000
    a868:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a86c:	f04f 0200 	mov.w	r2, #0
    a870:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    a874:	f24c 0300 	movw	r3, #49152	; 0xc000
    a878:	f2c4 030f 	movt	r3, #16399	; 0x400f
    a87c:	f243 023a 	movw	r2, #12346	; 0x303a
    a880:	601a      	str	r2, [r3, #0]

//  Set Vector table offset value
#if (__RAM_MODE__==1)
  SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
#else
  SCB->VTOR  = 0x00000000 & 0x3FFFFF80;
    a882:	f64e 5300 	movw	r3, #60672	; 0xed00
    a886:	f2ce 0300 	movt	r3, #57344	; 0xe000
    a88a:	f04f 0200 	mov.w	r2, #0
    a88e:	609a      	str	r2, [r3, #8]
#endif
}
    a890:	46bd      	mov	sp, r7
    a892:	bc80      	pop	{r7}
    a894:	4770      	bx	lr
    a896:	bf00      	nop

0000a898 <__aeabi_uldivmod>:
    a898:	b94b      	cbnz	r3, a8ae <__aeabi_uldivmod+0x16>
    a89a:	b942      	cbnz	r2, a8ae <__aeabi_uldivmod+0x16>
    a89c:	2900      	cmp	r1, #0
    a89e:	bf08      	it	eq
    a8a0:	2800      	cmpeq	r0, #0
    a8a2:	d002      	beq.n	a8aa <__aeabi_uldivmod+0x12>
    a8a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a8a8:	4608      	mov	r0, r1
    a8aa:	f000 b837 	b.w	a91c <__aeabi_idiv0>
    a8ae:	b082      	sub	sp, #8
    a8b0:	46ec      	mov	ip, sp
    a8b2:	e92d 5000 	stmdb	sp!, {ip, lr}
    a8b6:	f000 f805 	bl	a8c4 <__gnu_uldivmod_helper>
    a8ba:	f8dd e004 	ldr.w	lr, [sp, #4]
    a8be:	b002      	add	sp, #8
    a8c0:	bc0c      	pop	{r2, r3}
    a8c2:	4770      	bx	lr

0000a8c4 <__gnu_uldivmod_helper>:
    a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8c6:	4614      	mov	r4, r2
    a8c8:	461d      	mov	r5, r3
    a8ca:	4606      	mov	r6, r0
    a8cc:	460f      	mov	r7, r1
    a8ce:	f000 f9d9 	bl	ac84 <__udivdi3>
    a8d2:	fb00 f505 	mul.w	r5, r0, r5
    a8d6:	fba0 2304 	umull	r2, r3, r0, r4
    a8da:	fb04 5401 	mla	r4, r4, r1, r5
    a8de:	18e3      	adds	r3, r4, r3
    a8e0:	1ab6      	subs	r6, r6, r2
    a8e2:	eb67 0703 	sbc.w	r7, r7, r3
    a8e6:	9b06      	ldr	r3, [sp, #24]
    a8e8:	e9c3 6700 	strd	r6, r7, [r3]
    a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8ee:	bf00      	nop

0000a8f0 <__gnu_ldivmod_helper>:
    a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8f2:	4614      	mov	r4, r2
    a8f4:	461d      	mov	r5, r3
    a8f6:	4606      	mov	r6, r0
    a8f8:	460f      	mov	r7, r1
    a8fa:	f000 f811 	bl	a920 <__divdi3>
    a8fe:	fb00 f505 	mul.w	r5, r0, r5
    a902:	fba0 2304 	umull	r2, r3, r0, r4
    a906:	fb04 5401 	mla	r4, r4, r1, r5
    a90a:	18e3      	adds	r3, r4, r3
    a90c:	1ab6      	subs	r6, r6, r2
    a90e:	eb67 0703 	sbc.w	r7, r7, r3
    a912:	9b06      	ldr	r3, [sp, #24]
    a914:	e9c3 6700 	strd	r6, r7, [r3]
    a918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a91a:	bf00      	nop

0000a91c <__aeabi_idiv0>:
    a91c:	4770      	bx	lr
    a91e:	bf00      	nop

0000a920 <__divdi3>:
    a920:	2900      	cmp	r1, #0
    a922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a926:	b085      	sub	sp, #20
    a928:	f2c0 80c8 	blt.w	aabc <__divdi3+0x19c>
    a92c:	2600      	movs	r6, #0
    a92e:	2b00      	cmp	r3, #0
    a930:	f2c0 80bf 	blt.w	aab2 <__divdi3+0x192>
    a934:	4689      	mov	r9, r1
    a936:	4614      	mov	r4, r2
    a938:	4605      	mov	r5, r0
    a93a:	469b      	mov	fp, r3
    a93c:	2b00      	cmp	r3, #0
    a93e:	d14a      	bne.n	a9d6 <__divdi3+0xb6>
    a940:	428a      	cmp	r2, r1
    a942:	d957      	bls.n	a9f4 <__divdi3+0xd4>
    a944:	fab2 f382 	clz	r3, r2
    a948:	b153      	cbz	r3, a960 <__divdi3+0x40>
    a94a:	f1c3 0020 	rsb	r0, r3, #32
    a94e:	fa01 f903 	lsl.w	r9, r1, r3
    a952:	fa25 f800 	lsr.w	r8, r5, r0
    a956:	fa12 f403 	lsls.w	r4, r2, r3
    a95a:	409d      	lsls	r5, r3
    a95c:	ea48 0909 	orr.w	r9, r8, r9
    a960:	0c27      	lsrs	r7, r4, #16
    a962:	4648      	mov	r0, r9
    a964:	4639      	mov	r1, r7
    a966:	fa1f fb84 	uxth.w	fp, r4
    a96a:	f000 fb0d 	bl	af88 <__aeabi_uidiv>
    a96e:	4639      	mov	r1, r7
    a970:	4682      	mov	sl, r0
    a972:	4648      	mov	r0, r9
    a974:	f000 fc36 	bl	b1e4 <__aeabi_uidivmod>
    a978:	0c2a      	lsrs	r2, r5, #16
    a97a:	fb0b f30a 	mul.w	r3, fp, sl
    a97e:	ea42 4901 	orr.w	r9, r2, r1, lsl #16
    a982:	454b      	cmp	r3, r9
    a984:	d909      	bls.n	a99a <__divdi3+0x7a>
    a986:	eb19 0904 	adds.w	r9, r9, r4
    a98a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    a98e:	d204      	bcs.n	a99a <__divdi3+0x7a>
    a990:	454b      	cmp	r3, r9
    a992:	bf84      	itt	hi
    a994:	f10a 3aff 	addhi.w	sl, sl, #4294967295	; 0xffffffff
    a998:	44a1      	addhi	r9, r4
    a99a:	ebc3 0909 	rsb	r9, r3, r9
    a99e:	4639      	mov	r1, r7
    a9a0:	4648      	mov	r0, r9
    a9a2:	b2ad      	uxth	r5, r5
    a9a4:	f000 faf0 	bl	af88 <__aeabi_uidiv>
    a9a8:	4639      	mov	r1, r7
    a9aa:	4680      	mov	r8, r0
    a9ac:	4648      	mov	r0, r9
    a9ae:	f000 fc19 	bl	b1e4 <__aeabi_uidivmod>
    a9b2:	fb0b fb08 	mul.w	fp, fp, r8
    a9b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    a9ba:	45ab      	cmp	fp, r5
    a9bc:	d907      	bls.n	a9ce <__divdi3+0xae>
    a9be:	192d      	adds	r5, r5, r4
    a9c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    a9c4:	d203      	bcs.n	a9ce <__divdi3+0xae>
    a9c6:	45ab      	cmp	fp, r5
    a9c8:	bf88      	it	hi
    a9ca:	f108 38ff 	addhi.w	r8, r8, #4294967295	; 0xffffffff
    a9ce:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
    a9d2:	2700      	movs	r7, #0
    a9d4:	e003      	b.n	a9de <__divdi3+0xbe>
    a9d6:	428b      	cmp	r3, r1
    a9d8:	d957      	bls.n	aa8a <__divdi3+0x16a>
    a9da:	2700      	movs	r7, #0
    a9dc:	46b8      	mov	r8, r7
    a9de:	4642      	mov	r2, r8
    a9e0:	463b      	mov	r3, r7
    a9e2:	b116      	cbz	r6, a9ea <__divdi3+0xca>
    a9e4:	4252      	negs	r2, r2
    a9e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a9ea:	4619      	mov	r1, r3
    a9ec:	4610      	mov	r0, r2
    a9ee:	b005      	add	sp, #20
    a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9f4:	b922      	cbnz	r2, aa00 <__divdi3+0xe0>
    a9f6:	4611      	mov	r1, r2
    a9f8:	2001      	movs	r0, #1
    a9fa:	f000 fac5 	bl	af88 <__aeabi_uidiv>
    a9fe:	4604      	mov	r4, r0
    aa00:	fab4 f884 	clz	r8, r4
    aa04:	f1b8 0f00 	cmp.w	r8, #0
    aa08:	d15e      	bne.n	aac8 <__divdi3+0x1a8>
    aa0a:	ebc4 0809 	rsb	r8, r4, r9
    aa0e:	0c27      	lsrs	r7, r4, #16
    aa10:	fa1f f984 	uxth.w	r9, r4
    aa14:	2101      	movs	r1, #1
    aa16:	9102      	str	r1, [sp, #8]
    aa18:	4639      	mov	r1, r7
    aa1a:	4640      	mov	r0, r8
    aa1c:	f000 fab4 	bl	af88 <__aeabi_uidiv>
    aa20:	4639      	mov	r1, r7
    aa22:	4682      	mov	sl, r0
    aa24:	4640      	mov	r0, r8
    aa26:	f000 fbdd 	bl	b1e4 <__aeabi_uidivmod>
    aa2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
    aa2e:	fb09 f30a 	mul.w	r3, r9, sl
    aa32:	ea48 4b01 	orr.w	fp, r8, r1, lsl #16
    aa36:	455b      	cmp	r3, fp
    aa38:	d909      	bls.n	aa4e <__divdi3+0x12e>
    aa3a:	eb1b 0b04 	adds.w	fp, fp, r4
    aa3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    aa42:	d204      	bcs.n	aa4e <__divdi3+0x12e>
    aa44:	455b      	cmp	r3, fp
    aa46:	bf84      	itt	hi
    aa48:	f10a 3aff 	addhi.w	sl, sl, #4294967295	; 0xffffffff
    aa4c:	44a3      	addhi	fp, r4
    aa4e:	ebc3 0b0b 	rsb	fp, r3, fp
    aa52:	4639      	mov	r1, r7
    aa54:	4658      	mov	r0, fp
    aa56:	b2ad      	uxth	r5, r5
    aa58:	f000 fa96 	bl	af88 <__aeabi_uidiv>
    aa5c:	4639      	mov	r1, r7
    aa5e:	4680      	mov	r8, r0
    aa60:	4658      	mov	r0, fp
    aa62:	f000 fbbf 	bl	b1e4 <__aeabi_uidivmod>
    aa66:	fb09 f908 	mul.w	r9, r9, r8
    aa6a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    aa6e:	45a9      	cmp	r9, r5
    aa70:	d907      	bls.n	aa82 <__divdi3+0x162>
    aa72:	192d      	adds	r5, r5, r4
    aa74:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    aa78:	d203      	bcs.n	aa82 <__divdi3+0x162>
    aa7a:	45a9      	cmp	r9, r5
    aa7c:	bf88      	it	hi
    aa7e:	f108 38ff 	addhi.w	r8, r8, #4294967295	; 0xffffffff
    aa82:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
    aa86:	9f02      	ldr	r7, [sp, #8]
    aa88:	e7a9      	b.n	a9de <__divdi3+0xbe>
    aa8a:	fab3 f783 	clz	r7, r3
    aa8e:	2f00      	cmp	r7, #0
    aa90:	d168      	bne.n	ab64 <__divdi3+0x244>
    aa92:	428b      	cmp	r3, r1
    aa94:	bf2c      	ite	cs
    aa96:	f04f 0900 	movcs.w	r9, #0
    aa9a:	f04f 0901 	movcc.w	r9, #1
    aa9e:	4282      	cmp	r2, r0
    aaa0:	bf8c      	ite	hi
    aaa2:	464c      	movhi	r4, r9
    aaa4:	f049 0401 	orrls.w	r4, r9, #1
    aaa8:	2c00      	cmp	r4, #0
    aaaa:	d096      	beq.n	a9da <__divdi3+0xba>
    aaac:	f04f 0801 	mov.w	r8, #1
    aab0:	e795      	b.n	a9de <__divdi3+0xbe>
    aab2:	4252      	negs	r2, r2
    aab4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aab8:	43f6      	mvns	r6, r6
    aaba:	e73b      	b.n	a934 <__divdi3+0x14>
    aabc:	4240      	negs	r0, r0
    aabe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aac2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    aac6:	e732      	b.n	a92e <__divdi3+0xe>
    aac8:	fa04 f408 	lsl.w	r4, r4, r8
    aacc:	f1c8 0720 	rsb	r7, r8, #32
    aad0:	fa35 f307 	lsrs.w	r3, r5, r7
    aad4:	fa29 fa07 	lsr.w	sl, r9, r7
    aad8:	0c27      	lsrs	r7, r4, #16
    aada:	fa09 fb08 	lsl.w	fp, r9, r8
    aade:	4639      	mov	r1, r7
    aae0:	4650      	mov	r0, sl
    aae2:	ea43 020b 	orr.w	r2, r3, fp
    aae6:	9202      	str	r2, [sp, #8]
    aae8:	f000 fa4e 	bl	af88 <__aeabi_uidiv>
    aaec:	4639      	mov	r1, r7
    aaee:	fa1f f984 	uxth.w	r9, r4
    aaf2:	4683      	mov	fp, r0
    aaf4:	4650      	mov	r0, sl
    aaf6:	f000 fb75 	bl	b1e4 <__aeabi_uidivmod>
    aafa:	9802      	ldr	r0, [sp, #8]
    aafc:	fb09 f20b 	mul.w	r2, r9, fp
    ab00:	0c03      	lsrs	r3, r0, #16
    ab02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ab06:	429a      	cmp	r2, r3
    ab08:	d904      	bls.n	ab14 <__divdi3+0x1f4>
    ab0a:	191b      	adds	r3, r3, r4
    ab0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    ab10:	f0c0 80b1 	bcc.w	ac76 <__divdi3+0x356>
    ab14:	1a9b      	subs	r3, r3, r2
    ab16:	4639      	mov	r1, r7
    ab18:	4618      	mov	r0, r3
    ab1a:	9301      	str	r3, [sp, #4]
    ab1c:	f000 fa34 	bl	af88 <__aeabi_uidiv>
    ab20:	9901      	ldr	r1, [sp, #4]
    ab22:	4682      	mov	sl, r0
    ab24:	4608      	mov	r0, r1
    ab26:	4639      	mov	r1, r7
    ab28:	f000 fb5c 	bl	b1e4 <__aeabi_uidivmod>
    ab2c:	f8dd c008 	ldr.w	ip, [sp, #8]
    ab30:	fb09 f30a 	mul.w	r3, r9, sl
    ab34:	fa1f f08c 	uxth.w	r0, ip
    ab38:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
    ab3c:	4293      	cmp	r3, r2
    ab3e:	d908      	bls.n	ab52 <__divdi3+0x232>
    ab40:	1912      	adds	r2, r2, r4
    ab42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    ab46:	d204      	bcs.n	ab52 <__divdi3+0x232>
    ab48:	4293      	cmp	r3, r2
    ab4a:	bf84      	itt	hi
    ab4c:	f10a 3aff 	addhi.w	sl, sl, #4294967295	; 0xffffffff
    ab50:	1912      	addhi	r2, r2, r4
    ab52:	fa05 f508 	lsl.w	r5, r5, r8
    ab56:	ea4a 4e0b 	orr.w	lr, sl, fp, lsl #16
    ab5a:	ebc3 0802 	rsb	r8, r3, r2
    ab5e:	f8cd e008 	str.w	lr, [sp, #8]
    ab62:	e759      	b.n	aa18 <__divdi3+0xf8>
    ab64:	f1c7 0020 	rsb	r0, r7, #32
    ab68:	fa03 fa07 	lsl.w	sl, r3, r7
    ab6c:	40c2      	lsrs	r2, r0
    ab6e:	fa35 f300 	lsrs.w	r3, r5, r0
    ab72:	ea42 0b0a 	orr.w	fp, r2, sl
    ab76:	fa21 f800 	lsr.w	r8, r1, r0
    ab7a:	fa01 f907 	lsl.w	r9, r1, r7
    ab7e:	4640      	mov	r0, r8
    ab80:	ea4f 4a1b 	mov.w	sl, fp, lsr #16
    ab84:	ea43 0109 	orr.w	r1, r3, r9
    ab88:	9102      	str	r1, [sp, #8]
    ab8a:	4651      	mov	r1, sl
    ab8c:	fa1f f28b 	uxth.w	r2, fp
    ab90:	9203      	str	r2, [sp, #12]
    ab92:	f000 f9f9 	bl	af88 <__aeabi_uidiv>
    ab96:	4651      	mov	r1, sl
    ab98:	4681      	mov	r9, r0
    ab9a:	4640      	mov	r0, r8
    ab9c:	f000 fb22 	bl	b1e4 <__aeabi_uidivmod>
    aba0:	9b03      	ldr	r3, [sp, #12]
    aba2:	f8dd c008 	ldr.w	ip, [sp, #8]
    aba6:	fb03 f209 	mul.w	r2, r3, r9
    abaa:	ea4f 401c 	mov.w	r0, ip, lsr #16
    abae:	fa14 f307 	lsls.w	r3, r4, r7
    abb2:	ea40 4401 	orr.w	r4, r0, r1, lsl #16
    abb6:	42a2      	cmp	r2, r4
    abb8:	d904      	bls.n	abc4 <__divdi3+0x2a4>
    abba:	eb14 040b 	adds.w	r4, r4, fp
    abbe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    abc2:	d352      	bcc.n	ac6a <__divdi3+0x34a>
    abc4:	1aa4      	subs	r4, r4, r2
    abc6:	4651      	mov	r1, sl
    abc8:	4620      	mov	r0, r4
    abca:	9301      	str	r3, [sp, #4]
    abcc:	f000 f9dc 	bl	af88 <__aeabi_uidiv>
    abd0:	4651      	mov	r1, sl
    abd2:	4680      	mov	r8, r0
    abd4:	4620      	mov	r0, r4
    abd6:	f000 fb05 	bl	b1e4 <__aeabi_uidivmod>
    abda:	9803      	ldr	r0, [sp, #12]
    abdc:	f8dd c008 	ldr.w	ip, [sp, #8]
    abe0:	fb00 f208 	mul.w	r2, r0, r8
    abe4:	fa1f f38c 	uxth.w	r3, ip
    abe8:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
    abec:	9b01      	ldr	r3, [sp, #4]
    abee:	4282      	cmp	r2, r0
    abf0:	d904      	bls.n	abfc <__divdi3+0x2dc>
    abf2:	eb10 000b 	adds.w	r0, r0, fp
    abf6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    abfa:	d330      	bcc.n	ac5e <__divdi3+0x33e>
    abfc:	ea48 4809 	orr.w	r8, r8, r9, lsl #16
    ac00:	fa1f fc83 	uxth.w	ip, r3
    ac04:	0c1b      	lsrs	r3, r3, #16
    ac06:	1a80      	subs	r0, r0, r2
    ac08:	fa1f fe88 	uxth.w	lr, r8
    ac0c:	ea4f 4a18 	mov.w	sl, r8, lsr #16
    ac10:	fb0c f90e 	mul.w	r9, ip, lr
    ac14:	fb0c fc0a 	mul.w	ip, ip, sl
    ac18:	fb03 c10e 	mla	r1, r3, lr, ip
    ac1c:	fb03 f20a 	mul.w	r2, r3, sl
    ac20:	eb01 4119 	add.w	r1, r1, r9, lsr #16
    ac24:	458c      	cmp	ip, r1
    ac26:	bf88      	it	hi
    ac28:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    ac2c:	eb02 4e11 	add.w	lr, r2, r1, lsr #16
    ac30:	4570      	cmp	r0, lr
    ac32:	d310      	bcc.n	ac56 <__divdi3+0x336>
    ac34:	fa1f f989 	uxth.w	r9, r9
    ac38:	fa05 f707 	lsl.w	r7, r5, r7
    ac3c:	eb09 4001 	add.w	r0, r9, r1, lsl #16
    ac40:	bf14      	ite	ne
    ac42:	2200      	movne	r2, #0
    ac44:	2201      	moveq	r2, #1
    ac46:	4287      	cmp	r7, r0
    ac48:	bf2c      	ite	cs
    ac4a:	2700      	movcs	r7, #0
    ac4c:	f002 0701 	andcc.w	r7, r2, #1
    ac50:	2f00      	cmp	r7, #0
    ac52:	f43f aec4 	beq.w	a9de <__divdi3+0xbe>
    ac56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ac5a:	2700      	movs	r7, #0
    ac5c:	e6bf      	b.n	a9de <__divdi3+0xbe>
    ac5e:	4282      	cmp	r2, r0
    ac60:	bf84      	itt	hi
    ac62:	4458      	addhi	r0, fp
    ac64:	f108 38ff 	addhi.w	r8, r8, #4294967295	; 0xffffffff
    ac68:	e7c8      	b.n	abfc <__divdi3+0x2dc>
    ac6a:	42a2      	cmp	r2, r4
    ac6c:	bf84      	itt	hi
    ac6e:	f109 39ff 	addhi.w	r9, r9, #4294967295	; 0xffffffff
    ac72:	445c      	addhi	r4, fp
    ac74:	e7a6      	b.n	abc4 <__divdi3+0x2a4>
    ac76:	429a      	cmp	r2, r3
    ac78:	bf84      	itt	hi
    ac7a:	f10b 3bff 	addhi.w	fp, fp, #4294967295	; 0xffffffff
    ac7e:	191b      	addhi	r3, r3, r4
    ac80:	e748      	b.n	ab14 <__divdi3+0x1f4>
    ac82:	bf00      	nop

0000ac84 <__udivdi3>:
    ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac88:	460c      	mov	r4, r1
    ac8a:	b083      	sub	sp, #12
    ac8c:	4680      	mov	r8, r0
    ac8e:	4616      	mov	r6, r2
    ac90:	4689      	mov	r9, r1
    ac92:	461f      	mov	r7, r3
    ac94:	4615      	mov	r5, r2
    ac96:	468a      	mov	sl, r1
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d14b      	bne.n	ad34 <__udivdi3+0xb0>
    ac9c:	428a      	cmp	r2, r1
    ac9e:	d95c      	bls.n	ad5a <__udivdi3+0xd6>
    aca0:	fab2 f382 	clz	r3, r2
    aca4:	b15b      	cbz	r3, acbe <__udivdi3+0x3a>
    aca6:	f1c3 0020 	rsb	r0, r3, #32
    acaa:	fa01 fa03 	lsl.w	sl, r1, r3
    acae:	fa28 f200 	lsr.w	r2, r8, r0
    acb2:	fa16 f503 	lsls.w	r5, r6, r3
    acb6:	fa08 f803 	lsl.w	r8, r8, r3
    acba:	ea42 0a0a 	orr.w	sl, r2, sl
    acbe:	0c2e      	lsrs	r6, r5, #16
    acc0:	4650      	mov	r0, sl
    acc2:	4631      	mov	r1, r6
    acc4:	b2af      	uxth	r7, r5
    acc6:	f000 f95f 	bl	af88 <__aeabi_uidiv>
    acca:	4631      	mov	r1, r6
    accc:	ea4f 4418 	mov.w	r4, r8, lsr #16
    acd0:	4681      	mov	r9, r0
    acd2:	4650      	mov	r0, sl
    acd4:	f000 fa86 	bl	b1e4 <__aeabi_uidivmod>
    acd8:	fb07 f309 	mul.w	r3, r7, r9
    acdc:	ea44 4a01 	orr.w	sl, r4, r1, lsl #16
    ace0:	4553      	cmp	r3, sl
    ace2:	d909      	bls.n	acf8 <__udivdi3+0x74>
    ace4:	eb1a 0a05 	adds.w	sl, sl, r5
    ace8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    acec:	d204      	bcs.n	acf8 <__udivdi3+0x74>
    acee:	4553      	cmp	r3, sl
    acf0:	bf84      	itt	hi
    acf2:	f109 39ff 	addhi.w	r9, r9, #4294967295	; 0xffffffff
    acf6:	44aa      	addhi	sl, r5
    acf8:	ebc3 0a0a 	rsb	sl, r3, sl
    acfc:	4631      	mov	r1, r6
    acfe:	4650      	mov	r0, sl
    ad00:	fa1f f888 	uxth.w	r8, r8
    ad04:	f000 f940 	bl	af88 <__aeabi_uidiv>
    ad08:	4631      	mov	r1, r6
    ad0a:	4604      	mov	r4, r0
    ad0c:	4650      	mov	r0, sl
    ad0e:	f000 fa69 	bl	b1e4 <__aeabi_uidivmod>
    ad12:	fb07 f704 	mul.w	r7, r7, r4
    ad16:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    ad1a:	4547      	cmp	r7, r8
    ad1c:	d906      	bls.n	ad2c <__udivdi3+0xa8>
    ad1e:	3c01      	subs	r4, #1
    ad20:	eb18 0805 	adds.w	r8, r8, r5
    ad24:	d202      	bcs.n	ad2c <__udivdi3+0xa8>
    ad26:	4547      	cmp	r7, r8
    ad28:	bf88      	it	hi
    ad2a:	3c01      	subhi	r4, #1
    ad2c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
    ad30:	2600      	movs	r6, #0
    ad32:	e05c      	b.n	adee <__udivdi3+0x16a>
    ad34:	428b      	cmp	r3, r1
    ad36:	d858      	bhi.n	adea <__udivdi3+0x166>
    ad38:	fab3 f683 	clz	r6, r3
    ad3c:	2e00      	cmp	r6, #0
    ad3e:	d15b      	bne.n	adf8 <__udivdi3+0x174>
    ad40:	428b      	cmp	r3, r1
    ad42:	bf2c      	ite	cs
    ad44:	2200      	movcs	r2, #0
    ad46:	2201      	movcc	r2, #1
    ad48:	4285      	cmp	r5, r0
    ad4a:	bf8c      	ite	hi
    ad4c:	4615      	movhi	r5, r2
    ad4e:	f042 0501 	orrls.w	r5, r2, #1
    ad52:	2d00      	cmp	r5, #0
    ad54:	d049      	beq.n	adea <__udivdi3+0x166>
    ad56:	2401      	movs	r4, #1
    ad58:	e049      	b.n	adee <__udivdi3+0x16a>
    ad5a:	b922      	cbnz	r2, ad66 <__udivdi3+0xe2>
    ad5c:	4611      	mov	r1, r2
    ad5e:	2001      	movs	r0, #1
    ad60:	f000 f912 	bl	af88 <__aeabi_uidiv>
    ad64:	4605      	mov	r5, r0
    ad66:	fab5 f685 	clz	r6, r5
    ad6a:	2e00      	cmp	r6, #0
    ad6c:	f040 80ba 	bne.w	aee4 <__udivdi3+0x260>
    ad70:	1b64      	subs	r4, r4, r5
    ad72:	0c2f      	lsrs	r7, r5, #16
    ad74:	fa1f fa85 	uxth.w	sl, r5
    ad78:	2601      	movs	r6, #1
    ad7a:	4639      	mov	r1, r7
    ad7c:	4620      	mov	r0, r4
    ad7e:	f000 f903 	bl	af88 <__aeabi_uidiv>
    ad82:	4639      	mov	r1, r7
    ad84:	ea4f 4b18 	mov.w	fp, r8, lsr #16
    ad88:	4681      	mov	r9, r0
    ad8a:	4620      	mov	r0, r4
    ad8c:	f000 fa2a 	bl	b1e4 <__aeabi_uidivmod>
    ad90:	fb0a f309 	mul.w	r3, sl, r9
    ad94:	ea4b 4b01 	orr.w	fp, fp, r1, lsl #16
    ad98:	455b      	cmp	r3, fp
    ad9a:	d909      	bls.n	adb0 <__udivdi3+0x12c>
    ad9c:	eb1b 0b05 	adds.w	fp, fp, r5
    ada0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ada4:	d204      	bcs.n	adb0 <__udivdi3+0x12c>
    ada6:	455b      	cmp	r3, fp
    ada8:	bf84      	itt	hi
    adaa:	f109 39ff 	addhi.w	r9, r9, #4294967295	; 0xffffffff
    adae:	44ab      	addhi	fp, r5
    adb0:	ebc3 0b0b 	rsb	fp, r3, fp
    adb4:	4639      	mov	r1, r7
    adb6:	4658      	mov	r0, fp
    adb8:	fa1f f888 	uxth.w	r8, r8
    adbc:	f000 f8e4 	bl	af88 <__aeabi_uidiv>
    adc0:	4639      	mov	r1, r7
    adc2:	4604      	mov	r4, r0
    adc4:	4658      	mov	r0, fp
    adc6:	f000 fa0d 	bl	b1e4 <__aeabi_uidivmod>
    adca:	fb0a fa04 	mul.w	sl, sl, r4
    adce:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    add2:	45c2      	cmp	sl, r8
    add4:	d906      	bls.n	ade4 <__udivdi3+0x160>
    add6:	3c01      	subs	r4, #1
    add8:	eb18 0805 	adds.w	r8, r8, r5
    addc:	d202      	bcs.n	ade4 <__udivdi3+0x160>
    adde:	45c2      	cmp	sl, r8
    ade0:	bf88      	it	hi
    ade2:	3c01      	subhi	r4, #1
    ade4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
    ade8:	e001      	b.n	adee <__udivdi3+0x16a>
    adea:	2600      	movs	r6, #0
    adec:	4634      	mov	r4, r6
    adee:	4631      	mov	r1, r6
    adf0:	4620      	mov	r0, r4
    adf2:	b003      	add	sp, #12
    adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adf8:	f1c6 0020 	rsb	r0, r6, #32
    adfc:	40b3      	lsls	r3, r6
    adfe:	fa32 f700 	lsrs.w	r7, r2, r0
    ae02:	fa21 fb00 	lsr.w	fp, r1, r0
    ae06:	431f      	orrs	r7, r3
    ae08:	fa14 f206 	lsls.w	r2, r4, r6
    ae0c:	fa28 f100 	lsr.w	r1, r8, r0
    ae10:	4658      	mov	r0, fp
    ae12:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    ae16:	4311      	orrs	r1, r2
    ae18:	9100      	str	r1, [sp, #0]
    ae1a:	4651      	mov	r1, sl
    ae1c:	b2bb      	uxth	r3, r7
    ae1e:	9301      	str	r3, [sp, #4]
    ae20:	f000 f8b2 	bl	af88 <__aeabi_uidiv>
    ae24:	4651      	mov	r1, sl
    ae26:	40b5      	lsls	r5, r6
    ae28:	4681      	mov	r9, r0
    ae2a:	4658      	mov	r0, fp
    ae2c:	f000 f9da 	bl	b1e4 <__aeabi_uidivmod>
    ae30:	9c01      	ldr	r4, [sp, #4]
    ae32:	9800      	ldr	r0, [sp, #0]
    ae34:	fb04 f309 	mul.w	r3, r4, r9
    ae38:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    ae3c:	ea4c 4b01 	orr.w	fp, ip, r1, lsl #16
    ae40:	455b      	cmp	r3, fp
    ae42:	d905      	bls.n	ae50 <__udivdi3+0x1cc>
    ae44:	eb1b 0b07 	adds.w	fp, fp, r7
    ae48:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ae4c:	f0c0 808e 	bcc.w	af6c <__udivdi3+0x2e8>
    ae50:	ebc3 0b0b 	rsb	fp, r3, fp
    ae54:	4651      	mov	r1, sl
    ae56:	4658      	mov	r0, fp
    ae58:	f000 f896 	bl	af88 <__aeabi_uidiv>
    ae5c:	4651      	mov	r1, sl
    ae5e:	4604      	mov	r4, r0
    ae60:	4658      	mov	r0, fp
    ae62:	f000 f9bf 	bl	b1e4 <__aeabi_uidivmod>
    ae66:	9801      	ldr	r0, [sp, #4]
    ae68:	9a00      	ldr	r2, [sp, #0]
    ae6a:	fb00 f304 	mul.w	r3, r0, r4
    ae6e:	fa1f fc82 	uxth.w	ip, r2
    ae72:	ea4c 4201 	orr.w	r2, ip, r1, lsl #16
    ae76:	4293      	cmp	r3, r2
    ae78:	d906      	bls.n	ae88 <__udivdi3+0x204>
    ae7a:	3c01      	subs	r4, #1
    ae7c:	19d2      	adds	r2, r2, r7
    ae7e:	d203      	bcs.n	ae88 <__udivdi3+0x204>
    ae80:	4293      	cmp	r3, r2
    ae82:	d901      	bls.n	ae88 <__udivdi3+0x204>
    ae84:	19d2      	adds	r2, r2, r7
    ae86:	3c01      	subs	r4, #1
    ae88:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
    ae8c:	b2a8      	uxth	r0, r5
    ae8e:	1ad2      	subs	r2, r2, r3
    ae90:	0c2d      	lsrs	r5, r5, #16
    ae92:	fa1f fc84 	uxth.w	ip, r4
    ae96:	0c23      	lsrs	r3, r4, #16
    ae98:	fb00 f70c 	mul.w	r7, r0, ip
    ae9c:	fb00 fe03 	mul.w	lr, r0, r3
    aea0:	fb05 e10c 	mla	r1, r5, ip, lr
    aea4:	fb05 f503 	mul.w	r5, r5, r3
    aea8:	eb01 4117 	add.w	r1, r1, r7, lsr #16
    aeac:	458e      	cmp	lr, r1
    aeae:	bf88      	it	hi
    aeb0:	f505 3580 	addhi.w	r5, r5, #65536	; 0x10000
    aeb4:	eb05 4511 	add.w	r5, r5, r1, lsr #16
    aeb8:	42aa      	cmp	r2, r5
    aeba:	d310      	bcc.n	aede <__udivdi3+0x25a>
    aebc:	b2bf      	uxth	r7, r7
    aebe:	fa08 f606 	lsl.w	r6, r8, r6
    aec2:	eb07 4201 	add.w	r2, r7, r1, lsl #16
    aec6:	bf14      	ite	ne
    aec8:	f04f 0e00 	movne.w	lr, #0
    aecc:	f04f 0e01 	moveq.w	lr, #1
    aed0:	4296      	cmp	r6, r2
    aed2:	bf2c      	ite	cs
    aed4:	2600      	movcs	r6, #0
    aed6:	f00e 0601 	andcc.w	r6, lr, #1
    aeda:	2e00      	cmp	r6, #0
    aedc:	d087      	beq.n	adee <__udivdi3+0x16a>
    aede:	3c01      	subs	r4, #1
    aee0:	2600      	movs	r6, #0
    aee2:	e784      	b.n	adee <__udivdi3+0x16a>
    aee4:	40b5      	lsls	r5, r6
    aee6:	f1c6 0120 	rsb	r1, r6, #32
    aeea:	fa24 f901 	lsr.w	r9, r4, r1
    aeee:	fa28 f201 	lsr.w	r2, r8, r1
    aef2:	0c2f      	lsrs	r7, r5, #16
    aef4:	40b4      	lsls	r4, r6
    aef6:	4639      	mov	r1, r7
    aef8:	4648      	mov	r0, r9
    aefa:	4322      	orrs	r2, r4
    aefc:	9200      	str	r2, [sp, #0]
    aefe:	f000 f843 	bl	af88 <__aeabi_uidiv>
    af02:	4639      	mov	r1, r7
    af04:	fa1f fa85 	uxth.w	sl, r5
    af08:	4683      	mov	fp, r0
    af0a:	4648      	mov	r0, r9
    af0c:	f000 f96a 	bl	b1e4 <__aeabi_uidivmod>
    af10:	9b00      	ldr	r3, [sp, #0]
    af12:	0c1a      	lsrs	r2, r3, #16
    af14:	fb0a f30b 	mul.w	r3, sl, fp
    af18:	ea42 4401 	orr.w	r4, r2, r1, lsl #16
    af1c:	42a3      	cmp	r3, r4
    af1e:	d903      	bls.n	af28 <__udivdi3+0x2a4>
    af20:	1964      	adds	r4, r4, r5
    af22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    af26:	d327      	bcc.n	af78 <__udivdi3+0x2f4>
    af28:	1ae4      	subs	r4, r4, r3
    af2a:	4639      	mov	r1, r7
    af2c:	4620      	mov	r0, r4
    af2e:	f000 f82b 	bl	af88 <__aeabi_uidiv>
    af32:	4639      	mov	r1, r7
    af34:	4681      	mov	r9, r0
    af36:	4620      	mov	r0, r4
    af38:	f000 f954 	bl	b1e4 <__aeabi_uidivmod>
    af3c:	9800      	ldr	r0, [sp, #0]
    af3e:	fb0a f309 	mul.w	r3, sl, r9
    af42:	fa1f fc80 	uxth.w	ip, r0
    af46:	ea4c 4401 	orr.w	r4, ip, r1, lsl #16
    af4a:	42a3      	cmp	r3, r4
    af4c:	d908      	bls.n	af60 <__udivdi3+0x2dc>
    af4e:	1964      	adds	r4, r4, r5
    af50:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    af54:	d204      	bcs.n	af60 <__udivdi3+0x2dc>
    af56:	42a3      	cmp	r3, r4
    af58:	bf84      	itt	hi
    af5a:	f109 39ff 	addhi.w	r9, r9, #4294967295	; 0xffffffff
    af5e:	1964      	addhi	r4, r4, r5
    af60:	fa08 f806 	lsl.w	r8, r8, r6
    af64:	1ae4      	subs	r4, r4, r3
    af66:	ea49 460b 	orr.w	r6, r9, fp, lsl #16
    af6a:	e706      	b.n	ad7a <__udivdi3+0xf6>
    af6c:	455b      	cmp	r3, fp
    af6e:	bf84      	itt	hi
    af70:	f109 39ff 	addhi.w	r9, r9, #4294967295	; 0xffffffff
    af74:	44bb      	addhi	fp, r7
    af76:	e76b      	b.n	ae50 <__udivdi3+0x1cc>
    af78:	42a3      	cmp	r3, r4
    af7a:	bf84      	itt	hi
    af7c:	f10b 3bff 	addhi.w	fp, fp, #4294967295	; 0xffffffff
    af80:	1964      	addhi	r4, r4, r5
    af82:	e7d1      	b.n	af28 <__udivdi3+0x2a4>
    af84:	0000      	lsls	r0, r0, #0
	...

0000af88 <__aeabi_uidiv>:
    af88:	1e4a      	subs	r2, r1, #1
    af8a:	bf08      	it	eq
    af8c:	4770      	bxeq	lr
    af8e:	f0c0 8124 	bcc.w	b1da <__aeabi_uidiv+0x252>
    af92:	4288      	cmp	r0, r1
    af94:	f240 8116 	bls.w	b1c4 <__aeabi_uidiv+0x23c>
    af98:	4211      	tst	r1, r2
    af9a:	f000 8117 	beq.w	b1cc <__aeabi_uidiv+0x244>
    af9e:	fab0 f380 	clz	r3, r0
    afa2:	fab1 f281 	clz	r2, r1
    afa6:	eba2 0303 	sub.w	r3, r2, r3
    afaa:	f1c3 031f 	rsb	r3, r3, #31
    afae:	a204      	add	r2, pc, #16	; (adr r2, afc0 <__aeabi_uidiv+0x38>)
    afb0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    afb4:	f04f 0200 	mov.w	r2, #0
    afb8:	469f      	mov	pc, r3
    afba:	bf00      	nop
    afbc:	f3af 8000 	nop.w
    afc0:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
    afc4:	bf00      	nop
    afc6:	eb42 0202 	adc.w	r2, r2, r2
    afca:	bf28      	it	cs
    afcc:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
    afd0:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
    afd4:	bf00      	nop
    afd6:	eb42 0202 	adc.w	r2, r2, r2
    afda:	bf28      	it	cs
    afdc:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
    afe0:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
    afe4:	bf00      	nop
    afe6:	eb42 0202 	adc.w	r2, r2, r2
    afea:	bf28      	it	cs
    afec:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
    aff0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
    aff4:	bf00      	nop
    aff6:	eb42 0202 	adc.w	r2, r2, r2
    affa:	bf28      	it	cs
    affc:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
    b000:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
    b004:	bf00      	nop
    b006:	eb42 0202 	adc.w	r2, r2, r2
    b00a:	bf28      	it	cs
    b00c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
    b010:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
    b014:	bf00      	nop
    b016:	eb42 0202 	adc.w	r2, r2, r2
    b01a:	bf28      	it	cs
    b01c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
    b020:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
    b024:	bf00      	nop
    b026:	eb42 0202 	adc.w	r2, r2, r2
    b02a:	bf28      	it	cs
    b02c:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
    b030:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
    b034:	bf00      	nop
    b036:	eb42 0202 	adc.w	r2, r2, r2
    b03a:	bf28      	it	cs
    b03c:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
    b040:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
    b044:	bf00      	nop
    b046:	eb42 0202 	adc.w	r2, r2, r2
    b04a:	bf28      	it	cs
    b04c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
    b050:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
    b054:	bf00      	nop
    b056:	eb42 0202 	adc.w	r2, r2, r2
    b05a:	bf28      	it	cs
    b05c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
    b060:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
    b064:	bf00      	nop
    b066:	eb42 0202 	adc.w	r2, r2, r2
    b06a:	bf28      	it	cs
    b06c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
    b070:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
    b074:	bf00      	nop
    b076:	eb42 0202 	adc.w	r2, r2, r2
    b07a:	bf28      	it	cs
    b07c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
    b080:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
    b084:	bf00      	nop
    b086:	eb42 0202 	adc.w	r2, r2, r2
    b08a:	bf28      	it	cs
    b08c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
    b090:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
    b094:	bf00      	nop
    b096:	eb42 0202 	adc.w	r2, r2, r2
    b09a:	bf28      	it	cs
    b09c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
    b0a0:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
    b0a4:	bf00      	nop
    b0a6:	eb42 0202 	adc.w	r2, r2, r2
    b0aa:	bf28      	it	cs
    b0ac:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
    b0b0:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
    b0b4:	bf00      	nop
    b0b6:	eb42 0202 	adc.w	r2, r2, r2
    b0ba:	bf28      	it	cs
    b0bc:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
    b0c0:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
    b0c4:	bf00      	nop
    b0c6:	eb42 0202 	adc.w	r2, r2, r2
    b0ca:	bf28      	it	cs
    b0cc:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
    b0d0:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
    b0d4:	bf00      	nop
    b0d6:	eb42 0202 	adc.w	r2, r2, r2
    b0da:	bf28      	it	cs
    b0dc:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
    b0e0:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
    b0e4:	bf00      	nop
    b0e6:	eb42 0202 	adc.w	r2, r2, r2
    b0ea:	bf28      	it	cs
    b0ec:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
    b0f0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
    b0f4:	bf00      	nop
    b0f6:	eb42 0202 	adc.w	r2, r2, r2
    b0fa:	bf28      	it	cs
    b0fc:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
    b100:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
    b104:	bf00      	nop
    b106:	eb42 0202 	adc.w	r2, r2, r2
    b10a:	bf28      	it	cs
    b10c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
    b110:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
    b114:	bf00      	nop
    b116:	eb42 0202 	adc.w	r2, r2, r2
    b11a:	bf28      	it	cs
    b11c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
    b120:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
    b124:	bf00      	nop
    b126:	eb42 0202 	adc.w	r2, r2, r2
    b12a:	bf28      	it	cs
    b12c:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
    b130:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
    b134:	bf00      	nop
    b136:	eb42 0202 	adc.w	r2, r2, r2
    b13a:	bf28      	it	cs
    b13c:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
    b140:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
    b144:	bf00      	nop
    b146:	eb42 0202 	adc.w	r2, r2, r2
    b14a:	bf28      	it	cs
    b14c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
    b150:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
    b154:	bf00      	nop
    b156:	eb42 0202 	adc.w	r2, r2, r2
    b15a:	bf28      	it	cs
    b15c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
    b160:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
    b164:	bf00      	nop
    b166:	eb42 0202 	adc.w	r2, r2, r2
    b16a:	bf28      	it	cs
    b16c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
    b170:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
    b174:	bf00      	nop
    b176:	eb42 0202 	adc.w	r2, r2, r2
    b17a:	bf28      	it	cs
    b17c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
    b180:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
    b184:	bf00      	nop
    b186:	eb42 0202 	adc.w	r2, r2, r2
    b18a:	bf28      	it	cs
    b18c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
    b190:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
    b194:	bf00      	nop
    b196:	eb42 0202 	adc.w	r2, r2, r2
    b19a:	bf28      	it	cs
    b19c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
    b1a0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    b1a4:	bf00      	nop
    b1a6:	eb42 0202 	adc.w	r2, r2, r2
    b1aa:	bf28      	it	cs
    b1ac:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
    b1b0:	ebb0 0f01 	cmp.w	r0, r1
    b1b4:	bf00      	nop
    b1b6:	eb42 0202 	adc.w	r2, r2, r2
    b1ba:	bf28      	it	cs
    b1bc:	eba0 0001 	subcs.w	r0, r0, r1
    b1c0:	4610      	mov	r0, r2
    b1c2:	4770      	bx	lr
    b1c4:	bf0c      	ite	eq
    b1c6:	2001      	moveq	r0, #1
    b1c8:	2000      	movne	r0, #0
    b1ca:	4770      	bx	lr
    b1cc:	fab1 f281 	clz	r2, r1
    b1d0:	f1c2 021f 	rsb	r2, r2, #31
    b1d4:	fa20 f002 	lsr.w	r0, r0, r2
    b1d8:	4770      	bx	lr
    b1da:	b108      	cbz	r0, b1e0 <__aeabi_uidiv+0x258>
    b1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b1e0:	f7ff bb9c 	b.w	a91c <__aeabi_idiv0>

0000b1e4 <__aeabi_uidivmod>:
    b1e4:	2900      	cmp	r1, #0
    b1e6:	d0f8      	beq.n	b1da <__aeabi_uidiv+0x252>
    b1e8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
    b1ec:	f7ff fecc 	bl	af88 <__aeabi_uidiv>
    b1f0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
    b1f4:	fb02 f300 	mul.w	r3, r2, r0
    b1f8:	eba1 0103 	sub.w	r1, r1, r3
    b1fc:	4770      	bx	lr
    b1fe:	bf00      	nop

0000b200 <memcmp>:
    b200:	b510      	push	{r4, lr}
    b202:	2300      	movs	r3, #0
    b204:	e009      	b.n	b21a <memcmp+0x1a>
    b206:	5cc4      	ldrb	r4, [r0, r3]
    b208:	3a01      	subs	r2, #1
    b20a:	f811 c003 	ldrb.w	ip, [r1, r3]
    b20e:	3301      	adds	r3, #1
    b210:	4564      	cmp	r4, ip
    b212:	d002      	beq.n	b21a <memcmp+0x1a>
    b214:	ebcc 0004 	rsb	r0, ip, r4
    b218:	bd10      	pop	{r4, pc}
    b21a:	2a00      	cmp	r2, #0
    b21c:	d1f3      	bne.n	b206 <memcmp+0x6>
    b21e:	4610      	mov	r0, r2
    b220:	bd10      	pop	{r4, pc}

0000b222 <memcpy>:
    b222:	1882      	adds	r2, r0, r2
    b224:	2300      	movs	r3, #0
    b226:	e004      	b.n	b232 <memcpy+0x10>
    b228:	f811 c003 	ldrb.w	ip, [r1, r3]
    b22c:	f800 c003 	strb.w	ip, [r0, r3]
    b230:	3301      	adds	r3, #1
    b232:	eb03 0c00 	add.w	ip, r3, r0
    b236:	4594      	cmp	ip, r2
    b238:	d3f6      	bcc.n	b228 <memcpy+0x6>
    b23a:	4770      	bx	lr

0000b23c <memset>:
    b23c:	b2c9      	uxtb	r1, r1
    b23e:	1882      	adds	r2, r0, r2
    b240:	4603      	mov	r3, r0
    b242:	e001      	b.n	b248 <memset+0xc>
    b244:	f803 1b01 	strb.w	r1, [r3], #1
    b248:	4293      	cmp	r3, r2
    b24a:	d3fb      	bcc.n	b244 <memset+0x8>
    b24c:	4770      	bx	lr

0000b24e <strcat>:
    b24e:	b510      	push	{r4, lr}
    b250:	4602      	mov	r2, r0
    b252:	e000      	b.n	b256 <strcat+0x8>
    b254:	3201      	adds	r2, #1
    b256:	7813      	ldrb	r3, [r2, #0]
    b258:	2b00      	cmp	r3, #0
    b25a:	d1fb      	bne.n	b254 <strcat+0x6>
    b25c:	5ccc      	ldrb	r4, [r1, r3]
    b25e:	54d4      	strb	r4, [r2, r3]
    b260:	3301      	adds	r3, #1
    b262:	2c00      	cmp	r4, #0
    b264:	d1fa      	bne.n	b25c <strcat+0xe>
    b266:	bd10      	pop	{r4, pc}

0000b268 <strlen>:
    b268:	4603      	mov	r3, r0
    b26a:	43c0      	mvns	r0, r0
    b26c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b270:	2a00      	cmp	r2, #0
    b272:	d1fb      	bne.n	b26c <strlen+0x4>
    b274:	18c0      	adds	r0, r0, r3
    b276:	4770      	bx	lr

0000b278 <strncpy>:
    b278:	b510      	push	{r4, lr}
    b27a:	4684      	mov	ip, r0
    b27c:	2300      	movs	r3, #0
    b27e:	e008      	b.n	b292 <strncpy+0x1a>
    b280:	5ccc      	ldrb	r4, [r1, r3]
    b282:	3a01      	subs	r2, #1
    b284:	f10c 0c01 	add.w	ip, ip, #1
    b288:	54c4      	strb	r4, [r0, r3]
    b28a:	3301      	adds	r3, #1
    b28c:	b90c      	cbnz	r4, b292 <strncpy+0x1a>
    b28e:	2300      	movs	r3, #0
    b290:	e007      	b.n	b2a2 <strncpy+0x2a>
    b292:	2a00      	cmp	r2, #0
    b294:	d1f4      	bne.n	b280 <strncpy+0x8>
    b296:	e7fa      	b.n	b28e <strncpy+0x16>
    b298:	2100      	movs	r1, #0
    b29a:	3a01      	subs	r2, #1
    b29c:	f80c 1003 	strb.w	r1, [ip, r3]
    b2a0:	3301      	adds	r3, #1
    b2a2:	2a00      	cmp	r2, #0
    b2a4:	d1f8      	bne.n	b298 <strncpy+0x20>
    b2a6:	bd10      	pop	{r4, pc}
    b2a8:	0044454c 	.word	0x0044454c
    b2ac:	6c756e28 	.word	0x6c756e28
    b2b0:	0000296c 	.word	0x0000296c

0000b2b4 <heapSTRUCT_SIZE>:
    b2b4:	00000010                                ....

0000b2b8 <ulKernelPriority>:
    b2b8:	000000f8 454c4449 00000000 00000a0d     ....IDLE........
    b2c8:	09097325 25096325 75250975 0d752509     %s..%c.%u.%u.%u.
    b2d8:	0000000a 09097325 30090930 0a0d2525     ....%s..0..0%%..
    b2e8:	00000000 09097325 09097525 25257525     ....%s..%u..%u%%
    b2f8:	00000a0d 09097325 09097525 2525313c     ....%s..%u..<1%%
    b308:	00000a0d                                ....

0000b30c <ucExpectedStackBytes.4784>:
    b30c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
    b31c:	a5a5a5a5 00000d0a 00007830 332f2e2e     ........0x..../3
    b32c:	61506472 2f797472 76697244 2f737265     rdParty/Drivers/
    b33c:	72756f73 6c2f6563 37316370 695f7878     source/lpc17xx_i
    b34c:	632e6332 00000000 332f2e2e 61506472     2c.c....../3rdPa
    b35c:	2f797472 76697244 2f737265 72756f73     rty/Drivers/sour
    b36c:	6c2f6563 37316370 705f7878 632e6d77     ce/lpc17xx_pwm.c
    b37c:	00000000 332f2e2e 61506472 2f797472     ....../3rdParty/
    b38c:	76697244 2f737265 72756f73 6c2f6563     Drivers/source/l
    b39c:	37316370 735f7878 632e6970 00000000     pc17xx_spi.c....
    b3ac:	332f2e2e 61506472 2f797472 76697244     ../3rdParty/Driv
    b3bc:	2f737265 72756f73 6c2f6563 37316370     ers/source/lpc17
    b3cc:	745f7878 72656d69 0000632e 332f2e2e     xx_timer.c..../3
    b3dc:	61506472 2f797472 76697244 2f737265     rdParty/Drivers/
    b3ec:	72756f73 6c2f6563 37316370 755f7878     source/lpc17xx_u
    b3fc:	2e747261 00000063                       art.c...
